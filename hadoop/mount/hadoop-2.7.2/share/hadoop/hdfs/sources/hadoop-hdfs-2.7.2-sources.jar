eflection.Emit.ParameterToken.Token" /> 值为 0 的默认 ParameterToken。</summary>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.Equals(System.Object)">
      <summary>检查给定对象是否为 ParameterToken 的实例和是否等于此实例。</summary>
      <returns>
如果 <paramref name="obj" /> 为 ParameterToken 的实例并等于当前实例，则为 true；否则，为 false。</returns>
      <param name="obj">要与此对象比较的对象。 </param>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.Equals(System.Reflection.Emit.ParameterToken)">
      <summary>指示当前实例是否与指定的 <see cref="T:System.Reflection.Emit.ParameterToken" /> 相等。</summary>
      <returns>
如果 <paramref name="obj" /> 的值等于当前实例的值，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的 <see cref="T:System.Reflection.Emit.ParameterToken" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.GetHashCode">
      <summary>生成该参数的哈希代码。</summary>
      <returns>返回该参数的哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.op_Equality(System.Reflection.Emit.ParameterToken,System.Reflection.Emit.ParameterToken)">
      <summary>指示两个 <see cref="T:System.Reflection.Emit.ParameterToken" /> 结构是否等同。</summary>
      <returns>
如果 <paramref name="a" /> 等于 <paramref name="b" />，则为 true；否则为 false。</returns>
      <param name="a">要与 <paramref name="b" /> 进行比较的 <see cref="T:System.Reflection.Emit.ParameterToken" />。</param>
      <param name="b">要与 <paramref name="a" /> 进行比较的 <see cref="T:System.Reflection.Emit.ParameterToken" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.op_Inequality(System.Reflection.Emit.ParameterToken,System.Reflection.Emit.ParameterToken)">
      <summary>指示两个 <see cref="T:System.Reflection.Emit.ParameterToken" /> 结构是否等同。</summary>
      <returns>
如果 <paramref name="a" /> 不等于 <paramref name="b" />，则为 true；否则为 false。</returns>
      <param name="a">要与 <paramref name="b" /> 进行比较的 <see cref="T:System.Reflection.Emit.ParameterToken" />。</param>
      <param name="b">要与 <paramref name="a" /> 进行比较的 <see cref="T:System.Reflection.Emit.ParameterToken" />。</param>
    </member>
    <member name="P:System.Reflection.Emit.ParameterToken.Token">
      <summary>检索此参数的元数据标记。</summary>
      <returns>只读。检索此参数的元数据标记。</returns>
    </member>
    <member name="T:System.Reflection.Emit.PEFileKinds">
      <summary>指定可移植可执行 (PE) 文件的类型。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PEFileKinds.Dll">
      <summary>可移植可执行 (PE) 文件是 DLL。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PEFileKinds.ConsoleApplication">
      <summary>该应用程序是控制台（不是基于 Windows 的）应用程序。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PEFileKinds.WindowApplication">
      <summary>该应用程序是基于 Windows 的应用程序。</summary>
    </member>
    <member name="T:System.Reflection.Emit.PropertyBuilder">
      <summary>定义类型的属性 (Property)。</summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>添加与此属性 (Property) 关联的其他方法之一。</summary>
      <param name="mdBuilder">一个表示另一个方法的 MethodBuilder 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
                已对封闭类型调用了 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />。</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Attributes">
      <summary>获取此属性 (Property) 的属性 (Attribute)。</summary>
      <returns>此属性 (Property) 的属性 (Attribute)。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanRead">
      <summary>获取一个值，该值指示该属性 (Property) 是否可读。</summary>
      <returns>
            如果此属性 (Property) 可读，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
      <summary>获取一个值，该值指示此属性 (Property) 是否可写。</summary>
      <returns>
            如果此属性 (Property) 可写，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
      <summary>获取声明该成员的类。</summary>
      <returns>声明该成员的类的 Type 对象。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
      <summary>返回此属性 (Property) 的公共和非公共 get 和 set 的数组。</summary>
      <returns>MethodInfo 类型的数组，它包含匹配的公共或非公共访问器，或者如果在此属性 (Property) 上不存在匹配访问器，则为空数组。</returns>
      <param name="nonPublic">指示非公共方法是否应在 MethodInfo 数组中返回。如果要包括非公共方法，则为 true；否则，为 false。</param>
      <exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
      <summary>返回此属性 (Property) 的所有自定义属性 (Attribute) 的数组。</summary>
      <returns>一个包含所有自定义属性 (Attribute) 的数组。</returns>
      <param name="inherit">如果为 true，则遍历此属性 (Property) 的继承链以查找自定义属性 (Attribute) </param>
      <exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>返回由 <see cref="T:System.Type" /> 标识的自定义属性 (Attribute) 数组。</summary>
      <returns>在该反映成员上定义的自定义属性 (Attribute) 的数组，如果未在该成员上定义任何属性 (Attribute)，则为 null。</returns>
      <param name="attributeType">由类型标识的自定义属性 (Attribute) 数组。</param>
      <param name="inherit">如果为 true，则遍历此属性 (Property) 的继承链以查找自定义属性 (Attribute)。</param>
      <exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
      <summary>返回该属性 (Property) 的公共和非公共 get 访问器。</summary>
      <returns>如果 <paramref name="nonPublic" /> 为 true，则返回表示该属性 (Property) 的 get 访问器的 MethodInfo 对象。如果 <paramref name="nonPublic" /> 为 false 且 get 访问器是非公共的，或者如果 <paramref name="nonPublic" /> 为 true 但不存在 get 访问器，则返回 null。</returns>
      <param name="nonPublic">指示是否返回非公共的 get 访问器。如果包括非公共的方法，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
      <summary>返回此属性 (Property) 的所有索引参数的数组。</summary>
      <returns>ParameterInfo 类型的数组，它包含索引的参数。</returns>
      <exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
      <summary>返回此属性 (Property) 的 set 访问器。</summary>
      <returns>值 条件 表示此属性的 Set 方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象。Set 访问器是公共的。<paramref name="nonPublic" /> 为 true 并且可以返回非公共的方法。空 <paramref name="nonPublic" /> 为 true，但是该属性是只读的。<paramref name="nonPublic" /> 为 false，且 set 访问器是非公共的。</returns>
      <param name="nonPublic">指示在访问器是非公共的情况下是否应返回它。如果要包括非公共方法，则为 true；否则，为 false。</param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
      <summary>通过调用索引化属性 (Property) 的 getter 方法来获取该属性 (Property) 的值。</summary>
      <returns>指定的索引化属性 (Property) 的值。</returns>
      <param name="obj">将返回其属性 (Property) 值的对象。</param>
      <param name="index">索引化属性的可选索引值。对于非索引化属性 (Property)，此值应为 null。</param>
      <exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>获取属性 (Property) 的值，该属性 (Property) 具有指定的绑定、索引和 CultureInfo。</summary>
      <returns>
        <paramref name="obj" /> 的属性 (Property) 值。</returns>
      <param name="obj">将返回其属性 (Property) 值的对象。</param>
      <param name="invokeAttr">调用属性 (Attribute)。这必须是 BindingFlags 中的位标志：InvokeMethod、CreateInstance、Static、GetField、SetField、GetProperty 或 SetProperty。必须指定合适的调用属性。如果要调用静态成员，则必须设置 BindingFlags 的 Static 标志。</param>
      <param name="binder">一个对象，它使用反射启用绑定、参数类型的强制、成员的调用和 MemberInfo 对象的检索。如果 <paramref name="binder" /> 为 null，则使用默认联编程序。</param>
      <param name="index">索引化属性的可选索引值。对于非索引化属性，此值应为 null。</param>
      <param name="culture">表示要为其本地化资源的区域性的 CultureInfo 对象。请注意，如果没有为此区域性本地化该资源，则在搜索匹配项的过程中将继续调用 CultureInfo.Parent 方法。如果此值为 null，则从 CultureInfo.CurrentUICulture 属性获得 CultureInfo。</param>
      <exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>指示是否在此属性 (Property) 上定义一个或多个 <paramref name="attributeType" /> 的实例。</summary>
      <returns>
            如果在此属性 (Property) 上定义一个或多个 <paramref name="attributeType" /> 实例，则为 true；否则为 false。</returns>
      <param name="attributeType">自定义属性 (Attribute) 应用于的 Type 对象。</param>
      <param name="inherit">指定是否遍历属性的继承链以查找自定义属性 (Attribute)。</param>
      <exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Module">
      <summary>获取在其中定义了特定类型的模块，该类型即为声明当前属性 (Property) 的类型。</summary>
      <returns>
        <see cref="T:System.Reflection.Module" />，在该模块中定义了声明当前属性 (Property) 的类型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Name">
      <summary>获取此成员的名称。</summary>
      <returns>包含此成员名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyToken">
      <summary>检索此属性 (Property) 的标记。</summary>
      <returns>只读。检索此属性 (Property) 的标记。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
      <summary>获取此属性 (Property) 的字段类型。</summary>
      <returns>此属性 (Property) 的类型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
      <summary>获取用于获取 MemberInfo 的此实例的类对象。</summary>
      <returns>Type 对象，通过它获取了该 MemberInfo 对象。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
      <summary>设置该属性 (Property) 的默认值。</summary>
      <param name="defaultValue">该属性 (Property) 的默认值。</param>
      <exception cref="T:System.InvalidOperationException">
                已对封闭类型调用了 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />。</exception>
      <exception cref="T:System.ArgumentException">该属性不是受支持类型之一。- 或 -<paramref name="defaultValue" /> 类型与该属性类型不匹配。- 或 -该属性的类型为 <see cref="T:System.Object" /> 或其他引用类型，并且 <paramref name="defaultValue" /> 不为 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>使用指定的自定义属性 Blob 设置自定义属性 (Attribute)。</summary>
      <param name="con">自定义属性 (Attribute) 的构造函数。</param>
      <param name="binaryAttribute">表示属性的字节 Blob。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
                已对封闭类型调用了 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>使用自定义属性 (Attribute) 生成器设置自定义属性 (Attribute)。</summary>
      <param name="customBuilder">定义自定义属性 (Attribute) 的帮助器类的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">如果已对封闭类型调用了 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>设置获取属性 (Property) 值的方法。</summary>
      <param name="mdBuilder">MethodBuilder 对象，表示获取属性 (Property) 值的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
                已对封闭类型调用了 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>设置用于设置属性 (Property) 值的方法。</summary>
      <param name="mdBuilder">MethodBuilder 对象，表示设置属性 (Property) 值的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
                已对封闭类型调用了 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
      <summary>用索引属性 (Property) 的可选索引值设置该属性 (Property) 的值。</summary>
      <param name="obj">将设置其属性 (Property) 值的对象。</param>
      <param name="value">此属性的新值。</param>
      <param name="index">索引化属性的可选索引值。对于非索引化属性，此值应为 null。</param>
      <exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>将给定对象的属性值设置为给定值。</summary>
      <param name="obj">将返回其属性 (Property) 值的对象。</param>
      <param name="value">此属性的新值。</param>
      <param name="invokeAttr">调用属性 (Attribute)。这必须是 BindingFlags 中的位标志：InvokeMethod、CreateInstance、Static、GetField、SetField、GetProperty 或 SetProperty。必须指定合适的调用属性。如果要调用静态成员，则必须设置 BindingFlags 的 Static 标志。</param>
      <param name="binder">一个对象，它使用反射启用绑定、参数类型的强制、成员的调用和 MemberInfo 对象的检索。如果 <paramref name="binder" /> 为 null，则使用默认联编程序。</param>
      <param name="index">索引化属性的可选索引值。对于非索引化属性，此值应为 null。</param>
      <param name="culture">表示要为其本地化资源的区域性的 CultureInfo 对象。请注意，如果没有为此区域性本地化该资源，则在搜索匹配项的过程中将继续调用 CultureInfo.Parent 方法。如果此值为 null，则从 CultureInfo.CurrentUICulture 属性获得 CultureInfo。</param>
      <exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的传入数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，用于接收与名称对应的 ID。</param>
      <exception cref="T:System.NotImplementedException">使用 COM IDispatch 接口以后期绑定形式调用此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">接收一个指针，指向请求的类型信息对象。</param>
      <exception cref="T:System.NotImplementedException">使用 COM IDispatch 接口以后期绑定形式调用此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">指向一个位置，该位置接收对象提供的类型信息接口的数量。</param>
      <exception cref="T:System.NotImplementedException">使用 COM IDispatch 接口以后期绑定形式调用此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性 (Property) 和方法的访问。</summary>
      <param name="dispIdMember">标识成员。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组中元素数的计数。</param>
      <param name="pVarResult">指向要存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
      <exception cref="T:System.NotImplementedException">使用 COM IDispatch 接口以后期绑定形式调用此方法。</exception>
    </member>
    <member name="T:System.Reflection.Emit.PropertyToken">
      <summary>PropertyToken 结构是由元数据返回以表示属性的 Token 的不透明表示形式。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PropertyToken.Empty">
      <summary>
        <see cref="P:System.Reflection.Emit.PropertyToken.Token" /> 值为 0 的默认 PropertyToken。</summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.Equals(System.Object)">
      <summary>检查给定对象是否为 PropertyToken 的实例和是否等于此实例。</summary>
      <returns>
如果 <paramref name="obj" /> 是 PropertyToken 的实例并等于当前实例，则为 true；否则，为 false。</returns>
      <param name="obj">该对象的对象。 </param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.Equals(System.Reflection.Emit.PropertyToken)">
      <summary>指示当前实例是否等于指定的 <see cref="T:System.Reflection.Emit.PropertyToken" />。</summary>
      <returns>
如果 <paramref name="obj" /> 的值等于当前实例的值，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的 <see cref="T:System.Reflection.Emit.PropertyToken" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.GetHashCode">
      <summary>生成此属性的哈希代码。</summary>
      <returns>返回此属性的哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.op_Equality(System.Reflection.Emit.PropertyToken,System.Reflection.Emit.PropertyToken)">
      <summary>指示两个 <see cref="T:System.Reflection.Emit.PropertyToken" /> 结构是否等同。</summary>
      <returns>
如果 <paramref name="a" /> 等于 <paramref name="b" />，则为 true；否则为 false。</returns>
      <param name="a">要与 <paramref name="b" /> 进行比较的 <see cref="T:System.Reflection.Emit.PropertyToken" />。</param>
      <param name="b">要与 <paramref name="a" /> 进行比较的 <see cref="T:System.Reflection.Emit.PropertyToken" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.op_Inequality(System.Reflection.Emit.PropertyToken,System.Reflection.Emit.PropertyToken)">
      <summary>指示两个 <see cref="T:System.Reflection.Emit.PropertyToken" /> 结构是否相等。</summary>
      <returns>
如果 <paramref name="a" /> 不等于 <paramref name="b" />，则为 true；否则为 false。</returns>
      <param name="a">要与 <paramref name="b" /> 进行比较的 <see cref="T:System.Reflection.Emit.PropertyToken" />。</param>
      <param name="b">要与 <paramref name="a" /> 进行比较的 <see cref="T:System.Reflection.Emit.PropertyToken" />。</param>
    </member>
    <member name="P:System.Reflection.Emit.PropertyToken.Token">
      <summary>检索此属性的元数据标记。</summary>
      <returns>只读。检索此实例的元数据标记。</returns>
    </member>
    <member name="T:System.Reflection.Emit.SignatureHelper">
      <summary>提供生成签名的方法。</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)">
      <summary>为签名添加参数。</summary>
      <param name="clsArgument">参数类型。</param>
      <exception cref="T:System.ArgumentException">已完成签名</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clsArgument" /> 为 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)">
      <summary>向签名添加指定类型的参数，指定该参数是否固定。</summary>
      <param name="argument">参数类型。</param>
      <param name="pinned">
                如果参数固定，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])">
      <summary>向签名添加具有指定自定义修饰符的参数。</summary>
      <param name="argument">参数类型。</param>
      <param name="requiredCustomModifiers">一个表示参数必需的自定义修饰符的类型数组，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。如果参数没有必需的自定义修饰符，请指定 null。</param>
      <param name="optionalCustomModifiers">一个表示参数的可选自定义修饰符的类型数组，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。如果参数没有可选的自定义修饰符，请指定 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 为 null。- 或 -<paramref name="requiredCustomModifiers" /> 或 <paramref name="optionalCustomModifiers" /> 的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">已完成签名- 或 -指定的自定义修饰符之一为数组类型。- 或 -指定的自定义修饰符之一为开放式泛型类型。也就是说，<see cref="P:System.Type.ContainsGenericParameters" /> 属性对于自定义修饰符为 true。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])">
      <summary>向签名添加具有指定自定义修饰符的一组参数。</summary>
      <param name="arguments">要添加的参数的类型。</param>
      <param name="requiredCustomModifiers">由类型数组组成的数组。每个类型数组均表示相应参数所必需的自定义修饰符，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。如果某个特定参数没有必需的自定义修饰符，请指定 null，而不要指定类型数组。如果所有参数都没有必需的自定义修饰符，请指定 null，而不要指定由数组组成的数组。</param>
      <param name="optionalCustomModifiers">由类型数组组成的数组。每个类型数组均表示相应参数的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。如果某个特定参数没有可选的自定义修饰符，请指定 null，而不要指定类型数组。如果所有参数都没有可选的自定义修饰符，请指定 null，而不要指定由数组组成的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="arguments" /> 的一个元素为 null。- 或 -其中一个指定的自定义修饰符为 null。（但是，可以为任何参数的自定义修饰符的数组指定 null。）</exception>
      <exception cref="T:System.ArgumentException">已完成签名- 或 -指定的自定义修饰符之一为数组类型。- 或 -指定的自定义修饰符之一为开放式泛型类型。也就是说，<see cref="P:System.Type.ContainsGenericParameters" /> 属性对于自定义修饰符为 true。- 或 -<paramref name="requiredCustomModifiers" /> 或 <paramref name="optionalCustomModifiers" /> 的大小与 <paramref name="arguments" /> 的大小不相等。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddSentinel">
      <summary>标记 vararg 固定部分的结尾。这仅在调用方创建 vararg 签名调用站点时使用。</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)">
      <summary>检查该实例是否等于给定对象。</summary>
      <returns>
            如果给定对象是 SignatureHelper 并且表示同一签名，则为 true；否则为 false。</returns>
      <param name="obj">应与此实例进行比较的对象。</param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)">
      <summary>返回字段的签名帮助器。</summary>
      <returns>字段的 SignatureHelper 对象。</returns>
      <param name="mod">包含为其请求 SignatureHelper 的字段的动态模块。</param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetHashCode">
      <summary>创建并返回此实例的哈希代码。</summary>
      <returns>返回基于名称的哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper">
      <summary>返回局部变量的签名帮助器。</summary>
      <returns>用于局部变量的 <see cref="T:System.Reflection.Emit.SignatureHelper" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)">
      <summary>返回局部变量的签名帮助器。</summary>
      <returns>局部变量的 SignatureHelper 对象。</returns>
      <param name="mod">包含为其请求 SignatureHelper 的局部变量的动态模块。</param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)">
      <summary>已知方法的调用约定和返回类型，返回方法的签名帮助器。</summary>
      <returns>方法的 SignatureHelper 对象。</returns>
      <param name="callingConvention">该方法的调用约定。</param>
      <param name="returnType">方法的返回类型，对于 void 返回类型为 null（在 Visual Basic 中为 Sub 过程）。</param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)">
      <summary>已知方法的模块、调用约定和返回类型，返回方法的签名帮助器。</summary>
      <returns>方法的 SignatureHelper 对象。</returns>
      <param name="mod">包含为其请求 SignatureHelper 的方法的 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</param>
      <param name="callingConvention">该方法的调用约定。</param>
      <param name="returnType">方法的返回类型，对于 void 返回类型为 null（在 Visual Basic 中为 Sub 过程）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Runtime.InteropServices.CallingConvention,System.Type)">
      <summary>已知方法的模块、非托管调用约定和返回类型，返回方法的签名帮助器。</summary>
      <returns>方法的 SignatureHelper 对象。</returns>
      <param name="mod">包含为其请求 SignatureHelper 的方法的 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</param>
      <param name="unmanagedCallConv">此方法的非托管调用约定。</param>
      <param name="returnType">方法的返回类型，对于 void 返回类型为 null（在 Visual Basic 中为 Sub 过程）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。- 或 -<paramref name="unmanagedCallConv" /> 是未知的非托管调用约定。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary>在已知方法的模块、返回类型和参数类型的情况下，返回具有标准调用约定的方法的签名帮助器。</summary>
      <returns>方法的 SignatureHelper 对象。</returns>
      <param name="mod">包含为其请求 SignatureHelper 的方法的 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</param>
      <param name="returnType">方法的返回类型，对于 void 返回类型为 null（在 Visual Basic 中为 Sub 过程）。</param>
      <param name="parameterTypes">方法的参数类型，如果方法没有参数，则为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> 为 null。- 或 -<paramref name="parameterTypes" /> 的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Runtime.InteropServices.CallingConvention,System.Type)">
      <summary>已知方法的非托管调用约定和返回类型，返回方法的签名帮助器。</summary>
      <returns>方法的 SignatureHelper 对象。</returns>
      <param name="unmanagedCallingConvention">此方法的非托管调用约定。</param>
      <param name="returnType">方法的返回类型，对于 void 返回类型为 null（在 Visual Basic 中为 Sub 过程）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="unmanagedCallConv" /> 是未知的非托管调用约定。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary>在已知包含属性、属性类型和属性参数的动态模块的情况下，返回属性的签名帮助器。</summary>
      <returns>属性的 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 对象。</returns>
      <param name="mod">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />，其中包含为其请求 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 的属性。</param>
      <param name="returnType">属性类型。</param>
      <param name="parameterTypes">参数类型，如果属性没有参数，则为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> 为 null。- 或 -<paramref name="parameterTypes" /> 的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>在已知包含属性、属性类型、属性参数以及返回类型和参数的自定义修饰符的动态模块的情况下，返回属性的签名帮助器。</summary>
      <returns>属性的 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 对象。</returns>
      <param name="mod">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />，其中包含为其请求 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 的属性。</param>
      <param name="returnType">属性类型。</param>
      <param name="requiredReturnTypeCustomModifiers">一个表示返回类型必需的自定义修饰符的类型数组，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。如果返回类型没有必需的自定义修饰符，请指定 null。</param>
      <param name="optionalReturnTypeCustomModifiers">一个表示返回类型的可选自定义修饰符的类型数组，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。如果返回类型没有可选的自定义修饰符，请指定 null。</param>
      <param name="parameterTypes">属性的参数类型，如果属性没有参数，则为 null。</param>
      <param name="requiredParameterTypeCustomModifiers">由类型数组组成的数组。每个类型数组均表示属性的相应参数所必需的自定义修饰符。如果某个特定参数没有必需的自定义修饰符，请指定 null，而不要指定类型数组。如果属性没有参数，或者所有参数都没有必需的自定义修饰符，请指定 null，而不要指定由数组组成的数组。</param>
      <param name="optionalParameterTypeCustomModifiers">由类型数组组成的数组。每个类型数组均表示属性的相应参数的可选自定义修饰符。如果某个特定参数没有可选的自定义修饰符，请指定 null，而不要指定类型数组。如果属性没有参数，或者所有参数都没有可选的自定义修饰符，请指定 null，而不要指定由数组组成的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> 为 null。- 或 -<paramref name="parameterTypes" /> 的一个元素为 null。- 或 -其中一个指定的自定义修饰符为 null。（但是，可以为任何参数的自定义修饰符的数组指定 null。）</exception>
      <exception cref="T:System.ArgumentException">已完成签名- 或 -<paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。- 或 -指定的自定义修饰符之一为数组类型。- 或 -指定的自定义修饰符之一为开放式泛型类型。也就是说，<see cref="P:System.Type.ContainsGenericParameters" /> 属性对于自定义修饰符为 true。- 或 -<paramref name="requiredParameterTypeCustomModifiers" /> 或 <paramref name="optionalParameterTypeCustomModifiers" /> 的大小与 <paramref name="parameterTypes" /> 的大小不相等。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetSignature">
      <summary>在签名中添加结束标记并将签名标记为已完成，以便不能再添加更多的标记。</summary>
      <returns>返回由完整签名组成的字节数组。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的传入数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，用于接收与名称对应的 ID。</param>
      <exception cref="T:System.NotImplementedException">不支持使用 COM IDispatch 接口进行后期绑定访问。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">接收一个指针，指向请求的类型信息对象。</param>
      <exception cref="T:System.NotImplementedException">不支持使用 COM IDispatch 接口进行后期绑定访问。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">指向一个位置，该位置接收对象提供的类型信息接口的数量。</param>
      <exception cref="T:System.NotImplementedException">不支持使用 COM IDispatch 接口进行后期绑定访问。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">标识成员。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组中元素数的计数。</param>
      <param name="pVarResult">指向要存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
      <exception cref="T:System.NotImplementedException">不支持使用 COM IDispatch 接口进行后期绑定访问。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.ToString">
      <summary>返回表示签名参数的字符串。</summary>
      <returns>返回表示该签名的参数的字符串。</returns>
    </member>
    <member name="T:System.Reflection.Emit.SignatureToken">
      <summary>表示由元数据返回以表示签名的 Token。</summary>
    </member>
    <member name="F:System.Reflection.Emit.SignatureToken.Empty">
      <summary>
        <see cref="P:System.Reflection.Emit.SignatureToken.Token" /> 值为 0 的默认 SignatureToken。</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.Equals(System.Object)">
      <summary>检查给定对象是否为 SignatureToken 的实例和是否等于此实例。</summary>
      <returns>
如果 <paramref name="obj" /> 是 SignatureToken 的实例并且等于此对象，则为 true；否则为 false。</returns>
      <param name="obj">与此 SignatureToken 进行比较的对象。 </param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.Equals(System.Reflection.Emit.SignatureToken)">
      <summary>指示当前实例是否等于指定的 <see cref="T:System.Reflection.Emit.SignatureToken" />。</summary>
      <returns>
如果 <paramref name="obj" /> 的值等于当前实例的值，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的 <see cref="T:System.Reflection.Emit.SignatureToken" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.GetHashCode">
      <summary>生成该签名的哈希代码。</summary>
      <returns>返回该签名的哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.op_Equality(System.Reflection.Emit.SignatureToken,System.Reflection.Emit.SignatureToken)">
      <summary>指示两个 <see cref="T:System.Reflection.Emit.SignatureToken" /> 结构是否等同。</summary>
      <returns>
如果 <paramref name="a" /> 等于 <paramref name="b" />，则为 true；否则为 false。</returns>
      <param name="a">要与 <paramref name="b" /> 进行比较的 <see cref="T:System.Reflection.Emit.SignatureToken" />。</param>
      <param name="b">要与 <paramref name="a" /> 进行比较的 <see cref="T:System.Reflection.Emit.SignatureToken" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.op_Inequality(System.Reflection.Emit.SignatureToken,System.Reflection.Emit.SignatureToken)">
      <summary>指示两个 <see cref="T:System.Reflection.Emit.SignatureToken" /> 结构是否不相等。</summary>
      <returns>
如果 <paramref name="a" /> 不等于 <paramref name="b" />，则为 true；否则为 false。</returns>
      <param name="a">要与 <paramref name="b" /> 进行比较的 <see cref="T:System.Reflection.Emit.SignatureToken" />。</param>
      <param name="b">要与 <paramref name="a" /> 进行比较的 <see cref="T:System.Reflection.Emit.SignatureToken" />。</param>
    </member>
    <member name="P:System.Reflection.Emit.SignatureToken.Token">
      <summary>检索此方法的局部变量签名的元数据标记。</summary>
      <returns>只读。检索该签名的元数据标记。</returns>
    </member>
    <member name="T:System.Reflection.Emit.StackBehaviour">
      <summary>描述如何将值推到堆栈上或从堆栈中弹出。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop0">
      <summary>不从堆栈中弹出任何值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1">
      <summary>从堆栈中弹出一个值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1_pop1">
      <summary>对于第一个操作数，从堆栈中弹出 1 个值；对于第二个操作数，从堆栈中弹出 1 个值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi">
      <summary>从堆栈中弹出一个 32 位整数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_pop1">
      <summary>对于第一个操作数，从堆栈中弹出一个 32 位整数；对于第二个操作数，从堆栈中弹出一个值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi">
      <summary>对于第一个操作数，从堆栈中弹出一个 32 位整数；对于第二个操作数，从堆栈中弹出一个 32 位整数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi8">
      <summary>对于第一个操作数，从堆栈中弹出一个 32 位整数；对于第二个操作数，从堆栈中弹出一个 64 位整数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi_popi">
      <summary>对于第一个操作数，从堆栈中弹出一个 32 位整数；对于第二个操作数，从堆栈中弹出一个 32 位整数；对于第三个操作数，从堆栈中弹出一个 32 位整数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr4">
      <summary>对于第一个操作数，从堆栈弹出一个 32 位整数，对于第二个操作数，从堆栈弹出一个 32 位浮点数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr8">
      <summary>对于第一个操作数，从堆栈弹出一个 64 位整数，对于第二个操作数，从堆栈弹出一个 32 位浮点数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref">
      <summary>从堆栈中弹出一个引用。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_pop1">
      <summary>对于第一个操作数，从堆栈中弹出一个引用；对于第二个操作数，从堆栈中弹出一个值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi">
      <summary>对于第一个操作数，从堆栈中弹出一个引用；对于第二个操作数，从堆栈中弹出一个 32 位整数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi">
      <summary>对于第一个操作数，从堆栈中弹出一个引用；对于第二个操作数，从堆栈中弹出一个值；对于第三个操作数，从堆栈中弹出一个值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi8">
      <summary>对于第一个操作数，从堆栈弹出一个引用，对于第二个操作数，从堆栈弹出一个值，对于第三个操作数，从堆栈弹出一个 64 位整数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr4">
      <summary>对于第一个操作数，从堆栈弹出一个引用，对于第二个操作数，从堆栈弹出一个值，对于第三个操作数，从堆栈弹出一个 32 位整数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr8">
      <summary>对于第一个操作数，从堆栈中弹出一个引用；对于第二个操作数，从堆栈中弹出一个值；对于第三个操作数，从堆栈中弹出一个 64 位浮点数。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popref">
      <summary>对于第一个操作数，从堆栈中弹出一个引用；对于第二个操作数，从堆栈中弹出一个值；对于第三个操作数，从堆栈中弹出一个引用。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push0">
      <summary>不将任何值推到堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1">
      <summary>将一个值推到堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1_push1">
      <summary>对于第一个操作数，将 1 个值推到堆栈上；对于第二个操作数，将 1 个值推到堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi">
      <summary>将一个 32 位整数推入堆栈中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi8">
      <summary>将一个 64 位整数推入堆栈中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr4">
      <summary>将一个 32 位浮点数推入堆栈中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr8">
      <summary>将一个 64 位浮点数推入堆栈中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushref">
      <summary>将一个引用推到堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpop">
      <summary>从堆栈中弹出一个变量。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpush">
      <summary>将一个变量推到堆栈上。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_pop1">
      <summary>对于第一个操作数，从堆栈弹出一个引用，对于第二个操作数，从堆栈弹出一个值，对于第三个操作数，从堆栈弹出一个 32 位整数。</summary>
    </member>
    <member name="T:System.Reflection.Emit.StringToken">
      <summary>表示用于表示字符串的标记。</summary>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.Equals(System.Object)">
      <summary>检查给定对象是否为 StringToken 的实例和是否等于此实例。</summary>
      <returns>
如果 <paramref name="obj" /> 是 StringToken 的实例并且等于此对象，则为 true；否则为 false。</returns>
      <param name="obj">与此 StringToken 进行比较的对象。 </param>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.Equals(System.Reflection.Emit.StringToken)">
      <summary>指定当前实例是否等于指定的 <see cref="T:System.Reflection.Emit.StringToken" />。</summary>
      <returns>
如果 <paramref name="obj" /> 的值等于当前实例的值，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的 <see cref="T:System.Reflection.Emit.StringToken" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.GetHashCode">
      <summary>返回该字符串的哈希代码。</summary>
      <returns>返回基础字符串标记。</returns>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.op_Equality(System.Reflection.Emit.StringToken,System.Reflection.Emit.StringToken)">
      <summary>指示两个 <see cref="T:System.Reflection.Emit.StringToken" /> 结构是否等同。</summary>
      <returns>
如果 <paramref name="a" /> 等于 <paramref name="b" />，则为 true；否则为 false。</returns>
      <param name="a">要与 <paramref name="b" /> 进行比较的 <see cref="T:System.Reflection.Emit.StringToken" />。</param>
      <param name="b">要与 <paramref name="a" /> 进行比较的 <see cref="T:System.Reflection.Emit.StringToken" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.op_Inequality(System.Reflection.Emit.StringToken,System.Reflection.Emit.StringToken)">
      <summary>指示两个 <see cref="T:System.Reflection.Emit.StringToken" /> 结构是否不相等。</summary>
      <returns>
如果 <paramref name="a" /> 不等于 <paramref name="b" />，则为 true；否则为 false。</returns>
      <param name="a">要与 <paramref name="b" /> 进行比较的 <see cref="T:System.Reflection.Emit.StringToken" />。</param>
      <param name="b">要与 <paramref name="a" /> 进行比较的 <see cref="T:System.Reflection.Emit.StringToken" />。</param>
    </member>
    <member name="P:System.Reflection.Emit.StringToken.Token">
      <summary>检索该字符串的元数据标记。</summary>
      <returns>只读。检索该字符串的元数据标记。</returns>
    </member>
    <member name="T:System.Reflection.Emit.TypeBuilder">
      <summary>
                    在运行时定义并创建类的新实例。
                </summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
      <summary>
                    为此类型添加声明性安全。
                </summary>
      <param name="action">
                    要执行的安全操作，如 Demand、Assert 等。
                </param>
      <param name="pset">
                    操作应用于的权限集。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="action" /> 无效（RequestMinimum、RequestOptional 和 RequestRefuse 无效）。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    已经使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建了该包含类型。
                
                    - 或 -
                
                    权限集 <paramref name="pset" /> 包含以前由 AddDeclarativeSecurity 添加的操作。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pset" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)">
      <summary>
                    添加此类型实现的接口。
                </summary>
      <param name="interfaceType">
                    此类型实现的接口。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="interfaceType" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                </exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Assembly">
      <summary>
                    检索包含此类型定义的动态程序集。
                </summary>
      <returns>
                    只读。检索包含此类型定义的动态程序集。
                </returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName">
      <summary>
                    返回由程序集的显示名称限定的此类型的完整名称。
                </summary>
      <returns>
                    只读。由程序集的显示名称限定的此类型的完整名称。
                </returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.BaseType">
      <summary>
                    检索此类型的基类型。
                </summary>
      <returns>
                    只读。检索此类型的基类型。
                </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateType">
      <summary>
                    创建类的 <see cref="T:System.Type" /> 对象。定义了类的字段和方法后，调用 CreateType 以加载其 Type 对象。
                </summary>
      <returns>
                    返回此类的新 <see cref="T:System.Type" /> 对象。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    尚未创建封闭类型。
                
                    - 或 -
                
                    此类型是非抽象的并且包含抽象方法。
                
                    - 或 -
                
                    此类型不是抽象类或接口，并且包含不带方法体的方法。
                </exception>
      <exception cref="T:System.NotSupportedException">
                    此类型包含无效的 Microsoft 中间语言 (MSIL) 代码。
                
                    - 或 -
                
                    分支目标是使用 1 字节的偏移量指定的，但是该目标与分支之间的距离大于 127 字节。
                </exception>
      <exception cref="T:System.TypeLoadException">
                    无法加载该类型。例如，它包含具有调用约定 <see cref="F:System.Reflection.CallingConventions.HasThis" /> 的 static 方法。
                </exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringMethod">
      <summary>
                    获取当前泛型类型参数的声明方法。
                </summary>
      <returns>
                    如果当前类型是泛型类型参数，则为 <see cref="T:System.Reflection.MethodBase" />，表示当前类型的声明方法；否则为 null。
                </returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringType">
      <summary>
                    返回声明此类型的类型。
                </summary>
      <returns>
                    只读。声明此类型的类型。
                </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])">
      <summary>
                    用给定的属性和签名，向类型中添加新的构造函数。
                </summary>
      <returns>
已定义的构造函数。
                </returns>
      <param name="attributes">
构造函数的属性。
                </param>
      <param name="callingConvention">
构造函数的调用约定。
                </param>
      <param name="parameterTypes">
构造函数的参数类型。
                </param>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])">
      <summary>
                    用给定的属性、签名和自定义修饰符，向类型中添加新的构造函数。
                </summary>
      <returns>
已定义的构造函数。
                </returns>
      <param name="attributes">
构造函数的属性。
                </param>
      <param name="callingConvention">
构造函数的调用约定。
                </param>
      <param name="parameterTypes">
构造函数的参数类型。
                </param>
      <param name="requiredCustomModifiers">
由类型数组组成的数组。每个类型数组均表示相应参数所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。如果某个特定参数没有必需的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有必需的自定义修饰符，请指定 null，而不指定由数组构成的数组。
                </param>
      <param name="optionalCustomModifiers">
由类型数组组成的数组。每个类型数组均表示相应参数的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。如果某个特定参数没有可选的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有可选的自定义修饰符，请指定 null，而不指定由数组构成的数组。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="requiredCustomModifiers" /> 或 <paramref name="optionalCustomModifiers" /> 的大小与 <paramref name="parameterTypes" /> 的大小不相等。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                
                    - 或 -
                
                    对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 属性为 false。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)">
      <summary>
                    定义默认的构造函数。这里定义的构造函数只调用父类的默认构造函数。
                </summary>
      <returns>
                    返回该构造函数。
                </returns>
      <param name="attributes">MethodAttributes 对象，表示应用于构造函数的属性。
                </param>
      <exception cref="T:System.NotSupportedException">
                    父类型（基类型）没有默认构造函数。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                
                    - 或 -
                
                    对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 属性为 false。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)">
      <summary>
                    用给定的名称、属性和事件类型，向类型中添加新事件。
                </summary>
      <returns>
                    已定义的事件。
                </returns>
      <param name="name">
                    事件的名称。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <param name="attributes">
                    事件的属性。
                </param>
      <param name="eventtype">
                    事件的类型。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度为零。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。
                
                    - 或 -
                <paramref name="eventtype" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)">
      <summary>
                    用给定的名称、属性和字段类型，向类型中添加新字段。
                </summary>
      <returns>
定义的字段。
                </returns>
      <param name="fieldName">
                    字段名。<paramref name="fieldName" /> 不能包含嵌入的空值。
                </param>
      <param name="type">
字段的类型
                </param>
      <param name="attributes">
字段的属性。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldName" /> 的长度为零。
                
                    - 或 -
                <paramref name="type" /> 是 System.Void。
                
                    - 或 -
                
为该字段的父类指定了总大小。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fieldName" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)">
      <summary>
                    用给定的名称、属性、字段类型和自定义修饰符，向类型中添加新字段。
                </summary>
      <returns>
定义的字段。
                </returns>
      <param name="fieldName">
                    字段名。<paramref name="fieldName" /> 不能包含嵌入的空值。
                </param>
      <param name="type">
字段的类型
                </param>
      <param name="requiredCustomModifiers">
                    一个表示字段所必需的自定义修饰符的类型数组，如 <see cref="T:Microsoft.VisualC.IsConstModifier" />。
                </param>
      <param name="optionalCustomModifiers">
                    一个表示字段的可选自定义修饰符的类型数组，如 <see cref="T:Microsoft.VisualC.IsConstModifier" />。
                </param>
      <param name="attributes">
字段的属性。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldName" /> 的长度为零。
                
                    - 或 -
                <paramref name="type" /> 是 System.Void。
                
                    - 或 -
                
为该字段的父类指定了总大小。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fieldName" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])">
      <summary>
                    为当前类型定义泛型类型参数，指定参数的个数和名称，并返回一个 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 对象的数组，这些对象可用于设置参数的约束。
                </summary>
      <returns>
                    一个 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 对象的数组，这些对象可用于为当前类型定义泛型类型参数的约束。
                </returns>
      <param name="names">
                    泛型类型参数的名称数组。
                </param>
      <exception cref="T:System.InvalidOperationException">
                    已为此类型定义了泛型类型参数。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="names" /> 为 null。
                
                    - 或 -
                <paramref name="names" /> 的一个元素为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="names" /> 为空数组。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary>
                    在可移植可执行 (PE) 文件的 .sdata 部分定义初始化的数据字段。
                </summary>
      <returns>
引用这些数据的字段。
                </returns>
      <param name="name">
                    用于引用数据的名称。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <param name="data">
                    数据的 Blob。
                </param>
      <param name="attributes">
该字段的属性。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度为零。
                
                    - 或 -
                
                    数据的大小小于等于 0，或者大于等于 0x3f0000。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="data" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    以前调用过 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)">
      <summary>
                    使用指定的名称和方法属性向类型中添加新方法。
                </summary>
      <returns>
                    一个 <see cref="T:System.Reflection.Emit.MethodBuilder" />，它表示新定义的方法。
                </returns>
      <param name="name">
                    方法名。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <param name="attributes">
该方法的属性。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度为零。
                
                    - 或 -
                
此方法的父级类型是一个接口，而且此方法不是虚拟的（Visual Basic 中为 Overridable）。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                
                    - 或 -
                
                    对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 属性为 false。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)">
      <summary>
                    使用指定名称、方法属性和调用约定向类型中添加新方法。
                </summary>
      <returns>
                    一个 <see cref="T:System.Reflection.Emit.MethodBuilder" />，它表示新定义的方法。
                </returns>
      <param name="name">
                    方法名。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <param name="attributes">
该方法的属性。
                </param>
      <param name="callingConvention">
该方法的调用约定。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度为零。
                
                    - 或 -
                
                    此方法的父级类型是一个接口，而且此方法不是虚拟的（Visual Basic 中为 Overridable）。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                
                    - 或 -
                
                    对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 属性为 false。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>
                    使用指定的名称、方法属性、调用约定和方法签名向类型中添加新方法。
                </summary>
      <returns>
                    一个 <see cref="T:System.Reflection.Emit.MethodBuilder" />，它表示新定义的方法。
                </returns>
      <param name="name">
                    方法名。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <param name="attributes">
该方法的属性。
                </param>
      <param name="callingConvention">
该方法的调用约定。
                </param>
      <param name="returnType">
该方法的返回类型。
                </param>
      <param name="parameterTypes">
该方法的参数的类型。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度为零。
                
                    - 或 -
                
此方法的父级类型是一个接口，而且此方法不是虚拟的（Visual Basic 中为 Overridable）。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                
                    - 或 -
                
                    对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 属性为 false。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>
                    使用指定的名称、方法属性、调用约定、方法签名和自定义修饰符向类型中添加新方法。
                </summary>
      <returns>
                    一个表示新添加方法的 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 对象。
                </returns>
      <param name="name">
                    方法名。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <param name="attributes">
该方法的属性。
                </param>
      <param name="callingConvention">
该方法的调用约定。
                </param>
      <param name="returnType">
该方法的返回类型。
                </param>
      <param name="returnTypeRequiredCustomModifiers">
                    一个类型数组，表示该方法的返回类型的必需的自定义修饰符（如，<see cref="T:System.Runtime.CompilerServices.IsConst" />）。如果返回类型没有必需的自定义修饰符，请指定 null。
                </param>
      <param name="returnTypeOptionalCustomModifiers">
                    一个类型数组，表示该方法的返回类型的可选自定义修饰符（例如，<see cref="T:System.Runtime.CompilerServices.IsConst" />）。如果返回类型没有可选的自定义修饰符，请指定 null。
                </param>
      <param name="parameterTypes">
该方法的参数的类型。
                </param>
      <param name="parameterTypeRequiredCustomModifiers">
由类型数组组成的数组。每个类型数组均表示相应参数所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。如果某个特定参数没有必需的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有必需的自定义修饰符，请指定 null，而不指定由数组构成的数组。
                </param>
      <param name="parameterTypeOptionalCustomModifiers">
由类型数组组成的数组。每个类型数组均表示相应参数的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。如果某个特定参数没有可选的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有可选的自定义修饰符，请指定 null，而不指定由数组构成的数组。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度为零。
                
                    - 或 -
                
此方法的父级类型是一个接口，而且此方法不是虚拟的（Visual Basic 中为 Overridable）。
                
                    - 或 -
                <paramref name="parameterTypeRequiredCustomModifiers" /> 或 <paramref name="parameterTypeOptionalCustomModifiers" /> 的大小不等于 <paramref name="parameterTypes" /> 的大小。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                
                    - 或 -
                
                    对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 属性为 false。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary>
                    使用指定的名称、方法属性和调用约定向类型中添加新方法。
                </summary>
      <returns>
                    已定义的方法。
                </returns>
      <param name="name">
                    方法名。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <param name="attributes">
该方法的属性。
                </param>
      <param name="returnType">
该方法的返回类型。
                </param>
      <param name="parameterTypes">
该方法的参数的类型。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度为零。
                
                    - 或 -
                
此方法的父级类型是一个接口，而且此方法不是虚拟的（Visual Basic 中为 Overridable）。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                
                    - 或 -
                
                    对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 属性为 false。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>
                    指定实现给定方法声明的给定方法体，可能使用不同名称。
                </summary>
      <param name="methodInfoBody">
                    要使用的方法体。应该是 MethodBuilder 对象。
                </param>
      <param name="methodInfoDeclaration">
                    要使用其声明的方法。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="methodInfoBody" /> 不属于此类。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="methodInfoBody" /> 或 <paramref name="methodInfoDeclaration" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                
                    - 或 -
                <paramref name="methodInfoBody" /> 的声明类型不是由此 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 表示的类型。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)">
      <summary>
                    已知名称，定义嵌套类型。
                </summary>
      <returns>
已定义的嵌套类型。
                </returns>
      <param name="name">
                    类型的简称。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度为零。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)">
      <summary>
                    已知名称和属性，定义嵌套类型。
                </summary>
      <returns>
已定义的嵌套类型。
                </returns>
      <param name="name">
                    类型的简称。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <param name="attr">
该类型的属性。
                </param>
      <exception cref="T:System.ArgumentException">
未指定嵌套属性。
                
                    - 或 -
                
此类型是密封的。
                
                    - 或 -
                
此类型是数组。
                
                    - 或 -
                
此类型是接口，但嵌套类型不是接口。
                
                    - 或 -
                <paramref name="name" /> 的长度为零。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>
                    已知嵌套类型的名称、属性和它扩展的类型，定义嵌套类型。
                </summary>
      <returns>
已定义的嵌套类型。
                </returns>
      <param name="name">
                    类型的简称。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <param name="attr">
该类型的属性。
                </param>
      <param name="parent">
嵌套类型扩展的类型。
                </param>
      <exception cref="T:System.ArgumentException">
未指定嵌套属性。
                
                    - 或 -
                
此类型是密封的。
                
                    - 或 -
                
此类型是数组。
                
                    - 或 -
                
此类型是接口，但嵌套类型不是接口。
                
                    - 或 -
                <paramref name="name" /> 的长度为零。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary>
                    已知嵌套类型的名称、属性、类型的总大小和它扩展的类型，定义嵌套类型。
                </summary>
      <returns>
已定义的嵌套类型。
                </returns>
      <param name="name">
                    类型的简称。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <param name="attr">
该类型的属性。
                </param>
      <param name="parent">
嵌套类型扩展的类型。
                </param>
      <param name="typeSize">
                    类型的总大小。
                </param>
      <exception cref="T:System.ArgumentException">
未指定嵌套属性。
                
                    - 或 -
                
此类型是密封的。
                
                    - 或 -
                
此类型是数组。
                
                    - 或 -
                
此类型是接口，但嵌套类型不是接口。
                
                    - 或 -
                <paramref name="name" /> 的长度为零。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary>
                    已知嵌套类型的名称、属性、它扩展的类型和包装大小，定义嵌套类型。
                </summary>
      <returns>
已定义的嵌套类型。
                </returns>
      <param name="name">
                    类型的简称。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <param name="attr">
该类型的属性。
                </param>
      <param name="parent">
嵌套类型扩展的类型。
                </param>
      <param name="packSize">
                    该类型的封装大小。
                </param>
      <exception cref="T:System.ArgumentException">
未指定嵌套属性。
                
                    - 或 -
                
此类型是密封的。
                
                    - 或 -
                
此类型是数组。
                
                    - 或 -
                
此类型是接口，但嵌套类型不是接口。
                
                    - 或 -
                <paramref name="name" /> 的长度为零。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary>
                    已知嵌套类型的名称、属性、它扩展的类型和它实现的接口，定义嵌套类型。
                </summary>
      <returns>
已定义的嵌套类型。
                </returns>
      <param name="name">
                    类型的简称。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <param name="attr">
该类型的属性。
                </param>
      <param name="parent">
嵌套类型扩展的类型。
                </param>
      <param name="interfaces">
                    嵌套类型实现的接口。
                </param>
      <exception cref="T:System.ArgumentException">
未指定嵌套属性。
                
                    - 或 -
                
此类型是密封的。
                
                    - 或 -
                
此类型是数组。
                
                    - 或 -
                
此类型是接口，但嵌套类型不是接口。
                
                    - 或 -
                <paramref name="name" /> 的长度为零。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。
                
                    - 或 -
                <paramref name="interfaces" /> 数组的一个元素为 null。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>
                    已知 PInvoke 方法的名称、定义该方法的 DLL 的名称、该方法的属性、该方法的调用约定、该方法的返回类型、该方法的参数类型以及 PInvoke 标志，定义该方法。
                </summary>
      <returns>
                    已定义的 PInvoke 方法。
                </returns>
      <param name="name">PInvoke 方法的名称。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <param name="dllName">
                    在其中定义 PInvoke 方法的 DLL 的名称。
                </param>
      <param name="attributes">
该方法的属性。
                </param>
      <param name="callingConvention">
该方法的调用约定。
                </param>
      <param name="returnType">
该方法的返回类型。
                </param>
      <param name="parameterTypes">
方法参数的类型。
                </param>
      <param name="nativeCallConv">
本机调用约定。
                </param>
      <param name="nativeCharSet">
该方法的本机字符集。
                </param>
      <exception cref="T:System.ArgumentException">
该方法不是静态的。
                
                    - 或 -
                
父类型是接口。
                
                    - 或 -
                
该方法是抽象的。
                
                    - 或 -
                
该方法是以前定义的。
                
                    - 或 -
                <paramref name="name" /> 或 <paramref name="dllName" /> 的长度为零。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="dllName" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建了该包含类型。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>
                    在已知 PInvoke 方法的名称、定义该方法的 DLL 的名称、入口点的名称、该方法的属性、该方法的调用约定、该方法的返回类型、该方法的参数类型以及 PInvoke 标志的情况下，定义该方法。
                </summary>
      <returns>
                    已定义的 PInvoke 方法。
                </returns>
      <param name="name">PInvoke 方法的名称。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <param name="dllName">
                    在其中定义 PInvoke 方法的 DLL 的名称。
                </param>
      <param name="entryName">
DLL 中的入口点名称。
                </param>
      <param name="attributes">
该方法的属性。
                </param>
      <param name="callingConvention">
该方法的调用约定。
                </param>
      <param name="returnType">
该方法的返回类型。
                </param>
      <param name="parameterTypes">
方法参数的类型。
                </param>
      <param name="nativeCallConv">
本机调用约定。
                </param>
      <param name="nativeCharSet">
该方法的本机字符集。
                </param>
      <exception cref="T:System.ArgumentException">
该方法不是静态的。
                
                    - 或 -
                
父类型是接口。
                
                    - 或 -
                
该方法是抽象的。
                
                    - 或 -
                
该方法是以前定义的。
                
                    - 或 -
                <paramref name="name" />、<paramref name="dllName" /> 或 <paramref name="entryName" /> 的长度为零。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />、<paramref name="dllName" /> 或 <paramref name="entryName" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建了该包含类型。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>
                    要定义 PInvoke 方法，需要给出以下各项：该方法的名称，在其中定义该方法的 DLL 的名称，入口点的名称，该方法的属性、调用约定、返回类型、参数类型，PInvoke 标志，参数和返回类型的自定义修饰符。
                </summary>
      <returns>
                    一个 <see cref="T:System.Reflection.Emit.MethodBuilder" />，表示定义的 PInvoke 方法。
                </returns>
      <param name="name">PInvoke 方法的名称。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <param name="dllName">
                    在其中定义 PInvoke 方法的 DLL 的名称。
                </param>
      <param name="entryName">
DLL 中的入口点名称。
                </param>
      <param name="attributes">
该方法的属性。
                </param>
      <param name="callingConvention">
该方法的调用约定。
                </param>
      <param name="returnType">
该方法的返回类型。
                </param>
      <param name="returnTypeRequiredCustomModifiers">
                    一个类型数组，表示该方法的返回类型的必需的自定义修饰符（如，<see cref="T:System.Runtime.CompilerServices.IsConst" />）。如果返回类型没有必需的自定义修饰符，请指定 null。
                </param>
      <param name="returnTypeOptionalCustomModifiers">
                    一个类型数组，表示该方法的返回类型的可选自定义修饰符（例如，<see cref="T:System.Runtime.CompilerServices.IsConst" />）。如果返回类型没有可选的自定义修饰符，请指定 null。
                </param>
      <param name="parameterTypes">
方法参数的类型。
                </param>
      <param name="parameterTypeRequiredCustomModifiers">
由类型数组组成的数组。每个类型数组均表示相应参数所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。如果某个特定参数没有必需的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有必需的自定义修饰符，请指定 null，而不指定由数组构成的数组。
                </param>
      <param name="parameterTypeOptionalCustomModifiers">
由类型数组组成的数组。每个类型数组均表示相应参数的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。如果某个特定参数没有可选的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有可选的自定义修饰符，请指定 null，而不指定由数组构成的数组。
                </param>
      <param name="nativeCallConv">
本机调用约定。
                </param>
      <param name="nativeCharSet">
该方法的本机字符集。
                </param>
      <exception cref="T:System.ArgumentException">
该方法不是静态的。
                
                    - 或 -
                
父类型是接口。
                
                    - 或 -
                
该方法是抽象的。
                
                    - 或 -
                
该方法是以前定义的。
                
                    - 或 -
                <paramref name="name" />、<paramref name="dllName" /> 或 <paramref name="entryName" /> 的长度为零。
                
                    - 或 -
                <paramref name="parameterTypeRequiredCustomModifiers" /> 或 <paramref name="parameterTypeOptionalCustomModifiers" /> 的大小不等于 <paramref name="parameterTypes" /> 的大小。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />、<paramref name="dllName" /> 或 <paramref name="entryName" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                
                    - 或 -
                
                    对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 属性为 false。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])">
      <summary>
                    用给定的名称和属性签名，向类型中添加新属性。
                </summary>
      <returns>
已定义的属性。
                </returns>
      <param name="name">
                    属性的名称。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <param name="attributes">
属性 (Property) 的属性 (Attribute)。
                </param>
      <param name="returnType">
属性的返回类型。
                </param>
      <param name="parameterTypes">
属性的参数类型。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度为零。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。
                
                    - 或 -
                <paramref name="parameterTypes" /> 数组中有任何元素为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>
                    用给定的名称、属性签名和自定义修饰符，向类型中添加新属性。
                </summary>
      <returns>
已定义的属性。
                </returns>
      <param name="name">
                    属性的名称。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <param name="attributes">
属性 (Property) 的属性 (Attribute)。
                </param>
      <param name="returnType">
属性的返回类型。
                </param>
      <param name="returnTypeRequiredCustomModifiers">
                    一个类型数组，表示属性的返回类型所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。如果返回类型没有必需的自定义修饰符，请指定 null。
                </param>
      <param name="returnTypeOptionalCustomModifiers">
                    一个类型数组，表示属性的返回类型的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。如果返回类型没有可选的自定义修饰符，请指定 null。
                </param>
      <param name="parameterTypes">
属性的参数类型。
                </param>
      <param name="parameterTypeRequiredCustomModifiers">
由类型数组组成的数组。每个类型数组均表示相应参数所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。如果某个特定参数没有必需的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有必需的自定义修饰符，请指定 null，而不指定由数组构成的数组。
                </param>
      <param name="parameterTypeOptionalCustomModifiers">
由类型数组组成的数组。每个类型数组均表示相应参数的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。如果某个特定参数没有可选的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有可选的自定义修饰符，请指定 null，而不指定由数组构成的数组。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度为零。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为null
                    - 或 -
                <paramref name="parameterTypes" /> 数组中有任何元素为 null</exception>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer">
      <summary>
                    为此类型定义初始值设定项。
                </summary>
      <returns>
                    返回类型初始值设定项。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建了该包含类型。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary>
                    在可移植可执行 (PE) 文件的 .sdata 部分定义未初始化的数据字段。
                </summary>
      <returns>
引用这些数据的字段。
                </returns>
      <param name="name">
                    用于引用数据的名称。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <param name="size">
                    该数据字段的大小。
                </param>
      <param name="attributes">
该字段的属性。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度为零。
                
                    - 或 -
                <paramref name="size" /> 小于或等于零，或者大于或等于 0x003f0000。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                </exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.FullName">
      <summary>
                    检索此类型的完整路径。
                </summary>
      <returns>
                    只读。检索此类型的完整路径。
                </returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes">
      <summary>
                    获取一个值，该值指示当前泛型类型参数的协方差和特殊约束。
                </summary>
      <returns>
        <see cref="T:System.Reflection.GenericParameterAttributes" /> 值的按位组合，用于描述当前泛型类型参数的协变和特殊约束。
                </returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition">
      <summary>
                    获取某个类型参数在类型参数列表中的位置，该列表具有声明该参数的泛型类型。
                </summary>
      <returns>
                    如果当前的 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 对象表示某个泛型类型参数，则为该类型参数在类型参数列表中的位置，该列表具有声明该参数的泛型类型；否则为未定义。
                </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)">
      <summary>
                    返回指定的构造泛型类型的构造函数，该函数对应于泛型类型定义的指定构造函数。
                </summary>
      <returns>
        <see cref="T:System.Reflection.ConstructorInfo" /> 对象表示 <paramref name="type" /> 的构造函数，该函数对应于 <paramref name="constructor" />，用于指定属于泛型类型定义 <paramref name="type" /> 的一个构造函数。
                </returns>
      <param name="type">
                    返回其构造函数的构造泛型类型。
                </param>
      <param name="constructor">
                    泛型类型定义 <paramref name="type" /> 中的一个构造函数，用于指定要返回 <paramref name="type" /> 的哪一个构造函数。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不表示泛型类型。
                
                    - 或 -
                <paramref name="type" /> 并不属于类型 <see cref="T:System.Reflection.Emit.TypeBuilder" />。
                
                    - 或 -
                <paramref name="constructor" /> 的声明类型不是泛型类型定义。
                
                    - 或 -
                <paramref name="constructor" /> 的声明类型不是 <paramref name="type" /> 的泛型类型定义。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>
                    按照指定，返回 <see cref="T:System.Reflection.ConstructorInfo" /> 对象的数组，这些对象表示为此类定义的公共和非公共构造函数。
                </summary>
      <returns>
                    返回 <see cref="T:System.Reflection.ConstructorInfo" /> 对象的数组，这些对象表示为此类定义的指定构造函数。如果未定义任何构造函数，则返回空数组。
                </returns>
      <param name="bindingAttr">
                    这必须是来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志，与 InvokeMethod、NonPublic 等中的一样。
                </param>
      <exception cref="T:System.NotSupportedException">
对于不完整的类型，不实现此方法。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)">
      <summary>
                    返回为此类型定义的所有自定义属性。
                </summary>
      <returns>
                    返回对象的数组，这些对象表示此类型的所有自定义属性。
                </returns>
      <param name="inherit">
指定是否搜索该成员的继承链以查找这些属性。
                </param>
      <exception cref="T:System.NotSupportedException">
对于不完整类型，目前不支持此方法。使用 <see cref="M:System.Type.GetType" /> 检索类型，并对返回的 <see cref="T:System.Type" /> 调用 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
                    返回当前类型的所有自定义属性，可以将这些属性分配给指定类型。
                </summary>
      <returns>
                    针对当前类型定义的自定义属性的数组。
                </returns>
      <param name="attributeType">
要搜索的属性类型。只返回可分配给此类型的属性。
                </param>
      <param name="inherit">
指定是否搜索该成员的继承链以查找这些属性。
                </param>
      <exception cref="T:System.NotSupportedException">
对于不完整类型，目前不支持此方法。使用 <see cref="M:System.Type.GetType" /> 检索类型，并对返回的 <see cref="T:System.Type" /> 调用 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                    该类型必须是基础运行库系统提供的类型。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetElementType">
      <summary>
                    调用此方法始终引发 <see cref="T:System.NotSupportedException" />。
                </summary>
      <returns>
                    不支持此方法。不返回任何值。
                </returns>
      <exception cref="T:System.NotSupportedException">
                    不支持此方法。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>
                    返回具有指定名称的事件。
                </summary>
      <returns>
                    一个 <see cref="T:System.Reflection.EventInfo" /> 对象，表示这个指定名称的类型声明或继承的事件；如果没有匹配项，则为 null。
                </returns>
      <param name="name">
                    要搜索的事件名称。
                </param>
      <param name="bindingAttr">
                    用于限制搜索的 <see cref="T:System.Reflection.BindingFlags" /> 值的按位组合。
                </param>
      <exception cref="T:System.NotSupportedException">
对于不完整的类型，不实现此方法。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents">
      <summary>
                    返回此类型声明或继承的公共事件。
                </summary>
      <returns>
                    返回 <see cref="T:System.Reflection.EventInfo" /> 对象的数组，这些对象表示此类型声明或继承的公共事件。如果没有公共事件，则返回空数组。
                </returns>
      <exception cref="T:System.NotSupportedException">
对于不完整的类型，不实现此方法。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>
                    返回此类型声明的公共和非公共事件。
                </summary>
      <returns>
                    返回 <see cref="T:System.Reflection.EventInfo" /> 对象的数组，这些对象表示此类型声明或继承的事件，而这些事件与指定的绑定标志匹配。如果没有匹配的事件，则返回空数组。
                </returns>
      <param name="bindingAttr">
                    用于限制搜索的 <see cref="T:System.Reflection.BindingFlags" /> 值的按位组合。
                </param>
      <exception cref="T:System.NotSupportedException">
对于不完整的类型，不实现此方法。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>
                    返回由给定名称指定的字段。
                </summary>
      <returns>
                    返回 <see cref="T:System.Reflection.FieldInfo" /> 对象，该对象表示此类型声明或继承且具有指定名称和公共或非公共修饰符的字段。如果没有匹配项，则返回 null。
                </returns>
      <param name="name">
                    要获取的字段的名称。
                </param>
      <param name="bindingAttr">
                    这必须是来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志，与 InvokeMethod、NonPublic 等中的一样。
                </param>
      <exception cref="T:System.NotSupportedException">
对于不完整的类型，不实现此方法。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)">
      <summary>
                    返回指定的构造泛型类型的字段，该字段对应于泛型类型定义的指定字段。
                </summary>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 对象表示 <paramref name="type" /> 的字段，该字段对应于 <paramref name="field" />，用于指定属于泛型类型定义 <paramref name="type" /> 的一个字段。
                </returns>
      <param name="type">
                    返回其字段的构造泛型类型。
                </param>
      <param name="field">
                    泛型类型定义 <paramref name="type" /> 中的一个字段，用于指定要返回 <paramref name="type" /> 的哪一个字段。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不表示泛型类型。
                
                    - 或 -
                <paramref name="type" /> 并不属于类型 <see cref="T:System.Reflection.Emit.TypeBuilder" />。
                
                    - 或 -
                <paramref name="field" /> 的声明类型不是泛型类型定义。
                
                    - 或 -
                <paramref name="field" /> 的声明类型不是 <paramref name="type" /> 的泛型类型定义。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>
                    返回此类型声明的公共和非公共字段。
                </summary>
      <returns>
                    返回 <see cref="T:System.Reflection.FieldInfo" /> 对象的数组，这些对象表示此类型声明或继承的公共和非公共字段。按照指定，如果没有任何字段，则返回空数组。
                </returns>
      <param name="bindingAttr">
                    这必须是来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志：InvokeMethod、NonPublic 等。
                </param>
      <exception cref="T:System.NotSupportedException">
对于不完整的类型，不实现此方法。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericArguments">
      <summary>
                    返回一个 <see cref="T:System.Type" /> 对象的数组，这些对象表示泛型类型的类型变量或泛型类型定义的类型参数。
                </summary>
      <returns>
        <see cref="T:System.Type" /> 对象的数组。该数组的元素表示泛型类型的类型变量或泛型类型定义的类型参数。
                </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition">
      <summary>
                    返回的 <see cref="T:System.Type" /> 对象表示一个泛型类型定义，可以从该定义中获取当前类型。
                </summary>
      <returns>
        <see cref="T:System.Type" /> 对象表示一个泛型类型定义，可以从该定义中获取当前类型。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    当前类型不是泛型类型。即，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 返回 false。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)">
      <summary>
                    返回由此类直接或间接实现的接口，该接口具有与给定接口名匹配的完全限定名。
                </summary>
      <returns>
                    返回 <see cref="T:System.Type" /> 对象，该对象表示实现的接口。如果未找到名称匹配的接口，则返回空。
                </returns>
      <param name="name">
                    接口名。
                </param>
      <param name="ignoreCase">
                    如果为 true，则搜索不区分大小写。如果为 false，则搜索区分大小写。
                </param>
      <exception cref="T:System.NotSupportedException">
对于不完整的类型，不实现此方法。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)">
      <summary>
                    返回请求的接口的接口映射。
                </summary>
      <returns>
                    返回请求的接口映射。
                </returns>
      <param name="interfaceType">
                    为其检索映射的接口的 <see cref="T:System.Type" />。
                </param>
      <exception cref="T:System.NotSupportedException">
对于不完整的类型，不实现此方法。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaces">
      <summary>
                    返回在此类型及其基类型上实现的所有接口的数组。
                </summary>
      <returns>
                    返回 <see cref="T:System.Type" /> 对象的数组，这些对象表示实现的接口。如果一个都没有定义，则返回空数组。
                </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>
                    按照指定，返回此类型声明或继承的所有公共和非公共成员。
                </summary>
      <returns>
                    如果使用 <paramref name="nonPublic" />，则返回 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组，这些对象表示在此类型上定义的公共和非公共成员；否则，仅返回公共成员。
                </returns>
      <param name="name">
                    成员名。
                </param>
      <param name="type">
                    返回的成员的类型。
                </param>
      <param name="bindingAttr">
                    这必须是来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志，与 InvokeMethod、NonPublic 等中的一样。
                </param>
      <exception cref="T:System.NotSupportedException">
对于不完整的类型，不实现此方法。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>
                    返回由此类型声明或继承的公共和非公共成员的成员。
                </summary>
      <returns>
                    返回 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组，这些对象表示此类型声明或继承的公共和非公共成员。如果没有匹配的成员，则返回空数组。
                </returns>
      <param name="bindingAttr">
                    这必须是来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志，如 InvokeMethod、NonPublic 等。
                </param>
      <exception cref="T:System.NotSupportedException">
对于不完整的类型，不实现此方法。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)">
      <summary>
                    返回指定的构造泛型类型的方法，该方法对应于泛型类型定义的指定字段。
                </summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 对象表示 <paramref name="type" /> 的方法，该方法对应于 <paramref name="method" />，用于指定属于泛型类型定义 <paramref name="type" /> 的一个方法。
                </returns>
      <param name="type">
                    返回其方法的构造泛型类型。
                </param>
      <param name="method">
                    泛型类型定义 <paramref name="type" /> 中的一个方法，用于指定要返回 <paramref name="type" /> 的哪一个方法。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 是非泛型方法定义的泛型方法。
                
                    - 或 -
                <paramref name="type" /> 不表示泛型类型。
                
                    - 或 -
                <paramref name="type" /> 并不属于类型 <see cref="T:System.Reflection.Emit.TypeBuilder" />。
                
                    - 或 -
                <paramref name="method" /> 的声明类型不是泛型类型定义。
                
                    - 或 -
                <paramref name="method" /> 的声明类型不是 <paramref name="type" /> 的泛型类型定义。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>
                    按照指定，返回此类型声明或继承的所有公共和非公共方法。
                </summary>
      <returns>
                    如果使用 <paramref name="nonPublic" />，则返回 <see cref="T:System.Reflection.MethodInfo" /> 对象的数组，这些对象表示在此类型上定义的公共和非公共方法；否则，仅返回公共方法。
                </returns>
      <param name="bindingAttr">
                    这必须是来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志，与 InvokeMethod、NonPublic 等中的一样。
                </param>
      <exception cref="T:System.NotSupportedException">
对于不完整的类型，不实现此方法。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>
                    返回此类型声明的公共和非公共嵌套类型。
                </summary>
      <returns>
                    表示符合指定要求的嵌套类型的 <see cref="T:System.Type" /> 对象（如果找到的话）；否则为 null。
                </returns>
      <param name="name">
                    包含要获取的嵌套类型的名称的 <see cref="T:System.String" />。
                </param>
      <param name="bindingAttr">
                    一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。
                
                    - 或 -
                
                    零，表示对公共方法执行区分大小写的搜索。
                </param>
      <exception cref="T:System.NotSupportedException">
对于不完整的类型，不实现此方法。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>
                    返回此类型声明或继承的公共和非公共嵌套类型。
                </summary>
      <returns>
                    表示嵌套在当前 <see cref="T:System.Type" /> 中的匹配指定绑定约束的所有类型的 <see cref="T:System.Type" /> 对象数组。
                
                    如果没有嵌套在当前 <see cref="T:System.Type" /> 中的类型，或者如果没有一个嵌套类型匹配绑定约束，则为 <see cref="T:System.Type" /> 类型的空数组。
                </returns>
      <param name="bindingAttr">
                    这必须是来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志，与 InvokeMethod、NonPublic 等中的一样。
                </param>
      <exception cref="T:System.NotSupportedException">
对于不完整的类型，不实现此方法。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>
                    按照指定，返回此类型声明或继承的所有公共和非公共属性。
                </summary>
      <returns>
                    如果使用 <paramref name="nonPublic" />，则返回 PropertyInfo 对象的数组，这些对象表示在此类型上定义的公共和非公共属性；否则，仅返回公共属性。
                </returns>
      <param name="bindingAttr">
                    此调用属性。这必须是来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志：InvokeMethod、NonPublic 等。
                </param>
      <exception cref="T:System.NotSupportedException">
对于不完整的类型，不实现此方法。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GUID">
      <summary>
                    检索此类型的 GUID。
                </summary>
      <returns>
只读。检索此类型的 GUID
                </returns>
      <exception cref="T:System.NotSupportedException">
对于不完整类型，目前不支持此方法。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>
                    调用指定的成员。在指定联编程序和调用属性的约束下，要调用的方法必须是可访问的，而且提供与指定参数列表最精确的匹配。
                </summary>
      <returns>
                    返回被调用成员的返回值。
                </returns>
      <param name="name">
                    要调用的成员的名称。它可以是构造函数、方法、属性或字段。必须指定合适的调用属性。请注意，可以通过将空字符串作为成员名称传递来调用类的默认成员。
                </param>
      <param name="invokeAttr">
                    调用属性。这必须是来自 BindingFlags 的位标志。
                </param>
      <param name="binder">
                    一个对象，它使用反射启用绑定、参数类型的强制、成员的调用和 MemberInfo 对象的检索。如果 binder 为 null，则使用默认联编程序。请参见 <see cref="T:System.Reflection.Binder" />。
                </param>
      <param name="target">
                    对其调用指定成员的对象。如果该成员是静态的，则忽略此参数。
                </param>
      <param name="args">
                    参数列表。这是一个对象数组，包含要调用的成员的参数的数目、顺序和类型。如果没有参数，则它应为 null。
                </param>
      <param name="modifiers">
                    与 <paramref name="args" /> 长度相同的数组，其元素表示与要调用的成员的参数相关联的属性。参数在元数据中有关联的属性。它们由各种交互操作服务使用。有关更多详细信息，请参见元数据规范。
                </param>
      <param name="culture">
                    用于控制类型强制的 CultureInfo 的实例。如果这是 null，则使用当前线程的 CultureInfo。（注意，这对于某些转换是必要的，例如，将表示 1000 的 String 转换为 Double 值，因为不同区域性的 1000 表示形式不同。）
                </param>
      <param name="namedParameters">
        <paramref name="namedParameters" /> 数组中的每一个参数获取 <paramref name="args" /> 数组中相应元素中的值。如果 <paramref name="args" /> 的长度大于 <paramref name="namedParameters" /> 的长度，则按顺序传递剩余的参数值。
                </param>
      <exception cref="T:System.NotSupportedException">
对于不完整类型，目前不支持此方法。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)">
      <summary>
                    确定当前的 <see cref="T:System.Type" /> 的实例是否可以从指定 Type 的实例分配。
                </summary>
      <returns>
                    如果 <paramref name="c" /> 参数和当前的 <see cref="T:System.Type" /> 表示同一类型，或者如果当前的 Type 在 <paramref name="c" /> 的继承层次结构中，或者如果当前的 Type 是 <paramref name="c" /> 所支持的接口，则为 true。如果这些条件都不成立，或者如果 <paramref name="c" /> 为空引用（在 Visual Basic 中为 Nothing），则为 false。
                </returns>
      <param name="c">
                    与当前的 Type 进行比较的 Type。
                </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsCreated">
      <summary>
                    返回一个值，该值指示是否已创建当前动态类型。
                </summary>
      <returns>
                    如果已调用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>
                    确定是否将自定义属性应用于当前类型。
                </summary>
      <returns>
                    如果针对此类型定义了 <paramref name="attributeType" /> 的一个或多个实例，或定义了一个从 <paramref name="attributeType" /> 派生的属性，则为 true；否则为 false。
                </returns>
      <param name="attributeType">
要搜索的属性类型。只返回可分配给此类型的属性。
                </param>
      <param name="inherit">
指定是否搜索该成员的继承链以查找这些属性。
                </param>
      <exception cref="T:System.NotSupportedException">
                    对于不完整类型，目前不支持此方法。使用 <see cref="M:System.Type.GetType" /> 检索类型，并对返回的 <see cref="T:System.Type" /> 调用 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 未定义。
                </exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericParameter">
      <summary>
                    获取一个值，该值指示当前类型是否为泛型类型参数。
                </summary>
      <returns>
                    如果当前 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 对象表示泛型类型参数，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericType">
      <summary>
                    获取一个值，该值指示当前类型是否为泛型类型。
                </summary>
      <returns>
                    如果当前的 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 对象表示的类型为泛型，则为true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition">
      <summary>
                    获取一个值，该值指示当前 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 是否表示一个泛型类型定义，可以根据该定义构造其他的泛型类型。
                </summary>
      <returns>
                    如果此 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 对象表示泛型类型定义，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)">
      <summary>
                    确定此类型是否从指定的类型派生而来。
                </summary>
      <returns>
                    只读。如果此类型与 <paramref name="c" /> 类型相同，或是 <paramref name="c" /> 类型的子类型，则返回 true；否则返回 false。
                </returns>
      <param name="c">
                    要检查的 <see cref="T:System.Type" />。
                </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType">
      <summary>
                    返回 <see cref="T:System.Type" /> 对象，该对象表示一个当前类型的一维数组，其下限为零。
                </summary>
      <returns>
        <see cref="T:System.Type" /> 对象表示一个一维数组类型，其元素类型为当前类型，其下限为零。
                </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)">
      <summary>
                    返回 <see cref="T:System.Type" /> 对象，该对象表示一个具有指定维数的当前类型的数组。
                </summary>
      <returns>
        <see cref="T:System.Type" /> 对象表示一个当前类型的一维数组。
                </returns>
      <param name="rank">
                    数组的维数。
                </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> 不是有效的数组维数。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeByRefType">
      <summary>
                    返回一个 <see cref="T:System.Type" /> 对象，该对象表示作为 ref（在 Visual Basic 中为 ByRef）参数传递的当前类型。
                </summary>
      <returns>
                    一个 <see cref="T:System.Type" /> 对象，表示作为 ref（在 Visual Basic 中为 ByRef）参数传递的当前类型。
                </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])">
      <summary>
                    用一个类型数组的元素取代当前泛型类型定义的类型参数，然后返回结果构造类型。
                </summary>
      <returns>
        <see cref="T:System.Type" /> 表示的构造类型通过以下方式形成：用 <paramref name="typeArguments" /> 的元素取代当前泛型类型的类型参数。
                </returns>
      <param name="typeArguments">
                    一个类型数组，用于取代当前泛型类型定义的类型参数。
                </param>
      <exception cref="T:System.InvalidOperationException">
                    当前类型不表示泛型类型的定义。即 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 返回 false。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> 为 null。
                
                    - 或 -
                <paramref name="typeArguments" /> 的所有元素均为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArguments" /> 中元素的个数不等于当前泛型类型定义中类型参数的个数。
                
                    - 或 -
                <paramref name="typeArguments" /> 的所有元素都不满足为当前泛型类型的对应类型参数指定的约束。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakePointerType">
      <summary>
                    返回一个 <see cref="T:System.Type" /> 对象，该对象表示指向当前类型的非托管指针的类型。
                </summary>
      <returns>
                    一个 <see cref="T:System.Type" /> 对象，表示指向当前类型的非托管指针的类型。
                </returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Module">
      <summary>
                    检索包含此类型定义的动态模块。
                </summary>
      <returns>
                    只读。检索包含此类型定义的动态模块。
                </returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Name">
      <summary>
                    检索此类型的名称。
                </summary>
      <returns>
                    只读。检索此类型的 <see cref="T:System.String" /> 名称。
                </returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Namespace">
      <summary>
                    检索定义此 TypeBuilder 的命名空间。
                </summary>
      <returns>
                    只读。检索定义此 TypeBuilder 的命名空间。
                </returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.PackingSize">
      <summary>
                    检索此类型的封装大小。
                </summary>
      <returns>
                    只读。检索此类型的封装大小。
                </returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.ReflectedType">
      <summary>
                    返回用于获取此类型的类型。
                </summary>
      <returns>
                    只读。用于获取此类型的类型。
                </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>
                    使用指定的自定义属性 Blob 设置自定义属性。
                </summary>
      <param name="con">
                    自定义属性的构造函数。
                </param>
      <param name="binaryAttribute">
                    表示属性的字节 Blob。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 属性为 false。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>
                    使用自定义属性生成器设置自定义属性。
                </summary>
      <param name="customBuilder">
                    定义自定义属性的帮助器类的实例。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 属性为 false。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)">
      <summary>
                    为当前构造中的类型设置基类型。
                </summary>
      <param name="parent">
                    新的基类型。
                </param>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                
                    - 或 -
                <paramref name="parent" /> 为 null，当前的实例表示一个接口，该接口的属性不包括 <see cref="F:System.Reflection.TypeAttributes.Abstract" />。
                
                    - 或 -
                
                    对于当前动态类型，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 属性为 true，而 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 属性为 false。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parent" /> 是一个接口。此异常条件是 .NET Framework 2.0 版中新增的。
                </exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Size">
      <summary>
                    检索此类型的总大小。
                </summary>
      <returns>
                    只读。检索此类型的总大小。
                </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>
                    将一组名称映射为对应的一组调度标识符。
                </summary>
      <param name="riid">
保留供将来使用。必须为 IID_NULL。
                </param>
      <param name="rgszNames">
                    要映射的名称的传入数组。
                </param>
      <param name="cNames">
                    要映射的名称的计数。
                </param>
      <param name="lcid">
                    要在其中解释名称的区域设置上下文。
                </param>
      <param name="rgDispId">
                    调用方分配的数组，用于接收与名称对应的 ID。
                </param>
      <exception cref="T:System.NotImplementedException">
                    不支持使用 COM IDispatch 接口进行后期绑定访问。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>
                    检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
                </summary>
      <param name="iTInfo">
                    要返回的类型信息。
                </param>
      <param name="lcid">
                    类型信息的区域设置标识符。
                </param>
      <param name="ppTInfo">
                    接收一个指针，指向请求的类型信息对象。
                </param>
      <exception cref="T:System.NotImplementedException">
                    不支持使用 COM IDispatch 接口进行后期绑定访问。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfoCount(System.UInt32@)">
      <summary>
                    检索对象提供的类型信息接口的数量（0 或 1）。
                </summary>
      <param name="pcTInfo">
                    指向一个位置，该位置接收对象提供的类型信息接口的数量。
                </param>
      <exception cref="T:System.NotImplementedException">
                    不支持使用 COM IDispatch 接口进行后期绑定访问。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>
                    提供对某一对象公开的属性和方法的访问。
                </summary>
      <param name="dispIdMember">
                    标识成员。
                </param>
      <param name="riid">
保留供将来使用。必须为 IID_NULL。
                </param>
      <param name="lcid">
                    要在其中解释参数的区域设置上下文。
                </param>
      <param name="wFlags">
                    描述调用的上下文的标志。
                </param>
      <param name="pDispParams">
                    指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组中元素数的计数。
                </param>
      <param name="pVarResult">
                    指向要存储结果的位置的指针。
                </param>
      <param name="pExcepInfo">
                    指向一个包含异常信息的结构的指针。
                </param>
      <param name="puArgErr">
                    第一个出错参数的索引。
                </param>
      <exception cref="T:System.NotImplementedException">
                    不支持使用 COM IDispatch 接口进行后期绑定访问。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.ToString">
      <summary>
                    返回不包括命名空间的类型名称。
                </summary>
      <returns>
                    只读。不包括命名空间的类型名称。
                </returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeHandle">
      <summary>
在动态模块中不支持。
                </summary>
      <returns>
只读。
                </returns>
      <exception cref="T:System.NotSupportedException">
在动态模块中不支持。
                </exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeToken">
      <summary>
                    返回此类型的类型标记。
                </summary>
      <returns>
                    只读。返回此类型的 TypeToken。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                </exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType">
      <summary>
                    返回此 TypeBuilder 的基础系统类型。
                </summary>
      <returns>
                    只读。返回基础系统类型。
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    此类型是枚举，但是没有基础系统类型。
                </exception>
    </member>
    <member name="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize">
      <summary>
                    表示不指定此类型的总大小。
                </summary>
    </member>
    <member name="T:System.Reflection.Emit.TypeToken">
      <summary>表示由元数据返回以表示类型的 Token。</summary>
    </member>
    <member name="F:System.Reflection.Emit.TypeToken.Empty">
      <summary>
        <see cref="P:System.Reflection.Emit.TypeToken.Token" /> 值为 0 的默认 TypeToken。</summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.Equals(System.Object)">
      <summary>检查给定对象是否为 TypeToken 的实例和是否等于此实例。</summary>
      <returns>
如果 <paramref name="obj" /> 为 TypeToken 的实例并且等于此对象，则为 true；否则，为 false。</returns>
      <param name="obj">与此 TypeToken 进行比较的对象。 </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.Equals(System.Reflection.Emit.TypeToken)">
      <summary>指示当前实例是否等于指定的 <see cref="T:System.Reflection.Emit.TypeToken" />。</summary>
      <returns>
如果 <paramref name="obj" /> 的值等于当前实例的值，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的 <see cref="T:System.Reflection.Emit.TypeToken" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.GetHashCode">
      <summary>生成该类型的哈希代码。</summary>
      <returns>返回该类型的哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.op_Equality(System.Reflection.Emit.TypeToken,System.Reflection.Emit.TypeToken)">
      <summary>指示两个 <see cref="T:System.Reflection.Emit.TypeToken" /> 结构是否等同。</summary>
      <returns>
如果 <paramref name="a" /> 等于 <paramref name="b" />，则为 true；否则为 false。</returns>
      <param name="a">要与 <paramref name="b" /> 进行比较的 <see cref="T:System.Reflection.Emit.TypeToken" />。</param>
      <param name="b">要与 <paramref name="a" /> 进行比较的 <see cref="T:System.Reflection.Emit.TypeToken" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.op_Inequality(System.Reflection.Emit.TypeToken,System.Reflection.Emit.TypeToken)">
      <summary>指示两个 <see cref="T:System.Reflection.Emit.TypeToken" /> 结构是否相等。</summary>
      <returns>
如果 <paramref name="a" /> 不等于 <paramref name="b" />，则为 true；否则为 false。</returns>
      <param name="a">要与 <paramref name="b" /> 进行比较的 <see cref="T:System.Reflection.Emit.TypeToken" />。</param>
      <param name="b">要与 <paramref name="a" /> 进行比较的 <see cref="T:System.Reflection.Emit.TypeToken" />。</param>
    </member>
    <member name="P:System.Reflection.Emit.TypeToken.Token">
      <summary>检索此类的元数据标记。</summary>
      <returns>只读。检索此类型的元数据标记。</returns>
    </member>
    <member name="T:System.Reflection.Emit.UnmanagedMarshal">
      <summary>表示说明如何将字段从托管代码封送为非托管代码的类。无法继承此类。</summary>
    </member>
    <member name="P:System.Reflection.Emit.UnmanagedMarshal.BaseType">
      <summary>获取非托管基类型。此属性为只读。</summary>
      <returns>UnmanagedType 对象。</returns>
      <exception cref="T:System.ArgumentException">非托管类型不是 LPArray 或 SafeArray。</exception>
    </member>
    <member name="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
      <summary>指定要封送为非托管代码的固定长度的数组 (ByValArray)。</summary>
      <returns>一个 <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> 对象。</returns>
      <param name="elemCount">固定长度数组中的元素数目。</param>
      <exception cref="T:System.ArgumentException">该参数不是简单本机类型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
      <summary>指定要封送为非托管代码的固定数组缓冲区 (ByValTStr) 中的字符串。</summary>
      <returns>一个 <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> 对象。</returns>
      <param name="elemCount">固定数组缓冲区中的元素数目。</param>
      <exception cref="T:System.ArgumentException">该参数不是简单本机类型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
      <summary>指定要封送为非托管代码的 LPArray。LPArray 的长度在运行时由实际的已封送数组的大小确定。</summary>
      <returns>一个 <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> 对象。</returns>
      <param name="elemType">要将数组封送为的非托管类型。</param>
      <exception cref="T:System.ArgumentException">该参数不是简单本机类型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
      <summary>指定要封送为非托管代码的 SafeArray。</summary>
      <returns>一个 <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> 对象。</returns>
      <param name="elemType">数组的每个元素的基类型或 UnmanagedType。</param>
      <exception cref="T:System.ArgumentException">该参数不是简单本机类型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
      <summary>指定要封送为非托管代码的给定类型。</summary>
      <returns>一个 <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> 对象。</returns>
      <param name="unmanagedType">要将该类型封送到的非托管类型。</param>
      <exception cref="T:System.ArgumentException">该参数不是简单本机类型。</exception>
    </member>
    <member name="P:System.Reflection.Emit.UnmanagedMarshal.ElementCount">
      <summary>获取数字元素。此属性为只读。</summary>
      <returns>指示元素计数的整数。</returns>
      <exception cref="T:System.ArgumentException">该参数不是非托管元素计数。</exception>
    </member>
    <member name="P:System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType">
      <summary>指示非托管类型。此属性为只读。</summary>
      <returns>一个 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 对象。</returns>
    </member>
    <member name="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
      <summary>获取 GUID。此属性为只读。</summary>
      <returns>一个 <see cref="T:System.Guid" /> 对象。</returns>
      <exception cref="T:System.ArgumentException">该参数不是自定义封送拆收器。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
      <summary>
                    初始化匿名承载的动态方法，指定方法名称、返回类型和参数类型。
                </summary>
      <param name="name">
动态方法的名称。可以是长度为零的字符串，但不能为 null。
                </param>
      <param name="returnType">
                    一个 <see cref="T:System.Type" /> 对象，它指定动态方法的返回类型；如果方法没有返回类型，则为 null。
                </param>
      <param name="parameterTypes">
                    一个 <see cref="T:System.Type" /> 对象数组，它指定动态方法的参数的类型；如果方法没有参数，则为 null。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> 的一个元素为 null 或 <see cref="T:System.Void" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 为 <see cref="P:System.Type.IsByRef" /> 返回 true 的类型。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
      <summary>
                    初始化匿名承载的动态方法，指定方法名称、返回类型、参数类型，并指定动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员是否应跳过实时 (JIT) 可见性检查。
                </summary>
      <param name="name">
动态方法的名称。可以是长度为零的字符串，但不能为 null。
                </param>
      <param name="returnType">
                    一个 <see cref="T:System.Type" /> 对象，它指定动态方法的返回类型；如果方法没有返回类型，则为 null。
                </param>
      <param name="parameterTypes">
                    一个 <see cref="T:System.Type" /> 对象数组，它指定动态方法的参数的类型；如果方法没有参数，则为 null。
                </param>
      <param name="restrictedSkipVisibility">
                    若要跳过对动态方法的 MSIL 访问的类型和方法的 JIT 可见性检查，则为 true，前提是：包含这些类型和成员的程序集的信任级别必须等于或低于发出动态方法的调用堆栈的信任级别；否则为 false。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> 的一个元素为 null 或 <see cref="T:System.Void" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 为 <see cref="P:System.Type.IsByRef" /> 返回 true 的类型。
                </exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>在已知包含属性、调用约定、属性类型、属性参数以及返回类型和参数的自定义修饰符的动态模块的情况下，返回属性的签名帮助器。</summary>
      <returns>属性的 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 对象。</returns>
      <param name="mod">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />，其中包含为其请求 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 的属性。</param>
      <param name="callingConvention">属性访问器的调用约定。</param>
      <param name="returnType">属性类型。</param>
      <param name="requiredReturnTypeCustomModifiers">一个表示返回类型必需的自定义修饰符的类型数组，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。如果返回类型没有必需的自定义修饰符，请指定 null。</param>
      <param name="optionalReturnTypeCustomModifiers">一个表示返回类型的可选自定义修饰符的类型数组，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。如果返回类型没有可选的自定义修饰符，请指定 null。</param>
      <param name="parameterTypes">属性的参数类型，如果属性没有参数，则为 null。</param>
      <param name="requiredParameterTypeCustomModifiers">由类型数组组成的数组。每个类型数组均表示属性的相应参数所必需的自定义修饰符。如果某个特定参数没有必需的自定义修饰符，请指定 null，而不要指定类型数组。如果属性没有参数，或者所有参数都没有必需的自定义修饰符，请指定 null，而不要指定由数组组成的数组。</param>
      <param name="optionalParameterTypeCustomModifiers">由类型数组组成的数组。每个类型数组均表示属性的相应参数的可选自定义修饰符。如果某个特定参数没有可选的自定义修饰符，请指定 null，而不要指定类型数组。如果属性没有参数，或者所有参数都没有可选的自定义修饰符，请指定 null，而不要指定由数组组成的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> 为 null。- 或 -<paramref name="parameterTypes" /> 的一个元素为 null。- 或 -其中一个指定的自定义修饰符为 null。（但是，可以为任何参数的自定义修饰符的数组指定 null。）</exception>
      <exception cref="T:System.ArgumentException">已完成签名- 或 -<paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。- 或 -指定的自定义修饰符之一为数组类型。- 或 -指定的自定义修饰符之一为开放 (Open) 泛型类型。也就是说，<see cref="P:System.Type.ContainsGenericParameters" /> 属性对于自定义修饰符为 true。- 或 -<paramref name="requiredParameterTypeCustomModifiers" /> 或 <paramref name="optionalParameterTypeCustomModifiers" /> 的大小与 <paramref name="parameterTypes" /> 的大小不相等。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>
                    用给定的名称、调用约定、属性签名和自定义修饰符，向类型中添加新属性。
                </summary>
      <returns>
已定义的属性。
                </returns>
      <param name="name">
                    属性的名称。<paramref name="name" /> 不能包含嵌入的空值。
                </param>
      <param name="attributes">
属性 (Property) 的属性 (Attribute)。
                </param>
      <param name="callingConvention">
                    属性访问器的调用约定。
                </param>
      <param name="returnType">
属性的返回类型。
                </param>
      <param name="returnTypeRequiredCustomModifiers">
                    一个类型数组，表示属性的返回类型所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。如果返回类型没有必需的自定义修饰符，请指定 null。
                </param>
      <param name="returnTypeOptionalCustomModifiers">
                    一个类型数组，表示属性的返回类型的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。如果返回类型没有可选的自定义修饰符，请指定 null。
                </param>
      <param name="parameterTypes">
属性的参数类型。
                </param>
      <param name="parameterTypeRequiredCustomModifiers">
由类型数组组成的数组。每个类型数组均表示相应参数所必需的自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。如果某个特定参数没有必需的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有必需的自定义修饰符，请指定 null，而不指定由数组构成的数组。
                </param>
      <param name="parameterTypeOptionalCustomModifiers">
由类型数组组成的数组。每个类型数组均表示相应参数的可选自定义修饰符，如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。如果某个特定参数没有可选的自定义修饰符，请指定 null，而不指定类型数组。如果没有参数具有可选的自定义修饰符，请指定 null，而不指定由数组构成的数组。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度为零。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。
                
                    - 或 -
                <paramref name="parameterTypes" /> 数组中有任何元素为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    该类型是以前用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 创建的。
                </exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnType">
      <summary>
                    获取由此 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 表示的方法的返回类型。
                </summary>
      <returns>
该方法的返回类型。
                </returns>
    </member>
    <member name="T:System.Resources.IResourceReader">
      <summary>提供从资源文件读取数据的基功能。</summary>
    </member>
    <member name="M:System.Resources.IResourceReader.Close">
      <summary>释放与资源阅读器关联的所有资源后将该阅读器关闭。</summary>
    </member>
    <member name="M:System.Resources.IResourceReader.GetEnumerator">
      <summary>返回此阅读器的资源的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</summary>
      <returns>此阅读器的资源的字典枚举数。</returns>
    </member>
    <member name="T:System.Resources.IResourceWriter">
      <summary>提供将资源写到输出文件或输出流的功能。</summary>
    </member>
    <member name="M:System.Resources.IResourceWriter.AddResource(System.String,System.Byte[])">
      <summary>将 8 位无符号整数数组作为命名资源添加到要写的资源列表中。</summary>
      <param name="name">资源的名称。 </param>
      <param name="value">8 位无符号整数数组形式的资源值。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。 </exception>
    </member>
    <member name="M:System.Resources.IResourceWriter.AddResource(System.String,System.Object)">
      <summary>将 <see cref="T:System.Object" /> 类型的已命名资源添加到要编写的资源列表中。</summary>
      <param name="name">资源名。 </param>
      <param name="value">资源值。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。 </exception>
    </member>
    <member name="M:System.Resources.IResourceWriter.AddResource(System.String,System.String)">
      <summary>将 <see cref="T:System.String" /> 类型的已命名资源添加到要编写的资源列表中。</summary>
      <param name="name">资源名。 </param>
      <param name="value">资源值。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 null。 </exception>
    </member>
    <member name="M:System.Resources.IResourceWriter.Close">
      <summary>关闭基础资源文件或流，并确保所有数据已写入该文件。</summary>
    </member>
    <member name="M:System.Resources.IResourceWriter.Generate">
      <summary>将所有由 <see cref="M:System.Resources.IResourceWriter.AddResource(System.String,System.String)" /> 方法添加的资源写到输出文件或输出流中。</summary>
    </member>
    <member name="T:System.Resources.MissingManifestResourceException">
      <summary>在以下情况下引发该异常：主程序集不包含非特定区域性的资源，而由于缺少相应的附属程序集，这些资源又是必需的。</summary>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Resources.MissingManifestResourceException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Resources.MissingManifestResourceException" /> 类的新实例。</summary>
      <param name="info">保存序列化对象数据的对象。 </param>
      <param name="context">有关异常的源或目标的上下文信息。 </param>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.Resources.MissingManifestResourceException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。 </param>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Resources.MissingManifestResourceException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。 </param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.Resources.MissingSatelliteAssemblyException">
      <summary>当非特定区域性资源的附属程序集丢失时引发的异常。</summary>
    </member>
    <member name="M:System.Resources.MissingSatelliteAssemblyException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Resources.MissingSatelliteAssemblyException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Resources.MissingSatelliteAssemblyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Resources.MissingSatelliteAssemblyException" /> 类的新实例。 </summary>
      <param name="info">保存序列化对象数据的对象。</param>
      <param name="context">有关异常的源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Resources.MissingSatelliteAssemblyException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.Resources.MissingSatelliteAssemblyException" /> 类的新实例。 </summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.Resources.MissingSatelliteAssemblyException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Resources.MissingSatelliteAssemblyException" /> 类的新实例。 </summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Resources.MissingSatelliteAssemblyException.#ctor(System.String,System.String)">
      <summary>用指定的错误信息和非特定区域性的名称初始化 <see cref="T:System.Resources.MissingSatelliteAssemblyException" /> 类的新实例。 </summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="cultureName">非特定区域性的名称。</param>
    </member>
    <member name="P:System.Resources.MissingSatelliteAssemblyException.CultureName">
      <summary>获取非特定区域性的名称。 </summary>
      <returns>具有非特定区域性的名称的 <see cref="T:System.String" /> 对象。</returns>
    </member>
    <member name="T:System.Resources.NeutralResourcesLanguageAttribute">
      <summary>向 <see cref="T:System.Resources.ResourceManager" /> 通知程序集的非特定区域性。无法继承此类。</summary>
    </member>
    <member name="M:System.Resources.NeutralResourcesLanguageAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> 类的新实例。</summary>
      <param name="cultureName">用其编写的当前程序集的非特定语言资源的区域性的名称。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cultureName" /> 参数为 null。 </exception>
    </member>
    <member name="M:System.Resources.NeutralResourcesLanguageAttribute.#ctor(System.String,System.Resources.UltimateResourceFallbackLocation)">
      <summary>使用指定的最终资源后备位置初始化 <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> 类的新实例。</summary>
      <param name="cultureName">用其编写的当前程序集的非特定语言资源的区域性的名称。</param>
      <param name="location">一个 <see cref="T:System.Resources.UltimateResourceFallbackLocation" /> 枚举值，指示检索非特定后备资源的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cultureName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="location" /> 不是 <see cref="T:System.Resources.UltimateResourceFallbackLocation" /> 的成员。</exception>
    </member>
    <member name="P:System.Resources.NeutralResourcesLanguageAttribute.CultureName">
      <summary>获取区域性名称。</summary>
      <returns>一个 <see cref="T:System.String" />，它具有主程序集的默认区域性的名称。</returns>
    </member>
    <member name="P:System.Resources.NeutralResourcesLanguageAttribute.Location">
      <summary>获取 <see cref="T:System.Resources.ResourceManager" /> 类的位置，以用于通过资源后备进程检索非特定语言资源。</summary>
      <returns>
        <see cref="T:System.Resources.UltimateResourceFallbackLocation" /> 枚举的值，指示从中检索非特定资源的位置（主程序集或附属程序集）。</returns>
    </member>
    <member name="T:System.Resources.ResourceManager">
      <summary>提供在运行时方便地访问区域性特定资源的途径。</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Resources.ResourceManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
      <summary>初始化 <see cref="T:System.Resources.ResourceManager" /> 类的新实例，该实例使用给定的 <see cref="T:System.Reflection.Assembly" /> 查找从指定根名称导出的文件中包含的资源。</summary>
      <param name="baseName">资源的根名称。例如，名为“MyResource.en-US.resources”的资源文件的根名称为“MyResource”。</param>
      <param name="assembly">资源的主 <see cref="T:System.Reflection.Assembly" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseName" /> 或 <paramref name="assembly" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
      <summary>初始化 <see cref="T:System.Resources.ResourceManager" /> 类的新实例，该实例使用给定的 <see cref="T:System.Reflection.Assembly" /> 查找从指定根名称导出的文件中包含的资源。</summary>
      <param name="baseName">资源的根名称。例如，名为“MyResource.en-US.resources”的资源文件的根名称为“MyResource”。</param>
      <param name="assembly">资源的主 <see cref="T:System.Reflection.Assembly" />。</param>
      <param name="usingResourceSet">要使用的自定义 <see cref="T:System.Resources.ResourceSet" /> 的 <see cref="T:System.Type" />。如果为 null，则使用默认的运行时 <see cref="T:System.Resources.ResourceSet" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="usingResourceset" /> 不是 <see cref="T:System.Resources.ResourceSet" /> 的派生类。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseName" /> 或 <paramref name="assembly" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.Type)">
      <summary>创建一个 <see cref="T:System.Resources.ResourceManager" />，它根据指定的 <see cref="T:System.Type" /> 中的信息在附属程序集内查找资源。</summary>
      <param name="resourceSource">一个 <see cref="T:System.Type" />，<see cref="T:System.Resources.ResourceManager" /> 从其中派生所有用于查找 .resources 文件的信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceSource" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Resources.ResourceManager.BaseName">
      <summary>获取 <see cref="T:System.Resources.ResourceManager" /> 从其中搜索资源的资源文件的根名称。</summary>
      <returns>
        <see cref="T:System.Resources.ResourceManager" /> 从其中搜索资源的资源文件的根名称。</returns>
    </member>
    <member name="F:System.Resources.ResourceManager.BaseNameField">
      <summary>指示 <see cref="T:System.Resources.ResourceManager" /> 在其中搜索资源的资源文件的根名称。</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
      <summary>返回一个 <see cref="T:System.Resources.ResourceManager" />，它在特定的目录中搜索资源而不在程序集清单中搜索资源。</summary>
      <returns>新创建的 <see cref="T:System.Resources.ResourceManager" />，它在特定的目录中搜索资源，而不在程序集清单中搜索资源。</returns>
      <param name="baseName">资源的根名称。例如，名为“MyResource.en-US.resources”的资源文件的根名称为“MyResource”。</param>
      <param name="resourceDir">要在其中搜索资源的目录的名称。</param>
      <param name="usingResourceSet">要使用的自定义 <see cref="T:System.Resources.ResourceSet" /> 的 <see cref="T:System.Type" />。如果为 null，则使用默认的运行时 <see cref="T:System.Resources.ResourceSet" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseName" /> 或 <paramref name="resourceDir" /> 参数为 null。</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Resources.ResourceManager.FallbackLocation">
      <summary>获取或设置检索非特定回退资源的位置。</summary>
      <returns>
        <see cref="T:System.Resources.UltimateResourceFallbackLocation" /> 值之一。</returns>
    </member>
    <member name="M:System.Resources.ResourceManager.GetNeutralResourcesLanguage(System.Reflection.Assembly)">
      <summary>通过读取指定的 <see cref="T:System.Reflection.Assembly" /> 上的 <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> 的值，为主程序集的非特定资源返回 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <returns>如果找到的话，则为 <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> 中的区域性；否则为 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />。</returns>
      <param name="a">要为其返回 <see cref="T:System.Globalization.CultureInfo" /> 的程序集。</param>
    </member>
    <member name="M:System.Resources.ResourceManager.GetObject(System.String)">
      <summary>返回指定的 <see cref="T:System.Object" /> 资源的值。</summary>
      <returns>针对调用方的当前区域性设置而本地化的资源的值。如果不可能有匹配项，则返回 null。资源值可以为 null。</returns>
      <param name="name">要获取的资源名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">未找到可用的资源集，并且没有非特定区域性的资源。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
      <summary>获取为指定区域性本地化的 <see cref="T:System.Object" /> 资源的值。</summary>
      <returns>为指定区域性本地化的资源的值。如果不可能有“最佳匹配”，则返回 null。</returns>
      <param name="name">要获取的资源名。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 对象，它表示资源被本地化为的区域性。注意，如果尚未为该区域性本地化此资源，则查找将使用区域性的 <see cref="P:System.Globalization.CultureInfo.Parent" /> 属性回退，并在签入非特定语言区域性后停止。如果该值为 null，则使用区域性的 <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> 属性获取 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">未找到可用的资源集，并且没有非特定区域性的资源。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)">
      <summary>生成给定的 <see cref="T:System.Globalization.CultureInfo" /> 的资源文件的名称。</summary>
      <returns>可用于给定的 <see cref="T:System.Globalization.CultureInfo" /> 的资源文件的名称。</returns>
      <param name="culture">为其构造资源文件名的 <see cref="T:System.Globalization.CultureInfo" />。</param>
    </member>
    <member name="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
      <summary>获取特定的区域性的 <see cref="T:System.Resources.ResourceSet" />。</summary>
      <returns>指定的 <see cref="T:System.Resources.ResourceSet" />。</returns>
      <param name="culture">要查找的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="createIfNotExists">如果为 true，并且 <see cref="T:System.Resources.ResourceSet" /> 尚未加载，则加载它。</param>
      <param name="tryParents">如果无法加载 <see cref="T:System.Resources.ResourceSet" />，则尝试父 <see cref="T:System.Globalization.CultureInfo" /> 对象，看它们是否存在。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetSatelliteContractVersion(System.Reflection.Assembly)">
      <summary>返回给定的程序集内的 <see cref="T:System.Resources.SatelliteContractVersionAttribute" /> 指定的 <see cref="T:System.Version" />。</summary>
      <returns>给定程序集的附属合同 <see cref="T:System.Version" />；如果未找到任何版本，则为 null。</returns>
      <param name="a">要为其查找 <see cref="T:System.Resources.SatelliteContractVersionAttribute" /> 的 <see cref="T:System.Reflection.Assembly" />。</param>
      <exception cref="T:System.ArgumentException">程序集 <paramref name="a" /> 中找到的 <see cref="T:System.Version" /> 无效。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetStream(System.String)">
      <summary>从指定的资源返回 <see cref="T:System.IO.UnmanagedMemoryStream" /> 对象。</summary>
      <returns>一个 <see cref="T:System.IO.UnmanagedMemoryStream" /> 对象。</returns>
      <param name="name">资源的名称。</param>
      <exception cref="T:System.InvalidOperationException">指定资源的值不是 <see cref="T:System.IO.MemoryStream" /> 对象。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">未找到可用的资源集，并且没有非特定资源。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
      <summary>使用指定的区域性从指定的资源返回 <see cref="T:System.IO.UnmanagedMemoryStream" /> 对象。</summary>
      <returns>一个 <see cref="T:System.IO.UnmanagedMemoryStream" /> 对象。</returns>
      <param name="name">资源的名称。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 对象，它指定用于资源查找的区域性。如果 <paramref name="culture" /> 为 null，则使用当前线程的区域性。</param>
      <exception cref="T:System.InvalidOperationException">指定资源的值不是 <see cref="T:System.IO.MemoryStream" /> 对象。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">未找到可用的资源集，并且没有非特定资源。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetString(System.String)">
      <summary>返回指定的 <see cref="T:System.String" /> 资源的值。</summary>
      <returns>针对调用方的当前区域性设置而本地化的资源的值。如果不可能有匹配项，则返回 null。</returns>
      <param name="name">要获取的资源名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定资源的值不是字符串。</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">未找到可用的资源集，并且没有非特定区域性的资源。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
      <summary>获取为指定区域性本地化的 <see cref="T:System.String" /> 资源的值。</summary>
      <returns>为指定区域性本地化的资源的值。如果不可能有最佳匹配，则返回 null。</returns>
      <param name="name">要获取的资源名。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 对象，它表示资源被本地化为的区域性。注意，如果尚未为该区域性本地化此资源，则查找将使用区域性的 <see cref="P:System.Globalization.CultureInfo.Parent" /> 属性回退，并在签入非特定语言区域性后停止。如果该值为 null，则使用区域性的 <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> 属性获取 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定资源的值不是 <see cref="T:System.String" />。</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">未找到可用的资源集，并且没有非特定区域性的资源。</exception>
    </member>
    <member name="F:System.Resources.ResourceManager.HeaderVersionNumber">
      <summary>一个常数 readonly 值，它指示 <see cref="T:System.Resources.ResourceManager" /> 的当前实现可解释和产生的资源文件头的版本。</summary>
    </member>
    <member name="P:System.Resources.ResourceManager.IgnoreCase">
      <summary>获取或设置布尔值，该值指示 ResourceManager 的当前实例是否允许在 <see cref="M:System.Resources.ResourceManager.GetString(System.String)" /> 和 <see cref="M:System.Resources.ResourceManager.GetObject(System.String)" /> 方法中进行不区分大小写的资源查找。</summary>
      <returns>一个布尔值，它指示是否应忽略资源名称的大小写。</returns>
    </member>
    <member name="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
      <summary>提供用于查找 <see cref="T:System.Resources.ResourceSet" /> 的实现</summary>
      <returns>指定的 <see cref="T:System.Resources.ResourceSet" />。</returns>
      <param name="culture">要查找的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="createIfNotExists">如果为 true，并且 <see cref="T:System.Resources.ResourceSet" /> 尚未加载，则加载它。</param>
      <param name="tryParents">如果无法加载 <see cref="T:System.Resources.ResourceSet" />，则尝试父 <see cref="T:System.Globalization.CultureInfo" /> 对象，看它们是否存在。</param>
      <exception cref="T:System.Resources.MissingManifestResourceException">主程序集不包含 .resources 文件，但查找资源需要此文件。</exception>
      <exception cref="T:System.ExecutionEngineException">运行库中存在内部错误。</exception>
      <exception cref="T:System.Resources.MissingSatelliteAssemblyException">无法找到与 <paramref name="culture" /> 关联的附属程序集。</exception>
    </member>
    <member name="F:System.Resources.ResourceManager.MagicNumber">
      <summary>保留用于标识资源文件的数字。</summary>
    </member>
    <member name="F:System.Resources.ResourceManager.MainAssembly">
      <summary>指示包含这些资源的主 <see cref="T:System.Reflection.Assembly" />。</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.ReleaseAllResources">
      <summary>通知 <see cref="T:System.Resources.ResourceManager" /> 对所有 <see cref="T:System.Resources.ResourceSet" /> 对象调用 <see cref="M:System.Resources.ResourceSet.Close" />，并释放所有资源。</summary>
    </member>
    <member name="F:System.Resources.ResourceManager.ResourceSets">
      <summary>包含 <see cref="T:System.Collections.Hashtable" />，它返回从区域性到 <see cref="T:System.Resources.ResourceSet" /> 对象的映射。</summary>
    </member>
    <member name="P:System.Resources.ResourceManager.ResourceSetType">
      <summary>获取 <see cref="T:System.Resources.ResourceManager" /> 用来构造 <see cref="T:System.Resources.ResourceSet" /> 对象的 <see cref="T:System.Resources.ResourceSet" /> 的 <see cref="T:System.Type" />。</summary>
      <returns>
        <see cref="T:System.Resources.ResourceManager" /> 用来构造 <see cref="T:System.Resources.ResourceSet" /> 对象的 <see cref="T:System.Resources.ResourceSet" /> 的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Resources.ResourceReader">
      <summary>枚举 .resources 文件和流，并读取顺序的资源名和资源值对。</summary>
    </member>
    <member name="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
      <summary>为指定的流初始化 <see cref="T:System.Resources.ResourceReader" /> 类的新实例。</summary>
      <param name="stream">用于读取资源的输入流。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可读。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 参数为 null。</exception>
      <exception cref="T:System.IO.IOException">在访问 <paramref name="stream" /> 时发生 I/O 错误。</exception>
      <exception cref="T:System.BadImageFormatException">资源文件的格式无效。例如，文件的长度为零。</exception>
    </member>
    <member name="M:System.Resources.ResourceReader.#ctor(System.String)">
      <summary>为指定的资源文件初始化 <see cref="T:System.Resources.ResourceReader" /> 类的新实例。</summary>
      <param name="fileName">要读取的资源文件的路径。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 参数为 null。</exception>
      <exception cref="T:System.IO.FileNotFoundException">无法找到该文件。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.BadImageFormatException">资源文件的格式无效。例如，文件的长度为零。</exception>
    </member>
    <member name="M:System.Resources.ResourceReader.Close">
      <summary>释放与此 <see cref="T:System.Resources.ResourceReader" /> 相关联的所有操作系统资源。</summary>
    </member>
    <member name="M:System.Resources.ResourceReader.GetEnumerator">
      <summary>返回该 <see cref="T:System.Resources.ResourceReader" /> 的枚举数。</summary>
      <returns>该 <see cref="T:System.Resources.ResourceReader" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</returns>
      <exception cref="T:System.ObjectDisposedException">读取器已关闭或已释放，因此无法访问。</exception>
    </member>
    <member name="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
      <summary>从打开的资源文件或流检索指定资源的类型名称和数据内容。</summary>
      <param name="resourceName">资源的名称。</param>
      <param name="resourceType">此方法返回时，包含一个字符串，该字符串为所检索类型的类型名称。该参数未经初始化即被传递。</param>
      <param name="resourceData">此方法返回时，包含一个字节数组，该字节数组为所检索类型的二进制表示形式。该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="resourceName" /> 不存在。</exception>
      <exception cref="T:System.FormatException">所检索的资源数据已损坏。</exception>
      <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Resources.ResourceReader" /> 对象尚未初始化。原因可能是 <see cref="T:System.Resources.ResourceReader" /> 对象已关闭。</exception>
    </member>
    <member name="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回该 <see cref="T:System.Resources.ResourceReader" /> 的枚举数。</summary>
      <returns>该 <see cref="T:System.Resources.ResourceReader" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
      <exception cref="T:System.InvalidOperationException">读取器已关闭，因而无法访问。</exception>
    </member>
    <member name="M:System.Resources.ResourceReader.System#IDisposable#Dispose">
      <summary>释放由 <see cref="T:System.Resources.ResourceReader" /> 占用的资源。</summary>
    </member>
    <member name="T:System.Resources.ResourceSet">
      <summary>存储已针对某个特定区域性进行了本地化的所有资源，忽略所有其他区域性（包括任何代用规则）。</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Resources.ResourceSet" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
      <summary>使用从给定流中读取资源的系统默认的 <see cref="T:System.Resources.ResourceReader" /> 来创建 <see cref="T:System.Resources.ResourceSet" /> 类的新实例。</summary>
      <param name="stream">要读取的资源的 <see cref="T:System.IO.Stream" />。流应引用现有的资源文件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可读。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)">
      <summary>使用指定的资源阅读器创建 <see cref="T:System.Resources.ResourceSet" /> 类的新实例。</summary>
      <param name="reader">将使用的读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor(System.String)">
      <summary>使用从给定文件打开并读取资源的系统默认的 <see cref="T:System.Resources.ResourceReader" /> 来创建 <see cref="T:System.Resources.ResourceSet" /> 类的新实例。</summary>
      <param name="fileName">要读取的资源文件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.Close">
      <summary>通过此 <see cref="T:System.Resources.ResourceSet" /> 来关闭和释放所有资源。</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.Dispose">
      <summary>处置由 <see cref="T:System.Resources.ResourceSet" /> 的当前实例使用的资源（内存除外）。</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.Dispose(System.Boolean)">
      <summary>释放与当前实例关联的资源（内存除外），并关闭内部托管对象（如果请求这样做）。</summary>
      <param name="disposing">指示是否应显式关闭当前实例中包含的对象。</param>
    </member>
    <member name="M:System.Resources.ResourceSet.GetDefaultReader">
      <summary>返回此类 <see cref="T:System.Resources.ResourceSet" /> 的首选资源读取器类。</summary>
      <returns>返回这类 <see cref="T:System.Resources.ResourceSet" /> 的首选资源阅读器的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Resources.ResourceSet.GetDefaultWriter">
      <summary>返回此类 <see cref="T:System.Resources.ResourceSet" /> 的首选资源编写器类。</summary>
      <returns>返回这类 <see cref="T:System.Resources.ResourceSet" /> 的首选资源编写器的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Resources.ResourceSet.GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IDictionaryEnumerator" />，它可以循环访问 <see cref="T:System.Resources.ResourceSet" />。</summary>
      <returns>该 <see cref="T:System.Resources.ResourceSet" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</returns>
      <exception cref="T:System.ObjectDisposedException">资源集已关闭或已释放。</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetObject(System.String)">
      <summary>搜索具有指定名称的资源对象。</summary>
      <returns>所请求的资源。</returns>
      <param name="name">要搜索的资源的区分大小写的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
      <summary>如果请求的话，按照不区分大小写的方式搜索具有指定名称的资源对象。</summary>
      <returns>所请求的资源。</returns>
      <param name="name">要搜索的资源的名称。</param>
      <param name="ignoreCase">指示是否应忽略指定名称的大小写。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetString(System.String)">
      <summary>搜索具有指定名称的 <see cref="T:System.String" /> 资源。</summary>
      <returns>当值是 <see cref="T:System.String" /> 时为资源的值。</returns>
      <param name="name">要搜索的资源的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
      <summary>如果请求的话，按照不区分大小写的方式搜索具有指定名称的 <see cref="T:System.String" /> 资源。</summary>
      <returns>当值是 <see cref="T:System.String" /> 时为资源的值。</returns>
      <param name="name">要搜索的资源的名称。</param>
      <param name="ignoreCase">指示是否应忽略指定名称的大小写。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
    </member>
    <member name="F:System.Resources.ResourceSet.Reader">
      <summary>指示用于读取资源的 <see cref="T:System.Resources.IResourceReader" />。</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.ReadResources">
      <summary>读取所有资源，并将它们存储在 <see cref="F:System.Resources.ResourceSet.Table" /> 属性中指示的 <see cref="T:System.Collections.Hashtable" /> 中。</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个 <see cref="T:System.Collections.IEnumerator" /> 对象，以避免与 Dispose 之间出现争用情况。不应直接在您的代码中使用此成员。</summary>
      <returns>当前 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象的 <see cref="T:System.Resources.ResourceSet" />。</returns>
    </member>
    <member name="F:System.Resources.ResourceSet.Table">
      <summary>存储资源的 <see cref="T:System.Collections.Hashtable" />。</summary>
    </member>
    <member name="T:System.Resources.ResourceWriter">
      <summary>以系统默认的格式将资源写入输出文件或输出流。无法继承此类。</summary>
    </member>
    <member name="M:System.Resources.ResourceWriter.#ctor(System.IO.Stream)">
      <summary>初始化 <see cref="T:System.Resources.ResourceWriter" /> 类的新实例，它将资源写入到提供的流中。</summary>
      <param name="stream">输出流。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 参数不可写。 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 参数为 null。 </exception>
    </member>
    <member name="M:System.Resources.ResourceWriter.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Resources.ResourceWriter" /> 类的新实例，它将资源写入到指定文件中。</summary>
      <param name="fileName">输出文件名。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 参数为 null。 </exception>
    </member>
    <member name="M:System.Resources.ResourceWriter.AddResource(System.String,System.Byte[])">
      <summary>将指定为字节数组的已命名资源添加到要写入的资源列表中。</summary>
      <param name="name">资源名。 </param>
      <param name="value">8 位无符号整数数组形式的资源值。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />（或仅大小写不同的名称）已被添加到该 <see cref="T:System.Resources.ResourceWriter" />。 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="value" /> 参数为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">该 <see cref="T:System.Resources.ResourceWriter" /> 已关闭，并且其 <see cref="T:System.Collections.Hashtable" /> 不可用。 </exception>
    </member>
    <member name="M:System.Resources.ResourceWriter.AddResource(System.String,System.Object)">
      <summary>将指定为对象的已命名资源添加到要写入的资源列表中。</summary>
      <param name="name">资源名。 </param>
      <param name="value">资源值。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />（或仅大小写不同的名称）已被添加到该 <see cref="T:System.Resources.ResourceWriter" />。 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="value" /> 参数为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">该 <see cref="T:System.Resources.ResourceWriter" /> 已关闭，并且其 <see cref="T:System.Collections.Hashtable" /> 不可用。 </exception>
    </member>
    <member name="M:System.Resources.ResourceWriter.AddResource(System.String,System.String)">
      <summary>向要写入的资源的列表中添加 <see cref="T:System.String" /> 资源。</summary>
      <param name="name">资源名。 </param>
      <param name="value">资源值。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />（或仅大小写不同的名称）已被添加到该 ResourceWriter 中。 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="value" /> 参数为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">该 <see cref="T:System.Resources.ResourceWriter" /> 已关闭，并且其 <see cref="T:System.Collections.Hashtable" /> 不可用。 </exception>
    </member>
    <member name="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])">
      <summary>将数据单位作为资源添加到要写入的资源列表中。 </summary>
      <param name="name">用于标识包含已添加数据的资源的名称。</param>
      <param name="typeName">已添加数据的类型名称。</param>
      <param name="serializedData">包含已添加数据的二进制表示形式的字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />、<paramref name="typeName" /> 或 <paramref name="serializedData" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />（或仅大小写不同的名称）已被添加到此 <see cref="T:System.Resources.ResourceWriter" /> 对象中。 </exception>
      <exception cref="T:System.InvalidOperationException">未初始化当前 <see cref="T:System.Resources.ResourceWriter" /> 对象。可能的原因是 <see cref="T:System.Resources.ResourceWriter" /> 对象已关闭。</exception>
    </member>
    <member name="M:System.Resources.ResourceWriter.Close">
      <summary>将资源保存到输出流，然后关闭输出流。</summary>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。 </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">对象序列化期间出现错误。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Resources.ResourceWriter.Dispose">
      <summary>允许用户关闭资源文件或流，从而显式地释放资源。</summary>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。 </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">对象序列化期间出现错误。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Resources.ResourceWriter.Generate">
      <summary>将所有资源以系统默认格式保存到输出流。</summary>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。 </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">对象序列化期间出现错误。 </exception>
      <exception cref="T:System.InvalidOperationException">该 <see cref="T:System.Resources.ResourceWriter" /> 已关闭，并且其 <see cref="T:System.Collections.Hashtable" /> 不可用。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Resources.SatelliteContractVersionAttribute">
      <summary>指示 <see cref="T:System.Resources.ResourceManager" /> 要求附属程序集的特定版本以简化应用程序的主程序集的更新。</summary>
    </member>
    <member name="M:System.Resources.SatelliteContractVersionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Resources.SatelliteContractVersionAttribute" /> 类的新实例。</summary>
      <param name="version">一个 <see cref="T:System.String" />，具有要加载的附属程序集的版本。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 参数为 null。 </exception>
    </member>
    <member name="P:System.Resources.SatelliteContractVersionAttribute.Version">
      <summary>获取具有所需资源的附属程序集的版本。</summary>
      <returns>一个 <see cref="T:System.String" />，它包含具有所需资源的附属程序集的版本。</returns>
    </member>
    <member name="T:System.Resources.UltimateResourceFallbackLocation">
      <summary>指定要使用的 <see cref="T:System.Resources.ResourceManager" /> 类的程序集，以使用 打包和部署资源 检索非特定资源。</summary>
    </member>
    <member name="F:System.Resources.UltimateResourceFallbackLocation.MainAssembly">
      <summary>回退资源位于主程序集中。</summary>
    </member>
    <member name="F:System.Resources.UltimateResourceFallbackLocation.Satellite">
      <summary>回退资源位于由 <see cref="P:System.Resources.NeutralResourcesLanguageAttribute.Location" /> 属性指定的位置中的附属程序集中。</summary>
    </member>
    <member name="T:System.Runtime.GCSettings">
      <summary>指定当前进程的垃圾回收设置。</summary>
    </member>
    <member name="P:System.Runtime.GCSettings.IsServerGC">
      <summary>获取一个值，该值指示是否启用了服务器垃圾回收。</summary>
      <returns>
            如果启用了服务器垃圾回收，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Runtime.MemoryFailPoint">
      <summary>执行之前检查是否有足够的内存资源。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Runtime.MemoryFailPoint" /> 类的新实例，指定成功执行所需的内存量。 </summary>
      <param name="sizeInMegabytes">需要的内存大小，以兆字节为单位。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的内存大小为负数。</exception>
      <exception cref="T:System.InsufficientMemoryException">没有足够的内存来开始执行由门保护的代码。</exception>
    </member>
    <member name="M:System.Runtime.MemoryFailPoint.Dispose">
      <summary>释放由 <see cref="T:System.Runtime.MemoryFailPoint" /> 使用的所有资源。 </summary>
    </member>
    <member name="T:System.Runtime.GCLatencyMode">
      <summary>调整垃圾收集器侵入应用程序的时间。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Batch">
      <summary>在批调用中禁用垃圾回收并发，并回收对象。这是最高级别的侵入模式。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Interactive">
      <summary>在应用程序运行时启用垃圾回收并发，并回收对象。这是工作站上垃圾回收的默认模式，并且较少受侵入。它可以平衡响应性和吞吐量。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.LowLatency">
      <summary>启用回收对象时比较保守的垃圾回收。仅在系统遇到内存压力时才发生完全回收，而通常情况下发生 0 代和 1 代回收。这是最低级别的侵入模式。</summary>
    </member>
    <member name="P:System.Runtime.GCSettings.LatencyMode">
      <summary>获取或设置垃圾收集的当前滞后时间模式。</summary>
      <returns>
        <see cref="T:System.Runtime.GCLatencyMode" /> 值之一。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute">
      <summary>指定访问属性化字段的属性的名称。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.#ctor(System.String)">
      <summary>使用用于访问属性化字段的属性的名称初始化 AccessedThroughPropertyAttribute 类的新实例。</summary>
      <param name="propertyName">用于访问属性化字段的属性的名称。 </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.PropertyName">
      <summary>获取用于访问属性化字段的属性的名称。</summary>
      <returns>用于访问属性化字段的属性的名称。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallConvCdecl">
      <summary>指示方法应使用 Cdecl 调用约定。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallConvCdecl.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallConvCdecl" /> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallConvFastcall">
      <summary>此版本的 .NET Framework 不支持该调用约定。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallConvFastcall.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallConvFastcall" /> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallConvStdcall">
      <summary>表明方法应使用 StdCall 调用约定。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallConvStdcall.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallConvStdcall" /> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallConvThiscall">
      <summary>指示方法应使用 ThisCall 调用约定。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallConvThiscall.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallConvThiscall" /> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxations">
      <summary>指定一些参数，这些参数控制由公共语言运行库的实时 (JIT) 编译器生成的代码的严格性。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning">
      <summary>将程序集标记为不需要字符串暂留。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute">
      <summary>控制由公共语言运行库的实时 (JIT) 编译器生成的代码的严格性。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Int32)">
      <summary>使用指定的编译松弛法初始化 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> 类的新实例。</summary>
      <param name="relaxations">编译松弛法。 </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Runtime.CompilerServices.CompilationRelaxations)">
      <summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> 值初始化 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> 类的新实例。 </summary>
      <param name="relaxations">
        <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> 值之一。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations">
      <summary>获取构造当前对象时指定的编译松弛法。</summary>
      <returns>构造当前对象时指定的编译松弛法。将 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> 枚举与 <see cref="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations" /> 属性一起使用。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute">
      <summary>区分编译器生成的元素与用户生成的元素。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGeneratedAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGlobalScopeAttribute">
      <summary>指示某类应被视为具有全局范围。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGlobalScopeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CompilerGlobalScopeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerMarshalOverride">
      <summary>指示修饰的变量实例在封送时与其真实类型不同。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CustomConstantAttribute">
      <summary>定义一个编译器可以为字段或方法参数永久保存的常数值。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CustomConstantAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CustomConstantAttribute" /> 类的新实例。 </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CustomConstantAttribute.Value">
      <summary>获取该属性存储的常数值。</summary>
      <returns>该属性存储的常数值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DateTimeConstantAttribute">
      <summary>为字段或参数永久保存一个 8 字节的 <see cref="T:System.DateTime" /> 常数。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DateTimeConstantAttribute.#ctor(System.Int64)">
      <summary>用表示此实例日期和时间的以 100 毫微秒为单位的数字初始化 DateTimeConstantAttribute 类的新实例。</summary>
      <param name="ticks">表示此实例日期和时间的以 100 毫微秒为单位的数字。 </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DateTimeConstantAttribute.Value">
      <summary>获取表示此实例日期和时间的以 100 毫微秒为单位的数字。</summary>
      <returns>表示此实例日期和时间的以 100 毫微秒为单位的数字。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DecimalConstantAttribute">
      <summary>在元数据中存储 <see cref="T:System.Decimal" /> 常数的值。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的有符号整数值初始化 <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> 类的新实例。 </summary>
      <param name="scale">比例因子（10 的幂），它指示小数点右边的数字位数。有效值为 0 到 28（包括 0 和 28）。</param>
      <param name="sign">值 0 指示正值，值 1 指示负值。</param>
      <param name="hi">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的高 32 位。</param>
      <param name="mid">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的中间 32 位。</param>
      <param name="low">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的低 32 位。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)">
      <summary>使用指定的无符号整数值初始化 <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> 类的新实例。</summary>
      <param name="scale">比例因子（10 的幂），它指示小数点右边的数字位数。有效值为 0 到 28（包括 0 和 28）。 </param>
      <param name="sign">值 0 指示正值，值 1 指示负值。 </param>
      <param name="hi">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的高 32 位。 </param>
      <param name="mid">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的中间 32 位。 </param>
      <param name="low">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的低 32 位。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> &gt; 28. </exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value">
      <summary>获取存储在此属性中的十进制常数。</summary>
      <returns>存储在此属性中的十进制常数。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DefaultDependencyAttribute">
      <summary>向公共语言运行库 (CLR) 提供提示，指示加载依赖项的可能性。此类用在依赖程序集中，用于指示当父级未指定 <see cref="T:System.Runtime.CompilerServices.DependencyAttribute" /> 属性时应使用的提示。无法继承此类。 </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DefaultDependencyAttribute.#ctor(System.Runtime.CompilerServices.LoadHint)">
      <summary>用指定的 <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 绑定初始化 <see cref="T:System.Runtime.CompilerServices.DefaultDependencyAttribute" /> 类的新实例。 </summary>
      <param name="loadHintArgument">
        <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值之一，它指示默认绑定首选项。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DefaultDependencyAttribute.LoadHint">
      <summary>获取 <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值，该值指示程序集何时加载依赖项。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值之一。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DependencyAttribute">
      <summary>指示引用程序集将在何时加载依赖项。无法继承此类。 </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DependencyAttribute.#ctor(System.String,System.Runtime.CompilerServices.LoadHint)">
      <summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值初始化 <see cref="T:System.Runtime.CompilerServices.DependencyAttribute" /> 类的新实例。 </summary>
      <param name="dependentAssemblyArgument">要绑定到的依赖程序集。</param>
      <param name="loadHintArgument">
        <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值之一。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DependencyAttribute.DependentAssembly">
      <summary>获取依赖程序集的值。 </summary>
      <returns>依赖程序集的名称。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.DependencyAttribute.LoadHint">
      <summary>获取 <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值，该值指示程序集将在何时加载依赖项。 </summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值之一。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DiscardableAttribute">
      <summary>将类型定义标记为可放弃。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DiscardableAttribute.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Runtime.CompilerServices.DiscardableAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute">
      <summary>在静态值类型字段的整个生存期内固定其地址。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute" /> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedBufferAttribute">
      <summary>指示字段应被视为包含指定基元类型的固定数目的元素。无法继承此类。 </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedBufferAttribute.#ctor(System.Type,System.Int32)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.FixedBufferAttribute" /> 类的新实例。 </summary>
      <param name="elementType">缓冲区中包含的元素的类型。</param>
      <param name="length">缓冲区中元素的数目。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.ElementType">
      <summary>获取固定缓冲区中包含的元素的类型。 </summary>
      <returns>元素的类型。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.Length">
      <summary>获取缓冲区中元素的数目。 </summary>
      <returns>固定缓冲区中元素的数目。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.HasCopySemanticsAttribute">
      <summary>.NET Framework 2.0 版不使用此类，它被保留以备将来之用。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.HasCopySemanticsAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.HasCopySemanticsAttribute" /> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IDispatchConstantAttribute">
      <summary>指示属性化字段或参数的默认值是 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 的实例，其中 <see cref="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject" /> 为 null。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IDispatchConstantAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.IDispatchConstantAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IDispatchConstantAttribute.Value">
      <summary>获取存储在此属性中的 IDispatch 常数。</summary>
      <returns>存储在此属性中的 IDispatch 常数。只有 null 可以作为 IDispatch 常数的值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Runtime.CompilerServices.IndexerNameAttribute">
      <summary>指示使索引器在不直接支持索引器的编程语言中已知的名称。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.IndexerNameAttribute" /> 类的新实例。</summary>
      <param name="indexerName">显示给其他语言的索引器名称。 </param>
    </member>
    <member name="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
      <summary>
                    指定通常仅在当前程序集中可见的类型对另一个程序集是可见的。
                </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
      <summary>
                    用指定的友元程序集的名称初始化 <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> 类的新实例。
                </summary>
      <param name="assemblyName">
                    友元程序集的名称。
                </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
      <summary>
                    获取友元程序集的名称，采用 internal 关键字标记的所有类型和类型成员对该程序集均为可见。
                </summary>
      <returns>
                    一个表示友元程序集名称的字符串。
                </returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsBoxed">
      <summary>指示修饰的引用类型是装箱的值类型。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsByValue">
      <summary>指示修饰的方法参数应解释为具有按值传递对象的语义。此修饰应用于引用类型。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsConst">
      <summary>指示修饰的类型有一个 const 修饰符。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsCopyConstructed">
      <summary>指示对此类型的值的任何复制操作都必须使用由该类型提供的复制构造函数。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsExplicitlyDereferenced">
      <summary>指示托管指针表示某方法签名内的指针参数。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced">
      <summary>指示修饰的垃圾回收引用表示某方法签名内的引用参数。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsJitIntrinsic">
      <summary>指示某一修饰的方法是一个内部值，实时 (JIT) 编译器可对它执行特殊代码生成。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsLong">
      <summary>指示修饰的整数是标准 C++ long 值。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsPinned">
      <summary>指示修饰的实例固定在内存中。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsSignUnspecifiedByte">
      <summary>指示修饰符既非有符号，也非无符号。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsUdtReturn">
      <summary>指示返回类型是用户定义的类型。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsVolatile">
      <summary>将字段标记为易失。无法继承此类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IUnknownConstantAttribute">
      <summary>指示属性化字段或参数的默认值是 <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> 的实例，其中 <see cref="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject" /> 为 null。无法继承此类。 </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IUnknownConstantAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.IUnknownConstantAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IUnknownConstantAttribute.Value">
      <summary>获取存储在此属性中的 IUnknown 常数。</summary>
      <returns>存储在此属性中的 IUnknown 常数。只有 null 可以作为 IUnknown 常数的值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.LoadHint">
      <summary>指定依赖程序集的首选默认绑定。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.LoadHint.Default">
      <summary>未指定首选项。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.LoadHint.Always">
      <summary>总是加载依赖项。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.LoadHint.Sometimes">
      <summary>有时加载依赖项。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodCodeType">
      <summary>定义如何实现方法。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.IL">
      <summary>指定此方法实现是用 Microsoft 中间语言 (MSIL) 编写的。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.Native">
      <summary>指定此方法是用本机代码实现的。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.OPTIL">
      <summary>指定此方法实现是用优化中间语言 (OPTIL) 编写的。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.Runtime">
      <summary>指定此方法实现由运行时提供。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplAttribute">
      <summary>指定如何实现某方法的详细信息。无法继承此类。 </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor">
      <summary>初始化 MethodImplAttribute 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Int16)">
      <summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值初始化 MethodImplAttribute 类的新实例。</summary>
      <param name="value">一个位屏蔽，表示所需的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值，该值指定属性化方法的属性。 </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Runtime.CompilerServices.MethodImplOptions)">
      <summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值初始化 MethodImplAttribute 类的新实例。</summary>
      <param name="methodImplOptions">一个 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值，该值指定属性化方法的属性。 </param>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplAttribute.MethodCodeType">
      <summary>一个 <see cref="T:System.Runtime.CompilerServices.MethodCodeType" /> 值，指示为此方法提供了哪种类型的实现。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.MethodImplAttribute.Value">
      <summary>获取描述属性化方法的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值。</summary>
      <returns>描述属性化方法的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplOptions">
      <summary>
                    定义如何实现某方法的详细信息。
                </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Unmanaged">
      <summary>
                    指定此方法是以非托管代码实现的。
                </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.ForwardRef">
      <summary>
                    指定声明该方法，但其实现在其他地方提供。
                </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.PreserveSig">
      <summary>
                    指定此方法签名完全按声明的样子导出。
                </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.InternalCall">
      <summary>
                    指定一个内部调用。内部调用是对在公共语言运行库本身内部实现的方法的调用。
                </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Synchronized">
      <summary>
                    指定同时只能由一个线程执行该方法。静态方法锁定类型，而实例方法锁定实例。在任何实例函数中只能执行一个线程，并且在类的任何静态函数中只能执行一个线程。
                </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoInlining">
      <summary>
指定此方法无法被内联。
                </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoOptimization">
      <summary>
                    指定在调试可能的代码生成问题时，该方法不是由实时 (JIT) 编译器或本机代码生成优化的（请参见 Ngen.exe）。
                </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.NativeCppClassAttribute">
      <summary>将指示类型为非托管类型的元数据应用到程序集。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.NativeCppClassAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.NativeCppClassAttribute" /> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.RequiredAttributeAttribute">
      <summary>指定导入编译器必须完全理解类型定义的语义，或拒绝使用它。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RequiredAttributeAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.RequiredAttributeAttribute" /> 类的新实例。</summary>
      <param name="requiredContract">导入编译器必须完全理解的类型。.NET Framework 版本 2.0 及更高版本不支持此参数。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.RequiredAttributeAttribute.RequiredContract">
      <summary>获取导入编译器必须完全理解的类型。</summary>
      <returns>导入编译器必须完全理解的类型。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
      <summary>指定是否使用 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 对象包装不是从 <see cref="T:System.Exception" /> 类派生的异常。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" /> 类的新实例。 </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows">
      <summary>获取或设置一个值，该值指示是否使用 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 对象包装不是从 <see cref="T:System.Exception" /> 类派生的异常。</summary>
      <returns>
如果不是从 <see cref="T:System.Exception" /> 类派生的异常应包装在 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 对象中，则返回 true；否则为 false。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers">
      <summary>提供一组为编译器提供支持的静态方法和属性。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.Equals(System.Object,System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 实例是否被视为相等。</summary>
      <returns>
            如果 <paramref name="o1" /> 参数与 <paramref name="o2" /> 参数是同一个实例，或者二者均为 null，或者 o1.Equals(o2) 返回 true，则为 true；否则为 false。</returns>
      <param name="o1">要比较的第一个 <see cref="T:System.Object" />。</param>
      <param name="o2">要比较的第二个 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.ExecuteCodeWithGuaranteedCleanup(System.Runtime.CompilerServices.RuntimeHelpers.TryCode,System.Runtime.CompilerServices.RuntimeHelpers.CleanupCode,System.Object)">
      <summary>使用一个 <see cref="T:System.Delegate" /> 执行代码，同时使用另一个 <see cref="T:System.Delegate" /> 在异常情况下执行附加代码。</summary>
      <param name="code">要尝试的代码的 <see cref="T:System.Delegate" />。</param>
      <param name="backoutCode">在发生异常时要运行的代码的 <see cref="T:System.Delegate" />。</param>
      <param name="userData">要传递给 <paramref name="code" /> 和 <paramref name="backoutCode" /> 的数据。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)">
      <summary>用作特定类型的哈希函数，适合在哈希算法和数据结构（如哈希表）中使用。</summary>
      <returns>
        <paramref name="o" /> 参数标识的 <see cref="T:System.Object" /> 的哈希代码。</returns>
      <param name="o">要检索其哈希代码的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)">
      <summary>将值类型装箱。</summary>
      <returns>如果 <paramref name="obj" /> 为值类，则返回它的装箱副本；否则返回 <paramref name="obj" /> 本身。</returns>
      <param name="obj">要装箱的值类型。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)">
      <summary>提供从存储在模块中的数据初始化数组的快速方法。</summary>
      <param name="array">要初始化的数组。</param>
      <param name="fldHandle">指定用于初始化数组的数据位置的 <see cref="T:System.RuntimeFieldHandle" />。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData">
      <summary>获取给定字符串中数据的偏移量（以字节为单位）。</summary>
      <returns>字节偏移量，从 <see cref="T:System.String" /> 对象的起始位置到字符串中的第一个字符。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions">
      <summary>将代码体指定为受约束的执行区域 (CER)。</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegionsNoOP">
      <summary>指定代码体为受约束的执行区域 (CER)，而不执行任何探测。 </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareDelegate(System.Delegate)">
      <summary>指示准备指定委托以包含在受约束的执行区域 (CER) 中。</summary>
      <param name="d">要准备的 <see cref="T:System.Delegate" /> 类型。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(System.RuntimeMethodHandle)">
      <summary>准备一个要包含在受约束的执行区域 (CER) 中的方法。</summary>
      <param name="method">要准备的方法的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(System.RuntimeMethodHandle,System.RuntimeTypeHandle[])">
      <summary>准备一个要包含在受约束的执行区域 (CER) 中的具有指定实例化的方法。</summary>
      <param name="method">要准备的方法的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <param name="instantiation">要传递的 <see cref="T:System.RuntimeTypeHandle" /> 实例化。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.ProbeForSufficientStack">
      <summary>当在可从堆栈溢出恢复的主机（如 Microsoft SQL 和 Microsoft Exchange）中运行时，受约束的执行区域 (CER) 基础结构将使用该方法。它会探测一定的堆栈空间，以确保不会在下面的代码块（假设您的代码本身仅使用有限适中的堆栈空间）内发生堆栈溢出。当前，该方法在 x86 上探测 48 K 的堆栈空间，但具体数量可能会随时间而变化且在其他平台上也会有所不同。不建议采用该方法。相反，如果您要使用适中的堆栈空间，则应使用标准的 CER（即，通过调用 <see cref="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions" /> 来继续 try/finally 或 try/catch 块）。 如果您正在调用递归方法或将使用大量堆栈空间，则必须使用 <see cref="M:System.Runtime.CompilerServices.RuntimeHelpers.ExecuteCodeWithGuaranteedCleanup(System.Runtime.CompilerServices.RuntimeHelpers.TryCode,System.Runtime.CompilerServices.RuntimeHelpers.CleanupCode,System.Object)" />。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)">
      <summary>运行指定的类构造函数方法。</summary>
      <param name="type">指定要运行的类构造函数方法的 <see cref="T:System.RuntimeTypeHandle" />。</param>
      <exception cref="T:System.TypeInitializationException">类的初始化函数引发一个异常。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunModuleConstructor(System.ModuleHandle)">
      <summary>运行指定的模块构造函数方法。</summary>
      <param name="module">指定要运行的模块构造函数方法的 <see cref="T:System.ModuleHandle" /> 对象。</param>
      <exception cref="T:System.TypeInitializationException">模块构造函数引发了一个异常。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers.CleanupCode">
      <summary>表示在发生异常时要运行的方法。</summary>
      <param name="userData">要传递给委托的数据。</param>
      <param name="exceptionThrown">true 表示引发了异常；如果未引发异常，则为 false。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers.TryCode">
      <summary>表示应该在 try 块中运行的代码的委托。</summary>
      <param name="userData">要传递给委托的数据。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeWrappedException">
      <summary>
                    包装不是从 <see cref="T:System.Exception" /> 类派生的异常。无法继承此类。
                </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    使用有关异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。
                </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象保存有关所引发异常的序列化对象数据。
                </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象包含有关源或目标的上下文信息。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 null。
                </exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException">
      <summary>
                    获取由 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 对象包装的对象。
                </summary>
      <returns>
                    由 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 对象包装的对象。
                </returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ScopelessEnumAttribute">
      <summary>指示本机枚举未由枚举类型名称限定。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ScopelessEnumAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.ScopelessEnumAttribute" /> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.SpecialNameAttribute">
      <summary>指示类型或成员由运行库或工具以一种特殊的方式进行处理。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SpecialNameAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.SpecialNameAttribute" /> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.StringFreezingAttribute">
      <summary>已否决。在使用 本机映像生成器 (Ngen.exe) 创建本机映像时冻结字符串。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StringFreezingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.StringFreezingAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.SuppressIldasmAttribute">
      <summary>防止 MSIL 反汇编程序 (Ildasm.exe) 反汇编程序集。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SuppressIldasmAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.SuppressIldasmAttribute" /> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedToAttribute">
      <summary>指定另一个程序集中的目标 <see cref="T:System.Type" />。无法继承此类。 </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedToAttribute.#ctor(System.Type)">
      <summary>初始化指定目标 <see cref="T:System.Type" /> 的 <see cref="T:System.Runtime.CompilerServices.TypeForwardedToAttribute" /> 类的新实例。 </summary>
      <param name="destination">另一个程序集中的目标 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedToAttribute.Destination">
      <summary>获取另一个程序集中的目标 <see cref="T:System.Type" />。</summary>
      <returns>另一个程序集中的目标 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute">
      <summary>指定某个类型包含可能溢出的非托管数组。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.UnsafeValueTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible">
      <summary>
                    不实现此属性。
                </summary>
      <returns>
                    此属性不返回值。
                </returns>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.Cer">
      <summary>在受约束的执行区域内调用时指定方法的行为。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Cer.None">
      <summary>方法、类型或程序集没有 CER 的概念。它不利用 CER 保证。这意味着：</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Cer.MayFail">
      <summary>在遇到异常情况时，此方法可能会失败。在这种情况下，此方法将向调用方法报告它是否成功。该方法的方法体周围必须有 CER 以确保它可以报告返回值。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Cer.Success">
      <summary>在遇到异常情况时，保证此方法获得成功。应始终在调用的方法周围构造 CER，即使是在非 CER 区域内调用该方法。如果方法完成了其任务，则该方法成功。例如，用 ReliabilityContractAttribute(Cer.Success) 标记 <see cref="P:System.Collections.ArrayList.Count" /> 意味着当它在 CER 下运行时，它始终返回 <see cref="T:System.Collections.ArrayList" /> 中元素的数目的计数，并且它永远不能将内部字段保留为不确定状态。</summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.Consistency">
      <summary>指定可靠性协定。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.MayCorruptProcess">
      <summary>在遇到异常情况时，CLR 对状态一致性不做任何保证；即这种情况可能损坏进程。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.MayCorruptAppDomain">
      <summary>在遇到异常情况时，公共语言运行库 (CLR) 对当前应用程序域中的状态一致性不做任何保证。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance">
      <summary>在遇到异常情况时，此方法保证将状态损坏限制到当前实例。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState">
      <summary>在遇到异常情况时，此方法保证不损坏状态。 </summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
      <summary>确保派生类中的所有终止代码均标记为关键。</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.Finalize">
      <summary>释放由 <see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" /> 类使用的所有资源。</summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute">
      <summary>指示本机图像生成服务准备一个要包含在受约束的执行区域 (CER) 中的方法。</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute" /> 类的新实例。 </summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
      <summary>定义某些代码的作者和依赖于这些代码的开发人员之间的可靠性协定。</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.#ctor(System.Runtime.ConstrainedExecution.Consistency,System.Runtime.ConstrainedExecution.Cer)">
      <summary>用指定的 <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> 保证和 <see cref="T:System.Runtime.ConstrainedExecution.Cer" /> 值初始化 <see cref="T:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute" /> 类的新实例。</summary>
      <param name="consistencyGuarantee">
        <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> 值之一。 </param>
      <param name="cer">
        <see cref="T:System.Runtime.ConstrainedExecution.Cer" /> 值之一。 </param>
    </member>
    <member name="P:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.Cer">
      <summary>获取确定在受约束的执行区域 (CER) 下调用时方法、类型或程序集的行为的值。 </summary>
      <returns>
        <see cref="T:System.Runtime.ConstrainedExecution.Cer" /> 值之一。</returns>
    </member>
    <member name="P:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.ConsistencyGuarantee">
      <summary>获取 <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> 可靠性协定的值。 </summary>
      <returns>
        <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> 值之一。</returns>
    </member>
    <member name="T:System.Runtime.Hosting.ActivationArguments">
      <summary>为应用程序的基于清单的激活提供数据。无法继承此类。 </summary>
    </member>
    <member name="M:System.Runtime.Hosting.ActivationArguments.#ctor(System.ActivationContext)">
      <summary>用指定的激活上下文初始化 <see cref="T:System.Runtime.Hosting.ActivationArguments" /> 类的新实例。 </summary>
      <param name="activationData">
        <see cref="T:System.ActivationContext" /> 对象，标识基于清单的激活应用程序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activationData" /> 为 null。</exception>
    </member>
    <member name="M:System.Runtime.Hosting.ActivationArguments.#ctor(System.ActivationContext,System.String[])">
      <summary>用指定的激活上下文和激活数据初始化 <see cref="T:System.Runtime.Hosting.ActivationArguments" /> 类的新实例。</summary>
      <param name="activationContext">
        <see cref="T:System.ActivationContext" /> 对象，标识基于清单的激活应用程序。</param>
      <param name="activationData">包含宿主提供的激活数据的字符串数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activationContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Runtime.Hosting.ActivationArguments.#ctor(System.ApplicationIdentity)">
      <summary>使用指定的应用程序标识初始化 <see cref="T:System.Runtime.Hosting.ActivationArguments" /> 类的新实例。</summary>
      <param name="applicationIdentity">
        <see cref="T:System.ApplicationIdentity" /> 对象，标识基于清单的激活应用程序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="applicationIdentity" /> 为 null。</exception>
    </member>
    <member name="M:System.Runtime.Hosting.ActivationArguments.#ctor(System.ApplicationIdentity,System.String[])">
      <summary>用指定的应用程序标识和激活数据初始化 <see cref="T:System.Runtime.Hosting.ActivationArguments" /> 类的新实例。</summary>
      <param name="applicationIdentity">
        <see cref="T:System.ApplicationIdentity" /> 对象，标识基于清单的激活应用程序。</param>
      <param name="activationData">包含宿主提供的激活数据的字符串数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="applicationIdentity" /> 为 null。</exception>
    </member>
    <member name="P:System.Runtime.Hosting.ActivationArguments.ActivationContext">
      <summary>为应用程序获取基于清单的激活的激活上下文。</summary>
      <returns>
        <see cref="T:System.ActivationContext" /> 对象，标识基于清单的激活应用程序。</returns>
    </member>
    <member name="P:System.Runtime.Hosting.ActivationArguments.ActivationData">
      <summary>从宿主获取激活数据。</summary>
      <returns>包含宿主提供的激活数据的字符串数组。</returns>
    </member>
    <member name="P:System.Runtime.Hosting.ActivationArguments.ApplicationIdentity">
      <summary>为清单激活的应用程序获取应用程序标识。</summary>
      <returns>
        <see cref="T:System.ApplicationIdentity" /> 对象，标识要基于清单激活的应用程序。</returns>
    </member>
    <member name="T:System.Runtime.Hosting.ApplicationActivator">
      <summary>提供用于激活基于清单的程序集的基类。 </summary>
    </member>
    <member name="M:System.Runtime.Hosting.ApplicationActivator.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Hosting.ApplicationActivator" /> 类的新实例。 </summary>
    </member>
    <member name="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)">
      <summary>使用指定的激活上下文创建要激活的应用程序的实例。 </summary>
      <returns>一个 <see cref="T:System.Runtime.Remoting.ObjectHandle" />，是应用程序执行操作的返回值的包装。返回值需要打开包装才能访问真实对象。  </returns>
      <param name="activationContext">标识要激活的应用程序的 <see cref="T:System.ActivationContext" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activationContext" /> 为 null。 </exception>
    </member>
    <member name="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])">
      <summary>使用指定的激活上下文和自定义激活数据创建要激活的应用程序的实例。  </summary>
      <returns>一个 <see cref="T:System.Runtime.Remoting.ObjectHandle" />，是应用程序执行操作的返回值的包装。返回值需要打开包装才能访问真实对象。</returns>
      <param name="activationContext">标识要激活的应用程序的 <see cref="T:System.ActivationContext" />。</param>
      <param name="activationCustomData">自定义激活数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activationContext" /> 为 null。 </exception>
    </member>
    <member name="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)">
      <summary>使用指定的 <see cref="T:System.AppDomainSetup" /> 对象创建应用程序的实例。</summary>
      <returns>一个 <see cref="T:System.Runtime.Remoting.ObjectHandle" />，是应用程序执行操作的返回值的包装。返回值需要打开包装才能访问真实对象。 </returns>
      <param name="adSetup">一个 <see cref="T:System.AppDomainSetup" /> 对象，它的 <see cref="P:System.AppDomainSetup.ActivationArguments" /> 属性标识要激活的应用程序。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="adSetup " /> 的 <see cref="P:System.AppDomainSetup.ActivationArguments" /> 属性为 null。 </exception>
      <exception cref="T:System.Security.Policy.PolicyException">未能执行应用程序实例，因为当前应用程序域上的策略设置没有提供运行该应用程序的权限。</exception>
    </member>
    <member name="T:System.Runtime.InteropServices._Activator">
      <summary>向非托管代码公开 <see cref="T:System.Activator" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._Activator.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Activator.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Activator.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Activator.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._Assembly">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.Assembly" /> 类的公共成员。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices._Assembly.CodeBase">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.Assembly.CodeBase" /> 属性的版本无关的访问。</summary>
      <returns>程序集的位置（按照最初的指定）。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.CreateInstance(System.String)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.CreateInstance(System.String)" /> 方法的版本无关的访问。</summary>
      <returns>表示该类型的 <see cref="T:System.Object" /> 的实例，其区域性、参数、联编程序和激活属性设置为 null，并且 <see cref="T:System.Reflection.BindingFlags" /> 设置为 Public 或 Instance，或者设置为 null（如果没有找到 <paramref name="typeName" />）。</returns>
      <param name="typeName">要查找的类型的 <see cref="P:System.Type.FullName" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.CreateInstance(System.String,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>表示该类型的 <see cref="T:System.Object" /> 的实例，其区域性、参数、联编程序和激活属性设置为 null，并且 <see cref="T:System.Reflection.BindingFlags" /> 设置为 Public 或 Instance，或者设置为 null（如果没有找到 <paramref name="typeName" />）。</returns>
      <param name="typeName">要查找的类型的 <see cref="P:System.Type.FullName" />。</param>
      <param name="ignoreCase">
                如果为 true，则忽略类型名的大小写；否则，为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" /> 方法的版本无关的访问。</summary>
      <returns>表示此类型且匹配指定条件的 Object 的实例；如果没有找到 <paramref name="typeName" />，则为 null。</returns>
      <param name="typeName">要查找的类型的 <see cref="P:System.Type.FullName" />。</param>
      <param name="ignoreCase">
                如果为 true，则忽略类型名的大小写；否则，为 false。</param>
      <param name="bindingAttr">影响搜索如何进行的位屏蔽。此值是 <see cref="T:System.Reflection.BindingFlags" /> 中的位标志的组合。</param>
      <param name="binder">一个启用绑定、参数类型强制、成员调用以及通过反射进行 MemberInfo 对象检索的对象。如果 <paramref name="binder" /> 为 null，则使用默认联编程序。</param>
      <param name="args">Object 类型的数组，包含要传递给构造函数的参数。此参数数组在数量、顺序和类型方面必须与要调用的构造函数的参数匹配。如果需要默认的构造函数，则 <paramref name="args" /> 必须是空数组或 null。</param>
      <param name="culture">用于控制类型强制的 CultureInfo 的实例。如果这是 null，则使用当前线程的 CultureInfo。（例如，这对于将表示 1000 的 String 转换为 Double 值是必需的，因为不同的区域性以不同的方式表示 1000。） </param>
      <param name="activationAttributes">Object 类型的数组，包含一个或多个可以参与激活的激活属性。激活属性的一个示例是： URLAttribute(http://hostname/appname/objectURI) </param>
    </member>
    <member name="P:System.Runtime.InteropServices._Assembly.EntryPoint">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.Assembly.EntryPoint" /> 属性的版本无关的访问。</summary>
      <returns>表示此程序集入口点的 <see cref="T:System.Reflection.MethodInfo" /> 对象。如果没有找到入口点（例如，此程序集是一个 DLL），则返回 null。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.Equals(System.Object)">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.Equals(System.Object)" /> 方法的版本无关的访问。</summary>
      <returns>
            如果指定的 <see cref="T:System.Object" /> 等于当前的 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="other">与当前的 <see cref="T:System.Object" /> 进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices._Assembly.EscapedCodeBase">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.Assembly.EscapedCodeBase" /> 属性的版本无关的访问。</summary>
      <returns>含有转义符的统一资源标识符 (URI)。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Assembly.Evidence">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.Assembly.Evidence" /> 属性的版本无关的访问。</summary>
      <returns>此程序集的 <see cref="T:System.Security.Policy.Evidence" /> 对象。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Assembly.FullName">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.Assembly.FullName" /> 属性的版本无关的访问。</summary>
      <returns>程序集的显示名称。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetCustomAttributes(System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>Object 类型的数组，包含此程序集的自定义属性。</returns>
      <param name="inherit">对于 <see cref="T:System.Reflection.Assembly" /> 类型的对象，将忽略此参数。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Object" /> 类型的数组，包含由 <paramref name="attributeType" /> 指定的此程序集的自定义属性。</returns>
      <param name="attributeType">要为其返回自定义属性的 <see cref="T:System.Type" />。</param>
      <param name="inherit">对于 <see cref="T:System.Reflection.Assembly" /> 类型的对象，将忽略此参数。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetExportedTypes">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetExportedTypes" /> 属性的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象的数组，这些对象表示此程序集中定义并在程序集外可见的类型。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetFile(System.String)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetFile(System.String)" /> 方法的版本无关的访问。</summary>
      <returns>指定文件的 <see cref="T:System.IO.FileStream" />；如果没有找到此文件，则为 null。</returns>
      <param name="name">指定文件的名称。不包括文件的路径。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetFiles">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetFiles" /> 方法的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.IO.FileStream" /> 对象的数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetFiles(System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetFiles(System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.IO.FileStream" /> 对象的数组。</returns>
      <param name="getResourceModules">
                为 true，则包括资源模块；否则，为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetHashCode">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.GetHashCode" /> 方法的版本无关的访问。</summary>
      <returns>当前 <see cref="T:System.Object" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetLoadedModules">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetLoadedModules" /> 方法的版本无关的访问。</summary>
      <returns>模块的数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetLoadedModules(System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetLoadedModules(System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>模块的数组。</returns>
      <param name="getResourceModules">
为 true，则包括资源模块；否则，为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetManifestResourceInfo(System.String)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)" /> 方法的版本无关的访问。</summary>
      <returns>用关于资源拓扑的信息填充的 <see cref="T:System.Reflection.ManifestResourceInfo" /> 对象；如果未找到资源，则为 null。</returns>
      <param name="resourceName">区分大小写的资源名称。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetManifestResourceNames">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetManifestResourceNames" /> 方法的版本无关的访问。</summary>
      <returns>包含所有资源名称的 String 类型的数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetManifestResourceStream(System.String)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" /> 方法的版本无关的访问。</summary>
      <returns>表示此清单资源的 <see cref="T:System.IO.Stream" />。</returns>
      <param name="name">所请求的清单资源的名称（区分大小写）。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetManifestResourceStream(System.Type,System.String)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)" /> 方法的版本无关的访问。</summary>
      <returns>表示此清单资源的 <see cref="T:System.IO.Stream" />。</returns>
      <param name="type">其命名空间用于确定清单资源名的范围的类型。</param>
      <param name="name">所请求的清单资源的名称（区分大小写）。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetModule(System.String)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetModule(System.String)" /> 方法的版本无关的访问。</summary>
      <returns>所请求的模块，若未找到该模块则为 null。</returns>
      <param name="name">请求的模块的名称。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetModules">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetModules" /> 方法的版本无关的访问。</summary>
      <returns>模块的数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetModules(System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetModules(System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>模块的数组。</returns>
      <param name="getResourceModules">
为 true，则包括资源模块；否则，为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetName">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetName" /> 方法的版本无关的访问。</summary>
      <returns>此程序集的 <see cref="T:System.Reflection.AssemblyName" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetName(System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetName(System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>此程序集的 <see cref="T:System.Reflection.AssemblyName" />。</returns>
      <param name="copiedName">
                如果为 true，则将 <see cref="P:System.Reflection.Assembly.CodeBase" /> 设置为程序集被影像复制后的位置；如果为 false，则将 <see cref="P:System.Reflection.Assembly.CodeBase" /> 设置为原位置。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> 方法的版本无关的访问。</summary>
      <param name="info">用序列化信息填充的对象。</param>
      <param name="context">序列化的目标上下文。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetReferencedAssemblies">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetReferencedAssemblies" /> 方法的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.AssemblyName" /> 类型的数组，包含此程序集引用的所有程序集。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)" /> 方法的版本无关的访问。</summary>
      <returns>指定的附属程序集。</returns>
      <param name="culture">指定的区域性。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)" /> 方法的版本无关的访问。</summary>
      <returns>指定的附属程序集。</returns>
      <param name="culture">指定的区域性。</param>
      <param name="version">附属程序集的版本。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetType">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.GetType" /> 方法的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetType(System.String)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetType(System.String)" /> 方法的版本无关的访问。</summary>
      <returns>表示指定类的 <see cref="T:System.Type" /> 对象，若未找到该类则为 null。</returns>
      <param name="name">该类型的全名。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetType(System.String,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetType(System.String,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>表示指定类的 <see cref="T:System.Type" /> 对象。</returns>
      <param name="name">该类型的全名。</param>
      <param name="throwOnError">
                若为 true，则在找不到该类型时引发异常；若为 false 则返回 null。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>表示指定类的 <see cref="T:System.Type" /> 对象。</returns>
      <param name="name">该类型的全名。</param>
      <param name="throwOnError">
                若为 true，则在找不到该类型时引发异常；若为 false 则返回 null。</param>
      <param name="ignoreCase">
如果为 true，则忽略类型名的大小写；否则，为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetTypes">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetTypes" /> 方法的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Type" /> 类型的数组，包含此程序集中定义的所有类型的对象。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Assembly.GlobalAssemblyCache">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.Assembly.GlobalAssemblyCache" /> 属性的版本无关的访问。</summary>
      <returns>
            如果程序集是从全局程序集缓存加载的，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.IsDefined(System.Type,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>
            如果定义了由指定的 <see cref="T:System.Type" /> 标识的自定义属性，则为 true；否则为 false。</returns>
      <param name="attributeType">要为此程序集检查的自定义属性的 <see cref="T:System.Type" />。</param>
      <param name="inherit">对于该类型的对象，该参数被忽略。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.LoadModule(System.String,System.Byte[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[])" /> 方法的版本无关的访问。</summary>
      <returns>加载的模块。</returns>
      <param name="moduleName">该模块的名称。必须与此程序集清单中的文件名对应。</param>
      <param name="rawModule">基于 COFF 图像的字节数组，该数组包含发送的模块或资源。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.LoadModule(System.String,System.Byte[],System.Byte[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])" /> 方法的版本无关的访问。</summary>
      <returns>加载的模块。</returns>
      <param name="moduleName">该模块的名称。必须与此程序集清单中的文件名对应。</param>
      <param name="rawModule">基于 COFF 图像的字节数组，该数组包含发送的模块或资源。</param>
      <param name="rawSymbolStore">一个字节数组，包含表示模块符号的原始字节。如果这是一个资源文件，则必须为 null。</param>
    </member>
    <member name="P:System.Runtime.InteropServices._Assembly.Location">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.Assembly.Location" /> 属性的版本无关的访问。</summary>
      <returns>包含清单的已加载文件的位置。如果已加载文件使用了影像复制，则该位置是该文件被影像复制后的位置。如果从字节数组加载程序集（如使用 <see cref="M:System.Reflection.Assembly.Load(System.Byte[])" /> 方法重载时），则返回值为空字符串 ("")。</returns>
    </member>
    <member name="E:System.Runtime.InteropServices._Assembly.ModuleResolve">
      <summary>为 COM 对象提供对 <see cref="E:System.Reflection.Assembly.ModuleResolve" /> 事件的版本无关的访问。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.ToString">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.ToString" /> 方法的版本无关的访问。</summary>
      <returns>程序集的全名；如果不能确定程序集的全名，则为类名。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._AssemblyBuilder">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._AssemblyBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._AssemblyName">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.AssemblyName" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._AssemblyName.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._AssemblyName.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._AssemblyName.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._AssemblyName.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._Attribute">
      <summary>向非托管代码公开 <see cref="T:System.Attribute" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Attribute.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._ConstructorBuilder">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._ConstructorInfo">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.ConstructorInfo" /> 类的公共成员。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.Attributes">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.Attributes" /> 属性的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodAttributes" /> 值之一。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.CallingConvention">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.CallingConvention" /> 属性的版本无关的访问。</summary>
      <returns>此方法的 <see cref="T:System.Reflection.CallingConventions" />。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.DeclaringType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.DeclaringType" /> 属性的版本无关的访问。</summary>
      <returns>声明该成员的类的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.Equals(System.Object)">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.Equals(System.Object)" /> 方法的版本无关的访问。</summary>
      <returns>
如果指定的 <see cref="T:System.Object" /> 等于当前的 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="other">与当前的 <see cref="T:System.Object" /> 进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.GetCustomAttributes(System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>一个包含所有自定义属性的数组，在未定义任何属性时为包含零个元素的数组。</returns>
      <param name="inherit">指定是否搜索该成员的继承链以查找这些属性。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>应用于此成员的自定义属性的数组；如果未应用任何属性，则为包含零 (0) 个元素的数组。</returns>
      <param name="attributeType">要搜索的属性类型。只返回可分配给此类型的属性。 </param>
      <param name="inherit">指定是否搜索该成员的继承链以查找这些属性。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.GetHashCode">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.GetHashCode" /> 方法的版本无关的访问。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的传入数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，用于接收与名称对应的 ID。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.GetMethodImplementationFlags">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MethodBase.GetMethodImplementationFlags" /> 成员的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodImplAttributes" /> 标志。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.GetParameters">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MethodBase.GetParameters" /> 方法的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.ParameterInfo" /> 类型的数组，包含与此实例所反射的方法（或构造函数）的签名相匹配的信息。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.GetType">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.GetType" /> 方法的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">接收一个指针，指向请求的类型信息对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">指向一个位置，该位置接收对象提供的类型信息接口的数量。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">标识成员。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组中元素数的计数。</param>
      <param name="pVarResult">指向要存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.Invoke_2(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> 方法的版本无关的访问。</summary>
      <returns>与构造函数关联的类的实例。</returns>
      <param name="obj">创建了此方法的实例。</param>
      <param name="invokeAttr">指定绑定类型的 BindingFlags 值之一。</param>
      <param name="binder">一个 Binder，它定义一组属性并通过反映来启用绑定、参数类型强制和成员调用。如果 <paramref name="binder" /> 为 null，则使用 Binder.DefaultBinding。</param>
      <param name="parameters">Object 类型的数组，该类型用于在 <paramref name="binder" /> 的约束下匹配此构造函数的参数的个数、顺序和类型。如果此构造函数不需要参数，则像 Object[] parameters = new Object[0] 中那样传递一个包含零元素的数组。如果数组中的对象未用值来显式初始化，则该对象将包含该对象类型的默认值。对于引用类型的元素，该值为 null。对于值类型的元素，该值为 0、0.0 或 false，具体取决于特定的元素类型。</param>
      <param name="culture">用于控制类型强制的 <see cref="T:System.Globalization.CultureInfo" />。如果这是 null，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.Invoke_3(System.Object,System.Object[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> 方法的版本无关的访问。</summary>
      <returns>与构造函数关联的类的实例。</returns>
      <param name="obj">创建了此方法的实例。 </param>
      <param name="parameters">调用的方法或构造函数的参数列表。这是一个对象数组，这些对象与要调用的方法或构造函数的参数具有相同的数量、顺序和类型。如果没有任何参数，则 <paramref name="parameters" /> 应为 null。如果此实例所表示的方法或构造函数采用 ref 参数（在 Visual Basic 中为 ByRef），使用此函数调用该方法或构造函数时，该参数不需要任何特殊属性。如果数组中的对象未用值来显式初始化，则该对象将包含该对象类型的默认值。对于引用类型的元素，该值为 null。对于值类型的元素，该值为 0、0.0 或 false，具体取决于特定的元素类型。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.Invoke_4(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> 方法的版本无关的访问。</summary>
      <returns>与构造函数关联的类的实例。</returns>
      <param name="invokeAttr">指定绑定类型的 BindingFlags 值之一。 </param>
      <param name="binder">一个 Binder，它定义一组属性并通过反映来启用绑定、参数类型强制和成员调用。如果 <paramref name="binder" /> 为 null，则使用 Binder.DefaultBinding。 </param>
      <param name="parameters">Object 类型的数组，该类型用于在 <paramref name="binder" /> 的约束下匹配此构造函数的参数的个数、顺序和类型。如果此构造函数不需要参数，则像 Object[] parameters = new Object[0] 中那样传递一个包含零元素的数组。如果数组中的对象未用值来显式初始化，则该对象将包含该对象类型的默认值。对于引用类型的元素，该值为 null。对于值类型的元素，该值为 0、0.0 或 false，具体取决于特定的元素类型。 </param>
      <param name="culture">用于控制类型强制的 <see cref="T:System.Globalization.CultureInfo" />。如果这是 null，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.Invoke_5(System.Object[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])" /> 方法的版本无关的访问。</summary>
      <returns>与构造函数关联的类的实例。</returns>
      <param name="parameters">与此构造函数的参数的个数、顺序和类型（受默认联编程序的约束）相匹配的值的数组。如果此构造函数没有参数，则像 Object[] parameters = new Object[0] 中那样，使用包含零元素或 null 的数组。如果数组中的对象未用值来显式初始化，则该对象将包含该对象类型的默认值。对于引用类型的元素，该值为 null。对于值类型的元素，该值为 0、0.0 或 false，具体取决于特定的元素类型。</param>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsAbstract">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsAbstract" /> 属性的版本无关的访问。</summary>
      <returns>
如果该方法是抽象的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsAssembly">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsAssembly" /> 属性的版本无关的访问。</summary>
      <returns>
如果此方法可以由同一程序集中的其他类调用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsConstructor">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsConstructor" /> 属性的版本无关的访问。</summary>
      <returns>
如果此方法为构造函数，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.IsDefined(System.Type,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> 成员的版本无关的访问。</summary>
      <returns>
如果此成员应用了一个或多个 <paramref name="attributeType" /> 实例，则为 true；否则为 false。</returns>
      <param name="attributeType">自定义属性应用于的 Type 对象。 </param>
      <param name="inherit">指定是否搜索该成员的继承链以查找这些属性。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsFamily">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsFamily" /> 属性的版本无关的访问。</summary>
      <returns>
如果对此类的访问只限于此类本身的成员和它的派生类的成员，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsFamilyAndAssembly">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsFamilyAndAssembly" /> 属性的版本无关的访问。</summary>
      <returns>
如果对此方法的访问只限于此类本身的成员和同一程序集中的派生类的成员，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsFamilyOrAssembly">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsFamilyOrAssembly" /> 属性的版本无关的访问。</summary>
      <returns>
如果对此方法的访问只限于该类本身的成员、派生类的成员（与它们的位置无关）以及同一程序集中其他类的成员，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsFinal">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsFinal" /> 属性的版本无关的访问。</summary>
      <returns>
如果此方法为 final，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsHideBySig">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsHideBySig" /> 属性的版本无关的访问。</summary>
      <returns>
如果此成员被签名隐藏，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsPrivate">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsPrivate" /> 属性的版本无关的访问。</summary>
      <returns>
如果对此方法的访问只限于该类本身的其他成员，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsPublic">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsPublic" /> 属性的版本无关的访问。</summary>
      <returns>
如果此方法是公共的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsSpecialName">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsSpecialName" /> 属性的版本无关的访问。</summary>
      <returns>
如果此方法具有特殊名称，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsStatic">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsStatic" /> 属性的版本无关的访问。</summary>
      <returns>
如果此方法是 static 方法，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsVirtual">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsVirtual" /> 属性的版本无关的访问。</summary>
      <returns>
如果是 virtual 方法，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.MemberType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.ConstructorInfo.MemberType" /> 属性的版本无关的访问。</summary>
      <returns>指示成员类型的 <see cref="T:System.Reflection.MemberTypes" /> 值。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.MethodHandle">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.MethodHandle" /> 属性的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.RuntimeMethodHandle" /> 对象。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.Name">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.Name" /> 属性的版本无关的访问。</summary>
      <returns>包含此成员名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.ReflectedType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.ReflectedType" /> 属性的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，通过它获取了该 <see cref="T:System.Reflection.MemberInfo" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.ToString">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.ToString" /> 方法的版本无关的访问。</summary>
      <returns>表示当前 <see cref="T:System.Object" /> 的字符串。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._CustomAttributeBuilder">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.Emit.CustomAttributeBuilder" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._CustomAttributeBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._CustomAttributeBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._CustomAttributeBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._CustomAttributeBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._EnumBuilder">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.Emit.EnumBuilder" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EnumBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EnumBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._EventBuilder">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.Emit.EventBuilder" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._EventBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._EventInfo">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.EventInfo" /> 类的公共成员。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> 方法的版本无关的访问。</summary>
      <param name="target">事件源。 </param>
      <param name="handler">目标引发事件时将调用的方法。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices._EventInfo.Attributes">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.EventInfo.Attributes" /> 属性的版本无关的访问。</summary>
      <returns>此事件的只读属性。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._EventInfo.DeclaringType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.DeclaringType" /> 属性的版本无关的访问。</summary>
      <returns>声明该成员的类的 Type 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.Equals(System.Object)">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.Equals(System.Object)" /> 方法的版本无关的访问。</summary>
      <returns>
如果指定的 <see cref="T:System.Object" /> 等于当前的 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="other">与当前的 <see cref="T:System.Object" /> 进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices._EventInfo.EventHandlerType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.EventInfo.EventHandlerType" /> 属性的版本无关的访问。</summary>
      <returns>表示委托事件处理程序的只读 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetAddMethod">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.EventInfo.GetAddMethod" /> 方法的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，它表示用于将事件处理程序委托添加到事件源的方法。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetAddMethod(System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，它表示用于将事件处理程序委托添加到事件源的方法。</returns>
      <param name="nonPublic">true 表示返回非公共方法；否则为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetCustomAttributes(System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>一个包含所有自定义属性的数组，在未定义任何属性时为包含零 (0) 个元素的数组。</returns>
      <param name="inherit">true 表示搜索成员的继承链以查找这些属性；否则为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>应用于此成员的自定义属性的数组；如果未应用任何属性，则为包含零 (0) 个元素的数组。</returns>
      <param name="attributeType">要搜索的属性类型。只返回可分配给此类型的属性。 </param>
      <param name="inherit">
搜索此成员的继承链以查找这些属性，则为 true；否则为 false。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetHashCode">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.GetHashCode" /> 方法的版本无关的访问。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetRaiseMethod">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.EventInfo.GetRaiseMethod" /> 方法的版本无关的访问。</summary>
      <returns>引发该事件时所调用的方法。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetRaiseMethod(System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>在引发该事件时调用的 <see cref="T:System.Reflection.MethodInfo" /> 对象。</returns>
      <param name="nonPublic">true 表示返回非公共方法；否则为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetRemoveMethod">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.EventInfo.GetRemoveMethod" /> 方法的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，它表示用于从事件源中移除事件处理程序委托的方法。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetRemoveMethod(System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，它表示用于从事件源中移除事件处理程序委托的方法。</returns>
      <param name="nonPublic">true 表示返回非公共方法；否则为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetType">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.GetType" /> 方法的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.IsDefined(System.Type,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>
如果此成员应用了一个或多个 <paramref name="attributeType" /> 参数的实例，则为 true；否则为 false。</returns>
      <param name="attributeType">自定义属性应用于的 Type 对象。 </param>
      <param name="inherit">
搜索此成员的继承链以查找这些属性，则为 true；否则为 false。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices._EventInfo.IsMulticast">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.EventInfo.IsMulticast" /> 属性的版本无关的访问。</summary>
      <returns>
如果该委托是多路广播委托的实例，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._EventInfo.IsSpecialName">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.EventInfo.IsSpecialName" /> 属性的版本无关的访问。</summary>
      <returns>
如果此事件具有一个特殊名称，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._EventInfo.MemberType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.EventInfo.MemberType" /> 属性的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.Reflection.MemberTypes" /> 值，指示此成员是事件。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._EventInfo.Name">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.Name" /> 属性的版本无关的访问。</summary>
      <returns>包含此成员的名称的 <see cref="T:System.String" /> 对象。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._EventInfo.ReflectedType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.ReflectedType" /> 属性的版本无关的访问。</summary>
      <returns>用于获取此对象的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)" /> 方法的版本无关的访问。</summary>
      <param name="target">事件源。 </param>
      <param name="handler">将解除与由目标引发的事件的关联的委托。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.ToString">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.ToString" /> 方法的版本无关的访问。</summary>
      <returns>表示当前 <see cref="T:System.Object" /> 的字符串。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._Exception">
      <summary>向非托管代码公开 <see cref="T:System.Exception" /> 类的公共成员。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._Exception.Equals(System.Object)">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.Equals(System.Object)" /> 方法的版本无关的访问。</summary>
      <returns>
如果指定的 <see cref="T:System.Object" /> 等于当前的 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="obj">与当前的 <see cref="T:System.Object" /> 进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Exception.GetBaseException">
      <summary>为 COM 对象提供对 <see cref="M:System.Exception.GetBaseException" /> 方法的版本无关的访问。</summary>
      <returns>异常链中第一个被引发的异常。如果当前异常的 <see cref="P:System.Exception.InnerException" /> 属性是空引用（Visual Basic 中为 Nothing），则此属性返回当前异常。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Exception.GetHashCode">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.GetHashCode" /> 方法的版本无关的访问。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>为 COM 对象提供对 <see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> 方法的版本无关的访问</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，包含有关所引发异常的序列化对象数据。 </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构，它包含有关源或目标的上下文信息。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Exception.GetType">
      <summary>为 COM 对象提供对 <see cref="M:System.Exception.GetType" /> 方法的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象，表示当前实例的确切运行时类型。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Exception.HelpLink">
      <summary>为 COM 对象提供对 <see cref="P:System.Exception.HelpLink" /> 属性的版本无关的访问。</summary>
      <returns>帮助文件的统一资源名称 (URN) 或统一资源定位器 (URL)。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Exception.InnerException">
      <summary>为 COM 对象提供对 <see cref="P:System.Exception.InnerException" /> 属性的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.Exception" /> 实例，它描述导致当前异常的错误。<see cref="P:System.Exception.InnerException" /> 属性返回与传递给构造函数的值相同的值，或者，如果没有向构造函数提供内部异常值，则返回空引用（Visual Basic 中为 Nothing）。此属性为只读。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Exception.Message">
      <summary>为 COM 对象提供对 <see cref="P:System.Exception.Message" /> 属性的版本无关的访问。</summary>
      <returns>解释异常原因的错误信息或空字符串 ("")。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Exception.Source">
      <summary>为 COM 对象提供对 <see cref="P:System.Exception.Source" /> 属性的版本无关的访问。</summary>
      <returns>导致错误的应用程序或对象的名称。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Exception.StackTrace">
      <summary>为 COM 对象提供对 <see cref="P:System.Exception.StackTrace" /> 属性的版本无关的访问。</summary>
      <returns>一个字符串，它描述调用堆栈的内容，其中首先显示最近的方法调用。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Exception.TargetSite">
      <summary>为 COM 对象提供对 <see cref="P:System.Exception.TargetSite" /> 属性的版本无关的访问。</summary>
      <returns>引发当前异常的 <see cref="T:System.Reflection.MethodBase" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Exception.ToString">
      <summary>为 COM 对象提供对 <see cref="M:System.Exception.ToString" /> 方法的版本无关的访问。</summary>
      <returns>表示当前 <see cref="T:System.Exception" /> 对象的字符串。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._FieldBuilder">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.Emit.FieldBuilder" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._FieldInfo">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.FieldInfo" /> 类的公共成员。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.Attributes">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.FieldInfo.Attributes" /> 属性的版本无关的访问。 </summary>
      <returns>此字段的 <see cref="T:System.Reflection.FieldAttributes" />。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.DeclaringType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.DeclaringType" /> 属性的版本无关的访问。 </summary>
      <returns>声明该成员的类的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.Equals(System.Object)">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.Equals(System.Object)" /> 方法的版本无关的访问。</summary>
      <returns>
如果指定的 <see cref="T:System.Object" /> 等于当前的 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="other">与当前的 <see cref="T:System.Object" /> 进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.FieldHandle">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.FieldInfo.FieldHandle" /> 属性的版本无关的访问。</summary>
      <returns>某个字段的内部元数据表示形式的句柄。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.FieldType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 属性的版本无关的访问。</summary>
      <returns>此字段对象的类型。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.GetCustomAttributes(System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>一个包含所有自定义属性的数组，在未定义任何属性时为包含零个元素的数组。</returns>
      <param name="inherit">指定是否搜索该成员的继承链以查找这些属性。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>应用于此成员的自定义属性的数组；如果未应用任何属性，则为包含零 (0) 个元素的数组。</returns>
      <param name="attributeType">要搜索的属性类型。只返回可分配给此类型的属性。 </param>
      <param name="inherit">指定是否搜索该成员的继承链以查找这些属性。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.GetHashCode">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.GetHashCode" /> 方法的版本无关的访问。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的传入数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，用于接收与名称对应的 ID。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.GetType">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.GetType" /> 方法的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">接收一个指针，指向请求的类型信息对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">指向一个位置，该位置接收对象提供的类型信息接口的数量。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.GetValue(System.Object)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.FieldInfo.GetValue(System.Object)" /> 方法的版本无关的访问。</summary>
      <returns>包含此实例反映的字段值的对象。</returns>
      <param name="obj">其字段值将返回的对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.GetValueDirect(System.TypedReference)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)" /> 方法的版本无关的访问。</summary>
      <returns>包含字段值的 <see cref="T:System.Object" />。</returns>
      <param name="obj">
        <see cref="T:System.TypedReference" /> 结构，封装指向某个位置的托管指针和可能存储在该位置的类型的运行时表示形式。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">标识成员。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组中元素数的计数。</param>
      <param name="pVarResult">指向要存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsAssembly">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.FieldInfo.IsAssembly" /> 属性的版本无关的访问。</summary>
      <returns>
如果字段设置了 Assembly 属性，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.IsDefined(System.Type,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>
如果此成员应用了一个或多个 <paramref name="attributeType" /> 实例，则为 true；否则为 false。</returns>
      <param name="attributeType">自定义属性应用于的 <see cref="T:System.Type" /> 对象。 </param>
      <param name="inherit">指定是否搜索该成员的继承链以查找这些属性。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsFamily">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.FieldInfo.IsFamily" /> 属性的版本无关的访问。</summary>
      <returns>
如果此字段具有 Family 属性设置，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsFamilyAndAssembly">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.FieldInfo.IsFamilyAndAssembly" /> 属性的版本无关的访问。</summary>
      <returns>
如果字段设置了 FamANDAssem 属性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsFamilyOrAssembly">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.FieldInfo.IsFamilyOrAssembly" /> 属性的版本无关的访问。</summary>
      <returns>
如果字段设置了 FamORAssem 属性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsInitOnly">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.FieldInfo.IsInitOnly" /> 属性的版本无关的访问。</summary>
      <returns>
如果字段设置了 InitOnly 属性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsLiteral">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.FieldInfo.IsLiteral" /> 属性的版本无关的访问。</summary>
      <returns>
如果字段设置了 Literal 属性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsNotSerialized">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.FieldInfo.IsNotSerialized" /> 属性的版本无关的访问。</summary>
      <returns>
如果字段设置了 NotSerialized 属性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsPinvokeImpl">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.FieldInfo.IsPinvokeImpl" /> 属性的版本无关的访问。</summary>
      <returns>
如果在 <see cref="T:System.Reflection.FieldAttributes" /> 中设置了 PinvokeImpl 属性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsPrivate">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.FieldInfo.IsPrivate" /> 属性的版本无关的访问。</summary>
      <returns>
如果此字段为私有字段，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsPublic">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.FieldInfo.IsPublic" /> 属性的版本无关的访问。</summary>
      <returns>
如果此字段为公共字段，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsSpecialName">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.FieldInfo.IsSpecialName" /> 属性的版本无关的访问。</summary>
      <returns>
如果在 <see cref="T:System.Reflection.FieldAttributes" /> 中设置了 SpecialName 属性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsStatic">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.FieldInfo.IsStatic" /> 属性的版本无关的访问。</summary>
      <returns>
如果此字段为静态字段，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.MemberType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.FieldInfo.MemberType" /> 属性的版本无关的访问。</summary>
      <returns>指示此成员是字段的 <see cref="T:System.Reflection.MemberTypes" /> 值。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.Name">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.Name" /> 属性的版本无关的访问。</summary>
      <returns>包含此成员名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.ReflectedType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.ReflectedType" /> 属性的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，通过它获取了此对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.SetValue(System.Object,System.Object)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)" /> 方法的版本无关的访问。</summary>
      <param name="obj">将设置其字段值的对象。</param>
      <param name="value">分配给字段的值。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> 方法的版本无关的访问。</summary>
      <param name="obj">将设置其字段值的对象。 </param>
      <param name="value">分配给字段的值。 </param>
      <param name="invokeAttr">指定所需的绑定类型（例如，Binder.CreateInstance 或 Binder.ExactBinding）的 <see cref="T:System.Reflection.Binder" /> 的字段。 </param>
      <param name="binder">一组通过反射启用绑定、参数类型强制和成员调用的属性。如果 <paramref name="binder" /> 为 null，则使用 Binder.DefaultBinding。 </param>
      <param name="culture">特定区域性的软件首选项。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)" /> 方法的版本无关的访问。</summary>
      <param name="obj">将设置其字段值的对象。</param>
      <param name="value">分配给字段的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.ToString">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.ToString" /> 方法的版本无关的访问。</summary>
      <returns>表示当前 <see cref="T:System.Object" /> 的字符串。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._ILGenerator">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.Emit.ILGenerator" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ILGenerator.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ILGenerator.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._LocalBuilder">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.Emit.LocalBuilder" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._LocalBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._LocalBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._LocalBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._LocalBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向要存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._MemberInfo">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.MemberInfo" /> 类的公共成员。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices._MemberInfo.DeclaringType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.DeclaringType" /> 属性的版本无关的访问。</summary>
      <returns>声明该成员的类的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.Equals(System.Object)">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.Equals(System.Object)" /> 方法的版本无关的访问。</summary>
      <returns>
如果指定的 <see cref="T:System.Object" /> 等于当前的 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="other">与当前的 <see cref="T:System.Object" /> 进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>一个包含所有自定义属性的数组，在未定义任何属性时为包含零 (0) 个元素的数组。</returns>
      <param name="inherit">
搜索此成员的继承链以查找这些属性，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>应用于此成员的自定义属性的数组；如果未应用任何属性，则为包含零 (0) 个元素的数组。</returns>
      <param name="attributeType">要搜索的属性类型。只返回可分配给此类型的属性。 </param>
      <param name="inherit">
搜索此成员的继承链以查找这些属性，则为 true；否则为 false。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.GetHashCode">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.GetHashCode" /> 方法的版本无关的访问。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.GetType">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetType" /> 方法的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>
如果此成员应用了一个或多个 <paramref name="attributeType" /> 参数的实例，则为 true；否则为 false。</returns>
      <param name="attributeType">自定义属性应用于的 <see cref="T:System.Type" /> 对象。 </param>
      <param name="inherit">
搜索此成员的继承链以查找这些属性，则为 true；否则为 false。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices._MemberInfo.MemberType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.MemberType" /> 属性的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberTypes" /> 值之一，指示成员的类型。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MemberInfo.Name">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.Name" /> 属性的版本无关的访问。</summary>
      <returns>包含此成员的名称的 <see cref="T:System.String" /> 对象。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MemberInfo.ReflectedType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.ReflectedType" /> 属性的版本无关的访问。</summary>
      <returns>用于获取此 <see cref="T:System.Reflection.MemberInfo" /> 对象的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.ToString">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.ToString" /> 方法的版本无关的访问。</summary>
      <returns>表示当前 <see cref="T:System.Object" /> 的字符串。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._MethodBase">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.MethodBase" /> 类的公共成员。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.Attributes">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.Attributes" /> 属性的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodAttributes" /> 值之一。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.CallingConvention">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.CallingConvention" /> 属性的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.CallingConventions" /> 值之一。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.DeclaringType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.DeclaringType" /> 属性的版本无关的访问。</summary>
      <returns>声明该成员的类的 Type 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.Equals(System.Object)">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.Equals(System.Object)" /> 方法的版本无关的访问。</summary>
      <returns>
如果指定的 <see cref="T:System.Object" /> 等于当前的 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="other">与当前的 <see cref="T:System.Object" /> 进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.GetCustomAttributes(System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>一个包含所有自定义属性的数组，在未定义任何属性时为包含零 (0) 个元素的数组。</returns>
      <param name="inherit">
搜索此成员的继承链以查找这些属性，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>应用于此成员的自定义属性的数组；如果未应用任何属性，则为包含零 (0) 个元素的数组。</returns>
      <param name="attributeType">要搜索的属性类型。只返回可分配给此类型的属性。 </param>
      <param name="inherit">
搜索此成员的继承链以查找这些属性，则为 true；否则为 false。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.GetHashCode">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.GetHashCode" /> 方法的版本无关的访问。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.GetMethodImplementationFlags">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MethodBase.GetMethodImplementationFlags" /> 方法的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodImplAttributes" /> 值之一。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.GetParameters">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MethodBase.GetParameters" /> 方法的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.ParameterInfo" /> 类型的数组，包含与此实例所反射的方法（或构造函数）的签名相匹配的信息。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.GetType">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetType" /> 方法的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.Invoke(System.Object,System.Object[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> 方法的版本无关的访问。</summary>
      <returns>与构造函数关联的类的实例。</returns>
      <param name="obj">创建了此方法的实例。 </param>
      <param name="parameters">调用的方法或构造函数的参数列表。这是一个对象数组，这些对象与要调用的方法或构造函数的参数具有相同的数量、顺序和类型。如果没有任何参数，则 <paramref name="parameters" /> 应为 null。如果此实例表示的方法或构造函数采用 ref（在 Visual Basic 中为 ByRef）参数，则使用此函数调用该方法或构造函数时，该参数不需要特殊的属性。如果数组中的对象未用值来显式初始化，则该对象将包含该对象类型的默认值。对于引用类型的元素，该值为 null。对于值类型的元素，该值为 0、0.0 或 false，具体取决于特定的元素类型。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> 方法的版本无关的访问。</summary>
      <returns>与构造函数关联的类的实例。</returns>
      <param name="obj">创建了此方法的实例。</param>
      <param name="invokeAttr">指定绑定类型的 BindingFlags 值之一。</param>
      <param name="binder">一个 Binder，它定义一组属性并通过反映来启用绑定、参数类型强制和成员调用。如果 <paramref name="binder" /> 为 null，则使用 Binder.DefaultBinding。</param>
      <param name="parameters">Object 类型的数组，该类型用于在 <paramref name="binder" /> 的约束下匹配此构造函数的参数的个数、顺序和类型。如果此构造函数不需要参数，则像 Object[] parameters = new Object[0] 中那样传递一个包含零元素的数组。如果数组中的对象未用值来显式初始化，则该对象将包含该对象类型的默认值。对于引用类型的元素，该值为 null。对于值类型的元素，该值为 0、0.0 或 false，具体取决于特定的元素类型。</param>
      <param name="culture">用于控制类型强制的 <see cref="T:System.Globalization.CultureInfo" /> 对象。如果这是 null，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsAbstract">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsAbstract" /> 属性的版本无关的访问。</summary>
      <returns>
如果该方法是抽象的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsAssembly">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsAssembly" /> 属性的版本无关的访问。</summary>
      <returns>
如果此方法可以由同一程序集中的其他类调用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsConstructor">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsConstructor" /> 属性的版本无关的访问。</summary>
      <returns>
如果此方法为构造函数，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.IsDefined(System.Type,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>
如果此成员应用了一个或多个 <paramref name="attributeType" /> 参数的实例，则为 true；否则为 false。</returns>
      <param name="attributeType">自定义属性应用于的 Type 对象。 </param>
      <param name="inherit">
搜索此成员的继承链以查找这些属性，则为 true；否则为 false。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsFamily">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsFamily" /> 属性的版本无关的访问。</summary>
      <returns>
如果对此类的访问只限于此类本身的成员和它的派生类的成员，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsFamilyAndAssembly" /> 属性的版本无关的访问。</summary>
      <returns>
如果对此方法的访问只限于此类本身的成员和同一程序集中的派生类的成员，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsFamilyOrAssembly" /> 属性的版本无关的访问。</summary>
      <returns>
如果对此方法的访问只限于该类本身的成员、派生类的成员（与它们的位置无关）以及同一程序集中其他类的成员，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsFinal">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsFinal" /> 属性的版本无关的访问。</summary>
      <returns>
如果此方法为 final，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsHideBySig">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsHideBySig" /> 属性的版本无关的访问。</summary>
      <returns>
如果此成员被签名隐藏，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsPrivate">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsPrivate" /> 属性的版本无关的访问。</summary>
      <returns>
如果对此方法的访问只限于该类本身的其他成员，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsPublic">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsPublic" /> 属性的版本无关的访问。</summary>
      <returns>
如果此方法是公共的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsSpecialName">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsSpecialName" /> 属性的版本无关的访问。</summary>
      <returns>
如果此方法具有特殊名称，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsStatic">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsStatic" /> 属性的版本无关的访问。</summary>
      <returns>
如果此方法是 static 方法，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsVirtual">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsVirtual" /> 属性的版本无关的访问。</summary>
      <returns>
如果是 virtual 方法，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.MemberType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.MemberType" /> 属性的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberTypes" /> 值之一，指示成员的类型。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.MethodHandle">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.MethodHandle" /> 属性的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.RuntimeMethodHandle" /> 对象。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.Name">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.Name" /> 属性的版本无关的访问。</summary>
      <returns>包含此成员的名称的 <see cref="T:System.String" /> 对象。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.ReflectedType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.ReflectedType" /> 属性的版本无关的访问。</summary>
      <returns>用于获取此 MemberInfo 对象的 Type 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.ToString">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.ToString" /> 方法的版本无关的访问。</summary>
      <returns>表示当前 <see cref="T:System.Object" /> 的字符串。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._MethodBuilder">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._MethodInfo">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.MethodInfo" /> 类的公共成员。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.Attributes">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.Attributes" /> 属性的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodAttributes" /> 值之一。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.CallingConvention">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.CallingConvention" /> 属性的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.CallingConventions" /> 值之一。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.DeclaringType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.DeclaringType" /> 属性的版本无关的访问。</summary>
      <returns>声明该成员的类的 Type 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.Equals(System.Object)">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.Equals(System.Object)" /> 方法的版本无关的访问。</summary>
      <returns>
如果指定的 <see cref="T:System.Object" /> 等于当前的 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="other">与当前的 <see cref="T:System.Object" /> 进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetBaseDefinition">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MethodInfo.GetBaseDefinition" /> 方法的版本无关的访问。</summary>
      <returns>表示此方法第一个实现的 <see cref="T:System.Reflection.MethodInfo" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetCustomAttributes(System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>一个包含所有自定义属性的数组，在未定义任何属性时为包含零 (0) 个元素的数组。</returns>
      <param name="inherit">
搜索此成员的继承链以查找这些属性，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>应用于此成员的自定义属性的数组；如果未应用任何属性，则为包含零 (0) 个元素的数组。</returns>
      <param name="attributeType">要搜索的属性类型。只返回可分配给此类型的属性。 </param>
      <param name="inherit">
搜索此成员的继承链以查找这些属性，则为 true；否则为 false。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetHashCode">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.GetHashCode" /> 方法的版本无关的访问。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetMethodImplementationFlags">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MethodBase.GetMethodImplementationFlags" /> 方法的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodImplAttributes" /> 值之一。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetParameters">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MethodBase.GetParameters" /> 方法的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.ParameterInfo" /> 类型的数组，包含与此实例所反射的方法（或构造函数）的签名相匹配的信息。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetType">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetType" /> 方法的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.Invoke(System.Object,System.Object[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> 方法的版本无关的访问。</summary>
      <returns>与构造函数关联的类的实例。</returns>
      <param name="obj">创建了此方法的实例。 </param>
      <param name="parameters">调用的方法或构造函数的参数列表。这是一个对象数组，这些对象与要调用的方法或构造函数的参数具有相同的数量、顺序和类型。如果没有任何参数，则 <paramref name="parameters" /> 应为 null。如果此实例表示的方法或构造函数采用 ref（在 Visual Basic 中为 ByRef）参数，则使用此函数调用该方法或构造函数时，该参数不需要特殊的属性。如果数组中的对象未用值来显式初始化，则该对象将包含该对象类型的默认值。对于引用类型的元素，该值为 null。对于值类型的元素，该值为 0、0.0 或 false，具体取决于特定的元素类型。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> 方法的版本无关的访问。</summary>
      <returns>与构造函数关联的类的实例。</returns>
      <param name="obj">创建了此方法的实例。</param>
      <param name="invokeAttr">指定绑定类型的 BindingFlags 值之一。</param>
      <param name="binder">一个 Binder，它定义一组属性并通过反映来启用绑定、参数类型强制和成员调用。如果 <paramref name="binder" /> 为 null，则使用 Binder.DefaultBinding。</param>
      <param name="parameters">Object 类型的数组，该类型用于在 <paramref name="binder" /> 的约束下匹配此构造函数的参数的个数、顺序和类型。如果此构造函数不需要参数，则像 Object[] parameters = new Object[0] 中那样传递一个包含零元素的数组。如果数组中的对象未用值来显式初始化，则该对象将包含该对象类型的默认值。对于引用类型的元素，该值为 null。对于值类型的元素，该值为 0、0.0 或 false，具体取决于特定的元素类型。</param>
      <param name="culture">用于控制类型强制的 <see cref="T:System.Globalization.CultureInfo" /> 对象。如果这是 null，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsAbstract">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsAbstract" /> 属性的版本无关的访问。</summary>
      <returns>
如果该方法是抽象的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsAssembly">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsAssembly" /> 属性的版本无关的访问。</summary>
      <returns>
如果此方法可以由同一程序集中的其他类调用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsConstructor">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsConstructor" /> 属性的版本无关的访问。</summary>
      <returns>
如果此方法为构造函数，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.IsDefined(System.Type,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>
如果此成员应用了一个或多个 <paramref name="attributeType" /> 参数的实例，则为 true；否则为 false。</returns>
      <param name="attributeType">自定义属性应用于的 Type 对象。 </param>
      <param name="inherit">
搜索此成员的继承链以查找这些属性，则为 true；否则为 false。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsFamily">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsFamily" /> 属性的版本无关的访问。</summary>
      <returns>
如果对此类的访问只限于此类本身的成员和它的派生类的成员，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsFamilyAndAssembly">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsFamilyAndAssembly" /> 属性的版本无关的访问。</summary>
      <returns>
如果对此方法的访问只限于此类本身的成员和同一程序集中的派生类的成员，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsFamilyOrAssembly">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsFamilyOrAssembly" /> 属性的版本无关的访问。</summary>
      <returns>
如果对此方法的访问只限于该类本身的成员、派生类的成员（与它们的位置无关）以及同一程序集中其他类的成员，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsFinal">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsFinal" /> 属性的版本无关的访问。</summary>
      <returns>
如果此方法为 final，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsHideBySig">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsHideBySig" /> 属性的版本无关的访问。</summary>
      <returns>
如果此成员被签名隐藏，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsPrivate">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsPrivate" /> 属性的版本无关的访问。</summary>
      <returns>
如果对此方法的访问只限于该类本身的其他成员，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsPublic">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsPublic" /> 属性的版本无关的访问。</summary>
      <returns>
如果此方法是公共的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsSpecialName">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsSpecialName" /> 属性的版本无关的访问。</summary>
      <returns>
如果此方法具有特殊名称，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsStatic">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsStatic" /> 属性的版本无关的访问。</summary>
      <returns>
如果此方法是 static 方法，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsVirtual">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.IsVirtual" /> 属性的版本无关的访问。</summary>
      <returns>
如果是 virtual 方法，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.MemberType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.MemberType" /> 属性的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberTypes" /> 值之一，指示成员的类型。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.MethodHandle">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodBase.MethodHandle" /> 属性的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.RuntimeMethodHandle" /> 对象。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.Name">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.Name" /> 属性的版本无关的访问。</summary>
      <returns>包含此成员的名称的 <see cref="T:System.String" /> 对象。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.ReflectedType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.ReflectedType" /> 属性的版本无关的访问。</summary>
      <returns>用于获取此 MemberInfo 对象的 Type 对象。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.ReturnType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodInfo.ReturnType" /> 属性的版本无关的访问。</summary>
      <returns>此方法的返回类型。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.ReturnTypeCustomAttributes">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes" /> 属性的版本无关的访问。</summary>
      <returns>表示返回类型自定义属性的 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.ToString">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.ToString" /> 方法的版本无关的访问。</summary>
      <returns>表示当前 <see cref="T:System.Object" /> 的字符串。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._MethodRental">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.Emit.MethodRental" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodRental.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodRental.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodRental.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodRental.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._Module">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.Module" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._Module.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Module.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Module.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Module.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._ModuleBuilder">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.Emit.ModuleBuilder" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ModuleBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ModuleBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._ParameterBuilder">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.Emit.ParameterBuilder" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._ParameterBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ParameterBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ParameterBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ParameterBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._ParameterInfo">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.ParameterInfo" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ParameterInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._PropertyBuilder">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.Emit.PropertyBuilder" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._PropertyInfo">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.PropertyInfo" /> 类的公共成员。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices._PropertyInfo.Attributes">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.PropertyInfo.Attributes" /> 属性的版本无关的访问。</summary>
      <returns>此属性 (Property) 的属性 (Attribute)。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._PropertyInfo.CanRead">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.PropertyInfo.CanRead" /> 属性的版本无关的访问。</summary>
      <returns>
如果此属性可读，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._PropertyInfo.CanWrite">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.PropertyInfo.CanWrite" /> 属性的版本无关的访问。</summary>
      <returns>
如果此属性可写，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._PropertyInfo.DeclaringType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.DeclaringType" /> 属性的版本无关的访问。</summary>
      <returns>声明该成员的类的 Type 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.Equals(System.Object)">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.Equals(System.Object)" /> 方法的版本无关的访问。</summary>
      <returns>
如果指定的 <see cref="T:System.Object" /> 等于当前的 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="other">与当前的 <see cref="T:System.Object" /> 进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetAccessors">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.PropertyInfo.GetAccessors" /> 方法的版本无关的访问。</summary>
      <returns>如果找到访问器，则返回一个 <see cref="T:System.Reflection.MethodInfo" /> 对象的数组，这些对象反射了由当前实例反射的属性的公共 get、set 以及其他访问器；如果没有找到访问器，则返回包含零 (0) 个元素的数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetAccessors(System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 对象的数组，其元素反射了由当前实例反射的属性的 get、set 及其他访问器。如果 <paramref name="nonPublic" /> 参数为 true，则此数组包含公共及非公共 get、set 及其他访问器。如果 <paramref name="nonPublic" /> 为 false，则此数组仅包含公共 get、set 及其他访问器。如果没有找到具有指定可见性的访问器，则此方法将返回包含零 (0) 个元素的数组。</returns>
      <param name="nonPublic">true 表示在返回的 MethodInfo 数组中包含非公共方法；否则，为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetCustomAttributes(System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>一个包含所有自定义属性的数组，在未定义任何属性时为包含零个元素的数组。</returns>
      <param name="inherit">true 表示搜索此成员的继承链以查找这些属性；否则为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>应用于此成员的自定义属性的数组；如果未应用任何属性，则为包含零 (0) 个元素的数组。</returns>
      <param name="attributeType">要搜索的属性类型。只返回可分配给此类型的属性。 </param>
      <param name="inherit">true 表示搜索此成员的继承链以查找这些属性；否则为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetGetMethod">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.PropertyInfo.GetGetMethod" /> 方法的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 对象，表示此属性的公共 get 访问器；如果 get 访问器是非公共的或不存在，则为 null。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetGetMethod(System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>如果 <paramref name="nonPublic" /> 参数为 true，则返回表示此属性的 get 访问器的 <see cref="T:System.Reflection.MethodInfo" /> 对象。如果 <paramref name="nonPublic" /> 为 false 且 get 访问器是非公共的，或者 <paramref name="nonPublic" /> 为 true 但是不存在 get 访问器，则返回 null。</returns>
      <param name="nonPublic">true 表示返回非公共的 get 访问器；否则，为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetHashCode">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.GetHashCode" /> 方法的版本无关的访问。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetIndexParameters">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" /> 方法的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.ParameterInfo" /> 类型的数组，它包含索引的参数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetSetMethod">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.PropertyInfo.GetSetMethod" /> 方法的版本无关的访问。</summary>
      <returns>如果 set 访问器是公共的，则为表示此属性的 Set 方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象；如果 set 访问器是非公共的，则为 null。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetSetMethod(System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>值 条件 表示此属性的 Set 方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象。 set 访问器是公共的。- 或 - <paramref name="nonPublic" /> 参数为 true，且 set 访问器是非公共的。 null<paramref name="nonPublic" /> 参数为 true，但属性是只读的。- 或 - <paramref name="nonPublic" /> 参数为 false，且 set 访问器是非公共的。- 或 - 不存在 set 访问器。 </returns>
      <param name="nonPublic">true 表示返回非公共访问器；否则，为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetType">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.GetType" /> 方法的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object,System.Object[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" /> 方法的版本无关的访问。</summary>
      <returns>
        <paramref name="obj" /> 参数的属性值。</returns>
      <param name="obj">将返回其属性值的对象。 </param>
      <param name="index">索引化属性的可选索引值。对于非索引化属性，此值应为 null。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> 方法的版本无关的访问。</summary>
      <returns>
        <paramref name="obj" /> 参数的属性值。</returns>
      <param name="obj">将返回其属性值的对象。 </param>
      <param name="invokeAttr">调用属性。这必须是 BindingFlags 中的位标志：InvokeMethod、CreateInstance、Static、GetField、SetField、GetProperty 或 SetProperty。必须指定合适的调用属性。如果要调用静态成员，则必须设置 BindingFlags 的 Static 标志。 </param>
      <param name="binder">一个对象，它启用绑定、对参数类型的强制、对成员的调用，以及通过反射对 MemberInfo 对象的检索。如果 <paramref name="binder" /> 为 null，则使用默认联编程序。 </param>
      <param name="index">索引化属性的可选索引值。对于非索引化属性，此值应为 null。 </param>
      <param name="culture">CultureInfo 对象，它表示资源将针对哪个区域性进行本地化。请注意，如果没有为此区域性本地化该资源，则在搜索匹配项的过程中将继续调用 CultureInfo.Parent 方法。如果此值为 null，则从 CultureInfo.CurrentUICulture 属性获得 CultureInfo。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.IsDefined(System.Type,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>
如果对此成员应用了 <paramref name="attributeType" /> 参数的一个或多个实例，则为 true；否则为 false。</returns>
      <param name="attributeType">自定义属性应用于的 <see cref="T:System.Type" /> 对象。 </param>
      <param name="inherit">true 表示搜索此成员的继承链以查找这些属性；否则为 false。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices._PropertyInfo.IsSpecialName">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.PropertyInfo.IsSpecialName" /> 属性的版本无关的访问。</summary>
      <returns>
如果此属性是特殊名称，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._PropertyInfo.MemberType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.PropertyInfo.MemberType" /> 属性的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberTypes" /> 值之一，指示此成员是一个属性。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._PropertyInfo.Name">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.Name" /> 属性的版本无关的访问。</summary>
      <returns>包含此成员的名称的 <see cref="T:System.String" /> 对象。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._PropertyInfo.PropertyType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 属性的版本无关的访问。</summary>
      <returns>此属性的类型。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._PropertyInfo.ReflectedType">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.ReflectedType" /> 属性的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，通过它获取了该 <see cref="T:System.Reflection.MemberInfo" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])" /> 方法的版本无关的访问。</summary>
      <param name="obj">将设置其属性值的对象。 </param>
      <param name="value">此属性的新值。 </param>
      <param name="index">索引化属性的可选索引值。对于非索引化属性，此值应为 null。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" /> 方法的版本无关的访问。</summary>
      <param name="obj">将返回其属性值的对象。 </param>
      <param name="value">此属性的新值。 </param>
      <param name="invokeAttr">调用属性。这必须是 <see cref="T:System.Reflection.BindingFlags" /> 中的位标志：InvokeMethod、CreateInstance、Static、GetField、SetField、GetProperty 或 SetProperty。必须指定合适的调用属性。如果要调用静态成员，则必须设置 BindingFlags 的 Static 标志。 </param>
      <param name="binder">一个对象，它启用绑定、对参数类型的强制、对成员的调用，以及通过反射对 <see cref="T:System.Reflection.MemberInfo" /> 对象的检索。如果 <paramref name="binder" /> 为 null，则使用默认联编程序。 </param>
      <param name="index">索引化属性的可选索引值。对于非索引化属性，此值应为 null。 </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 对象，它表示资源将针对哪个区域性进行本地化。请注意，如果没有为此区域性本地化该资源，则在搜索匹配项的过程中将继续调用 CultureInfo.Parent 方法。如果此值为 null，则从 CultureInfo.CurrentUICulture 属性获得 CultureInfo。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.ToString">
      <summary>为 COM 对象提供对 <see cref="M:System.Object.ToString" /> 方法的版本无关的访问。</summary>
      <returns>表示当前 <see cref="T:System.Object" /> 的字符串。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._SignatureHelper">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._SignatureHelper.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._SignatureHelper.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._SignatureHelper.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._SignatureHelper.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._Thread">
      <summary>向非托管代码公开 <see cref="T:System.Threading.Thread" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._Thread.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Thread.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Thread.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">此方法返回时包含一个用于接收对象提供的类型信息接口数量的位置指针。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Thread.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices._Type">
      <summary>向非托管代码公开 <see cref="T:System.Type" /> 类的公共成员。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.Assembly">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.Assembly" /> 属性的版本无关的访问。</summary>
      <returns>描述包含当前类型的程序集的 <see cref="T:System.Reflection.Assembly" /> 实例。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.AssemblyQualifiedName">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.AssemblyQualifiedName" /> 属性的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Type" /> 的程序集限定名，包括从中加载 <see cref="T:System.Type" /> 的程序集的名称。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.Attributes">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.Attributes" /> 属性的版本无关的访问。</summary>
      <returns>表示 <see cref="T:System.Type" /> 的属性集的 <see cref="T:System.Reflection.TypeAttributes" /> 对象，除非 <see cref="T:System.Type" /> 表示泛型类型形参，在此情况下该值未指定。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.BaseType">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.BaseType" /> 属性的版本无关的访问。</summary>
      <returns>当前 <see cref="T:System.Type" /> 直接继承的 <see cref="T:System.Type" />；如果当前 Type 表示 <see cref="T:System.Object" /> 类，则为 null。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.DeclaringType">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.DeclaringType" /> 属性的版本无关的访问。</summary>
      <returns>声明该成员的类的 <see cref="T:System.Type" /> 对象。如果该类型是嵌套类型，则该属性返回封闭类型。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.Equals(System.Object)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.Equals(System.Object)" /> 方法的版本无关的访问。</summary>
      <returns>
如果 <paramref name="o" /> 的基础系统类型与当前 <see cref="T:System.Type" /> 的基础系统类型相同，则为 true；否则为 false。</returns>
      <param name="other">
        <see cref="T:System.Object" />，其基础系统类型将与当前 <see cref="T:System.Type" /> 的基础系统类型相比较。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.Equals(System.Type)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.Equals(System.Type)" /> 方法的版本无关的访问。</summary>
      <returns>
如果 <paramref name="o" /> 的基础系统类型与当前 <see cref="T:System.Type" /> 的基础系统类型相同，则为 true；否则为 false。</returns>
      <param name="o">
        <see cref="T:System.Type" />，其基础系统类型将与当前 <see cref="T:System.Type" /> 的基础系统类型相比较。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" /> 方法的版本无关的访问。</summary>
      <returns>表示接口（由当前 <see cref="T:System.Type" /> 所实现或继承）的筛选列表的 <see cref="T:System.Type" /> 对象数组。- 或 - 如果没有匹配筛选器的接口由当前 <see cref="T:System.Type" /> 实现或继承，则为 <see cref="T:System.Type" /> 类型的空数组。</returns>
      <param name="filter">对照 <paramref name="filterCriteria" /> 比较接口的 <see cref="T:System.Reflection.TypeFilter" /> 委托。 </param>
      <param name="filterCriteria">确定接口是否应包括在返回数组中的搜索判据。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" /> 方法的版本无关的访问。</summary>
      <returns>指定成员类型的 <see cref="T:System.Reflection.MemberInfo" /> 对象的筛选数组。- 或 -如果当前 <see cref="T:System.Type" /> 没有匹配筛选判据的 <paramref name="memberType" /> 类型成员，则为 <see cref="T:System.Reflection.MemberInfo" /> 类型的空数组。</returns>
      <param name="memberType">指示要搜索的成员类型的 MemberTypes 对象。 </param>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，以返回 null。 </param>
      <param name="filter">执行比较的委托，如果当前被检查的成员匹配 <paramref name="filterCriteria" />，则返回 true；否则返回 false。可以使用该类提供的 FilterAttribute、FilterName 和 FilterNameIgnoreCase 委托。第一个委托使用 FieldAttributes、MethodAttributes 和 MethodImplAttributes 的字段作为搜索判据，另两个委托使用 String 对象作为搜索判据。 </param>
      <param name="filterCriteria">确定成员是否在 MemberInfo 对象数组中返回的搜索判据。FieldAttributes、MethodAttributes 和 MethodImplAttributes 的字段可以和该类提供的 FilterAttribute 委托一起使用。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.FullName">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.FullName" /> 属性的版本无关的访问。</summary>
      <returns>包含 <see cref="T:System.Type" /> 的完全限定名（包括 <see cref="T:System.Type" /> 的命名空间，但不包括程序集）的字符串。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetArrayRank">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetArrayRank" /> 方法的版本无关的访问。</summary>
      <returns>包含当前 <see cref="T:System.Type" /> 中维数的 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 方法的版本无关的访问。</summary>
      <returns>表示符合指定要求的构造函数的 <see cref="T:System.Reflection.ConstructorInfo" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，以返回 null。 </param>
      <param name="binder">一个 <see cref="T:System.Reflection.Binder" /> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。- 或 -
若为 null，则使用 <see cref="P:System.Type.DefaultBinder" />。 </param>
      <param name="callConvention">
        <see cref="T:System.Reflection.CallingConventions" /> 对象，用于指定要使用的一套规则，这些规则涉及参数的顺序和布局、传递返回值的方式、用于参数的寄存器和清理堆栈的方式。 </param>
      <param name="types">
        <see cref="T:System.Type" /> 对象数组，表示构造函数要获取的参数的个数、顺序和类型。- 或 -获取不使用参数的构造函数的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。 </param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 对象数组，表示与 <paramref name="types" /> 数组中的相应元素关联的属性。默认的联编程序不处理此参数。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" /> 方法的版本无关的访问。</summary>
      <returns>表示符合指定要求的构造函数的 <see cref="T:System.Reflection.ConstructorInfo" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，以返回 null。 </param>
      <param name="binder">一个 <see cref="T:System.Reflection.Binder" /> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。- 或 -
若为 null，则使用 <see cref="P:System.Type.DefaultBinder" />。 </param>
      <param name="types">
        <see cref="T:System.Type" /> 对象数组，表示构造函数要获取的参数的个数、顺序和类型。- 或 -获取不使用参数的构造函数的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。- 或 -<see cref="F:System.Type.EmptyTypes" />. </param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 对象数组，表示与参数类型数组中的相应元素关联的属性。默认的联编程序不处理此参数。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetConstructor(System.Type[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetConstructor(System.Type[])" /> 方法的版本无关的访问。</summary>
      <returns>为表示某个公共实例构造函数（该构造函数的参数与参数类型数组中的类型匹配）的 <see cref="T:System.Reflection.ConstructorInfo" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="types">表示需要的构造函数的参数个数、顺序和类型的 <see cref="T:System.Type" /> 对象的数组。- 或 -<see cref="T:System.Type" /> 对象的空数组，用于获取不带参数的构造函数。这样的空数组由 static 字段 <see cref="F:System.Type.EmptyTypes" /> 提供。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetConstructors">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetConstructors" /> 方法的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.ConstructorInfo" /> 对象数组，表示当前 <see cref="T:System.Type" /> 定义的所有公共实例构造函数，但不包括类型初始值设定项（静态构造函数）。如果当前 <see cref="T:System.Type" /> 没有定义公共实例构造函数，或者当前 <see cref="T:System.Type" /> 表示泛型类型或方法定义的类型参数，则返回 <see cref="T:System.Reflection.ConstructorInfo" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" /> 方法的版本无关的访问。</summary>
      <returns>表示为当前 <see cref="T:System.Type" /> 定义的匹配指定绑定约束的所有构造函数的 <see cref="T:System.Reflection.ConstructorInfo" /> 对象数组，包括类型初始值设定项（如果定义的话）。如果当前 <see cref="T:System.Type" /> 没有定义构造函数，或者定义的构造函数都不符合绑定约束，或者当前 <see cref="T:System.Type" /> 表示泛型类型或方法定义的类型参数，则返回 <see cref="T:System.Reflection.ConstructorInfo" /> 类型的空数组。</returns>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，以返回 null。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetCustomAttributes(System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>应用于此成员的自定义属性的数组；如果未应用任何属性，则为包含零 (0) 个元素的数组。</returns>
      <param name="inherit">指定是否搜索该成员的继承链以查找这些属性。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>应用于此成员的自定义属性的数组；如果未应用任何属性，则为包含零 (0) 个元素的数组。</returns>
      <param name="attributeType">要搜索的属性类型。只返回可分配给此类型的属性。 </param>
      <param name="inherit">指定是否搜索该成员的继承链以查找这些属性。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetDefaultMembers">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetDefaultMembers" /> 方法的版本无关的访问。</summary>
      <returns>表示当前 <see cref="T:System.Type" /> 的所有默认成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组。- 或 -如果当前 <see cref="T:System.Type" /> 没有默认成员，则为 <see cref="T:System.Reflection.MemberInfo" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetElementType">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetElementType" /> 方法的版本无关的访问。</summary>
      <returns>当前数组、指针或引用类型包含的或引用的对象的 <see cref="T:System.Type" />。- 或 - 
如果当前 <see cref="T:System.Type" /> 不是数组或指针，或者不是通过引用传递的，或者表示泛型类型，或者表示泛型类型或方法定义的类型参数，则为 null。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetEvent(System.String)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetEvent(System.String)" /> 方法的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.EventInfo" /> 对象数组，表示当前 <see cref="T:System.Type" /> 所声明或继承的与指定绑定约束匹配的所有事件。- 或 -如果当前 <see cref="T:System.Type" /> 没有事件，或者如果没有一个事件匹配绑定约束，则为 <see cref="T:System.Reflection.EventInfo" /> 类型的空数组。</returns>
      <param name="name">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，以返回 null。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> 方法的版本无关的访问。</summary>
      <returns>如果找到，则为 <see cref="T:System.Reflection.EventInfo" /> 对象，该对象表示当前 <see cref="T:System.Type" /> 所声明或继承的指定事件；否则为 null。</returns>
      <param name="name">包含事件名称的 <see cref="T:System.String" />，该事件是由当前 <see cref="T:System.Type" /> 声明或继承的。 </param>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，以返回 null。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetEvents">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetEvents" /> 方法的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.EventInfo" /> 对象数组，表示当前 <see cref="T:System.Type" /> 所声明或继承的所有公共事件。- 或 -如果当前 <see cref="T:System.Type" /> 没有公共事件，则为 <see cref="T:System.Reflection.EventInfo" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" /> 方法的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.EventInfo" /> 对象数组，表示当前 <see cref="T:System.Type" /> 所声明或继承的与指定绑定约束匹配的所有事件。- 或 -如果当前 <see cref="T:System.Type" /> 没有事件，或者如果没有一个事件匹配绑定约束，则为 <see cref="T:System.Reflection.EventInfo" /> 类型的空数组。</returns>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，以返回 null。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetField(System.String)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetField(System.String)" /> 方法的版本无关的访问。</summary>
      <returns>如找到，则为表示具有指定名称的公共字段的 <see cref="T:System.Reflection.FieldInfo" /> 对象；否则为 null。</returns>
      <param name="name">包含要获取的数据字段的名称的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> 方法的版本无关的访问。</summary>
      <returns>表示符合指定要求的字段的 <see cref="T:System.Reflection.FieldInfo" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的数据字段的名称的 <see cref="T:System.String" />。 </param>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，以返回 null。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetFields">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetFields" /> 方法的版本无关的访问。</summary>
      <returns>表示为当前 <see cref="T:System.Type" /> 定义的所有公共字段的 <see cref="T:System.Reflection.FieldInfo" /> 对象数组。- 或 -如果没有为当前 <see cref="T:System.Type" /> 定义的公共字段，则为 <see cref="T:System.Reflection.FieldInfo" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" /> 方法的版本无关的访问。</summary>
      <returns>表示为当前 <see cref="T:System.Type" /> 定义的匹配指定绑定约束的所有字段的 <see cref="T:System.Reflection.FieldInfo" /> 对象数组。- 或 -如果没有为当前 <see cref="T:System.Type" /> 定义的字段，或者如果没有一个定义的字段匹配绑定约束，则为 <see cref="T:System.Reflection.FieldInfo" /> 类型的空数组。</returns>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，以返回 null。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetHashCode">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetHashCode" /> 方法的版本无关的访问。</summary>
      <returns>包含此实例的哈希代码的 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的传入数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，用于接收与名称对应的 ID。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetInterface(System.String)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetInterface(System.String)" /> 方法的版本无关的访问。</summary>
      <returns>表示具有指定名称且由当前的 <see cref="T:System.Type" /> 实现或继承的接口的 <see cref="T:System.Type" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的接口名称的 <see cref="T:System.String" />。对于泛型接口，这是重整名称。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetInterface(System.String,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>表示具有指定名称且由当前的 <see cref="T:System.Type" /> 实现或继承的接口的 <see cref="T:System.Type" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的接口名称的 <see cref="T:System.String" />。对于泛型接口，这是重整名称。</param>
      <param name="ignoreCase">true，表示对 <paramref name="name" /> 执行不区分大小写的搜索。- 或 -false，表示对 <paramref name="name" /> 执行区分大小写的搜索。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetInterfaceMap(System.Type)" /> 方法的版本无关的访问。</summary>
      <returns>表示 <paramref name="interfaceType" /> 的接口映射的 <see cref="T:System.Reflection.InterfaceMapping" /> 对象。</returns>
      <param name="interfaceType">要检索其映射的接口的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetInterfaces">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetInterfaces" /> 方法的版本无关的访问。</summary>
      <returns>表示由当前 <see cref="T:System.Type" /> 实现或继承的所有接口的 <see cref="T:System.Type" /> 对象数组。- 或 -如果没有由当前 <see cref="T:System.Type" /> 实现或继承的接口，则为 <see cref="T:System.Type" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMember(System.String)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetMember(System.String)" /> 方法的版本无关的访问。</summary>
      <returns>一个表示具有指定名称的公共成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组（如果找到的话）；否则为空数组。</returns>
      <param name="name">包含要获取的公共成员名称的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" /> 方法的版本无关的访问。</summary>
      <returns>一个表示具有指定名称的公共成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组（如果找到的话）；否则为空数组。</returns>
      <param name="name">包含要获取的成员的名称的 <see cref="T:System.String" />。 </param>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，返回空数组。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" /> 方法的版本无关的访问。</summary>
      <returns>一个表示具有指定名称的公共成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组（如果找到的话）；否则为空数组。</returns>
      <param name="name">包含要获取的成员的名称的 <see cref="T:System.String" />。 </param>
      <param name="type">要搜索的 <see cref="T:System.Reflection.MemberTypes" /> 值。 </param>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，返回空数组。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMembers">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetMembers" /> 方法的版本无关的访问。</summary>
      <returns>表示当前 <see cref="T:System.Type" /> 的所有公共成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组。- 或 -如果当前 <see cref="T:System.Type" /> 没有公共成员，则为 <see cref="T:System.Reflection.MemberInfo" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetMembers(System.Reflection.BindingFlags)" /> 方法的版本无关的访问。</summary>
      <returns>表示为当前 <see cref="T:System.Type" /> 定义的匹配指定绑定约束的所有成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组。- 或 -如果没有为当前 <see cref="T:System.Type" /> 定义的成员，或者如果没有一个定义的成员匹配绑定约束，则为 <see cref="T:System.Reflection.MemberInfo" /> 类型的空数组。</returns>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，以返回 null。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMethod(System.String)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetMethod(System.String)" /> 方法的版本无关的访问。</summary>
      <returns>表示具有指定名称的公共方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的公共方法的名称的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" /> 方法的版本无关的访问。</summary>
      <returns>表示符合指定要求的方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的方法名称的 <see cref="T:System.String" />。 </param>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，以返回 null。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 方法的版本无关的访问。</summary>
      <returns>表示符合指定要求的方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的方法名称的 <see cref="T:System.String" />。 </param>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，以返回 null。 </param>
      <param name="binder">一个 <see cref="T:System.Reflection.Binder" /> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。- 或 -
若为 null，则使用 <see cref="P:System.Type.DefaultBinder" />。 </param>
      <param name="callConvention">
        <see cref="T:System.Reflection.CallingConventions" /> 对象，用于指定要使用的一套规则，这些规则涉及参数的顺序和布局、传递返回值的方式、用于参数的寄存器和清理堆栈的方式。 </param>
      <param name="types">表示此方法要获取的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。- 或 -获取不使用参数的方法的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。 </param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 对象数组，表示与 <paramref name="types" /> 数组中的相应元素关联的属性。默认的联编程序不处理此参数。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" /> 方法的版本无关的访问。</summary>
      <returns>表示符合指定要求的方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的方法名称的 <see cref="T:System.String" />。 </param>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，以返回 null。 </param>
      <param name="binder">一个 <see cref="T:System.Reflection.Binder" /> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。- 或 -
若为 null，则使用 <see cref="P:System.Type.DefaultBinder" />。 </param>
      <param name="types">表示此方法要获取的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。- 或 -获取不使用参数的方法的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。 </param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 对象数组，表示与 <paramref name="types" /> 数组中的相应元素关联的属性。默认的联编程序不处理此参数。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetMethod(System.String,System.Type[])" /> 方法的版本无关的访问。</summary>
      <returns>表示其参数与指定参数类型匹配的公共方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的公共方法的名称的 <see cref="T:System.String" />。 </param>
      <param name="types">表示此方法要获取的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。- 或 -获取不使用参数的方法的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" /> 方法的版本无关的访问。</summary>
      <returns>表示符合指定要求的公共方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的公共方法的名称的 <see cref="T:System.String" />。 </param>
      <param name="types">表示此方法要获取的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。- 或 -获取不使用参数的方法的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。 </param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 对象数组，表示与 <paramref name="types" /> 数组中的相应元素关联的属性。默认的联编程序不处理此参数。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMethods">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetMethods" /> 方法的版本无关的访问。</summary>
      <returns>表示为当前 <see cref="T:System.Type" /> 定义的所有公共方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象数组。- 或 -如果没有为当前 <see cref="T:System.Type" /> 定义的公共方法，则为 <see cref="T:System.Reflection.MethodInfo" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" /> 方法的版本无关的访问。</summary>
      <returns>表示为当前 <see cref="T:System.Type" /> 定义的匹配指定绑定约束的所有方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象数组。- 或 -如果没有为当前 <see cref="T:System.Type" /> 定义的方法，或者如果没有一个定义的方法匹配绑定约束，则为 <see cref="T:System.Reflection.MethodInfo" /> 类型的空数组。</returns>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，以返回 null。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetNestedType(System.String)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetNestedType(System.String)" /> 方法的版本无关的访问。</summary>
      <returns>如找到，则为表示具有指定名称的公共嵌套类型的 <see cref="T:System.Type" /> 对象；否则为 null。</returns>
      <param name="name">包含要获取的嵌套类型的名称的字符串。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" /> 方法的版本无关的访问。</summary>
      <returns>表示符合指定要求的嵌套类型的 <see cref="T:System.Type" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的嵌套类型的名称的字符串。 </param>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，以返回 null。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetNestedTypes">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetNestedTypes" /> 方法的版本无关的访问。</summary>
      <returns>表示嵌套在当前 <see cref="T:System.Type" /> 中的所有类型的 <see cref="T:System.Type" /> 对象数组。- 或 -如果没有嵌套在当前 <see cref="T:System.Type" /> 中的类型，则为 <see cref="T:System.Type" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" /> 方法的版本无关的访问，并使用指定绑定约束搜索嵌套在当前 <see cref="T:System.Type" /> 中的类型。</summary>
      <returns>表示嵌套在当前 <see cref="T:System.Type" /> 中的匹配指定绑定约束的所有类型的 <see cref="T:System.Type" /> 对象数组。- 或 -如果没有嵌套在当前 <see cref="T:System.Type" /> 中的类型，或者如果没有一个嵌套类型匹配绑定约束，则为 <see cref="T:System.Type" /> 类型的空数组。</returns>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，以返回 null。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetProperties">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetProperties" /> 方法的版本无关的访问。</summary>
      <returns>表示当前 <see cref="T:System.Type" /> 的所有公共属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象数组。- 或 -如果当前 <see cref="T:System.Type" /> 没有公共属性，则为 <see cref="T:System.Reflection.PropertyInfo" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" /> 方法的版本无关的访问。</summary>
      <returns>表示当前 <see cref="T:System.Type" /> 的匹配指定绑定约束的所有属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象数组。- 或 -如果当前 <see cref="T:System.Type" /> 没有属性，或者如果没有一个属性匹配绑定约束，则为 <see cref="T:System.Reflection.PropertyInfo" /> 类型的空数组。</returns>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，以返回 null。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetProperty(System.String)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetProperty(System.String)" /> 方法的版本无关的访问。</summary>
      <returns>表示具有指定名称的公共属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的公共属性名的 <see cref="T:System.String" />。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" /> 方法的版本无关的访问。</summary>
      <returns>表示符合指定要求的属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的属性名的 <see cref="T:System.String" />。 </param>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，以返回 null。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> 方法的版本无关的访问。</summary>
      <returns>表示符合指定要求的属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的属性名的 <see cref="T:System.String" />。 </param>
      <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。- 或 -零，以返回 null。 </param>
      <param name="binder">一个 <see cref="T:System.Reflection.Binder" /> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。- 或 -
若为 null，则使用 <see cref="P:System.Type.DefaultBinder" />。 </param>
      <param name="returnType">属性的返回类型。 </param>
      <param name="types">表示要获取的索引属性的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。- 或 -获取未被索引的属性的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。 </param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 对象数组，表示与 <paramref name="types" /> 数组中的相应元素关联的属性。默认的联编程序不处理此参数。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetProperty(System.String,System.Type)" /> 方法的版本无关的访问。</summary>
      <returns>表示具有指定名称的公共属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的公共属性名的 <see cref="T:System.String" />。 </param>
      <param name="returnType">属性的返回类型。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" /> 方法的版本无关的访问。</summary>
      <returns>表示其参数与指定参数类型匹配的公共属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的公共属性名的 <see cref="T:System.String" />。 </param>
      <param name="returnType">属性的返回类型。 </param>
      <param name="types">表示要获取的索引属性的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。- 或 -获取未被索引的属性的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> 方法的版本无关的访问。</summary>
      <returns>表示符合指定要求的公共属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的公共属性名的 <see cref="T:System.String" />。 </param>
      <param name="returnType">属性的返回类型。 </param>
      <param name="types">表示要获取的索引属性的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。- 或 -获取未被索引的属性的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。 </param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 对象数组，表示与 <paramref name="types" /> 数组中的相应元素关联的属性。默认的联编程序不处理此参数。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetProperty(System.String,System.Type[])" /> 方法的版本无关的访问。</summary>
      <returns>表示其参数与指定参数类型匹配的公共属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象（如果找到的话）；否则为 null。</returns>
      <param name="name">包含要获取的公共属性名的 <see cref="T:System.String" />。 </param>
      <param name="types">表示要获取的索引属性的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。- 或 -获取未被索引的属性的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetType">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.GetType" /> 方法的版本无关的访问。</summary>
      <returns>当前的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">接收一个指针，指向请求的类型信息对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">指向一个位置，该位置接收对象提供的类型信息接口的数量。</param>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.GUID">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.GUID" /> 属性的版本无关的访问。</summary>
      <returns>与 <see cref="T:System.Type" /> 关联的 GUID。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.HasElementType">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.HasElementType" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 为数组、指针或是通过引用传递的，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">标识成员。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组中元素数的计数。</param>
      <param name="pVarResult">指向要存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> 方法的版本无关的访问。</summary>
      <returns>表示被调用成员的返回值的 <see cref="T:System.Object" />。</returns>
      <param name="name">
        <see cref="T:System.String" />，它包含要调用的构造函数、方法、属性或字段成员的名称。- 或 -空字符串 ("")，表示调用默认成员。 - 或 -对于 IDispatch 成员，一个表示 DispID 的字符串，例如“[DispID=3]”。</param>
      <param name="invokeAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。访问可以是 BindingFlags 之一，如 Public、NonPublic、Private、InvokeMethod 和 GetField 等。不需要指定查找类型。如果省略查找类型，则将应用 BindingFlags.Public |BindingFlags.Instance。 </param>
      <param name="binder">一个 <see cref="T:System.Reflection.Binder" /> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。- 或 -
若为 null，则使用 <see cref="P:System.Type.DefaultBinder" />。 </param>
      <param name="target">要在其上调用指定成员的 <see cref="T:System.Object" />。 </param>
      <param name="args">包含传递给要调用的成员的参数的数组。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" /> 方法的版本无关的访问。</summary>
      <returns>表示被调用成员的返回值的 <see cref="T:System.Object" />。</returns>
      <param name="name">
        <see cref="T:System.String" />，它包含要调用的构造函数、方法、属性或字段成员的名称。- 或 -空字符串 ("")，表示调用默认成员。 - 或 -对于 IDispatch 成员，一个表示 DispID 的字符串，例如“[DispID=3]”。</param>
      <param name="invokeAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。访问可以是 BindingFlags 之一，如 Public、NonPublic、Private、InvokeMethod 和 GetField 等。不需要指定查找类型。如果省略查找类型，则将应用 BindingFlags.Public |BindingFlags.Instance。 </param>
      <param name="binder">一个 <see cref="T:System.Reflection.Binder" /> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。- 或 -
若为 null，则使用 <see cref="P:System.Type.DefaultBinder" />。 </param>
      <param name="target">要在其上调用指定成员的 <see cref="T:System.Object" />。 </param>
      <param name="args">包含传递给要调用的成员的参数的数组。 </param>
      <param name="culture">表示要使用的全局化区域设置的 <see cref="T:System.Globalization.CultureInfo" /> 对象，它对区域设置特定的转换可能是必需的，比如将数字 String 转换为 Double。- 或 -null，表示使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 方法的版本无关的访问。</summary>
      <returns>表示被调用成员的返回值的 <see cref="T:System.Object" />。</returns>
      <param name="name">
        <see cref="T:System.String" />，它包含要调用的构造函数、方法、属性或字段成员的名称。- 或 -空字符串 ("")，表示调用默认成员。 - 或 -对于 IDispatch 成员，一个表示 DispID 的字符串，例如“[DispID=3]”。</param>
      <param name="invokeAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。访问可以是 BindingFlags 之一，如 Public、NonPublic、Private、InvokeMethod 和 GetField 等。不需要指定查找类型。如果省略查找类型，则将应用 BindingFlags.Public |BindingFlags.Instance。 </param>
      <param name="binder">一个 <see cref="T:System.Reflection.Binder" /> 对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。- 或 -
若为 null，则使用 <see cref="P:System.Type.DefaultBinder" />。 </param>
      <param name="target">要在其上调用指定成员的 <see cref="T:System.Object" />。 </param>
      <param name="args">包含传递给要调用的成员的参数的数组。 </param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 对象数组，表示与 <paramref name="args" /> 数组中的相应元素关联的属性。参数的关联的属性存储在成员的签名中。默认的联编程序不处理此参数。 </param>
      <param name="culture">表示要使用的全局化区域设置的 <see cref="T:System.Globalization.CultureInfo" /> 对象，它对区域设置特定的转换可能是必需的，比如将数字 String 转换为 Double。- 或 -null，表示使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。 </param>
      <param name="namedParameters">包含参数名称的数组，<paramref name="args" /> 数组中的值被传递给这些参数。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsAbstract">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsAbstract" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 是抽象的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsAnsiClass">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsAnsiClass" /> 属性的版本无关的访问。</summary>
      <returns>
如果为 <see cref="T:System.Type" /> 选择了字符串格式属性 AnsiClass，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsArray">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsArray" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 是数组，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> 方法的版本无关的访问。</summary>
      <returns>
如果 <paramref name="c" /> 和当前 <see cref="T:System.Type" /> 表示相同的类型，或者当前 <see cref="T:System.Type" /> 位于 <paramref name="c" /> 的继承层次结构中，或者当前 <see cref="T:System.Type" /> 是 <paramref name="c" /> 所实现的接口，或者 <paramref name="c" /> 是一个泛型类型参数并且当前 <see cref="T:System.Type" /> 表示 <paramref name="c" /> 的约束之一，则为 true。如果这些条件都不成立，或者 <paramref name="c" /> 为 null，则为 false。</returns>
      <param name="c">与当前的 <see cref="T:System.Type" /> 进行比较的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsAutoClass">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsAutoClass" /> 属性的版本无关的访问。</summary>
      <returns>
如果为 <see cref="T:System.Type" /> 选择了字符串格式属性 AutoClass，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsAutoLayout">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsAutoLayout" /> 属性的版本无关的访问。</summary>
      <returns>
如果为 <see cref="T:System.Type" /> 选定了类布局属性 (Attribute) AutoLayout，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsByRef">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsByRef" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 由引用传递，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsClass">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsClass" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 是类，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsCOMObject">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsCOMObject" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 为 COM 对象，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsContextful">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsContextful" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 能够在某个上下文中承载，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.IsDefined(System.Type,System.Boolean)">
      <summary>为 COM 对象提供对 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> 方法的版本无关的访问。</summary>
      <returns>
如果此成员应用了一个或多个 <paramref name="attributeType" /> 实例，则为 true；否则为 false。</returns>
      <param name="attributeType">自定义属性应用于的 Type 对象。 </param>
      <param name="inherit">指定是否搜索该成员的继承链以查找这些属性。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsEnum">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsEnum" /> 属性的版本无关的访问。</summary>
      <returns>
如果当前 <see cref="T:System.Type" /> 表示枚举，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsExplicitLayout">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsExplicitLayout" /> 属性的版本无关的访问。</summary>
      <returns>
如果为 <see cref="T:System.Type" /> 选定了类布局属性 (Attribute) ExplicitLayout，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsImport">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsImport" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 具有 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.IsInstanceOfType(System.Object)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.IsInstanceOfType(System.Object)" /> 方法的版本无关的访问。</summary>
      <returns>
如果当前 <see cref="T:System.Type" /> 位于 <paramref name="o" /> 所表示的对象继承层次结构中，或者当前 <see cref="T:System.Type" /> 是 <paramref name="o" /> 所支持的接口，则为 true。如果这两个条件都不成立，或者 <paramref name="o" /> 为 null，或者当前 <see cref="T:System.Type" /> 是一个开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 返回 true），则为 false。</returns>
      <param name="o">将与当前 <see cref="T:System.Type" /> 进行比较的对象。</param>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsInterface">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsInterface" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 为接口，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsLayoutSequential">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsLayoutSequential" /> 属性的版本无关的访问。</summary>
      <returns>
如果为 <see cref="T:System.Type" /> 选定了类布局属性 (Attribute) SequentialLayout，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsMarshalByRef">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsMarshalByRef" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 是由引用封送的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsNestedAssembly">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsNestedAssembly" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 是嵌套的并且只在它自己的程序集内可见，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsNestedFamANDAssem">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsNestedFamANDAssem" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 是嵌套的并且只对同时属于自己家族和自己程序集的类可见，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsNestedFamily">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsNestedFamily" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 是嵌套的并且只在它自己的家族内可见，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsNestedFamORAssem">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsNestedFamORAssem" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 是嵌套的并且只对属于它自己的家族或属于它自己的程序集的类可见，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsNestedPrivate">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsNestedPrivate" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 是嵌套的并且声明为私有的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsNestedPublic">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsNestedPublic" /> 属性的版本无关的访问。</summary>
      <returns>
如果类是嵌套的并且声明为公共的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsNotPublic">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsNotPublic" /> 属性的版本无关的访问。</summary>
      <returns>
如果顶级 <see cref="T:System.Type" /> 不是声明为公共的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsPointer">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsPointer" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 是指针，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsPrimitive">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsPrimitive" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 为基元类型之一，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsPublic">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsPublic" /> 属性的版本无关的访问。</summary>
      <returns>
如果顶级 <see cref="T:System.Type" /> 声明为公共的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsSealed">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsSealed" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 声明为密封的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsSerializable">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsSerializable" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 是可序列化的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsSpecialName">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsSpecialName" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 具有需要特殊处理的名称，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.IsSubclassOf(System.Type)">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.IsSubclassOf(System.Type)" /> 方法的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 由 <paramref name="c" /> 参数表示且当前 <see cref="T:System.Type" /> 表示类，并且当前 <see cref="T:System.Type" /> 所表示的类是从 <paramref name="c" /> 所表示的类派生的，则为 true；否则为 false。如果 <paramref name="c" /> 和当前 <see cref="T:System.Type" /> 表示相同的类，则此方法也返回 false。</returns>
      <param name="c">与当前的 <see cref="T:System.Type" /> 进行比较的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsUnicodeClass">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsUnicodeClass" /> 属性的版本无关的访问。</summary>
      <returns>
如果为 <see cref="T:System.Type" /> 选择了字符串格式属性 UnicodeClass，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsValueType">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.IsValueType" /> 属性的版本无关的访问。</summary>
      <returns>
如果 <see cref="T:System.Type" /> 是值类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.MemberType">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.MemberType" /> 属性的版本无关的访问。</summary>
      <returns>一个 <see cref="T:System.Reflection.MemberTypes" /> 值，指示此成员是类型还是嵌套类型。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.Module">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.Module" /> 属性的版本无关的访问。</summary>
      <returns>在其中定义当前 <see cref="T:System.Type" /> 的模块的名称。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.Name">
      <summary>为 COM 对象提供对 <see cref="P:System.Reflection.MemberInfo.Name" /> 属性的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Type" /> 的名称。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.Namespace">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.Namespace" /> 属性的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Type" /> 的命名空间。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.ReflectedType">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.ReflectedType" /> 属性的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，通过它获取了该 <see cref="T:System.Reflection.MemberInfo" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.ToString">
      <summary>为 COM 对象提供对 <see cref="M:System.Type.ToString" /> 方法的版本无关的访问。</summary>
      <returns>表示当前 <see cref="T:System.Type" /> 的名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.TypeHandle">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.TypeHandle" /> 属性的版本无关的访问。</summary>
      <returns>当前 <see cref="T:System.Type" /> 的句柄。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.TypeInitializer">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.TypeInitializer" /> 属性的版本无关的访问。</summary>
      <returns>包含 <see cref="T:System.Type" /> 的类构造函数的名称的 <see cref="T:System.Reflection.ConstructorInfo" />。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.UnderlyingSystemType">
      <summary>为 COM 对象提供对 <see cref="P:System.Type.UnderlyingSystemType" /> 属性的版本无关的访问。</summary>
      <returns>
        <see cref="T:System.Type" /> 的基础系统类型。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._TypeBuilder">
      <summary>向非托管代码公开 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>将一组名称映射为对应的一组调度标识符。</summary>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="rgszNames">要映射的名称的数组。</param>
      <param name="cNames">要映射的名称的计数。</param>
      <param name="lcid">要在其中解释名称的区域设置上下文。</param>
      <param name="rgDispId">调用方分配的数组，接收对应于这些名称的标识符。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</summary>
      <param name="iTInfo">要返回的类型信息。</param>
      <param name="lcid">类型信息的区域设置标识符。</param>
      <param name="ppTInfo">指向请求的类型信息对象的指针。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>检索对象提供的类型信息接口的数量（0 或 1）。</summary>
      <param name="pcTInfo">如果如上述语法所示，这确实是一个 out 参数，则此处的信息应该为：此方法返回时，包含指向一个位置的指针，该位置接收对象提供的类型信息接口的数量。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices._TypeBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>提供对某一对象公开的属性和方法的访问。</summary>
      <param name="dispIdMember">成员的标识符。</param>
      <param name="riid">保留供将来使用。必须为 IID_NULL。</param>
      <param name="lcid">要在其中解释参数的区域设置上下文。</param>
      <param name="wFlags">描述调用的上下文的标志。</param>
      <param name="pDispParams">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组元素的计数。</param>
      <param name="pVarResult">指向一个将存储结果的位置的指针。</param>
      <param name="pExcepInfo">指向一个包含异常信息的结构的指针。</param>
      <param name="puArgErr">第一个出错参数的索引。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary>在指定的数组中封装数组和偏移量。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 结构的新实例。</summary>
      <param name="array">托管数组。 </param>
      <param name="offset">要通过平台调用传递的元素的偏移量（以字节为单位）。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary>指示指定的对象是否与当前的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象匹配。</summary>
      <returns>
如果对象与此 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 匹配，则为 true；否则，为 false。</returns>
      <param name="obj">要与该实例进行比较的对象。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>指示指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象是否与当前实例匹配。</summary>
      <returns>
如果指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象与当前实例相匹配，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary>返回此 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 引用的托管数组。</summary>
      <returns>此实例引用的托管数组。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary>返回此值类型的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary>返回当构造此 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 时提供的偏移量。</summary>
      <returns>此实例的偏移量。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>确定两个指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象是否具有同一值。</summary>
      <returns>
如果 <paramref name="a" /> 的值与 <paramref name="b" /> 的值相同，则为 true；否则为 false。</returns>
      <param name="a">与 <paramref name="b" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 </param>
      <param name="b">与 <paramref name="a" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>确定两个指定的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象是否具有不同值。</summary>
      <returns>
如果 <paramref name="a" /> 的值与 <paramref name="b" /> 的值不同，则为 true；否则为 false。</returns>
      <param name="a">与 <paramref name="b" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。 </param>
      <param name="b">与 <paramref name="a" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 对象。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.AssemblyRegistrationFlags">
      <summary>定义当注册程序集时使用的一组标志。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.AssemblyRegistrationFlags.None">
      <summary>指示没有特殊设置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.AssemblyRegistrationFlags.SetCodeBase">
      <summary>指示应该在注册表中设置程序集的基本代码键。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.AutomationProxyAttribute">
      <summary>指定是否应该使用自动化封送拆收器或自定义代理及存根 (Stub) 对该类型进行封送处理。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AutomationProxyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.AutomationProxyAttribute" /> 类的新实例。</summary>
      <param name="val">
如果应使用“自动化封送拆收器”封送类，则为 true；如果应使用代理存根 (proxy stub) 封送拆收器，则为 false。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.AutomationProxyAttribute.Value">
      <summary>获取一个值，该值指示要使用的封送拆收器的类型。</summary>
      <returns>
如果应使用“自动化封送拆收器”封送类，则为 true；如果应使用代理存根 (proxy stub) 封送拆收器，则为 false。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BestFitMappingAttribute">
      <summary>控制是否将 Unicode 字符转换为最接近的匹配 ANSI 字符。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" /> 类的新实例，并将其设置为 <see cref="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping" /> 属性的值。</summary>
      <param name="BestFitMapping">true 指示启用最佳映射；否则为 false。默认为 true。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping">
      <summary>获取将 Unicode 字符转换为 ANSI 字符时的最佳映射行为。</summary>
      <returns>
如果启用最佳映射则为 true；否则为 false。默认为 true。</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.BestFitMappingAttribute.ThrowOnUnmappableChar">
      <summary>启用或禁止在遇到被转换为 ANSI“?”字符的无法映射的 Unicode 字符时引发异常。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.BIND_OPTS">
      <summary>改用 <see cref="T:System.Runtime.InteropServices.ComTypes.BIND_OPTS" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BIND_OPTS.cbStruct">
      <summary>指定 BIND_OPTS 结构的大小（以字节为单位）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BIND_OPTS.dwTickCountDeadline">
      <summary>指示调用方指定的用于完成绑定操作的时间（由 GetTickCount 函数返回的以毫秒为单位的时钟时间）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BIND_OPTS.grfFlags">
      <summary>控制名字对象绑定操作的各个方面。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BIND_OPTS.grfMode">
      <summary>当打开包含由该名字对象标识的对象的文件时应使用的标志。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.BINDPTR">
      <summary>改用 <see cref="T:System.Runtime.InteropServices.ComTypes.BINDPTR" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BINDPTR.lpfuncdesc">
      <summary>表示指向 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 结构的指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BINDPTR.lptcomp">
      <summary>表示指向 <see cref="F:System.Runtime.InteropServices.BINDPTR.lptcomp" /> 接口的指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BINDPTR.lpvardesc">
      <summary>表示指向 <see cref="T:System.Runtime.InteropServices.VARDESC" /> 结构的指针。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.BStrWrapper">
      <summary>将 VT_BSTR 类型的数据从托管代码封送到非托管代码。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)">
      <summary>用指定的 <see cref="T:System.String" /> 对象初始化 <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 类的新实例。</summary>
      <param name="value">要包装并作为 VT_BSTR 进行封送的 <see cref="T:System.String" /> 对象。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BStrWrapper.WrappedObject">
      <summary>获取将作为 VT_BSTR 类型进行封送的包装的 <see cref="T:System.String" /> 对象。</summary>
      <returns>由 <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 包装的 <see cref="T:System.String" /> 对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CALLCONV">
      <summary>改用 <see cref="T:System.Runtime.InteropServices.ComTypes.CALLCONV" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_CDECL">
      <summary>指示对方法使用 Cdecl 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_MSCPASCAL">
      <summary>指示对方法使用 Mscpascal 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_PASCAL">
      <summary>指示对方法使用 Pascal 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_MACPASCAL">
      <summary>指示对方法使用 Macpascal 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_STDCALL">
      <summary>指示对方法使用 Stdcall 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_RESERVED">
      <summary>保留此值供将来使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_SYSCALL">
      <summary>指示对方法使用 Syscall 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_MPWCDECL">
      <summary>指示对方法使用 Mpwcdecl 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_MPWPASCAL">
      <summary>指示对方法使用 Mpwpascal 调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_MAX">
      <summary>指示 <see cref="T:System.Runtime.InteropServices.CALLCONV" /> 枚举的结尾。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary>指定调用在非托管代码中实现的方法所需的调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary>此成员实际上不是调用约定，而是使用了默认平台调用约定。例如，在 Windows 上默认为 <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" />，在 Windows CE.NET 上默认为 <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary>调用方清理堆栈。这使您能够调用具有 varargs 的函数（如 Printf），使之可用于接受可变数目的参数的方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary>被调用方清理堆栈。这是使用平台 invoke 调用非托管函数的默认约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary>第一个参数是 this 指针，它存储在寄存器 ECX 中。其他参数被推送到堆栈上。此调用约定用于对从非托管 DLL 导出的类调用方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary>不支持此调用约定。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CharSet">
      <summary>规定封送字符串应使用何种字符集。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.None">
      <summary>此值已过时，它与 <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" /> 具有相同的行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Ansi">
      <summary>以多字节字符串的形式封送字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Unicode">
      <summary>以 Unicode 2 字节字符形式封送字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Auto">
      <summary>针对目标操作系统适当地自动封送字符串。在 Windows NT、Windows 2000、Windows XP 和 Windows Server 2003 系列上默认值为 <see cref="F:System.Runtime.InteropServices.CharSet.Unicode" />；在 Windows 98 和 Windows Me 上默认值为 <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" />。尽管公共语言运行库默认值为 <see cref="F:System.Runtime.InteropServices.CharSet.Auto" />，使用语言可重写此默认值。例如，默认情况下，C# 将所有方法和类型都标记为 <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary>为公开给 COM 的类指定要生成的类接口的类型（如果有接口生成）。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary>用指定的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 枚举值初始化 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 类的新实例。</summary>
      <param name="classInterfaceType">描述为类生成的接口的类型。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 类的新实例。</summary>
      <param name="classInterfaceType">
        <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值之一，描述为类生成的接口的类型。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary>获取 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值，该值描述应该为该类生成哪种类型的接口。</summary>
      <returns>描述应该为该类生成哪种类型的接口的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary>标识为某个类生成的类接口的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary>指示不为类生成类接口。如果未显式实现任何接口，则该类将只通过 IDispatch 接口提供后期绑定访问。这是 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 的推荐设置。要通过由类显式实现的接口来公开功能，唯一的方法是使用 ClassInterfaceType.None。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary>指示该类只支持 COM 客户端的后期绑定。在请求时，该类的调度接口将自动向 COM 客户端公开。类型 类型库导出程序 (Tlbexp.exe) 生成的类型库不包含调度接口的类型信息，以防止客户端缓存接口的 DISPID。由于客户端只能后期绑定到调度接口，因此该接口不会出现 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 中所述的版本控制问题。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary>指示自动为类生成双重类接口并向 COM 公开。为该类接口生成类型信息并在类型库中发布。由于 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 中描述的版本控制方面的限制，极力建议不要使用 AutoDual。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary>指定从类型库中导入的 coclass 的类标识符。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary>用原始 coclass 的类标识符初始化 <see cref="T:System.Runtime.InteropServices.CoClassAttribute" /> 的新实例。</summary>
      <param name="coClass">一个 <see cref="T:System.Type" />，它包含原始 coclass 的类标识符。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary>获取原始 coclass 的类标识符。</summary>
      <returns>一个 <see cref="T:System.Type" />，它包含原始 coclass 的类标识符。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAliasNameAttribute">
      <summary>指示参数或字段类型的 COM 别名。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAliasNameAttribute.#ctor(System.String)">
      <summary>使用属性化字段或参数的别名初始化 <see cref="T:System.Runtime.InteropServices.ComAliasNameAttribute" /> 类的新实例。</summary>
      <param name="alias">导入字段或参数时在类型库中找到的别名。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAliasNameAttribute.Value">
      <summary>获取导入字段或参数时在类型库中找到的别名。</summary>
      <returns>导入字段或参数时在类型库中找到的别名。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute">
      <summary>向 COM 客户端指示程序集当前版本中的所有类与该程序集早期版本中的类兼容。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>使用程序集的主版本、次版本、内部版本号和修订号初始化 <see cref="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute" /> 类的新实例。</summary>
      <param name="major">程序集的主版本号。 </param>
      <param name="minor">程序集的次版本号。 </param>
      <param name="build">程序集的内部版本号。 </param>
      <param name="revision">程序集的修订号。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.BuildNumber">
      <summary>获取程序集的内部版本号。</summary>
      <returns>程序集的内部版本号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MajorVersion">
      <summary>获取程序集的主版本号。</summary>
      <returns>程序集的主版本号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MinorVersion">
      <summary>获取程序集的次版本号。</summary>
      <returns>程序集的次版本号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.RevisionNumber">
      <summary>获取程序集的修订号。</summary>
      <returns>程序集的修订号。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComConversionLossAttribute">
      <summary>指示从类型库向程序集导入类或接口时丢失了有关信息。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComConversionLossAttribute.#ctor">
      <summary>初始化 ComConversionLossAttribute 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary>指定要向 COM 公开的默认接口。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary>以指定的 <see cref="T:System.Type" /> 对象作为向 COM 公开的默认接口初始化 <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> 类的新实例。</summary>
      <param name="defaultInterface">一个 <see cref="T:System.Type" /> 值，指示要向 COM 公开的默认接口。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary>获取 <see cref="T:System.Type" /> 对象，该对象指定要向 COM 公开的默认接口。</summary>
      <returns>指定要向 COM 公开的默认接口的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary>标识源接口和实现事件接口（从 COM 类型库导入 coclass 时生成）的方法的类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary>用源接口和事件提供程序类初始化 <see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" /> 类的新实例。</summary>
      <param name="SourceInterface">一个 <see cref="T:System.Type" />，它包含类型库中的原始源接口。COM 使用此接口回调到托管类。 </param>
      <param name="EventProvider">一个 <see cref="T:System.Type" />，它包含实现事件接口的方法的类。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary>获取实现事件接口的方法的类。</summary>
      <returns>一个 <see cref="T:System.Type" />，它包含实现事件接口的方法的类。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary>从类型库获取原始源接口。</summary>
      <returns>一个包含源接口的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary>当从 COM 方法调用返回无法识别的 HRESULT 时引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary>用默认值初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从序列化数据初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。</summary>
      <param name="info">保留序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。 </param>
      <param name="context">提供有关源或目标的上下文信息的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。 </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary>用指定的消息初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。</summary>
      <param name="message">指示异常原因的消息。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。 </param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary>使用指定的消息和错误代码初始化 <see cref="T:System.Runtime.InteropServices.COMException" /> 类的新实例。</summary>
      <param name="message">指示所发生异常的原因的消息。 </param>
      <param name="errorCode">与该异常关联的错误代码 (HRESULT) 值。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary>将异常的内容转换为字符串。</summary>
      <returns>包含异常的 <see cref="P:System.Exception.HResult" />、<see cref="P:System.Exception.Message" />、<see cref="P:System.Exception.InnerException" /> 和 <see cref="P:System.Exception.StackTrace" /> 属性的字符串。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary>指示该属性化类型是以前在 COM 中定义的。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> 的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary>标识如何向 COM 公开接口。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary>指示接口将作为双重接口向 COM 公开，这将启用早期绑定和后期绑定。<see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" /> 为默认值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary>指示接口将作为 IUnknown 派生接口向 COM 公开，这将仅启用早期绑定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary>指示接口将作为调度接口向 COM 公开，这将仅启用后期绑定。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary>描述 COM 成员的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary>该成员是一个一般方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary>该成员获取属性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary>该成员设置属性。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute">
      <summary>指定在注册程序集以便从 COM 中使用时要调用的方法；这样可以在注册过程中执行用户编写的代码。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComRegisterFunctionAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary>为属性化类标识公开为 COM 事件源的一组接口。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary>使用事件源接口的名称初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 类的新实例。</summary>
      <param name="sourceInterfaces">事件源接口的完全限定名列表，名称之间用 null 分隔。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary>使用要用作源接口的类型初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 类的新实例。</summary>
      <param name="sourceInterface">源接口的 <see cref="T:System.Type" />。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary>在以要使用的类型作为源接口的情况下初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 类的新实例。</summary>
      <param name="sourceInterface1">默认源接口的 <see cref="T:System.Type" />。 </param>
      <param name="sourceInterface2">源接口的 <see cref="T:System.Type" />。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary>在以要使用的类型作为源接口的情况下初始化 ComSourceInterfacesAttribute 类的新实例。</summary>
      <param name="sourceInterface1">默认源接口的 <see cref="T:System.Type" />。 </param>
      <param name="sourceInterface2">源接口的 <see cref="T:System.Type" />。 </param>
      <param name="sourceInterface3">源接口的 <see cref="T:System.Type" />。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary>在以要使用的类型作为源接口的情况下初始化 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 类的新实例。</summary>
      <param name="sourceInterface1">默认源接口的 <see cref="T:System.Type" />。 </param>
      <param name="sourceInterface2">源接口的 <see cref="T:System.Type" />。 </param>
      <param name="sourceInterface3">源接口的 <see cref="T:System.Type" />。 </param>
      <param name="sourceInterface4">源接口的 <see cref="T:System.Type" />。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary>获取事件源接口的完全限定名。</summary>
      <returns>事件源接口的完全限定名。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
      <summary>指定当注销用于 COM 的程序集时调用的方法；这可以用于注销过程中用户编写代码的执行。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComUnregisterFunctionAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComVisibleAttribute">
      <summary>控制程序集中个别托管类型、成员或所有类型对 COM 的可访问性。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)">
      <summary>初始化 ComVisibleAttribute 类的新实例。</summary>
      <param name="visibility">true 指示该类型对 COM 可见；否则为 false。默认为 true。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComVisibleAttribute.Value">
      <summary>获取一个值，该值指示 COM 类型是否可见。</summary>
      <returns>
如果该类型可见，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CONNECTDATA">
      <summary>改用 <see cref="T:System.Runtime.InteropServices.ComTypes.CONNECTDATA" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CONNECTDATA.dwCookie">
      <summary>表示从 <see cref="M:System.Runtime.InteropServices.UCOMIConnectionPoint.Advise(System.Object,System.Int32@)" /> 调用中返回的连接标记。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CONNECTDATA.pUnk">
      <summary>表示指向已连接的通知接收器上的 IUnknown 接口的指针。当不再需要 CONNECTDATA 结构时，调用方必须在此指针上调用 IUnknown::Release。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CriticalHandle">
      <summary>表示句柄资源的包装类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.#ctor(System.IntPtr)">
      <summary>用指定的无效句柄值初始化 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 类的新实例。</summary>
      <param name="invalidHandleValue">无效句柄的值（通常为 0 或 -1）。</param>
      <exception cref="T:System.TypeLoadException">该派生类位于没有非托管代码访问权限的程序集中。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Close">
      <summary>标记句柄，以便释放资源。</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose">
      <summary>释放由 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 使用的所有资源。</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 类所使用的非托管资源，并指定是否执行常规释放 (Dispose) 操作。</summary>
      <param name="disposing">
                如进行常规释放操作，则为 true；如终结句柄，则为 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Finalize">
      <summary>释放与句柄关联的所有资源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CriticalHandle.handle">
      <summary>指定要包装的句柄。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsClosed">
      <summary>获取一个值，该值指示句柄是否已关闭。</summary>
      <returns>
            如果句柄已关闭，则为 true；否则为 false。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsInvalid">
      <summary>在派生类中重写后，获取一个值，该值指示句柄值是否无效。</summary>
      <returns>
            如果句柄有效，则为 true；否则为 false。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle">
      <summary>如果在派生类中重写，执行释放句柄所需的代码。</summary>
      <returns>
            如果句柄释放成功，则为 true；如果出现灾难性故障，则为  false。这种情况下，该方法生成一个 releaseHandleFailed MDA 托管调试助手。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)">
      <summary>将句柄设置为预先存在的指定句柄。</summary>
      <param name="handle">要使用的预先存在的句柄。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid">
      <summary>将句柄标记为无效。</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary>对封送拆收器应该将其作为 VT_CY 封送的对象进行包装。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary>用要包装并作为 VT_CY 类型进行封送的 Decimal 来初始化 <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> 类的新实例。</summary>
      <param name="obj">要包装并作为 VT_CY 进行封送的 Decimal。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary>用包含要包装并作为 VT_CY 类型进行封送的 Decimal 的对象来初始化 <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> 类的新实例。</summary>
      <param name="obj">包含要包装并作为 VT_CY 进行封送的 Decimal 的对象。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 参数不是 <see cref="T:System.Decimal" /> 类型。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary>获取将作为 VT_CY 类型进行封送的包装对象。</summary>
      <returns>将作为 VT_CY 类型进行封送的包装对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary>指定 <see cref="T:System.Runtime.InteropServices.CharSet" /> 枚举的值。无法继承此类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 值初始化 <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" /> 类的新实例。</summary>
      <param name="charSet">
        <see cref="T:System.Runtime.InteropServices.CharSet" /> 值之一。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary>获取对 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 的任何调用的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 的默认值。</summary>
      <returns>对 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 的任何调用的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 的默认值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DESCKIND">
      <summary>改用 <see cref="T:System.Runtime.InteropServices.ComTypes.DESCKIND" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DESCKIND.DESCKIND_NONE">
      <summary>指示未找到匹配。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DESCKIND.DESCKIND_FUNCDESC">
      <summary>指示返回了 <see cref="T:System.Runtime.InteropServices.FUNCDESC" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DESCKIND.DESCKIND_VARDESC">
      <summary>指示返回了 VARDESC。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DESCKIND.DESCKIND_TYPECOMP">
      <summary>指示返回了 TYPECOMP。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary>指示返回了 IMPLICITAPPOBJ。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DESCKIND.DESCKIND_MAX">
      <summary>指示枚举标记的结尾。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary>对封送拆收器应该将其作为 VT_DISPATCH 封送的对象进行包装。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary>使用正在包装的对象初始化 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 类的新实例。</summary>
      <param name="obj">要包装并转换成 <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH" /> 的对象。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是类或数组。- 或 - <paramref name="obj" /> 不支持 IDispatch。 </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="obj" /> 参数是用被传递了一个 false 值的 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 属性标记的。- 或 -<paramref name="obj" /> 参数继承自一个类型，该类型是用一个被传递了 false 值的 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 属性标记的。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary>获取由 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 包装的对象。</summary>
      <returns>由 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 包装的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary>指定方法、字段或属性的 COM 调度标识符 (DISPID)。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary>用指定的 DISPID 初始化 DispIdAttribute 类的新实例。</summary>
      <param name="dispId">成员的 DISPID。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary>获取成员的 DISPID。</summary>
      <returns>成员的 DISPID。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DISPPARAMS">
      <summary>改用 <see cref="T:System.Runtime.InteropServices.ComTypes.DISPPARAMS" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DISPPARAMS.cArgs">
      <summary>表示参数的计数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DISPPARAMS.cNamedArgs">
      <summary>表示命名参数的计数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DISPPARAMS.rgdispidNamedArgs">
      <summary>表示命名参数的调度 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DISPPARAMS.rgvarg">
      <summary>表示对参数数组的引用。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary>指示该属性化方法由非托管动态链接库 (DLL) 作为静态入口点公开。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary>使用包含要导入的方法的 DLL 的名称初始化 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 类的新实例。</summary>
      <param name="dllName">包含非托管方法的 DLL 的名称。如果 DLL 包含在某个程序集中，则可以包含程序集显示名称。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary>将 Unicode 字符转换为 ANSI 字符时，启用或禁用最佳映射行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary>指示入口点的调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary>指示如何向方法封送字符串参数，并控制名称重整。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary>指示要调用的 DLL 入口点的名称或序号。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary>控制 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> 字段是否使公共语言运行库在非托管 DLL 中搜索入口点名称，而不使用指定的入口点名称。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary>指示是否直接转换具有 HRESULT 或 retval 返回值的非托管方法，或是否自动将 HRESULT 或 retval 返回值转换为异常。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary>指示被调用方在从属性化方法返回之前是否调用 SetLastError Win32 API 函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
      <summary>启用或禁用在遇到已被转换为 ANSI“?”字符的无法映射的 Unicode 字符时引发异常。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary>获取包含入口点的 DLL 文件的名称。</summary>
      <returns>包含入口点的 DLL 文件的名称。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ELEMDESC">
      <summary>改用 <see cref="T:System.Runtime.InteropServices.ComTypes.ELEMDESC" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ELEMDESC.desc">
      <summary>包含有关元素的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ELEMDESC.tdesc">
      <summary>标识元素的类型。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ELEMDESC.DESCUNION">
      <summary>改用 <see cref="T:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ELEMDESC.DESCUNION.idldesc">
      <summary>包含有关远程处理该元素的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ELEMDESC.DESCUNION.paramdesc">
      <summary>包含有关参数的信息。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary>对封送拆收器应该将其作为 VT_ERROR 封送的对象进行包装。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary>使用与所提供的异常相对应的 HRESULT 初始化 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 类的新实例。</summary>
      <param name="e">要转换为错误代码的异常。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary>使用错误的 HRESULT 初始化 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 类的新实例。</summary>
      <param name="errorCode">错误的 HRESULT。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary>用包含错误的 HRESULT 的对象初始化 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 类的新实例。</summary>
      <param name="errorCode">包含错误的 HRESULT 的对象。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="errorCode" /> 参数不是 <see cref="T:System.Int32" /> 类型。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary>获取包装的错误代码。</summary>
      <returns>错误的 HRESULT。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.EXCEPINFO">
      <summary>改用 <see cref="T:System.Runtime.InteropServices.ComTypes.EXCEPINFO" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.bstrDescription">
      <summary>描述用户可能遇到的错误。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.bstrHelpFile">
      <summary>包含帮助文件的完全限定驱动器、路径和文件名，该帮助文件具有关于错误的更多信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.bstrSource">
      <summary>指示异常源的名称。该名称通常是一个应用程序名称。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.dwHelpContext">
      <summary>指示该主题在帮助文件中的帮助上下文 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.pfnDeferredFillIn">
      <summary>表示指向一个函数的指针，该函数采用 <see cref="T:System.Runtime.InteropServices.EXCEPINFO" /> 结构作为参数并返回 HRESULT 值。如果不想推迟填充，则将此字段设置为 null。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.pvReserved">
      <summary>此字段为保留字段；它必须设置为 null。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.wCode">
      <summary>表示用于标识错误的错误代码。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.wReserved">
      <summary>此字段为保留字段；它必须设置为 0。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ExporterEventKind">
      <summary>描述类型库导出程序在导出类型库时生成的回调。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ExporterEventKind.NOTIF_TYPECONVERTED">
      <summary>指定当类型已被导出时调用该事件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ExporterEventKind.NOTIF_CONVERTWARNING">
      <summary>指定在转换期间发生警告时调用此事件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ExporterEventKind.ERROR_REFTOINVALIDASSEMBLY">
      <summary>该版本的 .NET Framework 不支持此值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ExtensibleClassFactory">
      <summary>在创建过程中启用从非托管对象扩展的托管对象的自定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExtensibleClassFactory.RegisterObjectCreationCallback(System.Runtime.InteropServices.ObjectCreationDelegate)">
      <summary>注册一个 delegate，每次从非托管类型扩展的托管类型的实例需要分配聚合的非托管对象时，都要调用该委托。</summary>
      <param name="callback">代替 CoCreateInstance 调用的 delegate。 </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ExternalException">
      <summary>所有 COM Interop 异常和结构化异常处理 (SEH) 异常的异常基类型。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor">
      <summary>使用默认属性初始化 ExternalException 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从序列化数据初始化 ExternalException 类的新实例。</summary>
      <param name="info">保存序列化对象数据的对象。 </param>
      <param name="context">有关源或目标的上下文信息。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。 </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String)">
      <summary>使用指定错误信息初始化 ExternalException 类的新实例。</summary>
      <param name="message">指定异常原因的错误信息。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.ExternalException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。 </param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String,System.Int32)">
      <summary>使用指定错误信息和错误的 HRESULT 初始化 ExternalException 类的新实例。</summary>
      <param name="message">指定异常原因的错误信息。 </param>
      <param name="errorCode">错误的 HRESULT。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ExternalException.ErrorCode">
      <summary>获取错误的 HRESULT。</summary>
      <returns>错误的 HRESULT。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.FieldOffsetAttribute">
      <summary>指示字段在类或结构的托管和非托管表示形式内的物理位置。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.FieldOffsetAttribute.#ctor(System.Int32)">
      <summary>使用结构内到字段开始的偏移量初始化 <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> 类的新实例。</summary>
      <param name="offset">从结构开始处到字段开始处的偏移量（以字节为单位）。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.FieldOffsetAttribute.Value">
      <summary>获取从结构开始到字段开始的偏移量。</summary>
      <returns>从结构开始到字段开始的偏移量。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.FILETIME">
      <summary>改用 <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FILETIME.dwHighDateTime">
      <summary>指定 FILETIME 的高 32 位。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FILETIME.dwLowDateTime">
      <summary>指定 FILETIME 的低 32 位。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.FUNCDESC">
      <summary>改用 <see cref="T:System.Runtime.InteropServices.ComTypes.FUNCDESC" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.callconv">
      <summary>指定函数的调用约定。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.cParams">
      <summary>计算参数的总数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.cParamsOpt">
      <summary>计算可选参数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.cScodes">
      <summary>计算允许的返回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.elemdescFunc">
      <summary>包含函数的返回类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.funckind">
      <summary>指定函数是虚拟的、静态的还是仅支持调度的。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.invkind">
      <summary>指定属性函数的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.lprgelemdescParam">
      <summary>指示 <see cref="F:System.Runtime.InteropServices.FUNCDESC.cParams" /> 的大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.lprgscode">
      <summary>存储函数可在 16 位系统中返回的错误的计数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.memid">
      <summary>标识函数成员 ID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.oVft">
      <summary>指定 <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL" /> 在 VTBL 中的偏移量。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.wFuncFlags">
      <summary>指示函数的 <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.FUNCFLAGS">
      <summary>改用 <see cref="T:System.Runtime.InteropServices.ComTypes.FUNCFLAGS" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary>此函数不应该是可从宏语言访问的。此标志用于系统级函数或类型浏览器不应显示的函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary>该函数返回一个对象，此对象为事件的源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary>支持数据绑定的函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary>设置后，任何对设置此属性的方法的调用都首先导致对 IPropertyNotifySink::OnRequestEdit 的调用。OnRequestEdit 的实现确定是否允许该调用设置属性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary>作为可绑定函数显示给用户的函数。还必须设置 <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary>最佳表示此对象的函数。类型信息中只有一个函数可以具有此属性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary>不应将此函数显示给用户，尽管它存在并且为可绑定函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary>该函数支持 GetLastError。如果在函数过程中发生错误，则调用方可以调用 GetLastError 来检索错误代码。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary>允许进行一种优化，使编译器查找“abc”类型上名为“xyz”的成员。如果找到这样的成员，而且该成员标志为默认集合的某元素的访问器函数，则生成对该成员函数的调用。可以对调度接口和接口中的成员使用；不能对模块使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary>类型信息成员是在用户界面中显示的默认成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary>该属性出现在对象浏览器而非属性浏览器中。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary>将该接口标记为具有默认行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary>作为单独的可绑定属性映射。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.FUNCKIND">
      <summary>改用 <see cref="T:System.Runtime.InteropServices.ComTypes.FUNCKIND" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL">
      <summary>该函数与 <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL" /> 的访问方式相同，不同之处在于该函数具有实现。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary>该函数通过虚函数表 (VTBL) 访问，并采用隐式 this 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCKIND.FUNC_NONVIRTUAL">
      <summary>该函数通过 static 地址访问，并采用隐式 this 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCKIND.FUNC_STATIC">
      <summary>该函数通过 static 地址访问，不采用隐式 this 指针。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCKIND.FUNC_DISPATCH">
      <summary>该函数只能通过 IDispatch 访问。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandle">
      <summary>提供从非托管内存访问托管对象的方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
      <summary>在 <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /> 句柄中检索对象的地址。</summary>
      <returns>
        <see cref="T:System.IntPtr" /> 形式的 Pinned 对象的地址。</returns>
      <exception cref="T:System.InvalidOperationException">该句柄是 <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /> 以外的任何类型。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
      <summary>为指定的对象分配 <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" /> 句柄。</summary>
      <returns>一个新的 <see cref="T:System.Runtime.InteropServices.GCHandle" />，它保护对象不被垃圾回收。当不再需要 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 时，必须通过 <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> 将其释放。</returns>
      <param name="value">使用 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 的对象。 </param>
      <exception cref="T:System.ArgumentException">具有非基元（非直接复制到本机结构中的）成员的实例不能被固定。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
      <summary>为指定的对象分配指定类型的句柄。</summary>
      <returns>指定的类型的新 <see cref="T:System.Runtime.InteropServices.GCHandle" />。当不再需要 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 时，必须通过 <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> 将其释放。</returns>
      <param name="value">使用 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 的对象。 </param>
      <param name="type">
        <see cref="T:System.Runtime.InteropServices.GCHandleType" /> 值之一，指示要创建的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 的类型。 </param>
      <exception cref="T:System.ArgumentException">具有非基元（非直接复制到本机结构中的）成员的实例不能被固定。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象是否等于当前的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</summary>
      <returns>
如果指定的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象等于当前的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象，则为 true；否则为 false。</returns>
      <param name="o">要与当前 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象进行比较的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Free">
      <summary>释放 <see cref="T:System.Runtime.InteropServices.GCHandle" />。</summary>
      <exception cref="T:System.InvalidOperationException">该句柄已被释放或从未初始化。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
      <summary>返回从某个托管对象的句柄创建的新 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</summary>
      <returns>对应于值参数的新的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。  </returns>
      <param name="value">某个托管对象的 <see cref="T:System.IntPtr" /> 句柄，将从该句柄创建 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 参数的值为 <see cref="F:System.IntPtr.Zero" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
      <summary>返回当前 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象的标识符。</summary>
      <returns>当前 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象的标识符。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
      <summary>获取一个值，该值指示是否分配了句柄。</summary>
      <returns>
如果分配了句柄，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象是否相等。</summary>
      <returns>
如果 <paramref name="a" /> 和 <paramref name="b" /> 参数相等，则为 true；否则为 false。</returns>
      <param name="a">要与 <paramref name="b" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。 </param>
      <param name="b">要与 <paramref name="a" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。  </param>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
      <summary>
        <see cref="T:System.Runtime.InteropServices.GCHandle" /> 以内部整数表示形式存储。</summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.GCHandle" />。</returns>
      <param name="value">一个 <see cref="T:System.IntPtr" />，它指示需要该转换的句柄。 </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
      <summary>
        <see cref="T:System.Runtime.InteropServices.GCHandle" /> 以内部整数表示形式存储。</summary>
      <returns>整数值。</returns>
      <param name="value">需要该整数的 <see cref="T:System.Runtime.InteropServices.GCHandle" />。 </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象是否不相等。</summary>
      <returns>
如果 <paramref name="a" /> 和 <paramref name="b" /> 参数相等，则为 true；否则为 false。</returns>
      <param name="a">要与 <paramref name="b" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。 </param>
      <param name="b">要与 <paramref name="a" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。  </param>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.Target">
      <summary>获取或设置该句柄表示的对象。</summary>
      <returns>该句柄表示的对象。</returns>
      <exception cref="T:System.InvalidOperationException">该句柄被释放，或从未初始化。 </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
      <summary>返回 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象的内部整数表示形式。</summary>
      <returns>一个表示 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象的 <see cref="T:System.IntPtr" /> 对象。 </returns>
      <param name="value">一个 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象，将从中检索内部整数表示形式。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandleType">
      <summary>表示 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 类可以分配的句柄的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Weak">
      <summary>此句柄类型用于跟踪对象，但允许回收该对象。当回收某个对象时，<see cref="T:System.Runtime.InteropServices.GCHandle" /> 的内容归零。在终结器运行之前，Weak 引用归零，因此即使终结器使该对象复活，Weak 引用仍然是归零的。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.WeakTrackResurrection">
      <summary>该句柄类型类似于 <see cref="F:System.Runtime.InteropServices.GCHandleType.Weak" />，但如果对象在终结过程中复活，此句柄不归零。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Normal">
      <summary>此句柄类型表示不透明句柄，这意味着无法通过此句柄解析固定对象的地址。可以使用此类型跟踪对象，并防止它被垃圾回收器回收。当非托管客户端持有对托管对象的唯一引用（从垃圾回收器检测不到该引用）时，此枚举成员很有用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Pinned">
      <summary>此句柄类型类似于 <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" />，但允许使用固定对象的地址。这将防止垃圾回收器移动对象，因此将降低垃圾回收器的效率。使用 <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> 方法可尽快释放已分配的句柄。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary>当不需要自动 GUID 时提供显式的 <see cref="T:System.Guid" />。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary>用指定的 GUID 初始化 <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> 类的新实例。</summary>
      <param name="guid">要分配的 <see cref="T:System.Guid" />。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary>获取类的 <see cref="T:System.Guid" />。</summary>
      <returns>类的 <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleRef">
      <summary>包装一个托管对象，该对象保存使用平台 invoke（调用）传递给非托管代码的资源句柄。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
      <summary>用要包装的对象和由非托管代码使用的资源的句柄初始化 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 类的新实例。</summary>
      <param name="wrapper">在平台 invoke 调用返回前不应完成的托管对象。 </param>
      <param name="handle">一个 <see cref="T:System.IntPtr" />，它指示资源的句柄。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Handle">
      <summary>获取资源的句柄。</summary>
      <returns>资源的句柄。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
      <summary>返回指定的 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象的资源的句柄。</summary>
      <returns>指定的 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象的资源的句柄。</returns>
      <param name="value">需要句柄的对象。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
      <summary>返回 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象的内部整数表示形式。</summary>
      <returns>表示 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象的 <see cref="T:System.IntPtr" /> 对象。</returns>
      <param name="value">要从其中检索内部整数表示形式的 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 对象。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Wrapper">
      <summary>获取保存资源句柄的对象。</summary>
      <returns>保存资源句柄的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary>为客户端访问实际对象（而不是自定义封送拆收器分发的适配器对象）提供了一种方式。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary>提供对自定义封送拆收器包装的基础对象的访问权限。</summary>
      <returns>适配器对象包含的对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomFactory">
      <summary>使用户能够为扩展 <see cref="T:System.MarshalByRefObject" /> 的托管对象编写激活代码。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomFactory.CreateInstance(System.Type)">
      <summary>创建指定类型的新实例。</summary>
      <returns>与指定类型关联的 <see cref="T:System.MarshalByRefObject" />。</returns>
      <param name="serverType">要激活的类型。 </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomMarshaler">
      <summary>旨在提供用于处理方法调用的自定义包装。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)">
      <summary>对不再需要的托管数据进行必要的清理。</summary>
      <param name="ManagedObj">要销毁的托管对象。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)">
      <summary>对不再需要的非托管数据进行必要的清理。</summary>
      <param name="pNativeData">指向要销毁的非托管数据的指针。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize">
      <summary>返回要封送的本机数据的大小。</summary>
      <returns>本机数据的大小（以字节为单位）。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)">
      <summary>将托管数据转换为非托管数据。</summary>
      <returns>返回托管对象的 COM 视图。</returns>
      <param name="ManagedObj">要转换的托管对象。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
      <summary>将非托管数据转换为托管数据。</summary>
      <returns>返回 COM 数据的托管视图。</returns>
      <param name="pNativeData">指向要包装的非托管数据的指针。 </param>
    </member>
    <member name="T:System.Runtime.InteropServices.IDispatchImplAttribute">
      <summary>指示当向 COM 公开双重接口和调度接口时公共语言运行库使用何种 IDispatch 实现。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.IDispatchImplAttribute.#ctor(System.Int16)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.IDispatchImplType" /> 值初始化 IDispatchImplAttribute 类的新实例。</summary>
      <param name="implType">指示将使用的 <see cref="T:System.Runtime.InteropServices.IDispatchImplType" /> 枚举。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.IDispatchImplAttribute.#ctor(System.Runtime.InteropServices.IDispatchImplType)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.IDispatchImplType" /> 值初始化 IDispatchImplAttribute 类的新实例。</summary>
      <param name="implType">指示将使用的 <see cref="T:System.Runtime.InteropServices.IDispatchImplType" /> 枚举。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.IDispatchImplAttribute.Value">
      <summary>获取由类使用的 <see cref="T:System.Runtime.InteropServices.IDispatchImplType" /> 值。</summary>
      <returns>由类使用的 <see cref="T:System.Runtime.InteropServices.IDispatchImplType" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.IDispatchImplType">
      <summary>指示对特定类使用何种 IDispatch 实现。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDispatchImplType.SystemDefinedImpl">
      <summary>指定公共语言运行库将决定要使用哪个 IDispatch 实现。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDispatchImplType.InternalImpl">
      <summary>指定由运行库提供 IDispatch 实现。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDispatchImplType.CompatibleImpl">
      <summary>指定通过向 COM 的 CreateStdDispatch API 方法传递对象的类型信息来提供 IDispatch 实现。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.IDLDESC">
      <summary>改用 <see cref="T:System.Runtime.InteropServices.ComTypes.IDLDESC" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLDESC.dwReserved">
      <summary>保留；设置为 null。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLDESC.wIDLFlags">
      <summary>指示描述类型的 <see cref="T:System.Runtime.InteropServices.IDLFLAG" /> 值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.IDLFLAG">
      <summary>改用 <see cref="T:System.Runtime.InteropServices.ComTypes.IDLFLAG" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLFLAG.IDLFLAG_NONE">
      <summary>未指定参数是传递信息还是接收信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLFLAG.IDLFLAG_FIN">
      <summary>参数将信息从调用方传递到被调用方。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLFLAG.IDLFLAG_FOUT">
      <summary>参数将信息从被调用方返回到调用方。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLFLAG.IDLFLAG_FLCID">
      <summary>参数是客户端应用程序的本地标识符。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLFLAG.IDLFLAG_FRETVAL">
      <summary>参数是成员的返回值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.IMPLTYPEFLAGS">
      <summary>改用 <see cref="T:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary>该接口或调度接口表示源或接收器的默认值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary>调用而不是实现 coclass 的此成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary>不应显示该成员，用户也不应可对该成员进行编程。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary>接收器通过虚函数表 (VTBL) 接收事件。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute">
      <summary>指示在程序集内定义的类型原来在类型库中定义。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.#ctor(System.String)">
      <summary>用原始类型库文件的名称初始化 <see cref="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute" /> 类的新实例。</summary>
      <param name="tlbFile">原始类型库文件的位置。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.Value">
      <summary>获取原始类型库文件的名称。</summary>
      <returns>原始类型库文件的名称。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ImporterEventKind">
      <summary>描述类型库导入程序在导入类型库时生成的回调。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ImporterEventKind.NOTIF_TYPECONVERTED">
      <summary>指定当类型已导入时调用该事件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ImporterEventKind.NOTIF_CONVERTWARNING">
      <summary>指定在转换期间发生警告时调用此事件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ImporterEventKind.ERROR_REFTOINVALIDTYPELIB">
      <summary>该版本的 .NET Framework 不支持此属性。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.InAttribute">
      <summary>指示应将数据从调用方封送到被调用方，而不返回到调用方。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.InAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary>指示向 COM 公开时，托管接口是双重的、仅支持调度的、还是仅支持 IUnknown 的。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 类的新实例。</summary>
      <param name="interfaceType">描述应如何向 COM 客户端公开接口。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 类的新实例。</summary>
      <param name="interfaceType">
        <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值之一，指定如何向 COM 客户端公开接口。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary>获取 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值，该值描述应如何向 COM 公开接口。</summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值，该值描述应如何向 COM 公开接口。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary>当使用无效的 COM 对象时引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary>用默认属性初始化 InvalidComObjectException 的实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从序列化数据初始化 COMException 类的新实例。</summary>
      <param name="info">保存序列化对象数据的对象。 </param>
      <param name="context">有关源或目标的上下文信息。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。 </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary>用消息初始化 InvalidComObjectException 的实例。</summary>
      <param name="message">指示异常原因的消息。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.InvalidComObjectException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。 </param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary>封送拆收器在遇到不能封送到托管代码的 Variant 类型的参数时引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary>用默认值初始化 InvalidOleVariantTypeException 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从序列化数据初始化 InvalidOleVariantTypeException 类的新实例。</summary>
      <param name="info">保存序列化对象数据的对象。 </param>
      <param name="context">有关源或目标的上下文信息。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。 </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary>用指定的消息初始化 InvalidOleVariantTypeException 类的新实例。</summary>
      <param name="message">指示异常原因的消息。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。 </param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。 </param>
    </member>
    <member name="T:System.Runtime.InteropServices.INVOKEKIND">
      <summary>改用 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.INVOKEKIND.INVOKE_FUNC">
      <summary>使用常规函数调用语法来调用该成员。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary>使用常规属性访问语法来调用该函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary>使用属性值赋值语法来调用该函数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary>使用属性引用赋值语法来调用该函数。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.IRegistrationServices">
      <summary>提供一组用于注册和注销托管程序集以供从 COM 使用的服务。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.GetManagedCategoryGuid">
      <summary>返回包含托管类的 COM 类别的 GUID。</summary>
      <returns>包含托管类的 COM 类别的 GUID。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.GetProgIdForType(System.Type)">
      <summary>检索指定类型的 COM ProgID。</summary>
      <returns>指定类型的 ProgID。</returns>
      <param name="type">请求其 ProgID 的类型。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.GetRegistrableTypesInAssembly(System.Reflection.Assembly)">
      <summary>在通过调用 <see cref="M:System.Runtime.InteropServices.IRegistrationServices.RegisterAssembly(System.Reflection.Assembly,System.Runtime.InteropServices.AssemblyRegistrationFlags)" /> 而注册的程序集中检索类的列表。</summary>
      <returns>
        <see cref="T:System.Type" /> 数组，它包含 <paramref name="assembly" /> 中的类的列表。</returns>
      <param name="assembly">要搜索类的程序集。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.RegisterAssembly(System.Reflection.Assembly,System.Runtime.InteropServices.AssemblyRegistrationFlags)">
      <summary>注册托管程序集中的类以便能够从 COM 创建。</summary>
      <returns>
如果 <paramref name="assembly" /> 包含已成功注册的类型，则为 true；否则，如果程序集不包含符合条件的类型，则为 false。</returns>
      <param name="assembly">要注册的程序集。 </param>
      <param name="flags">一个 <see cref="T:System.Runtime.InteropServices.AssemblyRegistrationFlags" /> 值，该值指示当注册 <paramref name="assembly" /> 时所需的任何特殊设置。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> 为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="assembly" /> 的全名为 null。- 或 - 用 <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> 标记的方法不是 static 方法。- 或 - 在层次结构的给定级别有多个用 <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> 标记的方法。- 或 - 用 <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> 标记的方法的签名无效。 </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.RegisterTypeForComClients(System.Type,System.Guid@)">
      <summary>使用指定的 GUID 向 COM 注册指定的类型。</summary>
      <param name="type">要注册以供从 COM 使用的类型。 </param>
      <param name="g">用于注册指定类型的 GUID。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.TypeRepresentsComType(System.Type)">
      <summary>确定指定的类型是否是 COM 类型。</summary>
      <returns>
如果指定的类型是 COM 类型，则为 true；否则为 false。</returns>
      <param name="type">要确定其是否是 COM 类型的类型。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.TypeRequiresRegistration(System.Type)">
      <summary>确定指定的类型是否需要注册。</summary>
      <returns>
如果该类型必须注册以供从 COM 使用，则为 true；否则为 false。</returns>
      <param name="type">要检查其 COM 注册要求的类型。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.UnregisterAssembly(System.Reflection.Assembly)">
      <summary>注销托管程序集中的类。</summary>
      <returns>
如果 <paramref name="assembly" /> 包含已成功注销的类型，则为 true；否则，如果程序集不包含符合条件的类型，则为 false。</returns>
      <param name="assembly">要注销的程序集。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> 为 null。 </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="assembly" /> 的全名为 null。- 或 - 用 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 标记的方法不是 static 方法。- 或 - 在层次结构的给定级别有多个用 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 标记的方法。- 或 - 用 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 标记的方法的签名无效。 </exception>
    </member>
    <member name="T:System.Runtime.InteropServices.ITypeLibConverter">
      <summary>提供一组服务，将托管程序集转换为 COM 类型库或进行反向转换。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibConverter.ConvertAssemblyToTypeLib(System.Reflection.Assembly,System.String,System.Runtime.InteropServices.TypeLibExporterFlags,System.Runtime.InteropServices.ITypeLibExporterNotifySink)">
      <summary>将程序集转换为 COM 类型库。</summary>
      <returns>实现 ITypeLib 接口的对象。</returns>
      <param name="assembly">要转换的程序集。 </param>
      <param name="typeLibName">所产生的类型库的文件名。 </param>
      <param name="flags">指示任何特殊设置的 <see cref="T:System.Runtime.InteropServices.TypeLibExporterFlags" /> 值。 </param>
      <param name="notifySink">由调用方实现的 <see cref="T:System.Runtime.InteropServices.ITypeLibExporterNotifySink" /> 接口。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibConverter.ConvertTypeLibToAssembly(System.Object,System.String,System.Int32,System.Runtime.InteropServices.ITypeLibImporterNotifySink,System.Byte[],System.Reflection.StrongNameKeyPair,System.Boolean)">
      <summary>将 COM 类型库转换为程序集。</summary>
      <returns>包含已转换类型库的 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 对象。</returns>
      <param name="typeLib">实现 ITypeLib 接口的对象。 </param>
      <param name="asmFileName">所产生的程序集的文件名。 </param>
      <param name="flags">指示任何特殊设置的 <see cref="T:System.Runtime.InteropServices.TypeLibImporterFlags" /> 值。 </param>
      <param name="notifySink">
由调用方实现的 <see cref="T:System.Runtime.InteropServices.ITypeLibImporterNotifySink" /> 接口。 </param>
      <param name="publicKey">包含公钥的 byte 数组。 </param>
      <param name="keyPair">包含加密公钥和私钥对的 <see cref="T:System.Reflection.StrongNameKeyPair" /> 对象。 </param>
      <param name="unsafeInterfaces">如果为 true，则接口要求在链接时检查 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> 权限。如果为 false，则接口要求在运行时检查，运行时检查需要堆栈审核且更加昂贵，但有助于提供更大的保护。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibConverter.ConvertTypeLibToAssembly(System.Object,System.String,System.Runtime.InteropServices.TypeLibImporterFlags,System.Runtime.InteropServices.ITypeLibImporterNotifySink,System.Byte[],System.Reflection.StrongNameKeyPair,System.String,System.Version)">
      <summary>将 COM 类型库转换为程序集。</summary>
      <returns>包含已转换类型库的 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 对象。</returns>
      <param name="typeLib">实现 ITypeLib 接口的对象。 </param>
      <param name="asmFileName">所产生的程序集的文件名。 </param>
      <param name="flags">指示任何特殊设置的 <see cref="T:System.Runtime.InteropServices.TypeLibImporterFlags" /> 值。 </param>
      <param name="notifySink">
由调用方实现的 <see cref="T:System.Runtime.InteropServices.ITypeLibImporterNotifySink" /> 接口。 </param>
      <param name="publicKey">包含公钥的 byte 数组。 </param>
      <param name="keyPair">包含加密公钥和私钥对的 <see cref="T:System.Reflection.StrongNameKeyPair" /> 对象。 </param>
      <param name="asmNamespace">所产生的程序集的命名空间。 </param>
      <param name="asmVersion">所产生的程序集的版本。如果为 null，则使用类型库的版本。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibConverter.GetPrimaryInteropAssembly(System.Guid,System.Int32,System.Int32,System.Int32,System.String@,System.String@)">
      <summary>获取指定类型库的主 interop 程序集的名称及基本代码。</summary>
      <returns>
如果在注册表中找到主 interop 程序集，则为 true；否则为 false。</returns>
      <param name="g">类型库的 GUID。 </param>
      <param name="major">类型库的主版本号。 </param>
      <param name="minor">类型库的次版本号。 </param>
      <param name="lcid">类型库的 LCID。 </param>
      <param name="asmName">成功返回时，为与 <paramref name="g" /> 关联的主 interop 程序集的名称。 </param>
      <param name="asmCodeBase">成功返回时，为与 <paramref name="g" /> 关联的主 interop 程序集的基本代码。 </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ITypeLibExporterNameProvider">
      <summary>当导出到类型库时提供名称大小写控制。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibExporterNameProvider.GetNames">
      <summary>返回要控制其大小写的名称的列表。</summary>
      <returns>字符串数组，其中每个元素都包含要控制其大小写的类型的名称。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ITypeLibExporterNotifySink">
      <summary>提供回调机制，以供程序集转换器向调用方通知转换的状态，并在转换过程本身之中涉及调用方。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibExporterNotifySink.ReportEvent(System.Runtime.InteropServices.ExporterEventKind,System.Int32,System.String)">
      <summary>通知调用方在程序集转换过程中发生了一个事件。</summary>
      <param name="eventKind">指示事件类型的 <see cref="T:System.Runtime.InteropServices.ExporterEventKind" /> 值。 </param>
      <param name="eventCode">指示有关事件的其他信息。 </param>
      <param name="eventMsg">事件生成的消息。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibExporterNotifySink.ResolveRef(System.Reflection.Assembly)">
      <summary>请求用户解析对另一个程序集的引用。</summary>
      <returns>
        <paramref name="assembly" /> 的类型库。</returns>
      <param name="assembly">要解析的程序集。 </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ITypeLibImporterNotifySink">
      <summary>提供回调机制，以供类型库转换器向调用方通知转换的状态，并在转换过程本身之中涉及调用方。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibImporterNotifySink.ReportEvent(System.Runtime.InteropServices.ImporterEventKind,System.Int32,System.String)">
      <summary>通知调用方在类型库转换过程中发生了一个事件。</summary>
      <param name="eventKind">指示事件类型的 <see cref="T:System.Runtime.InteropServices.ImporterEventKind" /> 值。 </param>
      <param name="eventCode">指示有关事件的其他信息。 </param>
      <param name="eventMsg">事件生成的消息。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibImporterNotifySink.ResolveRef(System.Object)">
      <summary>请求用户解析对另一个类型库的引用。</summary>
      <returns>与 <paramref name="typeLib" /> 对应的程序集。</returns>
      <param name="typeLib">实现 ITypeLib 接口的对象，需要对该接口进行解析。 </param>
    </member>
    <member name="T:System.Runtime.InteropServices.LayoutKind">
      <summary>控制当导出到非托管代码时对象的布局。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Sequential">
      <summary>对象的成员按照它们在被导出到非托管内存时出现的顺序依次布局。这些成员根据在 <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" /> 中指定的封装进行布局，并且可以是不连续的。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Explicit">
      <summary>对象的各个成员在非托管内存中的精确位置被显式控制。每个成员必须使用 <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> 指示该字段在类型中的位置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Auto">
      <summary>运行库自动为非托管内存中的对象的成员选择适当的布局。使用此枚举成员定义的对象不能在托管代码的外部公开。尝试这样做将引发异常。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.LCIDConversionAttribute">
      <summary>指示方法的非托管签名需要区域设置标识符 (LCID) 参数。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.LCIDConversionAttribute.#ctor(System.Int32)">
      <summary>用非托管签名中 LCID 的位置初始化 LCIDConversionAttribute 类的新实例。</summary>
      <param name="lcid">指示非托管签名中 LCID 参数的位置，其中 0 是第一个参数。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.LCIDConversionAttribute.Value">
      <summary>获取非托管签名中 LCID 参数的位置。</summary>
      <returns>非托管签名中 LCID 参数的位置，其中 0 是第一个参数。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.LIBFLAGS">
      <summary>改用 <see cref="T:System.Runtime.InteropServices.ComTypes.LIBFLAGS" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary>类型库受到限制且不应显示给用户。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary>类型库描述控件，并且不应在供非可视对象使用的类型浏览器中显示。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary>不应将类型库显示给用户，虽然它的使用并未受到限制。应由控件使用。宿主应创建用扩展属性包装控件的新类型库。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary>类型库以一种持久形式存在于磁盘上。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary>
                    提供了一个方法集，这些方法用于分配非托管内存、复制非托管内存块、将托管类型转换为非托管类型，此外还提供了在与非托管代码交互时使用的其他杂项方法。
                </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary>
                    递增指定接口上的引用计数。
                </summary>
      <returns>
        <paramref name="pUnk" /> 参数上的引用计数的新值。
                </returns>
      <param name="pUnk">
                    要递增的接口引用计数。
                </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary>
                    从 COM 任务内存分配器分配指定大小的内存块。
                </summary>
      <returns>
                    整数，表示分配的内存块的地址。该内存必须用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" /> 来释放。
                </returns>
      <param name="cb">
                    要分配的内存块的大小。
                </param>
      <exception cref="T:System.OutOfMemoryException">
                    内存不足，无法满足请求。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary>
                    从进程的非托管内存中分配内存。
                </summary>
      <returns>
                    新分配的内存的 <see cref="T:System.IntPtr" />。必须使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 方法释放此内存。
                </returns>
      <param name="cb">
                    所需的内存中的字节数。
                </param>
      <exception cref="T:System.OutOfMemoryException">
                    内存不足，无法满足请求。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary>
                    从进程的非托管内存中分配内存。
                </summary>
      <returns>
                    新分配的内存的 <see cref="T:System.IntPtr" />。必须使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 方法释放此内存。
                </returns>
      <param name="cb">
                    所需的内存中的字节数。
                </param>
      <exception cref="T:System.OutOfMemoryException">
                    内存不足，无法满足请求。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)">
      <summary>
                    获取由指定的名字对象标识的接口指针。
                </summary>
      <returns>
                    一个对象，它包含对由 <paramref name="monikerName" /> 参数标识的接口指针的引用。名字对象是一个名称，在此情况下，名字对象由接口定义。
                </returns>
      <param name="monikerName">
                    与所需接口指针相对应的名字对象。
                </param>
      <exception cref="T:System.Runtime.InteropServices.COMException">
                    非托管 BindToMoniker 方法返回一个无法识别的 HRESULT。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
      <summary>
                    在 COM 可调用包装 (CCW) 句柄包含的对象上更改它的强度。
                </summary>
      <param name="otp">
                    一个对象，其 COM 可调用包装 (CCW) 包含带有引用计数的句柄。如果 CCW 上的引用计数大于零，则该句柄是强的；否则它是弱的。
                </param>
      <param name="fIsWeak">
                    为 true 时，忽略 <paramref name="otp" /> 的引用计数，将其句柄强度改为弱；为 false 时，重置要进行引用计数的 <paramref name="otp" /> 上的句柄强度。
                </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
                    将一维的托管 8 位无符号整数数组中的数据复制到非托管内存指针。
                </summary>
      <param name="source">
                    从中进行复制的一维数组。
                </param>
      <param name="startIndex">
                    数组中 Copy 开始位置的从零开始的索引。
                </param>
      <param name="destination">
                    要复制到的内存指针。
                </param>
      <param name="length">
                    要复制的数组元素的数目。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
                    将数据从一维的托管字符数组复制到非托管内存指针。
                </summary>
      <param name="source">
                    从中进行复制的一维数组。
                </param>
      <param name="startIndex">
                    数组中 Copy 开始位置的从零开始的索引。
                </param>
      <param name="destination">
                    要复制到的内存指针。
                </param>
      <param name="length">
                    要复制的数组元素的数目。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
                    将数据从一维的托管双精度浮点数组复制到非托管内存指针。
                </summary>
      <param name="source">
                    从中进行复制的一维数组。
                </param>
      <param name="startIndex">
                    数组中 Copy 开始位置的从零开始的索引。
                </param>
      <param name="destination">
                    要复制到的内存指针。
                </param>
      <param name="length">
                    要复制的数组元素的数目。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
                    将一维的托管 16 位有符号整数数组中的数据复制到非托管内存指针。
                </summary>
      <param name="source">
                    从中进行复制的一维数组。
                </param>
      <param name="startIndex">
                    数组中 Copy 开始位置的从零开始的索引。
                </param>
      <param name="destination">
                    要复制到的内存指针。
                </param>
      <param name="length">
                    要复制的数组元素的数目。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
                    将数据从一维的托管 32 位有符号整数数组复制到非托管内存指针。
                </summary>
      <param name="source">
                    从中进行复制的一维数组。
                </param>
      <param name="startIndex">
                    数组中 Copy 开始位置的从零开始的索引。
                </param>
      <param name="destination">
                    要复制到的内存指针。
                </param>
      <param name="length">
                    要复制的数组元素的数目。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
                    将一维的托管 64 位有符号整数数组中的数据复制到非托管内存指针。
                </summary>
      <param name="source">
                    从中进行复制的一维数组。
                </param>
      <param name="startIndex">
                    数组中 Copy 开始位置的从零开始的索引。
                </param>
      <param name="destination">
                    要复制到的内存指针。
                </param>
      <param name="length">
                    要复制的数组元素的数目。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary>
                    将数据从非托管内存指针复制到托管 8 位无符号整数数组。
                </summary>
      <param name="source">
                    内存指针，从中进行复制。
                </param>
      <param name="destination">
                    要复制到的数组。
                </param>
      <param name="startIndex">
                    数组中 Copy 开始位置的从零开始的索引。
                </param>
      <param name="length">
                    要复制的数组元素的数目。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary>
                    将数据从非托管内存指针复制到托管字符数组。
                </summary>
      <param name="source">
                    内存指针，从中进行复制。
                </param>
      <param name="destination">
                    要复制到的数组。
                </param>
      <param name="startIndex">
                    数组中 Copy 开始位置的从零开始的索引。
                </param>
      <param name="length">
                    要复制的数组元素的数目。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary>
                    将数据从非托管内存指针复制到托管双精度浮点数组。
                </summary>
      <param name="source">
                    内存指针，从中进行复制。
                </param>
      <param name="destination">
                    要复制到的数组。
                </param>
      <param name="startIndex">
                    数组中 Copy 开始位置的从零开始的索引。
                </param>
      <param name="length">
                    要复制的数组元素的数目。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary>
                    将非托管内存指针中的数据复制到托管 16 位有符号整数数组。
                </summary>
      <param name="source">
                    内存指针，从中进行复制。
                </param>
      <param name="destination">
                    要复制到的数组。
                </param>
      <param name="startIndex">
                    数组中 Copy 开始位置的从零开始的索引。
                </param>
      <param name="length">
                    要复制的数组元素的数目。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary>
                    将非托管内存指针中的数据复制到托管 32 位有符号整数数组。
                </summary>
      <param name="source">
                    内存指针，从中进行复制。
                </param>
      <param name="destination">
                    要复制到的数组。
                </param>
      <param name="startIndex">
                    数组中 Copy 开始位置的从零开始的索引。
                </param>
      <param name="length">
                    要复制的数组元素的数目。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary>
                    将非托管内存指针中的数据复制到托管 64 位有符号整数数组。
                </summary>
      <param name="source">
                    内存指针，从中进行复制。
                </param>
      <param name="destination">
                    要复制到的数组。
                </param>
      <param name="startIndex">
                    数组中 Copy 开始位置的从零开始的索引。
                </param>
      <param name="length">
                    要复制的数组元素的数目。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
      <summary>
                    将数据从非托管内存指针复制到托管 <see cref="T:System.IntPtr" /> 数组。
                </summary>
      <param name="source">
                    内存指针，从中进行复制。
                </param>
      <param name="destination">
                    要复制到的数组。
                </param>
      <param name="startIndex">
                    数组中 Copy 开始位置的从零开始的索引。
                </param>
      <param name="length">
                    要复制的数组元素的数目。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary>
                    将数据从非托管内存指针复制到托管单精度浮点数组。
                </summary>
      <param name="source">
                    内存指针，从中进行复制。
                </param>
      <param name="destination">
                    要复制到的数组。
                </param>
      <param name="startIndex">
                    数组中 Copy 开始位置的从零开始的索引。
                </param>
      <param name="length">
                    要复制的数组元素的数目。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
                    将数据从一维托管 <see cref="T:System.IntPtr" /> 数组复制到非托管内存指针。
                </summary>
      <param name="source">
                    从中进行复制的一维数组。
                </param>
      <param name="startIndex">
                    数组中 Copy 开始位置的从零开始的索引。
                </param>
      <param name="destination">
                    要复制到的内存指针。
                </param>
      <param name="length">
                    要复制的数组元素的数目。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" /> 或 <paramref name="length" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
                    将数据从一维的托管单精度浮点数组复制到非托管内存指针。
                </summary>
      <param name="source">
                    从中进行复制的一维数组。
                </param>
      <param name="startIndex">
                    数组中 Copy 开始位置的从零开始的索引。
                </param>
      <param name="destination">
                    要复制到的内存指针。
                </param>
      <param name="length">
                    要复制的数组元素的数目。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 无效。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" /> 或 <paramref name="length" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)">
      <summary>
                    聚合托管对象和指定的 COM 对象。
                </summary>
      <returns>
                    托管对象的内部 IUnknown 指针。
                </returns>
      <param name="pOuter">
                    外部 IUnknown 指针。
                </param>
      <param name="o">
                    要聚合的对象。
                </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary>
                    在指定类型的对象中包装指定的 COM 对象。
                </summary>
      <returns>
                    新包装的对象，该对象是所需类型的实例。
                </returns>
      <param name="o">
                    要包装的对象。
                </param>
      <param name="t">
                    要创建的包装的 <see cref="T:System.Type" />。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 必须从 __ComObject 派生。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> 参数为 null。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> 无法转换为目标类型，因为它不支持所有所需的接口。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary>
                    释放指定的非托管内存块所指向的所有子结构。
                </summary>
      <param name="ptr">
                    指向非托管内存块的指针。
                </param>
      <param name="structuretype">
                    格式化类的类型。该类型提供删除 <paramref name="ptr" /> 参数指向的缓冲区时必需的布局信息。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structureType" /> 具有自动布局。但请使用连续或显式布局。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary>
                    通过将提供的运行时可调用包装 (RCW) 的引用计数设置为 0，释放对 RCW 的所有引用。
                </summary>
      <returns>
                    与 <paramref name="o" /> 参数关联的 RCW 的引用计数的新值，如果释放成功，则为 0。
                </returns>
      <param name="o">
                    要释放的 RCW。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> 不是一个有效的 COM 对象。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary>
                    使用 SysFreeString 释放 BSTR。
                </summary>
      <param name="ptr">
                    要释放的 BSTR 的地址。
                </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary>
                    释放由非托管 COM 任务内存分配器使用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" /> 分配的内存块。
                </summary>
      <param name="ptr">
                    要释放的内存的地址。
                </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary>
                    释放以前使用 <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> 从进程的非托管内存中分配的内存。
                </summary>
      <param name="hglobal">
                    由对 <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> 的原始匹配调用返回的句柄。
                </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)">
      <summary>
                    返回指定类型的全局唯一标识符 (GUID)，或使用类型库导出程序 (Tlbexp.exe) 所用的算法生成 GUID。
                </summary>
      <returns>
                    指定类型的 <see cref="T:System.Guid" />。
                </returns>
      <param name="type">
                    为其生成一个 GUID 的 <see cref="T:System.Type" />。
                </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)">
      <summary>
                    返回指定类型的编程标识符 (ProgID)。
                </summary>
      <returns>
                    指定类型的 ProgID。
                </returns>
      <param name="type">
                    为其获取 ProgID 的 <see cref="T:System.Type" />。
                </param>
      <exception cref="T:System.ArgumentException">
                    参数 <paramref name="type" /> 类无法由 COM 创建。该类必须是公共的，必须具有公共的默认构造函数，而且必须是 COM 可见的。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 参数为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetActiveObject(System.String)">
      <summary>
                    从运行对象表 (ROT) 获取指定对象的运行实例。
                </summary>
      <returns>
                    请求的对象。可将此对象强制转换为它所支持的任何 COM 接口。
                </returns>
      <param name="progID">
                    请求的对象的 ProgID。
                </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary>
                    返回一个接口指针，该接口指针表示对象的指定接口。
                </summary>
      <returns>
                    表示对象接口的接口指针。
                </returns>
      <param name="o">
                    提供接口的对象。
                </param>
      <param name="T">
                    所请求的接口的 <see cref="T:System.Type" />。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> 参数不是接口。
                
                    - 或 -
                
                    该类型对 COM 不可见。
                
                    - 或 -
                <paramref name="T" /> 参数是泛型类型。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> 参数不支持请求的接口。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 参数为 null
                    - 或 -
                <paramref name="T" /> 参数为 null</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext(System.Object,System.Type)">
      <summary>
                    返回一个接口指针，该指针表示对象的指定接口（如果调用方与对象在同一上下文中）。
                </summary>
      <returns>
                    由 <paramref name="t" /> 指定的接口指针，该指针表示指定对象的接口，如果调用方与指定对象不在同一上下文中，则为 null。
                </returns>
      <param name="o">
                    提供接口的对象。
                </param>
      <param name="t">
                    所请求的接口的 <see cref="T:System.Type" />。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 不是一个接口。
                
                    - 或 -
                
                    该类型对 COM 不可见。
                </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> 不支持请求的接口。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 为 null。
                
                    - 或 -
                <paramref name="t" /> 为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)">
      <summary>
                    从指定的 COM 对象获取指定键所引用的数据。
                </summary>
      <returns>
        <paramref name="obj" /> 参数的内部哈希表中 <paramref name="key" /> 参数所表示的数据。
                </returns>
      <param name="obj">
                    包含所需数据的 COM 对象。
                </param>
      <param name="key">
                    要从中检索数据的 <paramref name="obj" /> 的内部哈希表中的键。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 null。
                
                    - 或 -
                <paramref name="key" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是一个 COM 对象。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo(System.Reflection.MemberInfo)">
      <summary>
                    获取指定的 <see cref="T:System.Reflection.MemberInfo" /> 在向 COM 公开时的虚函数表 (VTBL) 槽。
                </summary>
      <returns>
                    向 COM 公开时的 VTBL（也称为“v-表”）槽 <paramref name="m" /> 标识符。
                </returns>
      <param name="m">
        <see cref="T:System.Reflection.MemberInfo" />，表示接口方法。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="m" /> 参数为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="m" /> 参数不是 <see cref="T:System.Reflection.MethodInfo" /> 对象。
                
                    - 或 -
                
                    参数 <paramref name="m" /> 不是接口方法。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary>
                    将非托管函数指针转换为委托。
                </summary>
      <returns>
                    委托实例，可强制转换为适当的委托类型。
                </returns>
      <param name="ptr">
        <see cref="T:System.IntPtr" /> 类型，该参数是要转换的非托管函数指针。
                </param>
      <param name="t">
                    要返回的委托的类型。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 参数不是委托或泛型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ptr" /> 参数为 null。
                
                    - 或 -
                <paramref name="t" /> 参数为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)">
      <summary>
                    获取在向 COM 公开时某个类型的虚函数表 (VTBL) 中的最后一个槽。
                </summary>
      <returns>
                    向 COM 公开时接口的最后一个 VTBL（也称为“v-表”）槽。如果 <paramref name="t" /> 参数是类，则返回的 VTBL 槽是从该类生成的接口中的最后一个槽。
                </returns>
      <param name="t">
        <see cref="T:System.Type" />，表示接口或类。
                </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary>
                    检索标识所发生异常的类型的代码。
                </summary>
      <returns>
                    异常的类型。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary>
                    将指定的 HRESULT 错误代码转换为对应的 <see cref="T:System.Exception" /> 对象。
                </summary>
      <returns>
        <see cref="T:System.Exception" /> 对象，表示转换后的 HRESULT。
                </returns>
      <param name="errorCode">
                    要转换的 HRESULT。
                </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary>
                    通过传入异常对象的 IErrorInfo 接口的附加错误消息，将指定的 HRESULT 错误代码转换为对应的 <see cref="T:System.Exception" /> 对象。
                </summary>
      <returns>
                    一个 <see cref="T:System.Exception" /> 对象，表示转换后的 HRESULT 以及从 <paramref name="errorInfo" /> 获取的信息。
                </returns>
      <param name="errorCode">
                    要转换的 HRESULT。
                </param>
      <param name="errorInfo">
                    指向 IErrorInfo 接口的指针，该接口提供有关错误的更多信息。您可以指定 IntPtr(0) 以使用当前 IErrorInfo 接口，或者指定 IntPtr(-1) 以忽略当前 IErrorInfo 接口，并仅从错误代码构造异常。
                </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionPointers">
      <summary>
                    检索与计算机无关的异常描述以及有关异常发生时线程的状态信息。
                </summary>
      <returns>EXCEPTION_POINTERS 结构的 <see cref="T:System.IntPtr" />。
                </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary>
                    将委托转换为可从非托管代码调用的函数指针。
                </summary>
      <returns>
                    可传递给非托管代码的 <see cref="T:System.Intg">
        <see cref="T:System.Windows.Input.KeyGesture" /> 的字符串表示形式。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="modifiers" /> 不是有效的 <see cref="T:System.Windows.Input.ModifierKeys" />-或-<paramref name="key" /> 不是有效的 <see cref="T:System.Windows.Input.Key" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="displayString" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="key" /> 和 <paramref name="modifiers" /> 没有形成有效的 <see cref="T:System.Windows.Input.KeyGesture" />。</exception>
    </member>
    <member name="P:System.Windows.Input.KeyGesture.DisplayString">
      <summary>获取此 <see cref="T:System.Windows.Input.KeyGesture" /> 的字符串表示形式。</summary>
      <returns>此 <see cref="T:System.Windows.Input.KeyGesture" /> 的显示字符串。默认值为 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)">
      <summary>返回可用于显示 <see cref="T:System.Windows.Input.KeyGesture" /> 的字符串。</summary>
      <returns>要显示的字符串 </returns>
      <param name="culture">区域性特定信息。</param>
    </member>
    <member name="P:System.Windows.Input.KeyGesture.Key">
      <summary>获取与此 <see cref="T:System.Windows.Input.KeyGesture" /> 关联的键。</summary>
      <returns>与笔势关联的键。默认值为 <see cref="F:System.Windows.Input.Key.None" />。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)">
      <summary>确定此 <see cref="T:System.Windows.Input.KeyGesture" /> 是否和与指定的 <see cref="T:System.Windows.Input.InputEventArgs" /> 对象关联的输入匹配。</summary>
      <returns>
如果事件数据与此 <see cref="T:System.Windows.Input.KeyGesture" /> 匹配，则为 true；否则为 false。</returns>
      <param name="targetElement">目标。</param>
      <param name="inputEventArgs">要将此笔势与之比较的输入事件数据。</param>
    </member>
    <member name="P:System.Windows.Input.KeyGesture.Modifiers">
      <summary>获取与此 <see cref="T:System.Windows.Input.KeyGesture" /> 关联的修改键。</summary>
      <returns>与笔势关联的修改键。默认值为 <see cref="F:System.Windows.Input.ModifierKeys.None" />。</returns>
    </member>
    <member name="T:System.Windows.Input.KeyGestureConverter">
      <summary>在 <see cref="T:System.Windows.Input.KeyGesture" /> 对象与其他类型之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyGestureConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Input.KeyGesture" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyGestureConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可使用指定上下文，将指定类型的对象转换为 <see cref="T:System.Windows.Input.KeyGesture" /> 的一个实例。</summary>
      <returns>
            如果此对象可以执行转换，则为 true；否则为 false。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="sourceType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Windows.Input.KeyGestureConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可使用指定的上下文将 <see cref="T:System.Windows.Input.KeyGesture" /> 的一个实例转换为指定类型。</summary>
      <returns>
            如果此转换器能够执行该操作，则为 true；否则为 false。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="destinationType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Windows.Input.KeyGestureConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>试图使用指定上下文将指定对象转换为 <see cref="T:System.Windows.Input.KeyGesture" />。</summary>
      <returns>被转换的对象。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture">特定于区域性的信息。</param>
      <param name="source">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException">
无法转换 <paramref name="source" />。</exception>
    </member>
    <member name="M:System.Windows.Input.KeyGestureConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>试图使用指定上下文将 <see cref="T:System.Windows.Input.KeyGesture" /> 转换为指定类型。</summary>
      <returns>返回已转换的对象；如果 <paramref name="value" /> 为 null，则返回空字符串。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture">特定于区域性的信息。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="T:System.Windows.Input.KeyGestureValueSerializer">
      <summary>在 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Input.KeyGesture" /> 的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyGestureValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Input.KeyGestureValueSerializer" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyGestureValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定能否将指定的 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Input.KeyGesture" /> 的实例。</summary>
      <returns>
            如果该值可以转换，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Input.KeyGestureValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定能否将指定的 <see cref="T:System.Windows.Input.KeyGesture" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>
            如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的笔势。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Input.KeyGestureValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Input.KeyGesture" />。</summary>
      <returns>基于提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Input.KeyGesture" /> 的一个新实例。</returns>
      <param name="value">要转换为 <see cref="T:System.Windows.Input.KeyGesture" /> 的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Input.KeyGestureValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.Windows.Input.KeyGesture" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <returns>指定 <see cref="T:System.Windows.Input.KeyGesture" /> 的字符串表示形式。</returns>
      <param name="value">要转换为字符串的笔势。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="T:System.Windows.Input.KeyStates">
      <summary>指定用来定义键状态的常数。</summary>
    </member>
    <member name="F:System.Windows.Input.KeyStates.None">
      <summary>键未按下。</summary>
    </member>
    <member name="F:System.Windows.Input.KeyStates.Down">
      <summary>键已按下。</summary>
    </member>
    <member name="F:System.Windows.Input.KeyStates.Toggled">
      <summary>键已切换。</summary>
    </member>
    <member name="T:System.Windows.Input.MediaCommands">
      <summary>提供一组标准的与媒体相关的命令。</summary>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.BoostBass">
      <summary>获取表示“增强低音”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本增强低音</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.ChannelDown">
      <summary> 获取表示“频道递减”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本频道递减</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.ChannelUp">
      <summary> 获取表示“频道递增”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本频道递增</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.DecreaseBass">
      <summary> 获取表示“降低低音”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本降低低音</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.DecreaseMicrophoneVolume">
      <summary> 获取表示“降低麦克风音量”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本降低麦克风音量</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.DecreaseTreble">
      <summary> 获取表示“降低高音”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本降低高音</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.DecreaseVolume">
      <summary> 获取表示“降低音量”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本降低音量</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.FastForward">
      <summary> 获取表示“快进”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本快进</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.IncreaseBass">
      <summary> 获取表示“提高低音”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本提高低音</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.IncreaseMicrophoneVolume">
      <summary> 获取表示“提高麦克风音量”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本提高麦克风音量</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.IncreaseTreble">
      <summary> 获取表示“提高高音”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本提高高音</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.IncreaseVolume">
      <summary> 获取表示“提高音量”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本提高音量</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.MuteMicrophoneVolume">
      <summary> 获取表示“将麦克风静音”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本将麦克风静音</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.MuteVolume">
      <summary> 获取表示“静音”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本静音</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.NextTrack">
      <summary> 获取表示“下一曲目”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本下一曲目</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.Pause">
      <summary> 获取表示“暂停”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本暂停</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.Play">
      <summary> 获取表示“播放”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本播放</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.PreviousTrack">
      <summary> 获取表示“上一曲目”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本上一曲目</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.Record">
      <summary> 获取表示“录制”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本记录</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.Rewind">
      <summary> 获取表示“后退”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本后退</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.Select">
      <summary> 获取表示“选择”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本Select</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.Stop">
      <summary> 获取表示“停止”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本停止</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.ToggleMicrophoneOnOff">
      <summary> 获取表示“打开/关闭麦克风”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本打开/关闭麦克风</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.TogglePlayPause">
      <summary> 获取表示“切换播放暂停”命令的值。</summary>
      <returns>命令。默认值键笔势未定义笔势。UI 文本切换播放暂停</returns>
    </member>
    <member name="T:System.Windows.Input.Mouse">
      <summary>将鼠标设备表示为特定线程。</summary>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddGotMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddLostMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Mouse.MouseDown" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddMouseEnterHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Mouse.MouseEnter" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddMouseLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Mouse.MouseLeave" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Mouse.MouseMove" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Mouse.MouseUp" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Mouse.MouseWheel" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddPreviewMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddPreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddPreviewMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddPreviewMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddPreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddPreviewMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddQueryCursorHandler(System.Windows.DependencyObject,System.Windows.Input.QueryCursorEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Mouse.QueryCursor" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement)">
      <summary>将鼠标输入捕获到指定元素。</summary>
      <returns>
            如果元素能够捕获鼠标，则为 true；否则为 false。</returns>
      <param name="element">要捕获鼠标的元素。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)">
      <summary>使用指定的 <see cref="T:System.Windows.Input.CaptureMode" /> 将鼠标输入捕获到指定元素。</summary>
      <returns>
            如果元素能够捕获鼠标，则为 true；否则为 false。</returns>
      <param name="element">要捕获鼠标的元素。</param>
      <param name="captureMode">要使用的捕获策略。</param>
    </member>
    <member name="P:System.Windows.Input.Mouse.Captured">
      <summary>获取捕获了鼠标的元素。</summary>
      <returns>由鼠标捕获的元素。</returns>
    </member>
    <member name="P:System.Windows.Input.Mouse.DirectlyOver">
      <summary>获取鼠标指针正好悬停于的元素。</summary>
      <returns>鼠标指针悬停的元素。</returns>
    </member>
    <member name="M:System.Windows.Input.Mouse.GetIntermediatePoints(System.Windows.IInputElement,System.Windows.Point[])">
      <summary>检索以前的自上一个鼠标移动事件以来的鼠标指针坐标（最多可检索 64 个）。</summary>
      <returns>返回的点数。</returns>
      <param name="relativeTo">
        <paramref name="points" /> 所关联的元素。</param>
      <param name="points">对象数组。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.GetPosition(System.Windows.IInputElement)">
      <summary>获取与指定元素相对的鼠标位置。</summary>
      <returns>与参数 <paramref name="relativeTo" /> 相对的鼠标位置。</returns>
      <param name="relativeTo">计算鼠标在其中的位置的坐标空间。</param>
    </member>
    <member name="E:System.Windows.Input.Mouse.GotMouseCapture">
      <summary>在元素捕获到鼠标时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.GotMouseCaptureEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" />附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" />附加事件的标识符。</returns>
    </member>
    <member name="P:System.Windows.Input.Mouse.LeftButton">
      <summary>获取鼠标左键的状态。</summary>
      <returns>鼠标左键的状态。</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.LostMouseCapture">
      <summary>在元素丢失鼠标捕获时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.LostMouseCaptureEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" />附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" />附加事件的标识符。</returns>
    </member>
    <member name="P:System.Windows.Input.Mouse.MiddleButton">
      <summary> 获取鼠标中键的状态。</summary>
      <returns>鼠标中键的状态。</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.MouseDown">
      <summary>当按下任何鼠标按钮时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.MouseDownEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Mouse.MouseDown" />附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Mouse.MouseDown" />附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.MouseEnter">
      <summary>当鼠标指针进入元素的边界时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.MouseEnterEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Mouse.MouseEnter" />附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Mouse.MouseEnter" />附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.MouseLeave">
      <summary>当鼠标指针离开元素的边界时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.MouseLeaveEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Mouse.MouseLeave" />附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Mouse.MouseLeave" />附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.MouseMove">
      <summary>在鼠标指针移动时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.MouseMoveEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Mouse.MouseMove" />附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Mouse.MouseMove" />附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.MouseUp">
      <summary>当释放任何鼠标按钮时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.MouseUpEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Mouse.MouseUp" />附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Mouse.MouseUp" />附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.MouseWheel">
      <summary>在鼠标滚轮转动时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.MouseWheelDeltaForOneLine">
      <summary>代表鼠标滚轮要滚过一行而转动的单位数。</summary>
      <returns>滚过一行时的单位数。</returns>
    </member>
    <member name="F:System.Windows.Input.Mouse.MouseWheelEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Mouse.MouseWheel" />附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Mouse.MouseWheel" />附加事件的标识符。</returns>
    </member>
    <member name="P:System.Windows.Input.Mouse.OverrideCursor">
      <summary>获取或设置整个应用程序的光标。</summary>
      <returns>如果没有设置 <see cref="P:System.Windows.Input.Mouse.OverrideCursor" />，则为重写光标或 null。</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.PreviewMouseDown">
      <summary> 当按下任何鼠标按钮时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.PreviewMouseDownEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" />附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" />附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement">
      <summary>当在捕获鼠标事件的元素之外按下主鼠标按钮时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElementEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" />附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" />附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.PreviewMouseMove">
      <summary>在鼠标移过元素时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.PreviewMouseMoveEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" />附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" />附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.PreviewMouseUp">
      <summary> 当释放任何鼠标按钮时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.PreviewMouseUpEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" />附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" />附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement">
      <summary>当在捕获鼠标事件的元素之外释放主鼠标按钮时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElementEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" />附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" />附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.PreviewMouseWheel">
      <summary> 在鼠标滚轮转动时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.PreviewMouseWheelEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" />附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" />附加事件的标识符。</returns>
    </member>
    <member name="P:System.Windows.Input.Mouse.PrimaryDevice">
      <summary>获取主鼠标设备。</summary>
      <returns>该设备。</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.QueryCursor">
      <summary>当元素查询当前鼠标光标时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.QueryCursorEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Mouse.QueryCursor" />附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Mouse.QueryCursor" />附加事件的标识符。</returns>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemoveGotMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" />附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemoveLostMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" />附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemoveMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Mouse.MouseDown" />附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemoveMouseEnterHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Mouse.MouseEnter" />附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemoveMouseLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Mouse.MouseLeave" />附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemoveMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Mouse.MouseMove" />附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemoveMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Mouse.MouseUp" />附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemoveMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Mouse.MouseWheel" />附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemovePreviewMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" />附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemovePreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" />附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemovePreviewMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" />附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemovePreviewMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" />附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemovePreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" />附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemovePreviewMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" />附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemoveQueryCursorHandler(System.Windows.DependencyObject,System.Windows.Input.QueryCursorEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Mouse.QueryCursor" />附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">事件处理程序。</param>
    </member>
    <member name="P:System.Windows.Input.Mouse.RightButton">
      <summary> 获取鼠标右键的状态。</summary>
      <returns>鼠标右键的状态。</returns>
    </member>
    <member name="M:System.Windows.Input.Mouse.SetCursor(System.Windows.Input.Cursor)">
      <summary>将鼠标指针设置到指定的 <see cref="T:System.Windows.Input.Cursor" />。</summary>
      <returns>
            如果设置了光标，则为 true；否则为 false。</returns>
      <param name="cursor">要将鼠标指针设置为的光标。</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.Synchronize">
      <summary>强制鼠标重新同步。</summary>
    </member>
    <member name="M:System.Windows.Input.Mouse.UpdateCursor">
      <summary> 强制更新鼠标光标。</summary>
    </member>
    <member name="P:System.Windows.Input.Mouse.XButton1">
      <summary> 获取第一个扩展按钮的状态。</summary>
      <returns>第一个鼠标扩展按钮的状态。</returns>
    </member>
    <member name="P:System.Windows.Input.Mouse.XButton2">
      <summary>获取第二个鼠标扩展按钮的当前状态。</summary>
      <returns>第二个鼠标扩展按钮的状态。</returns>
    </member>
    <member name="T:System.Windows.Input.MouseAction">
      <summary>指定定义鼠标所执行的操作的常量。</summary>
    </member>
    <member name="F:System.Windows.Input.MouseAction.None">
      <summary>不执行任何操作。</summary>
    </member>
    <member name="F:System.Windows.Input.MouseAction.LeftClick">
      <summary>单击鼠标左键。</summary>
    </member>
    <member name="F:System.Windows.Input.MouseAction.RightClick">
      <summary>单击鼠标右键。</summary>
    </member>
    <member name="F:System.Windows.Input.MouseAction.MiddleClick">
      <summary>单击鼠标中键。</summary>
    </member>
    <member name="F:System.Windows.Input.MouseAction.WheelClick">
      <summary>旋转鼠标滚轮。</summary>
    </member>
    <member name="F:System.Windows.Input.MouseAction.LeftDoubleClick">
      <summary>双击鼠标左键。</summary>
    </member>
    <member name="F:System.Windows.Input.MouseAction.RightDoubleClick">
      <summary>双击鼠标右键。</summary>
    </member>
    <member name="F:System.Windows.Input.MouseAction.MiddleDoubleClick">
      <summary>双击鼠标中键。</summary>
    </member>
    <member name="T:System.Windows.Input.MouseActionConverter">
      <summary>在 <see cref="T:System.Windows.Input.MouseAction" /> 对象与其他类型之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Input.MouseActionConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Input.MouseActionConverter" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Input.MouseActionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定能否使用指定上下文将指定类型的对象转换为 <see cref="T:System.Windows.Input.MouseAction" /> 的实例。</summary>
      <returns>
如果此转换器能够执行该操作，则为 true；否则为 false。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="sourceType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Windows.Input.MouseActionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定能否使用指定上下文将 <see cref="T:System.Windows.Input.MouseAction" /> 的实例转换为指定类型。</summary>
      <returns>
如果此转换器能够执行该操作，则为 true；否则为 false。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="destinationType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Windows.Input.MouseActionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>试图使用指定上下文将指定对象转换为 <see cref="T:System.Windows.Input.MouseAction" />。</summary>
      <returns>被转换的对象。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture">特定于区域性的信息。</param>
      <param name="source">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> 无法映射到有效 <see cref="T:System.Windows.Input.MouseAction" />。</exception>
      <exception cref="T:System.NotSupportedException">
无法转换 <paramref name="source" />。</exception>
    </member>
    <member name="M:System.Windows.Input.MouseActionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>试图使用指定上下文将 <see cref="T:System.Windows.Input.MouseAction" /> 转换为指定类型。</summary>
      <returns>被转换的对象。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture">特定于区域性的信息。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="value" /> 无法映射到有效 <see cref="T:System.Windows.Input.MouseAction" />。</exception>
      <exception cref="T:System.NotSupportedException">
无法转换 <paramref name="value" />。  </exception>
    </member>
    <member name="T:System.Windows.Input.MouseActionValueSerializer">
      <summary>在 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Input.MouseAction" /> 的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Input.MouseActionValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Input.MouseActionValueSerializer" /> 类的一个新实例。 </summary>
    </member>
    <member name="M:System.Windows.Input.MouseActionValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定是否可将指定的 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Input.MouseAction" /> 的一个实例。</summary>
      <returns>
            如果该值可以转换，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Input.MouseActionValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定是否可将指定的 <see cref="T:System.Windows.Input.MouseAction" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>
            如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的修改键。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Input.MouseActionValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Input.MouseAction" />。</summary>
      <returns>基于提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Input.MouseAction" /> 的新实例。</returns>
      <param name="value">要转换为 <see cref="T:System.Windows.Input.MouseAction" /> 的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Input.MouseActionValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.Windows.Input.MouseAction" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <returns>指定的 <see cref="T:System.Windows.Input.MouseAction" /> 的字符串表示形式。</returns>
      <param name="value">要转换为字符串的键。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="T:System.Windows.Input.MouseBinding">
      <summary>将 <see cref="T:System.Windows.Input.MouseGesture" /> 绑定到 <see cref="T:System.Windows.Input.RoutedCommand" />（或另一个 <see cref="T:System.Windows.Input.ICommand" /> 实现）。</summary>
    </member>
    <member name="M:System.Windows.Input.MouseBinding.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Input.MouseBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Input.MouseBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.MouseGesture)">
      <summary>用指定的命令和鼠标笔势初始化 <see cref="T:System.Windows.Input.MouseBinding" /> 类的新实例。</summary>
      <param name="command">与该笔势关联的命令。</param>
      <param name="gesture">与该命令关联的笔势。</param>
    </member>
    <member name="P:System.Windows.Input.MouseBinding.Gesture">
      <summary>获取或设置与此 <see cref="T:System.Windows.Input.MouseBinding" /> 关联的笔势。</summary>
      <returns>笔势。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Input.MouseBinding.Gesture" /> 被设置为 null。</exception>
    </member>
    <member name="P:System.Windows.Input.MouseBinding.MouseAction">
      <summary>获取或设置与此 <see cref="T:System.Windows.Input.MouseBinding" /> 关联的 <see cref="T:System.Windows.Input.MouseAction" />。</summary>
      <returns>鼠标操作。 默认为 <see cref="F:System.Windows.Input.MouseAction.None" />。</returns>
    </member>
    <member name="T:System.Windows.Input.MouseButton">
      <summary>定义用于指定鼠标设备上的按钮的值。</summary>
    </member>
    <member name="F:System.Windows.Input.MouseButton.Left">
      <summary>鼠标左按钮。</summary>
    </member>
    <member name="F:System.Windows.Input.MouseButton.Middle">
      <summary>鼠标中键。</summary>
    </member>
    <member name="F:System.Windows.Input.MouseButton.Right">
      <summary>鼠标右按钮。</summary>
    </member>
    <member name="F:System.Windows.Input.MouseButton.XButton1">
      <summary>第一个鼠标扩展按钮。</summary>
    </member>
    <member name="F:System.Windows.Input.MouseButton.XButton2">
      <summary>第二个鼠标扩展按钮。</summary>
    </member>
    <member name="T:System.Windows.Input.MouseButtonEventArgs">
      <summary>为与鼠标按钮相关的事件提供数据。</summary>
    </member>
    <member name="M:System.Windows.Input.MouseButtonEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Windows.Input.MouseButton)">
      <summary>使用指定的 <see cref="T:System.Windows.Input.MouseDevice" />、时间戳和 <see cref="T:System.Windows.Input.MouseButton" /> 初始化 <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> 类的新实例。</summary>
      <param name="mouse">与此事件关联的逻辑鼠标设备。</param>
      <param name="timestamp">发生输入的时间。</param>
      <param name="button">要描述其状态的鼠标按钮。</param>
    </member>
    <member name="M:System.Windows.Input.MouseButtonEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Windows.Input.MouseButton,System.Windows.Input.StylusDevice)">
      <summary>使用指定的 <see cref="T:System.Windows.Input.MouseDevice" />、时间戳、<see cref="T:System.Windows.Input.MouseButton" /> 和 <see cref="T:System.Windows.Input.StylusDevice" /> 初始化 <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> 类的新实例。 .</summary>
      <param name="mouse">与此事件关联的逻辑鼠标设备。</param>
      <param name="timestamp">事件发生的时间。</param>
      <param name="button">与该事件关联的按钮。</param>
      <param name="stylusDevice">与该事件关联的手写笔设备。</param>
    </member>
    <member name="P:System.Windows.Input.MouseButtonEventArgs.ButtonState">
      <summary>获取与该事件关联的按钮的状态。</summary>
      <returns>按钮的状态。</returns>
    </member>
    <member name="P:System.Windows.Input.MouseButtonEventArgs.ChangedButton">
      <summary>获取与该事件关联的按钮。</summary>
      <returns>按下的按钮。</returns>
    </member>
    <member name="P:System.Windows.Input.MouseButtonEventArgs.ClickCount">
      <summary>获取单击此按钮的次数。</summary>
      <returns>单击此鼠标按钮的次数。</returns>
    </member>
    <member name="M:System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>以特定于类型的方式调用事件处理程序，这样做可以提高事件系统效率。</summary>
      <param name="genericHandler">以特定于类型的方式调用的一般处理程序。</param>
      <param name="genericTarget">要对其调用处理程序的目标。</param>
    </member>
    <member name="T:System.Windows.Input.MouseButtonEventHandler">
      <summary>表示将处理与鼠标按钮相关的路由事件的方法，例如 <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" />。</summary>
      <param name="sender">附加事件处理程序的对象。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Input.MouseButtonState">
      <summary>指定鼠标按钮的可能状态。</summary>
    </member>
    <member name="F:System.Windows.Input.MouseButtonState.Released">
      <summary>该按钮处于释放状态。</summary>
    </member>
    <member name="F:System.Windows.Input.MouseButtonState.Pressed">
      <summary>该按钮处于按下状态。 </summary>
    </member>
    <member name="T:System.Windows.Input.MouseDevice">
      <summary>表示鼠标设备。</summary>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.ActiveSource">
      <summary>获取报告此设备的输入的 <see cref="T:System.Windows.PresentationSource" />。</summary>
      <returns>此设备的输入源。</returns>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement)">
      <summary>将鼠标事件捕获到指定元素。</summary>
      <returns>
            如果元素能够捕获鼠标，则为 true；否则为 false。</returns>
      <param name="element">要捕获鼠标的元素。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="element" /> 不是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</exception>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)">
      <summary>使用指定的 <see cref="T:System.Windows.Input.CaptureMode" /> 将鼠标输入捕获到指定元素。</summary>
      <returns>
            如果元素能够捕获鼠标，则为 true；否则为 false。</returns>
      <param name="element">要捕获鼠标的元素。</param>
      <param name="captureMode">要使用的捕获策略。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="element" /> 不是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="captureMode" /> 不是有效的 <see cref="T:System.Windows.Input.CaptureMode" />。</exception>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.Captured">
      <summary>获取由鼠标捕获的 <see cref="T:System.Windows.IInputElement" />。</summary>
      <returns>鼠标捕获的元素。</returns>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.DirectlyOver">
      <summary>获取鼠标指针正好悬停的元素。</summary>
      <returns>鼠标指针悬停的元素。</returns>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.GetButtonState(System.Windows.Input.MouseButton)">
      <summary>获取指定鼠标按钮的状态。</summary>
      <returns>按钮的状态。</returns>
      <param name="mouseButton">被查询的按钮。</param>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.GetClientPosition">
      <summary>计算鼠标指针在工作区坐标的位置。</summary>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.GetClientPosition(System.Windows.PresentationSource)">
      <summary>在指定的 <see cref="T:System.Windows.PresentationSource" /> 中，计算鼠标指针在工作区坐标的位置。</summary>
      <param name="presentationSource">要在其中获取鼠标位置的源。</param>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.GetPosition(System.Windows.IInputElement)">
      <summary>获取与指定元素相对的鼠标位置。</summary>
      <returns>与参数 <paramref name="relativeTo" /> 相对的鼠标位置。</returns>
      <param name="relativeTo">要在其中计算鼠标位置的参考框架。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="relativeTo" /> 为 null，或不为 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</exception>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.GetScreenPosition">
      <summary>计算鼠标指针的屏幕位置。</summary>
      <returns>鼠标指针的位置。</returns>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.LeftButton">
      <summary>获取此鼠标设备鼠标左键的状态。</summary>
      <returns>按钮的状态。</returns>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.MiddleButton">
      <summary> 获取此鼠标设备鼠标中键的状态。</summary>
      <returns>按钮的状态。</returns>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.OverrideCursor">
      <summary>获取或设置整个应用程序的光标。</summary>
      <returns>如果没有设置 <see cref="P:System.Windows.Input.MouseDevice.OverrideCursor" />，则为重写光标或 null。</returns>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.RightButton">
      <summary>获取此鼠标设备鼠标右键的状态。</summary>
      <returns>按钮的状态。</returns>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.SetCursor(System.Windows.Input.Cursor)">
      <summary>将鼠标指针设置为指定的 <see cref="T:System.Windows.Input.Cursor" /></summary>
      <returns>
            如果设置鼠标光标，则为 true；否则为 false。</returns>
      <param name="cursor">要将鼠标指针设置为的光标。</param>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.Synchronize">
      <summary>强制鼠标重新同步。</summary>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.Target">
      <summary>获取要将此鼠标设备的输入发送到的 <see cref="T:System.Windows.IInputElement" />。</summary>
      <returns>接收输入的元素。</returns>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.UpdateCursor">
      <summary>强制更新鼠标光标。</summary>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.XButton1">
      <summary>获取此鼠标设备第一个扩展按钮的状态。</summary>
      <returns>按钮的状态。</returns>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.XButton2">
      <summary>获取此鼠标设备第二个扩展按钮的状态。</summary>
      <returns>按钮的状态。</returns>
    </member>
    <member name="T:System.Windows.Input.MouseEventArgs">
      <summary>为与鼠标相关且并不具体涉及鼠标按钮或鼠标滚轮的路由事件（如 <see cref="E:System.Windows.UIElement.MouseMove" />）提供数据。</summary>
    </member>
    <member name="M:System.Windows.Input.MouseEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32)">
      <summary>使用指定的 <see cref="T:System.Windows.Input.MouseDevice" /> 和时间戳初始化 <see cref="T:System.Windows.Input.MouseEventArgs" /> 类的新实例。</summary>
      <param name="mouse">与此事件关联的鼠标设备。</param>
      <param name="timestamp">发生输入的时间。</param>
    </member>
    <member name="M:System.Windows.Input.MouseEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Windows.Input.StylusDevice)">
      <summary>使用指定的 <see cref="T:System.Windows.Input.MouseDevice" />、时间戳和 <see cref="T:System.Windows.Input.StylusDevice" /> 初始化 <see cref="T:System.Windows.Input.MouseEventArgs" /> 类的新实例。</summary>
      <param name="mouse">与此事件关联的鼠标设备。</param>
      <param name="timestamp">发生输入的时间。</param>
      <param name="stylusDevice">获取与此事件关联的逻辑手写笔设备。</param>
    </member>
    <member name="M:System.Windows.Input.MouseEventArgs.GetPosition(System.Windows.IInputElement)">
      <summary>返回鼠标指针相对于指定元素的位置。</summary>
      <returns>相对于指定对象的鼠标指针位置的 x 和 y 坐标。</returns>
      <param name="relativeTo">在计算鼠标指针位置时用作参考框架的元素。</param>
    </member>
    <member name="M:System.Windows.Input.MouseEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>以特定于类型的方式调用事件处理程序，这样做可以提高事件系统效率。</summary>
      <param name="genericHandler">以特定于类型的方式调用的一般处理程序。</param>
      <param name="genericTarget">要对其调用处理程序的目标。</param>
    </member>
    <member name="P:System.Windows.Input.MouseEventArgs.LeftButton">
      <summary>获取鼠标左键的当前状态。</summary>
      <returns>鼠标左键的当前状态，为 <see cref="F:System.Windows.Input.MouseButtonState.Pressed" /> 或 <see cref="F:System.Windows.Input.MouseButtonState.Released" />。没有默认值。</returns>
    </member>
    <member name="P:System.Windows.Input.MouseEventArgs.MiddleButton">
      <summary>获取鼠标中键的当前状态。</summary>
      <returns>鼠标中键的当前状态，为 <see cref="F:System.Windows.Input.MouseButtonState.Pressed" /> 或 <see cref="F:System.Windows.Input.MouseButtonState.Released" />。没有默认值。</returns>
    </member>
    <member name="P:System.Windows.Input.MouseEventArgs.MouseDevice">
      <summary>获取与此事件关联的鼠标设备。</summary>
      <returns>与此事件关联的鼠标设备。没有默认值。</returns>
    </member>
    <member name="P:System.Windows.Input.MouseEventArgs.RightButton">
      <summary>获取鼠标右键的当前状态。</summary>
      <returns>鼠标右键的当前状态，为 <see cref="F:System.Windows.Input.MouseButtonState.Pressed" /> 或 <see cref="F:System.Windows.Input.MouseButtonState.Released" />。没有默认值。</returns>
    </member>
    <member name="P:System.Windows.Input.MouseEventArgs.StylusDevice">
      <summary>获取与此事件关联的手写笔设备。</summary>
      <returns>与此事件关联的手写笔。没有默认值。</returns>
    </member>
    <member name="P:System.Windows.Input.MouseEventArgs.XButton1">
      <summary>获取第一个鼠标扩展按钮的当前状态。</summary>
      <returns>第一个鼠标扩展按钮的当前状态，为 <see cref="F:System.Windows.Input.MouseButtonState.Pressed" /> 或 <see cref="F:System.Windows.Input.MouseButtonState.Released" />。没有默认值。</returns>
    </member>
    <member name="P:System.Windows.Input.MouseEventArgs.XButton2">
      <summary>获取第二个鼠标扩展按钮的当前状态。</summary>
      <returns>第二个鼠标扩展按钮的当前状态，为 <see cref="F:System.Windows.Input.MouseButtonState.Pressed" /> 或 <see cref="F:System.Windows.Input.MouseButtonState.Released" />。没有默认值。</returns>
    </member>
    <member name="T:System.Windows.Input.MouseEventHandler">
      <summary>代表将处理与鼠标相关且并不具体涉及鼠标按钮或鼠标滚轮的路由事件的方法；例如 <see cref="E:System.Windows.UIElement.MouseMove" />。</summary>
      <param name="sender">附加此事件处理程序的对象。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Input.MouseGesture">
      <summary>定义可用于调用命令的鼠标输入笔势。</summary>
    </member>
    <member name="M:System.Windows.Input.MouseGesture.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Input.MouseGesture" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Input.MouseGesture.#ctor(System.Windows.Input.MouseAction)">
      <summary>使用指定的 <see cref="T:System.Windows.Input.MouseAction" /> 初始化 <see cref="T:System.Windows.Input.MouseGesture" /> 类的一个新实例。</summary>
      <param name="mouseAction">与此笔势关联的操作。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="mouseAction" /> 不是有效的 <see cref="T:System.Windows.Input.MouseAction" /> 值。</exception>
    </member>
    <member name="M:System.Windows.Input.MouseGesture.#ctor(System.Windows.Input.MouseAction,System.Windows.Input.ModifierKeys)">
      <summary>使用指定的 <see cref="T:System.Windows.Input.MouseAction" /> 和 <see cref="T:System.Windows.Input.ModifierKeys" /> 初始化 <see cref="T:System.Windows.Input.MouseGesture" /> 类的新实例。</summary>
      <param name="mouseAction">与此笔势关联的操作。</param>
      <param name="modifiers">与此笔势关联的修饰符。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="mouseAction" /> 不是有效的 <see cref="T:System.Windows.Input.MouseAction" /> 值-或-<paramref name="modifiers" /> 不是有效的 <see cref="T:System.Windows.Input.ModifierKeys" /> 值。</exception>
    </member>
    <member name="M:System.Windows.Input.MouseGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)">
      <summary>确定 <see cref="T:System.Windows.Input.MouseGesture" /> 是否和与指定 <see cref="T:System.Windows.Input.InputEventArgs" /> 对象关联的输入匹配。</summary>
      <returns>
如果事件数据与此 <see cref="T:System.Windows.Input.MouseGesture" /> 匹配，则为 true；否则为 false。</returns>
      <param name="targetElement">目标。</param>
      <param name="inputEventArgs">要与此笔势进行比较的输入事件数据。</param>
    </member>
    <member name="P:System.Windows.Input.MouseGesture.Modifiers">
      <summary>获取或设置与此 <see cref="T:System.Windows.Input.MouseGesture" /> 关联的修改键。</summary>
      <returns>与此笔势关联的修改键。默认值为 <see cref="F:System.Windows.Input.ModifierKeys.None" />。</returns>
    </member>
    <member name="P:System.Windows.Input.MouseGesture.MouseAction">
      <summary>获取或设置与此笔势关联的 <see cref="T:System.Windows.Input.MouseAction" />。</summary>
      <returns>与此笔势关联的鼠标操作。默认值为 <see cref="F:System.Windows.Input.MouseAction.None" />。</returns>
    </member>
    <member name="T:System.Windows.Input.MouseGestureConverter">
      <summary>在 <see cref="T:System.Windows.Input.MouseGesture" /> 对象与其他类型之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Input.MouseGestureConverter.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Input.MouseGestureConverter" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Input.MouseGestureConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定能否使用指定上下文将指定类型的对象转换为 <see cref="T:System.Windows.Input.MouseGesture" /> 的实例。</summary>
      <returns>
            如果此转换器能够执行该操作，则为 true；否则为 false。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="sourceType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Windows.Input.MouseGestureConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定能否使用指定上下文将 <see cref="T:System.Windows.Input.MouseGesture" /> 的实例转换为指定类型。</summary>
      <returns>
            如果此转换器能够执行该操作，则为 true；否则为 false。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="destinationType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Windows.Input.MouseGestureConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>试图使用指定上下文将指定对象转换为 <see cref="T:System.Windows.Input.MouseGesture" />。</summary>
      <returns>被转换的对象。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture">特定于区域性的信息。</param>
      <param name="source">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> 不能为转换器。</exception>
    </member>
    <member name="M:System.Windows.Input.MouseGestureConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>试图使用指定上下文将 <see cref="T:System.Windows.Input.MouseGesture" /> 转换为指定类型。</summary>
      <returns>被转换的对象。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="T:System.Windows.Input.MouseGestureValueSerializer">
      <summary>在 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Input.ModifierKeys" /> 的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Input.MouseGestureValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Input.MouseGestureValueSerializer" /> 类的一个新实例。 </summary>
    </member>
    <member name="M:System.Windows.Input.MouseGestureValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定是否可将指定的 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Input.ModifierKeys" /> 的一个实例。</summary>
      <returns>
            如果该值可以转换，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Input.MouseGestureValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定是否可将指定的 <see cref="T:System.Windows.Input.ModifierKeys" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>
            如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的修改键。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Input.MouseGestureValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Input.ModifierKeys" />。</summary>
      <returns>基于提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Input.ModifierKeys" /> 的一个新实例。</returns>
      <param name="value">要转换为 <see cref="T:System.Windows.Input.ModifierKeys" /> 的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Input.MouseGestureValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.Windows.Input.ModifierKeys" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <returns>指定的 <see cref="T:System.Windows.Input.ModifierKeys" /> 的字符串表示形式。</returns>
      <param name="value">要转换为字符串的键。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="T:System.Windows.Input.MouseWheelEventArgs">
      <summary>为报告鼠标设备的鼠标滚轮增量值更改的各事件提供数据。</summary>
    </member>
    <member name="M:System.Windows.Input.MouseWheelEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> 类的一个新实例。</summary>
      <param name="mouse">与此事件关联的鼠标设备。</param>
      <param name="timestamp">发生输入的时间。</param>
      <param name="delta">鼠标滚轮的变更量。</param>
    </member>
    <member name="P:System.Windows.Input.MouseWheelEventArgs.Delta">
      <summary>获取指示鼠标滚轮变更量的值。</summary>
      <returns>鼠标滚轮的变更量。如果鼠标滚轮朝上旋转（背离用户的方向），则该值为正；如果鼠标滚轮朝下旋转（朝着用户的方向），则该值为负。 </returns>
    </member>
    <member name="M:System.Windows.Input.MouseWheelEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>以特定于类型的方式调用事件处理程序，这样做可以提高事件系统效率。</summary>
      <param name="genericHandler">以特定于类型的方式调用的一般处理程序。</param>
      <param name="genericTarget">要对其调用处理程序的目标。</param>
    </member>
    <member name="T:System.Windows.Input.MouseWheelEventHandler">
      <summary>表示将处理 <see cref="E:System.Windows.UIElement.MouseWheel" /> 和 <see cref="E:System.Windows.ContentElement.MouseWheel" />路由事件以及相关的附加事件和预览事件的方法。</summary>
      <param name="sender">附加此事件处理程序的对象。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Input.NavigationCommands">
      <summary>
                    提供一组标准的与导航相关的命令。
                </summary>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.BrowseBack">
      <summary>
                    获取表示 Browse Back 命令的值。
                </summary>
      <returns>
路由的 UI 命令。
                
默认值
                
键笔势
                
                    Alt + 向左键
                
UI 文本
                
                    后退
                </returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.BrowseForward">
      <summary>
                    获取表示 Browse Forward 命令的值。
                </summary>
      <returns>
路由的 UI 命令。
                
默认值
                
键笔势
                
                    Alt + 向右键
                
UI 文本
                
                    前进
                </returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.BrowseHome">
      <summary>
                    获取表示 Browse Home 命令的值。
                </summary>
      <returns>
路由的 UI 命令。
                
默认值
                
键笔势
                
                    Alt + Home
                
UI 文本
                
                    主页
                </returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.BrowseStop">
      <summary>
                    获取表示 Browse Stop 命令的值。
                </summary>
      <returns>
路由的 UI 命令。
                
默认值
                
键笔势
                
                    Alt + Esc
                
UI 文本
                
                    停止
                </returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.DecreaseZoom">
      <summary>
                    获取表示 Decrease Zoom 命令的值。
                </summary>
      <returns>
路由的 UI 命令。
                
默认值
                
键笔势
                
N/A
                
UI 文本
                
                    减小缩放比例
                </returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.Favorites">
      <summary>
                    获取表示 Favorites 命令的值。
                </summary>
      <returns>
路由的 UI 命令。
                
默认值
                
键笔势
                
                    Ctrl+I
                
UI 文本
                
                    收藏夹
                </returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.FirstPage">
      <summary>
                    获取表示 First Page 命令的值。
                </summary>
      <returns>
路由的 UI 命令。
                
默认值
                
键笔势
                
N/A
                
UI 文本
                
                    第一页
                </returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.GoToPage">
      <summary>
                    获取表示 Go To Page 命令的值。
                </summary>
      <returns>
路由的 UI 命令。
                
默认值
                
键笔势
                
N/A
                
UI 文本
                
缩放
                </returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.IncreaseZoom">
      <summary>
                    获取表示 Increase Zoom 命令的值。
                </summary>
      <returns>
路由的 UI 命令。
                
默认值
                
键笔势
                
N/A
                
UI 文本
                
                    增大缩放比例
                </returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.LastPage">
      <summary>
                    获取表示 Last Page 命令的值。
                </summary>
      <returns>
路由的 UI 命令。
                
默认值
                
键笔势
                
N/A
                
UI 文本
                
                    最后一页
                </returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.NavigateJournal">
      <summary>
                    获取表示 Navigate Journal 命令的值。
                </summary>
      <returns>
路由的 UI 命令。
                
默认值
                
键笔势
                
N/A
                
UI 文本
                
                    导航日记
                </returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.NextPage">
      <summary>
                    获取表示 Next Page 命令的值。
                </summary>
      <returns>
路由的 UI 命令。
                
默认值
                
键笔势
                
N/A
                
UI 文本
                
                    下一页
                </returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.PreviousPage">
      <summary>
                    获取表示 Previous Page 命令的值。
                </summary>
      <returns>
路由的 UI 命令。
                
默认值
                
键笔势
                
N/A
                
UI 文本
                
                    上一页
                </returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.Refresh">
      <summary>
                    获取表示 Refresh 命令的值。
                </summary>
      <returns>
路由的 UI 命令。
                
默认值
                
键笔势
                
                    F5
                
UI 文本
                
                    刷新
                </returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.Search">
      <summary>
                    获取表示 Search 命令的值。
                </summary>
      <returns>
路由的 UI 命令。
                
默认值
                
键笔势
                
                    F3
                
UI 文本
                
                    搜索
                </returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.Zoom">
      <summary>
                    获取表示 Zoom 命令的值。
                </summary>
      <returns>
路由的 UI 命令。
                
默认值
                
键笔势
                
N/A
                
UI 文本
                
缩放
                </returns>
    </member>
    <member name="T:System.Windows.Input.NotifyInputEventArgs">
      <summary>为 <see cref="P:System.Windows.Input.NotifyInputEventArgs.InputManager" /> 所处理的原始输入提供数据。</summary>
    </member>
    <member name="P:System.Windows.Input.NotifyInputEventArgs.InputManager">
      <summary>获取处理输入事件的输入管理器。</summary>
      <returns>输入管理器。</returns>
    </member>
    <member name="P:System.Windows.Input.NotifyInputEventArgs.StagingItem">
      <summary>获取输入管理器处理的临时区域输入项。</summary>
      <returns>临时区域。</returns>
    </member>
    <member name="T:System.Windows.Input.NotifyInputEventHandler">
      <summary>表示将处理 <see cref="E:System.Windows.Input.InputManager.PreNotifyInput" /> 和 <see cref="E:System.Windows.Input.InputManager.PostNotifyInput" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Input.PreProcessInputEventArgs">
      <summary>提供用于预处理输入事件的数据。</summary>
    </member>
    <member name="M:System.Windows.Input.PreProcessInputEventArgs.Cancel">
      <summary>取消处理输入事件。</summary>
    </member>
    <member name="P:System.Windows.Input.PreProcessInputEventArgs.Canceled">
      <summary>确定是否取消了对输入事件的处理。</summary>
      <returns>
            如果取消了处理操作，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Windows.Input.PreProcessInputEventHandler">
      <summary>表示将处理 <see cref="E:System.Windows.Input.InputManager.PreProcessInput" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Input.ProcessInputEventArgs">
      <summary>为处理后输入事件提供数据。</summary>
    </member>
    <member name="M:System.Windows.Input.ProcessInputEventArgs.PeekInput">
      <summary>获取但不弹出临时区域堆栈顶部的输入事件。</summary>
      <returns>位于临时区域堆栈顶部的输入事件。</returns>
    </member>
    <member name="M:System.Windows.Input.ProcessInputEventArgs.PopInput">
      <summary>移除临时区域堆栈顶部的输入事件。</summary>
      <returns>位于临时区域堆栈顶部的输入事件。如果临时区域为空，则返回值将是 null。</returns>
    </member>
    <member name="M:System.Windows.Input.ProcessInputEventArgs.PushInput(System.Windows.Input.InputEventArgs,System.Windows.Input.StagingAreaInputItem)">
      <summary>将指定的输入事件放置在指定临时区域堆栈的顶部。</summary>
      <returns>包装指定输入的临时区域输入项。</returns>
      <param name="input">要放置在临时区域堆栈上的输入事件。</param>
      <param name="promote">要从其提升状态的现有临时区域项。</param>
    </member>
    <member name="M:System.Windows.Input.ProcessInputEventArgs.PushInput(System.Windows.Input.StagingAreaInputItem)">
      <summary>将指定的输入事件放置在临时区域堆栈的顶部。</summary>
      <returns>临时区域输入项。</returns>
      <param name="input">要放置在临时区域堆栈上的输入事件。</param>
    </member>
    <member name="T:System.Windows.Input.ProcessInputEventHandler">
      <summary>表示将处理 <see cref="E:System.Windows.Input.InputManager.PostProcessInput" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Input.QueryCursorEventArgs">
      <summary>为 <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.Windows.Input.QueryCursorEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32)">
      <summary>使用指定的鼠标设备和时间戳初始化 <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> 类的新实例。</summary>
      <param name="mouse">与此事件关联的逻辑鼠标设备。</param>
      <param name="timestamp">发生输入的时间。</param>
    </member>
    <member name="M:System.Windows.Input.QueryCursorEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Windows.Input.StylusDevice)">
      <summary>使用指定的鼠标设备、时间戳和手写笔设备初始化 <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> 类的新实例。</summary>
      <param name="mouse">与此事件关联的逻辑鼠标设备。</param>
      <param name="timestamp">发生输入的时间。</param>
      <param name="stylusDevice">与此事件关联的手写笔指针。</param>
    </member>
    <member name="P:System.Windows.Input.QueryCursorEventArgs.Cursor">
      <summary>获取或设置与此事件关联的光标。</summary>
      <returns>光标。</returns>
    </member>
    <member name="M:System.Windows.Input.QueryCursorEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>以特定于类型的方式调用事件处理程序，这样做可以提高事件系统效率。</summary>
      <param name="genericHandler">以特定于类型的方式调用的一般处理程序。</param>
      <param name="genericTarget">要对其调用处理程序的目标。</param>
    </member>
    <member name="T:System.Windows.Input.QueryCursorEventHandler">
      <summary>表示将处理 <see cref="E:System.Windows.UIElement.QueryCursor" /> 和 <see cref="E:System.Windows.ContentElement.QueryCursor" /> 事件以及 <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> 附加事件的方法。</summary>
      <param name="sender">附加此事件处理程序的对象。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Input.RoutedCommand">
      <summary>定义一个实现 <see cref="T:System.Windows.Input.ICommand" /> 并通过元素树路由的命令。</summary>
    </member>
    <member name="M:System.Windows.Input.RoutedCommand.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Input.RoutedCommand" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)">
      <summary>使用指定的名称和所有者类型初始化 <see cref="T:System.Windows.Input.RoutedCommand" /> 类的新实例。</summary>
      <param name="name">序列化的声明名称。</param>
      <param name="ownerType">注册命令的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度为零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ownerType" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)">
      <summary>使用指定的名称、所有者类型和笔势集合初始化 <see cref="T:System.Windows.Input.RoutedCommand" /> 类的新实例。</summary>
      <param name="name">序列化的声明名称。</param>
      <param name="ownerType">正在注册命令的类型。</param>
      <param name="inputGestures">与此命令关联的默认输入笔势。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度为零。- 或 -<paramref name="ownerType" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)">
      <summary>确定此 <see cref="T:System.Windows.Input.RoutedCommand" /> 在其当前状态是否可以执行。</summary>
      <returns>
            如果可以对当前命令目标执行此命令，则为 true；否则为 false。</returns>
      <param name="parameter">用户定义的数据类型。</param>
      <param name="target">命令目标。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" /> 不是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</exception>
    </member>
    <member name="E:System.Windows.Input.RoutedCommand.CanExecuteChanged">
      <summary>当命令管理器检测到对命令源所进行的更改时发生。这些更改通常影响是否应对当前命令目标执行命令。</summary>
    </member>
    <member name="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">
      <summary>对当前命令目标执行 <see cref="T:System.Windows.Input.RoutedCommand" />。</summary>
      <param name="parameter">要传递到处理程序的用户定义的参数。</param>
      <param name="target">要在其中查找命令处理程序的元素。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" /> 不是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</exception>
    </member>
    <member name="P:System.Windows.Input.RoutedCommand.InputGestures">
      <summary>获取与此命令关联的 <see cref="T:System.Windows.Input.InputGesture" /> 对象的集合。</summary>
      <returns>输入笔势。</returns>
    </member>
    <member name="P:System.Windows.Input.RoutedCommand.Name">
      <summary>获取命令的名称。</summary>
      <returns>命令的名称。</returns>
    </member>
    <member name="P:System.Windows.Input.RoutedCommand.OwnerType">
      <summary>获取使用命令注册的类型。</summary>
      <returns>命令所有者的类型。</returns>
    </member>
    <member name="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />。</summary>
      <returns>
            如果可以执行此命令，则为 true；否则为 false。</returns>
      <param name="parameter">此命令使用的数据。如果此命令不需要传递数据，则该对象可以设置为 null。</param>
    </member>
    <member name="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />。</summary>
      <param name="parameter">此命令使用的数据。如果此命令不需要传递数据，则该对象可以设置为 null。</param>
    </member>
    <member name="T:System.Windows.Input.RoutedUICommand">
      <summary>定义一个在元素树中路由并包含一个文本属性的 <see cref="T:System.Windows.Input.ICommand" />。</summary>
    </member>
    <member name="M:System.Windows.Input.RoutedUICommand.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Input.RoutedUICommand" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Input.RoutedUICommand.#ctor(System.String,System.String,System.Type)">
      <summary>使用指定的说明性文本、声明的名称和所有者类型初始化 <see cref="T:System.Windows.Input.RoutedUICommand" /> 类的新实例。</summary>
      <param name="text">命令的说明性文本。</param>
      <param name="name">用于序列化的命令的声明名称。</param>
      <param name="ownerType">正在注册命令的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度为零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ownerType" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Input.RoutedUICommand.#ctor(System.String,System.String,System.Type,System.Windows.Input.InputGestureCollection)">
      <summary>使用指定的说明性文本、声明的名称、所有者类型和输入笔势初始化 <see cref="T:System.Windows.Input.RoutedUICommand" /> 类的新实例。</summary>
      <param name="text">命令的说明性文本。</param>
      <param name="name">用于序列化的命令的声明名称。</param>
      <param name="ownerType">正在注册命令的类型。</param>
      <param name="inputGestures">要与命令关联的笔势集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的长度为零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ownerType" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Input.RoutedUICommand.Text">
      <summary>获取或设置描述该命令的文本。</summary>
      <returns>描述该命令的文本。 默认值为空字符串。</returns>
    </member>
    <member name="T:System.Windows.Input.SpeechMode">
      <summary>指定语音输入的转译模式。</summary>
    </member>
    <member name="F:System.Windows.Input.SpeechMode.Dictation">
      <summary>语音输入转译为听写。</summary>
    </member>
    <member name="F:System.Windows.Input.SpeechMode.Command">
      <summary>语音输入转译为命令。</summary>
    </member>
    <member name="F:System.Windows.Input.SpeechMode.Indeterminate">
      <summary>语音输入模式不确定。</summary>
    </member>
    <member name="T:System.Windows.Input.StagingAreaInputItem">
      <summary>在输入管理器处理输入事件时封装该事件。</summary>
    </member>
    <member name="M:System.Windows.Input.StagingAreaInputItem.GetData(System.Object)">
      <summary>获取与指定键相关联的输入数据。</summary>
      <returns>此键的数据，可以为 null。</returns>
      <param name="key">数据的任意键。它不能为 null。</param>
    </member>
    <member name="P:System.Windows.Input.StagingAreaInputItem.Input">
      <summary>获取与此 <see cref="T:System.Windows.Input.StagingAreaInputItem" /> 对象相关联的输入事件数据 </summary>
      <returns>事件。</returns>
    </member>
    <member name="M:System.Windows.Input.StagingAreaInputItem.SetData(System.Object,System.Object)">
      <summary>使用指定键和指定数据创建字典项。</summary>
      <param name="key">数据的任意键。它不能为 null。</param>
      <param name="value">要为此键设置的数据。它可以是 null。</param>
    </member>
    <member name="T:System.Windows.Input.Stylus">
      <summary>提供对有关 tablet 笔的一般信息的访问权限。</summary>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddGotStylusCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddLostStylusCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddPreviewStylusButtonDownHandler(System.Windows.DependencyObject,System.Windows.Input.StylusButtonEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddPreviewStylusButtonUpHandler(System.Windows.DependencyObject,System.Windows.Input.StylusButtonEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddPreviewStylusDownHandler(System.Windows.DependencyObject,System.Windows.Input.StylusDownEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddPreviewStylusInAirMoveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddPreviewStylusInRangeHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddPreviewStylusMoveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddPreviewStylusOutOfRangeHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddPreviewStylusSystemGestureHandler(System.Windows.DependencyObject,System.Windows.Input.StylusSystemGestureEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddPreviewStylusUpHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddStylusButtonDownHandler(System.Windows.DependencyObject,System.Windows.Input.StylusButtonEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddStylusButtonUpHandler(System.Windows.DependencyObject,System.Windows.Input.StylusButtonEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddStylusDownHandler(System.Windows.DependencyObject,System.Windows.Input.StylusDownEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.StylusDown" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddStylusEnterHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.StylusEnter" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddStylusInAirMoveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddStylusInRangeHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.StylusInRange" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddStylusLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.StylusLeave" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddStylusMoveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.StylusMove" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddStylusOutOfRangeHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddStylusSystemGestureHandler(System.Windows.DependencyObject,System.Windows.Input.StylusSystemGestureEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.AddStylusUpHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.Stylus.StylusUp" />附加事件添加处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要添加的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.Capture(System.Windows.IInputElement)">
      <summary>捕获指定元素的手写笔。</summary>
      <returns>
            如果 <paramref name="element" /> 捕获到手写笔，则为 true；否则为 false。</returns>
      <param name="element">要捕获手写笔的元素。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)">
      <summary>捕获指定元素的手写笔。</summary>
      <returns>
            如果 <paramref name="element" /> 捕获到手写笔，则为 true；否则为 false。</returns>
      <param name="element">要捕获手写笔的元素。</param>
      <param name="captureMode">
        <see cref="T:System.Windows.Input.CaptureMode" /> 值之一。</param>
    </member>
    <member name="P:System.Windows.Input.Stylus.Captured">
      <summary>获取绑定了手写笔的元素。</summary>
      <returns>绑定了手写笔的 <see cref="T:System.Windows.IInputElement" />。</returns>
    </member>
    <member name="P:System.Windows.Input.Stylus.CurrentStylusDevice">
      <summary>获取当前正在使用的手写笔。</summary>
      <returns>
        <see cref="T:System.Windows.Input.StylusDevice" />，表示当前正在使用的手写笔。</returns>
    </member>
    <member name="P:System.Windows.Input.Stylus.DirectlyOver">
      <summary>获取手写笔正下方的元素。</summary>
      <returns>手写笔正下方的 <see cref="T:System.Windows.IInputElement" />。</returns>
    </member>
    <member name="M:System.Windows.Input.Stylus.GetIsFlicksEnabled(System.Windows.DependencyObject)">
      <summary>获取指定元素上 <see cref="P:System.Windows.Input.Stylus.IsFlicksEnabled" /> 附加属性的值。</summary>
      <returns>
            如果指定元素已启用了笔势，则为 true；否则为 false。</returns>
      <param name="element">要确定是否为其启用了笔势的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)">
      <summary>获取指定元素上 <see cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" /> 附加属性的值。</summary>
      <returns>
            如果指定元素已启用了按住，则为 true；否则为 false；</returns>
      <param name="element">要确定是否为其启用了按住的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.GetIsTapFeedbackEnabled(System.Windows.DependencyObject)">
      <summary>获取指定元素上 <see cref="P:System.Windows.Input.Stylus.IsTapFeedbackEnabled" /> 附加属性的值。</summary>
      <returns>
            如果指定元素已启用了点击反馈，则为 true；否则为 false。</returns>
      <param name="element">要确定是否为其启用了点击反馈的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.GetIsTouchFeedbackEnabled(System.Windows.DependencyObject)">
      <summary>获取指定元素上 <see cref="P:System.Windows.Input.Stylus.IsTouchFeedbackEnabled" /> 附加属性的值。</summary>
      <returns>
            如果启用了触摸输入反馈，则为 true，否则为 false。</returns>
      <param name="element">要确定是否为其启用了触摸输入反馈的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
    </member>
    <member name="E:System.Windows.Input.Stylus.GotStylusCapture">
      <summary>在元素捕获到手写笔事件时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.GotStylusCaptureEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> 附加事件的标识符。</returns>
    </member>
    <member name="P:System.Windows.Input.Stylus.IsFlicksEnabled">
      <summary>获取或设置一个值，该值指示是否启用了笔势。</summary>
      <returns>
            如果启用了笔势，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Windows.Input.Stylus.IsFlicksEnabledProperty">
      <summary>标识 <see cref="P:System.Windows.Input.Stylus.IsFlicksEnabled" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Input.Stylus.IsFlicksEnabled" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled">
      <summary>获取或设置一个值，该值指示是否启用了按住。</summary>
      <returns>
            如果启用了按住，则为 true；否则为 false；</returns>
    </member>
    <member name="F:System.Windows.Input.Stylus.IsPressAndHoldEnabledProperty">
      <summary>标识 <see cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Input.Stylus.IsTapFeedbackEnabled">
      <summary>获取或设置一个值，该值指示是否启用了点击反馈。</summary>
      <returns>
            如果已启用点击反馈，则为 true，否则为 false。</returns>
    </member>
    <member name="F:System.Windows.Input.Stylus.IsTapFeedbackEnabledProperty">
      <summary>标识 <see cref="P:System.Windows.Input.Stylus.IsTapFeedbackEnabled" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Input.Stylus.IsTapFeedbackEnabled" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Input.Stylus.IsTouchFeedbackEnabled">
      <summary>获取或设置一个值，该值指示是否启用了触摸反馈。</summary>
      <returns>
            如果启用了触摸反馈，则为 true，否则为 false。</returns>
    </member>
    <member name="F:System.Windows.Input.Stylus.IsTouchFeedbackEnabledProperty">
      <summary>标识 <see cref="P:System.Windows.Input.Stylus.IsTouchFeedbackEnabled" />附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Input.Stylus.IsTouchFeedbackEnabled" />附加属性的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.LostStylusCapture">
      <summary>在元素释放手写笔事件时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.LostStylusCaptureEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" />  附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.PreviewStylusButtonDown">
      <summary>在用户按下手写笔上的其中一个按钮时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.PreviewStylusButtonDownEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.PreviewStylusButtonUp">
      <summary>在用户释放手写笔上的其中一个按钮时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.PreviewStylusButtonUpEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.PreviewStylusDown">
      <summary>在用户将手写笔的笔尖与手写板接触时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.PreviewStylusDownEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.PreviewStylusInAirMove">
      <summary>当手写笔在手写板范围内（但未接触）移动时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.PreviewStylusInAirMoveEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.PreviewStylusInRange">
      <summary>在手写笔进入手写板范围内时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.PreviewStylusInRangeEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.PreviewStylusMove">
      <summary>在手写笔与手写板接触并移动时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.PreviewStylusMoveEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange">
      <summary>在手写笔移到手写板范围之外时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.PreviewStylusOutOfRangeEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture">
      <summary>在用户使用此手写笔生成系统笔势时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.PreviewStylusSystemGestureEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.PreviewStylusUp">
      <summary>在用户将手写笔从手写板上提起时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.PreviewStylusUpEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> 附加事件的标识符。</returns>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemoveGotStylusCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemoveLostStylusCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" />附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemovePreviewStylusButtonDownHandler(System.Windows.DependencyObject,System.Windows.Input.StylusButtonEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemovePreviewStylusButtonUpHandler(System.Windows.DependencyObject,System.Windows.Input.StylusButtonEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemovePreviewStylusDownHandler(System.Windows.DependencyObject,System.Windows.Input.StylusDownEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemovePreviewStylusInAirMoveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemovePreviewStylusInRangeHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemovePreviewStylusMoveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemovePreviewStylusOutOfRangeHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemovePreviewStylusSystemGestureHandler(System.Windows.DependencyObject,System.Windows.Input.StylusSystemGestureEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemovePreviewStylusUpHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemoveStylusButtonDownHandler(System.Windows.DependencyObject,System.Windows.Input.StylusButtonEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemoveStylusButtonUpHandler(System.Windows.DependencyObject,System.Windows.Input.StylusButtonEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemoveStylusDownHandler(System.Windows.DependencyObject,System.Windows.Input.StylusDownEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.StylusDown" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemoveStylusEnterHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemoveStylusInAirMoveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemoveStylusInRangeHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemoveStylusLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemoveStylusMoveHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.StylusMove" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemoveStylusOutOfRangeHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemoveStylusSystemGestureHandler(System.Windows.DependencyObject,System.Windows.Input.StylusSystemGestureEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.RemoveStylusUpHandler(System.Windows.DependencyObject,System.Windows.Input.StylusEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.Stylus.StylusUp" /> 附加事件的处理程序。</summary>
      <param name="element">侦听此事件的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">要移除的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.SetIsFlicksEnabled(System.Windows.DependencyObject,System.Boolean)">
      <summary>获取指定元素上 <see cref="P:System.Windows.Input.Stylus.IsFlicksEnabled" /> 附加属性的值。</summary>
      <param name="element">要为其启用笔势的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="enabled">true 可启用笔势；false 可禁用笔势。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)">
      <summary>设置指定元素上 <see cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" /> 附加属性的值。</summary>
      <param name="element">要为其启用按住的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="enabled">
                如果启用了按住，则为 true；如果禁用了按住，则为 false。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.SetIsTapFeedbackEnabled(System.Windows.DependencyObject,System.Boolean)">
      <summary>设置指定元素上 <see cref="P:System.Windows.Input.Stylus.IsTapFeedbackEnabled" /> 附加属性的值。</summary>
      <param name="element">要为其启用点击反馈的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="enabled">
                如果启用了点击反馈，则为 true；如果禁用了点击反馈，则为 false。</param>
    </member>
    <member name="M:System.Windows.Input.Stylus.SetIsTouchFeedbackEnabled(System.Windows.DependencyObject,System.Boolean)">
      <summary>设置指定元素上 <see cref="P:System.Windows.Input.Stylus.IsTouchFeedbackEnabled" /> 附加属性的值。</summary>
      <param name="element">要为其启用点击反馈的 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="enabled">
                如果启用了触摸输入反馈，则为 true；如果禁用了触摸输入反馈，则为 false。</param>
    </member>
    <member name="E:System.Windows.Input.Stylus.StylusButtonDown">
      <summary>在用户按下手写笔上的其中一个按钮时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.StylusButtonDownEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.StylusButtonUp">
      <summary>在用户释放手写笔上的其中一个按钮时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.StylusButtonUpEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.StylusDown">
      <summary>在用户将手写笔的笔尖与手写板接触时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.StylusDownEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.StylusDown" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.StylusDown" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.StylusEnter">
      <summary>当手写笔的光标进入元素的边界时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.StylusEnterEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.StylusInAirMove">
      <summary>当手写笔在手写板范围内（但未接触）移动时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.StylusInAirMoveEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.StylusInRange">
      <summary>在手写笔进入手写板范围内时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.StylusInRangeEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.StylusLeave">
      <summary>当手写笔的光标离开元素的边界时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.StylusLeaveEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.StylusMove">
      <summary>在手写笔与手写板接触并移动时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.StylusMoveEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.StylusMove" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.StylusMove" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.StylusOutOfRange">
      <summary>在手写笔移到手写板范围之外时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.StylusOutOfRangeEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.StylusSystemGesture">
      <summary>在用户使用此手写笔生成系统笔势时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.StylusSystemGestureEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.Stylus.StylusUp">
      <summary>在用户将手写笔从 Tablet PC 上提起时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.Stylus.StylusUpEvent">
      <summary>标识 <see cref="E:System.Windows.Input.Stylus.StylusUp" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.Stylus.StylusUp" /> 附加事件的标识符。</returns>
    </member>
    <member name="M:System.Windows.Input.Stylus.Synchronize">
      <summary>同步光标和用户界面。</summary>
    </member>
    <member name="T:System.Windows.Input.StylusButton">
      <summary>表示手写笔上的按钮。</summary>
    </member>
    <member name="P:System.Windows.Input.StylusButton.Guid">
      <summary>获取表示手写笔按钮的 <see cref="T:System.Guid" />。</summary>
      <returns>表示手写笔按钮的 <see cref="T:System.Guid" /> 属性。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusButton.Name">
      <summary>获取手写笔按钮的名称。</summary>
      <returns>手写笔按钮的名称。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusButton.StylusButtonState">
      <summary>获取手写笔按钮的状态。</summary>
      <returns>
        <see cref="T:System.Windows.Input.StylusButtonState" /> 值之一。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusButton.StylusDevice">
      <summary>获取此按钮所属的手写笔。</summary>
      <returns>表示当前 <see cref="T:System.Windows.Input.StylusButton" /> 的手写笔的 <see cref="T:System.Windows.Input.StylusDevice" />。</returns>
    </member>
    <member name="M:System.Windows.Input.StylusButton.ToString">
      <summary>创建 <see cref="T:System.Windows.Input.StylusButton" /> 的字符串表示形式。</summary>
    </member>
    <member name="T:System.Windows.Input.StylusButtonCollection">
      <summary>包含 <see cref="T:System.Windows.Input.StylusButton" /> 对象的集合。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusButtonCollection.GetStylusButtonByGuid(System.Guid)">
      <summary>获取指定 GUID 标识的 <see cref="T:System.Windows.Input.StylusButton" />。</summary>
      <returns>指定 GUID 的 <see cref="T:System.Windows.Input.StylusButton" />。</returns>
      <param name="guid">指定所需 <see cref="T:System.Windows.Input.StylusButton" /> 的 <see cref="T:System.Guid" />。</param>
    </member>
    <member name="T:System.Windows.Input.StylusButtonEventArgs">
      <summary>提供有关 <see cref="E:System.Windows.UIElement.StylusButtonDown" /> 和 <see cref="E:System.Windows.UIElement.StylusButtonUp" /> 事件的数据。 </summary>
    </member>
    <member name="M:System.Windows.Input.StylusButtonEventArgs.#ctor(System.Windows.Input.StylusDevice,System.Int32,System.Windows.Input.StylusButton)">
      <summary>初始化 <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> 类的一个新实例。 </summary>
      <param name="stylusDevice">要与此事件关联的 <see cref="T:System.Windows.Input.StylusDevice" />。</param>
      <param name="timestamp">事件发生的时间。</param>
      <param name="button">引发该事件的 <see cref="T:System.Windows.Input.StylusButton" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusButtonEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>以特定于类型的方式调用事件处理程序，这样做可以提高事件系统效率。</summary>
      <param name="genericHandler">以特定于类型的方式调用的一般处理程序。</param>
      <param name="genericTarget">要对其调用处理程序的目标。</param>
    </member>
    <member name="P:System.Windows.Input.StylusButtonEventArgs.StylusButton">
      <summary>获取引发该事件的 <see cref="T:System.Windows.Input.StylusButton" />。</summary>
      <returns>引发该事件的 <see cref="T:System.Windows.Input.StylusButton" />。</returns>
    </member>
    <member name="T:System.Windows.Input.StylusButtonEventHandler">
      <summary>表示处理 <see cref="T:System.Windows.UIElement" /> 的 <see cref="E:System.Windows.UIElement.StylusButtonDown" /> 事件或 <see cref="E:System.Windows.UIElement.StylusButtonUp" /> 事件的方法。 </summary>
      <param name="sender">事件源。 </param>
      <param name="e">包含事件数据的 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。 </param>
    </member>
    <member name="T:System.Windows.Input.StylusButtonState">
      <summary>表示 <see cref="T:System.Windows.Input.StylusButton" /> 的状态。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusButtonState.Up">
      <summary>释放按钮。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusButtonState.Down">
      <summary>按下按钮。</summary>
    </member>
    <member name="T:System.Windows.Input.StylusDevice">
      <summary>表示与 Tablet PC 一起使用的 tablet 笔。</summary>
    </member>
    <member name="P:System.Windows.Input.StylusDevice.ActiveSource">
      <summary>获取报告手写笔当前输入的 <see cref="T:System.Windows.PresentationSource" />。</summary>
      <returns>报告手写笔当前输入的 <see cref="T:System.Windows.PresentationSource" />。</returns>
    </member>
    <member name="M:System.Windows.Input.StylusDevice.Capture(System.Windows.IInputElement)">
      <summary>将手写笔输入绑定到指定元素。</summary>
      <returns>
            如果成功捕获输入元素，则为 true；否则为 false。默认值为 false。</returns>
      <param name="element">手写笔绑定到的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="element" /> 既不是 <see cref="T:System.Windows.UIElement" />，也不是 <see cref="T:System.Windows.FrameworkContentElement" />。</exception>
    </member>
    <member name="M:System.Windows.Input.StylusDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)">
      <summary>将手写笔绑定到指定元素。</summary>
      <returns>
            如果成功捕获输入元素，则为 true；否则为 false。默认值为 false。</returns>
      <param name="element"></param>
      <param name="captureMode">
        <see cref="T:System.Windows.Input.CaptureMode" /> 值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" />或 <paramref name="captureMode" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="element" /> 既不是 <see cref="T:System.Windows.UIElement" />，也不是 <see cref="T:System.Windows.FrameworkContentElement" />。</exception>
    </member>
    <member name="P:System.Windows.Input.StylusDevice.Captured">
      <summary>获取捕获手写笔的元素。</summary>
      <returns>捕获手写笔的 <see cref="T:System.Windows.IInputElement" />。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusDevice.DirectlyOver">
      <summary>获取指针置于其上的 <see cref="T:System.Windows.IInputElement" />。</summary>
      <returns>指针置于其上的元素。</returns>
    </member>
    <member name="M:System.Windows.Input.StylusDevice.GetPosition(System.Windows.IInputElement)">
      <summary>获取手写笔的位置。</summary>
      <returns>表示相对于 <paramref name="relativeTo" /> 的手写笔位置的 <see cref="T:System.Windows.Point" />。</returns>
      <param name="relativeTo">(<paramref name="x,y" />) 坐标映射到的 <see cref="T:System.Windows.IInputElement" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="relativeTo" /> 既不是 <see cref="T:System.Windows.UIElement" />，也不是 <see cref="T:System.Windows.FrameworkContentElement" />。</exception>
    </member>
    <member name="M:System.Windows.Input.StylusDevice.GetStylusPoints(System.Windows.IInputElement)">
      <summary>返回一个 <see cref="T:System.Windows.Input.StylusPointCollection" />，其中包含从手写笔收集的 <see cref="T:System.Windows.Input.StylusPoint" /> 对象。</summary>
      <returns>一个包含手写笔收集的 <see cref="T:System.Windows.Input.StylusPoint" /> 对象的 <see cref="T:System.Windows.Input.StylusPointCollection" />。</returns>
      <param name="relativeTo">
        <see cref="T:System.Windows.Input.StylusPointCollection" /> 中 (<paramref name="x,y" />) 坐标映射到的 <see cref="T:System.Windows.IInputElement" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="relativeTo" /> 既不是 <see cref="T:System.Windows.UIElement" />，也不是 <see cref="T:System.Windows.FrameworkContentElement" />。</exception>
    </member>
    <member name="M:System.Windows.Input.StylusDevice.GetStylusPoints(System.Windows.IInputElement,System.Windows.Input.StylusPointDescription)">
      <summary>返回一个 <see cref="T:System.Windows.Input.StylusPointCollection" />，其中包含从手写笔收集的 <see cref="T:System.Windows.Input.StylusPoint" /> 对象。使用指定的 <see cref="T:System.Windows.Input.StylusPointDescription" />。</summary>
      <returns>一个包含从手写笔收集的 <see cref="T:System.Windows.Input.StylusPoint" /> 对象的 <see cref="T:System.Windows.Input.StylusPointCollection" />。</returns>
      <param name="relativeTo">
        <see cref="T:System.Windows.Input.StylusPointCollection" /> 中的 (<paramref name="x y" />) 坐标映射到的 <see cref="T:System.Windows.IInputElement" />。</param>
      <param name="subsetToReformatTo">要由 <see cref="T:System.Windows.Input.StylusPointCollection" /> 使用的 <see cref="T:System.Windows.Input.StylusPointDescription" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="relativeTo" /> 既不是 <see cref="T:System.Windows.UIElement" />，也不是 <see cref="T:System.Windows.FrameworkContentElement" />。</exception>
    </member>
    <member name="P:System.Windows.Input.StylusDevice.Id">
      <summary>获取手写笔设备的标识符。</summary>
      <returns>手写笔设备的标识符。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusDevice.InAir">
      <summary>获取 tablet 笔是否位于其上但尚未连接数字化仪。</summary>
      <returns>
            如果笔位于其上但尚未连接数字化仪，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusDevice.InRange">
      <summary>获取一个指示 tablet 笔是否在数字化仪范围内的值。</summary>
      <returns>
            如果笔位于数字化仪范围内，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusDevice.Inverted">
      <summary>获取一个值，该值指示是否正在使用手写笔的辅助笔尖。</summary>
      <returns>
            如果正在使用手写笔的辅助笔尖，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusDevice.Name">
      <summary>获取手写笔的名称。</summary>
      <returns>手写笔的名称。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusDevice.StylusButtons">
      <summary>获取手写笔上的手写笔按钮。</summary>
      <returns>对表示手写笔上所有按钮的 <see cref="T:System.Windows.Input.StylusButtonCollection" /> 对象的引用。</returns>
    </member>
    <member name="M:System.Windows.Input.StylusDevice.Synchronize">
      <summary>同步光标和用户界面。</summary>
    </member>
    <member name="P:System.Windows.Input.StylusDevice.TabletDevice">
      <summary>获取表示与当前 <see cref="T:System.Windows.Input.StylusDevice" /> 关联的数字化仪的 <see cref="T:System.Windows.Input.TabletDevice" />。</summary>
      <returns>表示与当前 <see cref="T:System.Windows.Input.StylusDevice" /> 关联的数字化仪的 <see cref="T:System.Windows.Input.TabletDevice" />。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusDevice.Target">
      <summary>获取接收输入的元素。</summary>
      <returns>接收输入的 <see cref="T:System.Windows.IInputElement" /> 对象。</returns>
    </member>
    <member name="M:System.Windows.Input.StylusDevice.ToString">
      <summary>返回手写笔设备的名称。</summary>
      <returns>
        <see cref="T:System.Windows.Input.StylusDevice" /> 的名称。</returns>
    </member>
    <member name="T:System.Windows.Input.StylusDeviceCollection">
      <summary>包含表示 Tablet PC 的手写笔设备的 <see cref="T:System.Windows.Input.StylusDevice" /> 对象。</summary>
    </member>
    <member name="T:System.Windows.Input.StylusDownEventArgs">
      <summary>为 <see cref="E:System.Windows.UIElement.StylusDown" /> 事件提供数据。 </summary>
    </member>
    <member name="M:System.Windows.Input.StylusDownEventArgs.#ctor(System.Windows.Input.StylusDevice,System.Int32)">
      <summary>初始化 <see cref="T:System.Windows.Input.StylusDownEventArgs" /> 类的一个新实例。 </summary>
      <param name="stylusDevice">与事件关联的设备实例。</param>
      <param name="timestamp">用于消除事件实例歧义的时间戳。</param>
    </member>
    <member name="M:System.Windows.Input.StylusDownEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>以特定于类型的方式调用事件处理程序，这样做可以提高事件系统效率。</summary>
      <param name="genericHandler">以特定于类型的方式调用的一般处理程序。</param>
      <param name="genericTarget">要对其调用处理程序的目标。</param>
    </member>
    <member name="P:System.Windows.Input.StylusDownEventArgs.TapCount">
      <summary>获取点击 tablet 笔的次数。</summary>
      <returns>点击 tablet 笔的次数。</returns>
    </member>
    <member name="T:System.Windows.Input.StylusDownEventHandler">
      <summary>表示处理 <see cref="E:System.Windows.Input.Stylus.StylusDown" /> 事件以及若干变体（包括相应的预览事件：也会再次公开基元素类中的事件）的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Windows.Input.StylusDownEventArgs" />。.</param>
    </member>
    <member name="T:System.Windows.Input.StylusEventArgs">
      <summary>为与 <see cref="T:System.Windows.Input.Stylus" /> 类相关联的多个事件提供数据。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusEventArgs.#ctor(System.Windows.Input.StylusDevice,System.Int32)">
      <summary>初始化 <see cref="T:System.Windows.Input.StylusEventArgs" /> 类的一个新实例。</summary>
      <param name="stylus">要与该事件相关联的手写笔。</param>
      <param name="timestamp">事件发生的时间。</param>
    </member>
    <member name="M:System.Windows.Input.StylusEventArgs.GetPosition(System.Windows.IInputElement)">
      <summary>获取手写笔的位置。</summary>
      <returns>一个根据 <paramref name="relativeTo" /> 的坐标，表示手写笔位置的 <see cref="T:System.Windows.Point" />。</returns>
      <param name="relativeTo">(<paramref name="x" />,<paramref name="y" />) 坐标映射到的 <see cref="T:System.Windows.IInputElement" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusEventArgs.GetStylusPoints(System.Windows.IInputElement)">
      <summary>返回包含与指定 input 元素相关的 <see cref="T:System.Windows.Input.StylusPoint" /> 对象的 <see cref="T:System.Windows.Input.StylusPointCollection" />。</summary>
      <returns>包含事件中收集的 <see cref="T:System.Windows.Input.StylusPoint" /> 对象的 <see cref="T:System.Windows.Input.StylusPointCollection" />。</returns>
      <param name="relativeTo">
        <see cref="T:System.Windows.Input.StylusPointCollection" /> 中 (<paramref name="x,y" />) 坐标映射到的 <see cref="T:System.Windows.IInputElement" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="relativeTo" /> 既不是 <see cref="T:System.Windows.UIElement" />，也不是 <see cref="T:System.Windows.FrameworkContentElement" />。</exception>
    </member>
    <member name="M:System.Windows.Input.StylusEventArgs.GetStylusPoints(System.Windows.IInputElement,System.Windows.Input.StylusPointDescription)">
      <summary>返回使用指定 <see cref="T:System.Windows.Input.StylusPointDescription" /> 且包含与指定 input 元素相关的 <see cref="T:System.Windows.Input.StylusPoint" /> 对象的 <see cref="T:System.Windows.Input.StylusPointCollection" />。</summary>
      <returns>包含在事件期间收集的 <see cref="T:System.Windows.Input.StylusPoint" /> 对象的 <see cref="T:System.Windows.Input.StylusPointCollection" />。</returns>
      <param name="relativeTo">
        <see cref="T:System.Windows.Input.StylusPointCollection" /> 中 (<paramref name="x,y" />) 坐标映射到的 <see cref="T:System.Windows.IInputElement" />。</param>
      <param name="subsetToReformatTo">要由 <see cref="T:System.Windows.Input.StylusPointCollection" /> 使用的 <see cref="T:System.Windows.Input.StylusPointDescription" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="relativeTo" /> 既不是 <see cref="T:System.Windows.UIElement" />，也不是 <see cref="T:System.Windows.FrameworkContentElement" />。</exception>
    </member>
    <member name="P:System.Windows.Input.StylusEventArgs.InAir">
      <summary>获取一个值，该值指示手写笔是否离数字化仪很近，但却没接触到数字化仪。</summary>
      <returns>
            如果手写笔离数字化仪很近，但并未接触到数字化仪，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusEventArgs.Inverted">
      <summary>获取一个指示手写笔是否反转的值。</summary>
      <returns>
            如果手写笔反转，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Input.StylusEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>以特定于类型的方式调用事件处理程序，这样做可以提高事件系统效率。</summary>
      <param name="genericHandler">以特定于类型的方式调用的一般处理程序。</param>
      <param name="genericTarget">要对其调用处理程序的目标。</param>
    </member>
    <member name="P:System.Windows.Input.StylusEventArgs.StylusDevice">
      <summary>获取表示手写笔的 <see cref="T:System.Windows.Input.StylusDevice" />。</summary>
      <returns>表示手写笔的 <see cref="T:System.Windows.Input.StylusDevice" />。</returns>
    </member>
    <member name="T:System.Windows.Input.StylusEventHandler">
      <summary>表示处理实现 <see cref="T:System.Windows.IInputElement" /> 接口的类的手写笔事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Input.StylusPoint">
      <summary>表示从数字化仪和手写笔收集到的单个数据点。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPoint.#ctor(System.Double,System.Double)">
      <summary>使用指定的 (x, y) 坐标初始化 <see cref="T:System.Windows.Input.StylusPoint" /> 类的新实例。</summary>
      <param name="x"></param>
      <param name="y"></param>
    </member>
    <member name="M:System.Windows.Input.StylusPoint.#ctor(System.Double,System.Double,System.Single)">
      <summary>使用指定的 (x, y) 坐标和压力初始化 <see cref="T:System.Windows.Input.StylusPoint" /> 类的新实例。</summary>
      <param name="x">
        <see cref="T:System.Windows.Input.StylusPoint" /> 的 X 坐标。</param>
      <param name="y">
        <see cref="T:System.Windows.Input.StylusPoint" /> 的 Y 坐标。</param>
      <param name="pressureFactor">施加于 <see cref="T:System.Windows.Input.StylusPoint" /> 的压力大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pressureFactor" /> 小于 0 或大于 1。</exception>
    </member>
    <member name="M:System.Windows.Input.StylusPoint.#ctor(System.Double,System.Double,System.Single,System.Windows.Input.StylusPointDescription,System.Int32[])">
      <summary>使用指定的 (x, y) 坐标、<paramref name="pressureFactor" /> 以及在 <see cref="T:System.Windows.Input.StylusPointDescription" /> 中指定的其他参数初始化 <see cref="T:System.Windows.Input.StylusPoint" /> 类的新实例。</summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="pressureFactor">施加于 <see cref="T:System.Windows.Input.StylusPoint" /> 的压力大小。</param>
      <param name="stylusPointDescription">用于指定 <see cref="T:System.Windows.Input.StylusPoint" /> 中存储的其他属性的 <see cref="T:System.Windows.Input.StylusPointDescription" />。</param>
      <param name="additionalValues">一个有符号的 32 位整数数组，其中包含 <paramref name="stylusPointDescription" /> 中定义的属性的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pressureFactor" /> 小于 0 或大于 1。- 或 -<paramref name="additionalValues" /> 中与按钮属性对应的值不是 0 或 1。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="additionalValues" /> 中值的数目与 <paramref name="stylusPointDescription" /> 中属性的数目减 3 所得的结果不相符。</exception>
    </member>
    <member name="P:System.Windows.Input.StylusPoint.Description">
      <summary>获取或设置 <see cref="T:System.Windows.Input.StylusPointDescription" />，它用于指定 <see cref="T:System.Windows.Input.StylusPoint" /> 中存储的属性。</summary>
      <returns>
        <see cref="T:System.Windows.Input.StylusPointDescription" /> 用于指定 <see cref="T:System.Windows.Input.StylusPoint" /> 中存储的属性。</returns>
    </member>
    <member name="M:System.Windows.Input.StylusPoint.Equals(System.Object)">
      <summary>返回一个值，该值指示指定对象是否与 <see cref="T:System.Windows.Input.StylusPoint" /> 相等。</summary>
      <returns>
            如果对象相等，则为 true；否则为 false。</returns>
      <param name="o">要与当前 <see cref="T:System.Windows.Input.StylusPoint" /> 进行比较的 <see cref="T:System.Windows.Input.StylusPoint" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPoint.Equals(System.Windows.Input.StylusPoint)">
      <summary>返回一个布尔值，该值指示指定 <see cref="T:System.Windows.Input.StylusPoint" /> 是否与当前的 <see cref="T:System.Windows.Input.StylusPoint" /> 相等。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Input.StylusPoint" /> 对象相等，则为 true；否则为 false。</returns>
      <param name="value">要与当前 <see cref="T:System.Windows.Input.StylusPoint" /> 进行比较的 <see cref="T:System.Windows.Input.StylusPoint" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPoint.Equals(System.Windows.Input.StylusPoint,System.Windows.Input.StylusPoint)">
      <summary>返回一个布尔值，该值指示指定的两个 <see cref="T:System.Windows.Input.StylusPoint" /> 对象是否相等。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Input.StylusPoint" /> 对象相等，则为 true；否则为 false。</returns>
      <param name="stylusPoint1">要比较的第一个 <see cref="T:System.Windows.Input.StylusPoint" />。</param>
      <param name="stylusPoint2">要比较的第二个 <see cref="T:System.Windows.Input.StylusPoint" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPoint.GetHashCode"></member>
    <member name="M:System.Windows.Input.StylusPoint.GetPropertyValue(System.Windows.Input.StylusPointProperty)">
      <summary>返回指定的属性的值。</summary>
      <returns>指定 <see cref="T:System.Windows.Input.StylusPointProperty" /> 的值。</returns>
      <param name="stylusPointProperty">指定要获取的属性值的 <see cref="T:System.Windows.Input.StylusPointProperty" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stylusPointProperty" /> 不是 <see cref="P:System.Windows.Input.StylusPoint.Description" /> 中的一个属性。</exception>
    </member>
    <member name="M:System.Windows.Input.StylusPoint.HasProperty(System.Windows.Input.StylusPointProperty)">
      <summary>返回当前 <see cref="T:System.Windows.Input.StylusPoint" /> 是否包含指定属性。</summary>
      <returns>
            如果指定的 <see cref="T:System.Windows.Input.StylusPointProperty" /> 位于当前的 <see cref="T:System.Windows.Input.StylusPoint" /> 中，则为 true；否则为 false。</returns>
      <param name="stylusPointProperty">要在 <see cref="T:System.Windows.Input.StylusPoint" /> 中检查的 <see cref="T:System.Windows.Input.StylusPointProperty" />。</param>
    </member>
    <member name="F:System.Windows.Input.StylusPoint.MaxXY">
      <summary>指定 (x, y) 坐标对的最大有效值。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPoint.MinXY">
      <summary>指定 (x, y) 坐标对的最小有效值。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPoint.op_Equality(System.Windows.Input.StylusPoint,System.Windows.Input.StylusPoint)">
      <summary>比较指定的两个 <see cref="T:System.Windows.Input.StylusPoint" /> 对象，并确定它们是否相等。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Input.StylusPoint" /> 对象相等，则为 true；否则为 false。</returns>
      <param name="stylusPoint1">要比较的第一个 <see cref="T:System.Windows.Input.StylusPoint" />。</param>
      <param name="stylusPoint2">要比较的第二个 <see cref="T:System.Windows.Input.StylusPoint" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPoint.op_Explicit(System.Windows.Input.StylusPoint)~System.Windows.Point">
      <summary>将指定的 <see cref="T:System.Windows.Input.StylusPoint" /> 强制转换为 <see cref="T:System.Windows.Point" />。</summary>
      <returns>一个 <see cref="T:System.Windows.Point" />，其中包含与 <paramref name="stylusPoint" /> 相同的 (x, y) 坐标。</returns>
      <param name="stylusPoint">要强制转换为 <see cref="T:System.Windows.Point" /> 的 <see cref="T:System.Windows.Input.StylusPoint" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPoint.op_Inequality(System.Windows.Input.StylusPoint,System.Windows.Input.StylusPoint)">
      <summary>返回一个布尔值，该值指示指定的 <see cref="T:System.Windows.Input.StylusPoint" /> 对象是否不相等。</summary>
      <returns>
            如果指定的 <see cref="T:System.Windows.Input.StylusPoint" /> 对象不相等，则为 true；否则，为 false。</returns>
      <param name="stylusPoint1">要比较的第一个 <see cref="T:System.Windows.Input.StylusPoint" />。</param>
      <param name="stylusPoint2">要比较的第二个 <see cref="T:System.Windows.Input.StylusPoint" />。</param>
    </member>
    <member name="P:System.Windows.Input.StylusPoint.PressureFactor">
      <summary>获取或设置一个介于 0 和 1 之间的值，以反映在创建 <see cref="T:System.Windows.Input.StylusPoint" /> 时，手写笔施加于数字化仪图面的压力大小。</summary>
      <returns>介于 0 和 1 之间的值，用于指示在创建 <see cref="T:System.Windows.Input.StylusPoint" /> 时，手写笔施加于数字化仪图面的压力大小。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">将 <see cref="P:System.Windows.Input.StylusPoint.PressureFactor" /> 属性设置为一个小于 0 或大于 1 的值。</exception>
    </member>
    <member name="M:System.Windows.Input.StylusPoint.SetPropertyValue(System.Windows.Input.StylusPointProperty,System.Int32)">
      <summary>将指定属性设置为指定值。</summary>
      <param name="stylusPointProperty">指定要设置的属性值的 <see cref="T:System.Windows.Input.StylusPointProperty" />。</param>
      <param name="value">属性的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stylusPointProperty" /> 不是 <see cref="P:System.Windows.Input.StylusPoint.Description" /> 中的一个属性。</exception>
    </member>
    <member name="M:System.Windows.Input.StylusPoint.ToPoint">
      <summary>将 <see cref="T:System.Windows.Input.StylusPoint" /> 转换为 <see cref="T:System.Windows.Point" />。</summary>
      <returns>一个 <see cref="T:System.Windows.Point" /> 结构。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusPoint.X">
      <summary>获取或设置 <see cref="T:System.Windows.Input.StylusPoint" /> 的 X 坐标值。</summary>
      <returns>
        <see cref="T:System.Windows.Input.StylusPoint" /> 的 X 坐标。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusPoint.Y">
      <summary>获取或设置 <see cref="T:System.Windows.Input.StylusPoint" /> 的 Y 坐标。</summary>
      <returns>
        <see cref="T:System.Windows.Input.StylusPoint" /> 的 Y 坐标。</returns>
    </member>
    <member name="T:System.Windows.Input.StylusPointCollection">
      <summary>包含 <see cref="T:System.Windows.Input.StylusPoint" /> 对象的集合。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Input.StylusPointCollection" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Input.StylusPoint})">
      <summary>使用指定 <see cref="T:System.Windows.Input.StylusPoint" /> 对象初始化 <see cref="T:System.Windows.Input.StylusPointCollection" /> 类的新实例。</summary>
      <param name="stylusPoints">要添加到 <see cref="T:System.Windows.Input.StylusPointCollection" /> 中的类型为 <see cref="T:System.Windows.Input.StylusPoint" /> 的泛型 IEnumerable。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylusPoints" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="points" /> 的长度为零。- 或 -<paramref name="stylusPoints" /> 中的 <see cref="T:System.Windows.Input.StylusPoint" /> 对象包含不兼容的 <see cref="T:System.Windows.Input.StylusPointDescription" /> 对象。</exception>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <summary>使用指定接触点初始化 <see cref="T:System.Windows.Input.StylusPointCollection" /> 类的新实例。</summary>
      <param name="points">一个类型为 <see cref="T:System.Windows.Point" /> 的泛型 IEnumerable，用于指定要添加到 <see cref="T:System.Windows.Input.StylusPointCollection" /> 中的 <see cref="T:System.Windows.Input.StylusPoint" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="points" /> 的长度为零。</exception>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.#ctor(System.Int32)">
      <summary>初始化最初可能包含指定数量的 <see cref="T:System.Windows.Input.StylusPoint" /> 对象的 <see cref="T:System.Windows.Input.StylusPointCollection" /> 类的新实例。</summary>
      <param name="initialCapacity">
        <see cref="T:System.Windows.Input.StylusPointCollection" /> 中最初可能包含的 <see cref="T:System.Windows.Input.StylusPoint" /> 对象的数目。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCapacity" /> 为负。</exception>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.#ctor(System.Windows.Input.StylusPointDescription)">
      <summary>初始化 <see cref="T:System.Windows.Input.StylusPointCollection" /> 类的新实例，该类包含 <see cref="T:System.Windows.Input.StylusPointDescription" /> 中指定的属性。</summary>
      <param name="stylusPointDescription">用于指定每个 <see cref="T:System.Windows.Input.StylusPoint" /> 中存储的其他属性的 <see cref="T:System.Windows.Input.StylusPointDescription" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylusPointDescription" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.#ctor(System.Windows.Input.StylusPointDescription,System.Int32)">
      <summary>初始化 <see cref="T:System.Windows.Input.StylusPointCollection" /> 类的新实例，该类具有指定大小且包含 <see cref="T:System.Windows.Input.StylusPointDescription" /> 中指定的属性。</summary>
      <param name="stylusPointDescription">用于指定每个 <see cref="T:System.Windows.Input.StylusPoint" /> 中存储的其他属性的 <see cref="T:System.Windows.Input.StylusPointDescription" />。</param>
      <param name="initialCapacity">
        <see cref="T:System.Windows.Input.StylusPointCollection" /> 中最初可能包含的 <see cref="T:System.Windows.Input.StylusPoint" /> 对象的数目。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCapacity" /> 为负。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylusPointDescription" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.Add(System.Windows.Input.StylusPointCollection)">
      <summary>将指定 <see cref="T:System.Windows.Input.StylusPointCollection" /> 添加到当前的 <see cref="T:System.Windows.Input.StylusPointCollection" /> 中。</summary>
      <param name="stylusPoints">要添加到当前 <see cref="T:System.Windows.Input.StylusPointCollection" /> 的 <see cref="T:System.Windows.Input.StylusPointCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylusPoints" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stylusPoints" /> 的 <see cref="T:System.Windows.Input.StylusPointDescription" /> 与 <see cref="P:System.Windows.Input.StylusPointCollection.Description" /> 属性不兼容。</exception>
    </member>
    <member name="E:System.Windows.Input.StylusPointCollection.Changed">
      <summary>当 <see cref="T:System.Windows.Input.StylusPointCollection" /> 更改时发生。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.ClearItems">
      <summary>从 <see cref="T:System.Windows.Input.StylusPointCollection" /> 中移除所有 <see cref="T:System.Windows.Input.StylusPoint" /> 对象。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Input.StylusPointCollection" /> 连接到 <see cref="T:System.Windows.Ink.Stroke" />。</exception>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.Clone">
      <summary>复制 <see cref="T:System.Windows.Input.StylusPointCollection" />。</summary>
      <returns>一个新的 <see cref="T:System.Windows.Input.StylusPointCollection" />，其中包含当前 <see cref="T:System.Windows.Input.StylusPointCollection" /> 中的 <see cref="T:System.Windows.Input.StylusPoint" /> 对象的副本。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusPointCollection.Description">
      <summary>获取与 <see cref="T:System.Windows.Input.StylusPointCollection" /> 中 <see cref="T:System.Windows.Input.StylusPoint" /> 对象相关联的 <see cref="T:System.Windows.Input.StylusPointDescription" />。</summary>
      <returns>与 <see cref="T:System.Windows.Input.StylusPointCollection" /> 中 <see cref="T:System.Windows.Input.StylusPoint" /> 对象相关联的 <see cref="T:System.Windows.Input.StylusPointDescription" />。</returns>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.InsertItem(System.Int32,System.Windows.Input.StylusPoint)">
      <summary>将指定的 <see cref="T:System.Windows.Input.StylusPoint" /> 插入 <see cref="T:System.Windows.Input.StylusPointCollection" /> 中的指定位置。</summary>
      <param name="index">要插入 <see cref="T:System.Windows.Input.StylusPoint" /> 的位置。</param>
      <param name="stylusPoint">要插入 <see cref="T:System.Windows.Input.StylusPointCollection" /> 中的 <see cref="T:System.Windows.Input.StylusPoint" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stylusPoint" /> 的 <see cref="T:System.Windows.Input.StylusPointDescription" /> 与 <see cref="P:System.Windows.Input.StylusPointCollection.Description" /> 属性不兼容。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 大于或等于 <see cref="T:System.Windows.Input.StylusPointCollection" /> 中 <see cref="T:System.Windows.Input.StylusPoint" /> 对象的数目。</exception>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.OnChanged(System.EventArgs)">
      <summary>引发 <see cref="E:System.Windows.Input.StylusPointCollection.Changed" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.op_Explicit(System.Windows.Input.StylusPointCollection)~System.Windows.Point[]">
      <summary>将 <see cref="T:System.Windows.Input.StylusPointCollection" /> 转换为点数组。</summary>
      <returns>一个点数组，其中包含与 <see cref="T:System.Windows.Input.StylusPointCollection" /> 中每个 <see cref="T:System.Windows.Input.StylusPoint" /> 相对应的点。</returns>
      <param name="stylusPoints">要转换为点数组的手写笔接触点集合。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.Reformat(System.Windows.Input.StylusPointDescription)">
      <summary>查找指定 <see cref="T:System.Windows.Input.StylusPointDescription" /> 和 <see cref="P:System.Windows.Input.StylusPointCollection.Description" /> 属性的交集。</summary>
      <returns>包含 <see cref="T:System.Windows.Input.StylusPointDescription" />（指定 <see cref="T:System.Windows.Input.StylusPointDescription" /> 的子集）和 <see cref="T:System.Windows.Input.StylusPointDescription" />（由当前 <see cref="T:System.Windows.Input.StylusPointCollection" /> 使用）的 <see cref="T:System.Windows.Input.StylusPointCollection" />。</returns>
      <param name="subsetToReformatTo">要与当前 <see cref="T:System.Windows.Input.StylusPointCollection" /> 的 <see cref="T:System.Windows.Input.StylusPointDescription" /> 相交的 <see cref="T:System.Windows.Input.StylusPointDescription" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="subsetToReformatTo" /> 不是 <see cref="P:System.Windows.Input.StylusPointCollection.Description" /> 属性的子集。</exception>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.RemoveItem(System.Int32)">
      <summary>从 <see cref="T:System.Windows.Input.StylusPointCollection" /> 中的指定位置移除 <see cref="T:System.Windows.Input.StylusPoint" />。</summary>
      <param name="index">要移除 <see cref="T:System.Windows.Input.StylusPoint" /> 的位置。</param>
      <exception cref="T:System.InvalidOperationException">该 <see cref="T:System.Windows.Input.StylusPointCollection" /> 连接到 <see cref="T:System.Windows.Ink.Stroke" />，且 <see cref="T:System.Windows.Input.StylusPointCollection" /> 中只有一个 <see cref="T:System.Windows.Input.StylusPoint" />。</exception>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.SetItem(System.Int32,System.Windows.Input.StylusPoint)">
      <summary>在指定位置处设置指定的 <see cref="T:System.Windows.Input.StylusPoint" />。</summary>
      <param name="index">要设置 <see cref="T:System.Windows.Input.StylusPoint" /> 的位置。</param>
      <param name="stylusPoint">要在指定位置处设置的 <see cref="T:System.Windows.Input.StylusPoint" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stylusPoint" /> 的 <see cref="T:System.Windows.Input.StylusPointDescription" /> 与 <see cref="P:System.Windows.Input.StylusPointCollection.Description" /> 属性不兼容。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 大于 <see cref="T:System.Windows.Input.StylusPointCollection" /> 中 <see cref="T:System.Windows.Input.StylusPoint" /> 对象的数目。</exception>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.ToHiMetricArray">
      <summary>将 <see cref="T:System.Windows.Input.StylusPoint" /> 对象的属性值转换为 32 位有符号的整数数组。</summary>
    </member>
    <member name="T:System.Windows.Input.StylusPointDescription">
      <summary>指定 <see cref="T:System.Windows.Input.StylusPoint" /> 中的属性。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPointDescription.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Input.StylusPointDescription" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPointDescription.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Input.StylusPointPropertyInfo})">
      <summary>使用指定 <see cref="T:System.Windows.Input.StylusPointPropertyInfo" /> 对象初始化 <see cref="T:System.Windows.Input.StylusPointDescription" /> 类的新实例。</summary>
      <param name="stylusPointPropertyInfos">类型为 <see cref="T:System.Windows.Input.StylusPointPropertyInfo" /> 的泛型 IEnumerable，用于指定 <see cref="T:System.Windows.Input.StylusPointDescription" /> 中的属性。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPointDescription.AreCompatible(System.Windows.Input.StylusPointDescription,System.Windows.Input.StylusPointDescription)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Windows.Input.StylusPointDescription" /> 对象是否相同。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Input.StylusPointDescription" /> 对象完全相同，则为 true；否则为 false。</returns>
      <param name="stylusPointDescription1">要检查的第一个 <see cref="T:System.Windows.Input.StylusPointDescription" />。</param>
      <param name="stylusPointDescription2">要检查的第二个 <see cref="T:System.Windows.Input.StylusPointDescription" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPointDescription.GetCommonDescription(System.Windows.Input.StylusPointDescription,System.Windows.Input.StylusPointDescription)">
      <summary>返回指定 <see cref="T:System.Windows.Input.StylusPointDescription" /> 对象的交集。</summary>
      <returns>一个 <see cref="T:System.Windows.Input.StylusPointDescription" />，其中包含在两个指定 <see cref="T:System.Windows.Input.StylusPointDescription" /> 对象中都出现的属性。</returns>
      <param name="stylusPointDescription"></param>
      <param name="stylusPointDescriptionPreserveInfo">要相交的第二个 <see cref="T:System.Windows.Input.StylusPointDescription" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPointDescription.GetPropertyInfo(System.Windows.Input.StylusPointProperty)">
      <summary>获取指定属性的 <see cref="T:System.Windows.Input.StylusPointPropertyInfo" />。</summary>
      <returns>指定 <see cref="T:System.Windows.Input.StylusPointProperty" /> 的 <see cref="T:System.Windows.Input.StylusPointPropertyInfo" />。</returns>
      <param name="stylusPointProperty">指定所需 <see cref="T:System.Windows.Input.StylusPointPropertyInfo" /> 的属性的 <see cref="T:System.Windows.Input.StylusPointProperty" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPointDescription.GetStylusPointProperties">
      <summary>获取 <see cref="T:System.Windows.Input.StylusPointDescription" /> 的所有属性。</summary>
      <returns>一个包含 <see cref="T:System.Windows.Input.StylusPointDescription" /> 中所有 <see cref="T:System.Windows.Input.StylusPointPropertyInfo" /> 对象的集合。</returns>
    </member>
    <member name="M:System.Windows.Input.StylusPointDescription.HasProperty(System.Windows.Input.StylusPointProperty)">
      <summary>返回一个指示当前 <see cref="T:System.Windows.Input.StylusPointDescription" /> 是否具有指定属性的值。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Input.StylusPointDescription" /> 具有指定 <see cref="T:System.Windows.Input.StylusPointProperty" />，则为 true；否则为 false。</returns>
      <param name="stylusPointProperty">要在 <see cref="T:System.Windows.Input.StylusPointDescription" /> 中检查的 <see cref="T:System.Windows.Input.StylusPointProperty" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPointDescription.IsSubsetOf(System.Windows.Input.StylusPointDescription)">
      <summary>返回一个值，该值指示当前 <see cref="T:System.Windows.Input.StylusPointDescription" /> 是否为指定 <see cref="T:System.Windows.Input.StylusPointDescription" /> 的子集。</summary>
      <returns>
            如果当前 <see cref="T:System.Windows.Input.StylusPointDescription" /> 是指定 <see cref="T:System.Windows.Input.StylusPointDescription" /> 的子集，则为 true；否则为 false。</returns>
      <param name="stylusPointDescriptionSuperset">要根据其检查当前 <see cref="T:System.Windows.Input.StylusPointDescription" /> 是否为子集的 <see cref="T:System.Windows.Input.StylusPointDescription" />。</param>
    </member>
    <member name="P:System.Windows.Input.StylusPointDescription.PropertyCount">
      <summary>获取 <see cref="T:System.Windows.Input.StylusPointDescription" /> 中属性的数目。</summary>
      <returns>
        <see cref="T:System.Windows.Input.StylusPointDescription" /> 中属性的数目。</returns>
    </member>
    <member name="T:System.Windows.Input.StylusPointProperties">
      <summary>包含 WPF 支持的每个属性的 <see cref="T:System.Windows.Input.StylusPointProperty" />。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.AltitudeOrientation">
      <summary>表示笔轴和 Tablet PC 图面之间的角度。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.AzimuthOrientation">
      <summary>表示光标绕 z 轴在整个圆周范围内进行顺时针旋转。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.BarrelButton">
      <summary>表示手写笔的笔杆按钮。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.ButtonPressure">
      <summary>表示对压力敏感按钮施加的压力。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.Height">
      <summary>表示数字化仪上接触点的高度。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.NormalPressure">
      <summary>表示笔尖垂直于 Tablet PC 图面的压力。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.PacketStatus">
      <summary>表示光标的当前状态。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.PitchRotation">
      <summary>表示笔尖是高于还是低于与写入图面垂直的水平线。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.RollRotation">
      <summary>表示笔绕其自转轴进行顺时针旋转。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.SecondaryTipButton">
      <summary>表示手写笔的辅助笔尖按钮。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.SerialNumber">
      <summary>标识 <see cref="T:System.Windows.Input.StylusPoint" />。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.SystemTouch">
      <summary>表示生成 <see cref="T:System.Windows.Input.StylusPoint" /> 的接触点，由手指、手掌或任何其他接触启动。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.TangentPressure">
      <summary>表示笔尖沿 Tablet PC 图平面的压力。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.TipButton">
      <summary>表示手写笔的笔尖按钮。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.TwistOrientation">
      <summary>表示光标绕其自转轴进行顺时针旋转。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.Width">
      <summary>表示数字化仪上接触点的宽度。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.X">
      <summary>表示 Tablet 坐标系中的 X 坐标。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.XTiltOrientation">
      <summary>表示 (<paramref name="y,z" />) 平面与笔和 Y 轴平面之间的角度。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.Y">
      <summary>表示 Tablet 坐标系中的 Y 坐标。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.YawRotation">
      <summary>表示笔水平时与其水平轴中心点的左或右偏转度。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.YTiltOrientation">
      <summary>表示 (x, z) 平面与笔和 X 轴平面之间的角度。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointProperties.Z">
      <summary>表示 Z 坐标或笔尖与 Tablet 图面之间的距离。</summary>
    </member>
    <member name="T:System.Windows.Input.StylusPointProperty">
      <summary>表示存储在 <see cref="T:System.Windows.Input.StylusPoint" /> 中的属性。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPointProperty.#ctor(System.Guid,System.Boolean)">
      <summary>使用指定的 GUID 初始化 <see cref="T:System.Windows.Input.StylusPointProperty" /> 类的新实例。</summary>
      <param name="identifier">唯一标识 <see cref="T:System.Windows.Input.StylusPointProperty" /> 的 <see cref="T:System.Guid" />。</param>
      <param name="isButton">
                如果指示属性表示手写笔上的按钮，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPointProperty.#ctor(System.Windows.Input.StylusPointProperty)">
      <summary>初始化 <see cref="T:System.Windows.Input.StylusPointProperty" /> 类的一个新实例。</summary>
      <param name="stylusPointProperty"></param>
    </member>
    <member name="P:System.Windows.Input.StylusPointProperty.Id">
      <summary>获取当前 <see cref="T:System.Windows.Input.StylusPointProperty" /> 的 GUID。</summary>
      <returns>当前 <see cref="T:System.Windows.Input.StylusPointProperty" /> 的 GUID。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusPointProperty.IsButton">
      <summary>获取 <see cref="T:System.Windows.Input.StylusPointProperty" /> 是否表示手写笔上的按钮。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Input.StylusPointProperty" /> 表示手写笔上的按钮，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Input.StylusPointProperty.ToString"></member>
    <member name="T:System.Windows.Input.StylusPointPropertyInfo">
      <summary>指定 <see cref="T:System.Windows.Input.StylusPoint" /> 中属性的约束。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPointPropertyInfo.#ctor(System.Windows.Input.StylusPointProperty)">
      <summary>初始化 <see cref="T:System.Windows.Input.StylusPointPropertyInfo" /> 类的一个新实例。</summary>
      <param name="stylusPointProperty">新 <see cref="T:System.Windows.Input.StylusPointProperty" /> 所基于的 <see cref="T:System.Windows.Input.StylusPointProperty" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPointPropertyInfo.#ctor(System.Windows.Input.StylusPointProperty,System.Int32,System.Int32,System.Windows.Input.StylusPointPropertyUnit,System.Single)">
      <summary>使用指定的值初始化 <see cref="T:System.Windows.Input.StylusPointPropertyInfo" /> 类的新实例。</summary>
      <param name="stylusPointProperty">新 <see cref="T:System.Windows.Input.StylusPointProperty" /> 所基于的 <see cref="T:System.Windows.Input.StylusPointProperty" />。</param>
      <param name="minimum">
        <see cref="T:System.Windows.Input.StylusPoint" /> 属性所接受的最小值。</param>
      <param name="maximum">
        <see cref="T:System.Windows.Input.StylusPoint" /> 属性所接受的最大值。</param>
      <param name="unit"></param>
      <param name="resolution">将 <see cref="T:System.Windows.Input.StylusPoint" /> 属性值转换为其单位的小数位数。</param>
    </member>
    <member name="P:System.Windows.Input.StylusPointPropertyInfo.Maximum">
      <summary>获取 <see cref="T:System.Windows.Input.StylusPoint" /> 属性所接受的最大值。</summary>
      <returns>
        <see cref="T:System.Windows.Input.StylusPoint" /> 属性所接受的最大值。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusPointPropertyInfo.Minimum">
      <summary>获取 <see cref="T:System.Windows.Input.StylusPoint" /> 属性所接受的最小值。</summary>
      <returns>
        <see cref="T:System.Windows.Input.StylusPoint" /> 属性所接受的最小值。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusPointPropertyInfo.Resolution">
      <summary>获取将 <see cref="T:System.Windows.Input.StylusPoint" /> 属性值转换为单位的小数位数。</summary>
      <returns>将 <see cref="T:System.Windows.Input.StylusPoint" /> 属性值转换为单位的小数位数。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusPointPropertyInfo.Unit">
      <summary>获取 <see cref="T:System.Windows.Input.StylusPoint" /> 属性使用的度量值类型。</summary>
      <returns>
        <see cref="T:System.Windows.Input.StylusPointPropertyUnit" /> 值之一。</returns>
    </member>
    <member name="T:System.Windows.Input.StylusPointPropertyUnit">
      <summary>指定 <see cref="T:System.Windows.Input.StylusPoint" /> 属性的度量单位。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointPropertyUnit.None">
      <summary>指示未指定 <see cref="T:System.Windows.Input.StylusPoint" /> 属性的度量单位。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointPropertyUnit.Inches">
      <summary>指示以英寸为单位度量 <see cref="T:System.Windows.Input.StylusPoint" /> 属性。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointPropertyUnit.Centimeters">
      <summary>指示以厘米为单位度量 <see cref="T:System.Windows.Input.StylusPoint" /> 属性。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointPropertyUnit.Degrees">
      <summary>指示以度为单位度量 <see cref="T:System.Windows.Input.StylusPoint" /> 属性。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointPropertyUnit.Radians">
      <summary>指示以弧度为单位度量 <see cref="T:System.Windows.Input.StylusPoint" /> 属性。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointPropertyUnit.Seconds">
      <summary>指示以秒为单位度量 <see cref="T:System.Windows.Input.StylusPoint" /> 属性。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointPropertyUnit.Pounds">
      <summary>指示以磅为单位度量 <see cref="T:System.Windows.Input.StylusPoint" /> 属性。</summary>
    </member>
    <member name="F:System.Windows.Input.StylusPointPropertyUnit.Grams">
      <summary>指示以克为单位度量 <see cref="T:System.Windows.Input.StylusPoint" /> 属性。</summary>
    </member>
    <member name="T:System.Windows.Input.StylusSystemGestureEventArgs">
      <summary>为 <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusSystemGestureEventArgs.#ctor(System.Windows.Input.StylusDevice,System.Int32,System.Windows.Input.SystemGesture)">
      <summary>初始化 <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> 类的一个新实例。</summary>
      <param name="stylusDevice">要与事件关联的 <see cref="T:System.Windows.Input.StylusDevice" />。</param>
      <param name="timestamp"></param>
      <param name="systemGesture">引发事件的 <see cref="T:System.Windows.Input.SystemGesture" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusSystemGestureEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <param name="genericHandler">以特定于类型的方式调用的一般处理程序。</param>
      <param name="genericTarget">要对其调用处理程序的目标。</param>
    </member>
    <member name="P:System.Windows.Input.StylusSystemGestureEventArgs.SystemGesture">
      <summary>获取引发事件的 <see cref="T:System.Windows.Input.SystemGesture" />。</summary>
      <returns>引发事件的 <see cref="T:System.Windows.Input.SystemGesture" />。</returns>
    </member>
    <member name="T:System.Windows.Input.StylusSystemGestureEventHandler">
      <summary>表示处理 <see cref="T:System.Windows.UIElement" /> 的 <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> 事件的方法。 </summary>
      <param name="sender">事件源。 </param>
      <param name="e">包含事件数据的 <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />。 </param>
    </member>
    <member name="T:System.Windows.Input.SystemGesture">
      <summary>定义可用的系统笔势。</summary>
    </member>
    <member name="F:System.Windows.Input.SystemGesture.None">
      <summary>无系统笔势。</summary>
    </member>
    <member name="F:System.Windows.Input.SystemGesture.Tap">
      <summary>映射为鼠标的左键单击。可用于选择菜单或工具栏的命令、对已选择的命令采取操作、设置插入点或显示选择的反馈。</summary>
    </member>
    <member name="F:System.Windows.Input.SystemGesture.RightTap">
      <summary>映射为鼠标的右键单击。可用于显示快捷菜单。</summary>
    </member>
    <member name="F:System.Windows.Input.SystemGesture.Drag">
      <summary>映射为向左拖动鼠标。</summary>
    </member>
    <member name="F:System.Windows.Input.SystemGesture.RightDrag">
      <summary>映射为向右拖动鼠标。这可用于将对象或选择内容拖动到其他区域，然后显示快捷菜单，其中提供用于移动对象的选项。</summary>
    </member>
    <member name="F:System.Windows.Input.SystemGesture.HoldEnter">
      <summary>指示发生按住操作。</summary>
    </member>
    <member name="F:System.Windows.Input.SystemGesture.HoldLeave">
      <summary>未实现。</summary>
    </member>
    <member name="F:System.Windows.Input.SystemGesture.HoverEnter">
      <summary>映射为鼠标悬停。这可用于显示工具提示翻转效果，或其他鼠标悬停行为。</summary>
    </member>
    <member name="F:System.Windows.Input.SystemGesture.HoverLeave">
      <summary>映射为鼠标离开悬停。这可用于关闭工具提示翻转效果，或其他鼠标悬停行为。</summary>
    </member>
    <member name="F:System.Windows.Input.SystemGesture.Flick">
      <summary>使用会转换为特定命令的短、快笔画时引发。笔画执行的操作是在系统级设置的。应用程序可以侦听 <see cref="F:System.Windows.Input.SystemGesture.Flick" />，并通过将 <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> 事件中的 <see cref="P:System.Windows.RoutedEventArgs.Handled" /> 属性设置为 true，来阻止其成为标准的 <see cref="T:System.Windows.Input.ApplicationCommands" /> 之一。只有 Windows Vista 支持笔势。</summary>
    </member>
    <member name="T:System.Windows.Input.Tablet">
      <summary>提供对返回挂接到系统的 Tablet 设备的静态方法的访问。</summary>
    </member>
    <member name="P:System.Windows.Input.Tablet.CurrentTabletDevice">
      <summary>获取当前 <see cref="T:System.Windows.Input.TabletDevice" />。</summary>
      <returns>当前的 <see cref="T:System.Windows.Input.TabletDevice" />。</returns>
    </member>
    <member name="P:System.Windows.Input.Tablet.TabletDevices">
      <summary>获取与系统相关联的 <see cref="T:System.Windows.Input.TabletDeviceCollection" />。</summary>
      <returns>与 Tablet PC 相关联的 <see cref="T:System.Windows.Input.TabletDeviceCollection" />。</returns>
    </member>
    <member name="T:System.Windows.Input.TabletDevice">
      <summary>表示 Tablet PC 的数字化仪设备。</summary>
    </member>
    <member name="P:System.Windows.Input.TabletDevice.ActiveSource">
      <summary>获取报告 Tablet 设备的当前输入的 <see cref="T:System.Windows.PresentationSource" />。</summary>
      <returns>报告 Tablet 设备的当前输入的 <see cref="T:System.Windows.PresentationSource" />。</returns>
    </member>
    <member name="P:System.Windows.Input.TabletDevice.Id">
      <summary>获取系统上 Tablet 设备的唯一标识符。</summary>
      <returns>系统上 Tablet 设备的唯一标识符。</returns>
    </member>
    <member name="P:System.Windows.Input.TabletDevice.Name">
      <summary>获取 Tablet 设备的名称。</summary>
      <returns>Tablet 设备的名称。</returns>
    </member>
    <member name="P:System.Windows.Input.TabletDevice.ProductId">
      <summary>获取 Tablet 设备的产品标识符。</summary>
      <returns>Tablet 设备的产品标识符。</returns>
    </member>
    <member name="P:System.Windows.Input.TabletDevice.StylusDevices">
      <summary>获取与 Tablet 设备相关联的 <see cref="T:System.Windows.Input.StylusDeviceCollection" />。</summary>
      <returns>与 Tablet 设备相关联的 <see cref="T:System.Windows.Input.StylusDeviceCollection" />。</returns>
    </member>
    <member name="P:System.Windows.Input.TabletDevice.SupportedStylusPointProperties">
      <summary>获取 <see cref="T:System.Windows.Input.TabletDevice" /> 支持的 <see cref="T:System.Windows.Input.StylusPointProperty" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.Windows.Input.TabletDevice" /> 支持的 <see cref="T:System.Windows.Input.StylusPointProperty" /> 对象的集合。</returns>
    </member>
    <member name="P:System.Windows.Input.TabletDevice.TabletHardwareCapabilities">
      <summary>获取 Tablet 设备的 <see cref="T:System.Windows.Input.TabletHardwareCapabilities" />。</summary>
      <returns>Tablet 设备的 <see cref="T:System.Windows.Input.TabletHardwareCapabilities" />。</returns>
    </member>
    <member name="P:System.Windows.Input.TabletDevice.Target">
      <summary>获取为 Tablet 设备提供基本输入处理的 <see cref="T:System.Windows.IInputElement" />。</summary>
      <returns>为 Tablet 设备提供基本输入处理的 <see cref="T:System.Windows.IInputElement" />。</returns>
    </member>
    <member name="M:System.Windows.Input.TabletDevice.ToString">
      <summary>返回 Tablet 设备的名称。</summary>
      <returns>一个包含 <see cref="T:System.Windows.Input.TabletDevice" /> 的名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Windows.Input.TabletDevice.Type">
      <summary>获取 Tablet 设备的 <see cref="T:System.Windows.Input.TabletDeviceType" />。</summary>
      <returns>Tablet 设备的 <see cref="T:System.Windows.Input.TabletDeviceType" />。</returns>
    </member>
    <member name="T:System.Windows.Input.TabletDeviceCollection">
      <summary>包含表示 Tablet 设备的数字化仪设备的 <see cref="T:System.Windows.Input.TabletDevice" /> 对象。</summary>
    </member>
    <member name="M:System.Windows.Input.TabletDeviceCollection.CopyTo(System.Windows.Input.TabletDevice[],System.Int32)">
      <summary>从指定的目标数组索引处开始，将当前集合中的所有元素复制到指定的一维数组中。</summary>
      <param name="array">作为从集合中复制的元素的目标的一维数组。该数组必须具有从零开始的索引。</param>
      <param name="index">数组参数中从零开始的索引，复制将从此处开始。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="index" /> + 集合计数大于或等于 <paramref name="array.length" />。</exception>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.IndexOutOfRangeException">如果 <paramref name="index" /> 小于 0 或者 <paramref name="index" /> 大于或等于 <paramref name="array.length" />。</exception>
    </member>
    <member name="P:System.Windows.Input.TabletDeviceCollection.Count">
      <summary>获取集合中的 <see cref="T:System.Windows.Input.TabletDevice" /> 对象数。</summary>
      <returns>集合中的 <see cref="T:System.Windows.Input.TabletDevice" /> 对象数。</returns>
    </member>
    <member name="P:System.Windows.Input.TabletDeviceCollection.IsSynchronized">
      <summary>获取一个值，指示对集合的访问是否同步（线程安全）。</summary>
      <returns>
如果对该集合的访问是同步的（线程安全），则为 true；否则，为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Windows.Input.TabletDeviceCollection.Item(System.Int32)">
      <summary>获取集合中指定索引处的 <see cref="T:System.Windows.Input.TabletDevice" /> 对象。</summary>
      <returns>集合中指定索引处的 <see cref="T:System.Windows.Input.TabletDevice" /> 对象。</returns>
      <param name="index">从集合中检索到的 <see cref="T:System.Windows.Input.TabletDevice" /> 的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">如果 <paramref name="index" /> 小于零，或者 <paramref name="index" /> 大于或等于集合中 <see cref="T:System.Windows.Input.TabletDeviceCollection" /> 对象的数目。</exception>
    </member>
    <member name="P:System.Windows.Input.TabletDeviceCollection.SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。</returns>
    </member>
    <member name="M:System.Windows.Input.TabletDeviceCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>该成员支持 .NET Framework 且不应在代码中使用。</summary>
      <param name="array">数组。</param>
      <param name="index">索引。</param>
    </member>
    <member name="M:System.Windows.Input.TabletDeviceCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>该成员支持 .NET Framework 且不应在代码中使用。</summary>
    </member>
    <member name="T:System.Windows.Input.TabletDeviceType">
      <summary>定义 Tablet 设备所使用的设备类型的值。</summary>
    </member>
    <member name="F:System.Windows.Input.TabletDeviceType.Stylus">
      <summary>指示 Tablet 设备为手写笔。</summary>
    </member>
    <member name="F:System.Windows.Input.TabletDeviceType.Touch">
      <summary>指示 Tablet 设备为触摸屏。</summary>
    </member>
    <member name="T:System.Windows.Input.TabletHardwareCapabilities">
      <summary>定义指定 Tablet 设备（包括桌面数字化仪和鼠标）的硬件功能的值。</summary>
    </member>
    <member name="F:System.Windows.Input.TabletHardwareCapabilities.None">
      <summary>指示 Tablet 设备无法提供此信息。</summary>
    </member>
    <member name="F:System.Windows.Input.TabletHardwareCapabilities.Integrated">
      <summary>指示数字化仪可与显示器集成。</summary>
    </member>
    <member name="F:System.Windows.Input.TabletHardwareCapabilities.StylusMustTouch">
      <summary>指示手写笔必须与 Tablet 设备进行物理连接，才能报告其位置。</summary>
    </member>
    <member name="F:System.Windows.Input.TabletHardwareCapabilities.HardProximity">
      <summary>指示当手写笔位于 Tablet 设备的物理检测范围内（或接近该范围）时，该 Tablet 设备可生成 in-air packet。</summary>
    </member>
    <member name="F:System.Windows.Input.TabletHardwareCapabilities.StylusHasPhysicalIds">
      <summary>指示 Tablet 设备只可标识活动手写笔。</summary>
    </member>
    <member name="F:System.Windows.Input.TabletHardwareCapabilities.SupportsPressure">
      <summary>指示 Tablet 设备可检测用户在使用手写笔时所施加的压力。</summary>
    </member>
    <member name="T:System.Windows.Input.TextComposition">
      <summary>表示与文本输入相关的撰写，其中包含撰写文本本身、任何相关控件或系统文本以及撰写的完成状态。</summary>
    </member>
    <member name="M:System.Windows.Input.TextComposition.#ctor(System.Windows.Input.InputManager,System.Windows.IInputElement,System.String)">
      <summary>初始化 <see cref="T:System.Windows.Input.TextComposition" /> 类的新实例，将指定的 <see cref="T:System.Windows.Input.InputManager" />、源元素和撰写文本作为新实例的初始值。</summary>
      <param name="inputManager">要与此文本撰写关联的输入管理器。</param>
      <param name="source">此文本撰写的源元素。 构成源元素的对象必须实现 <see cref="T:System.Windows.IInputElement" /> 接口。</param>
      <param name="resultText">包含撰写的初始文本的字符串。 此参数将成为新的类实例中 <see cref="P:System.Windows.Input.TextComposition.Text" /> 属性的值。</param>
    </member>
    <member name="M:System.Windows.Input.TextComposition.#ctor(System.Windows.Input.InputManager,System.Windows.IInputElement,System.String,System.Windows.Input.TextCompositionAutoComplete)">
      <summary>初始化 <see cref="T:System.Windows.Input.TextComposition" /> 类的新实例，将指定的 <see cref="T:System.Windows.Input.InputManager" />、源元素、撰写文本和 <see cref="T:System.Windows.Input.TextCompositionAutoComplete" /> 设置作为新实例的初始值。</summary>
      <param name="inputManager">要与此文本撰写关联的输入管理器。</param>
      <param name="source">此文本撰写的源元素。 构成源元素的对象必须实现 <see cref="T:System.Windows.IInputElement" /> 接口。</param>
      <param name="resultText">包含撰写的初始文本的字符串。 此参数将成为新的类实例中 <see cref="P:System.Windows.Input.TextComposition.Text" /> 属性的值。</param>
      <param name="autoComplete">
        <see cref="T:System.Windows.Input.TextCompositionAutoComplete" /> 枚举的成员，指定此文本撰写所需的自动完成行为。</param>
    </member>
    <member name="P:System.Windows.Input.TextComposition.AutoComplete">
      <summary>获取此文本撰写的自动完成设置。</summary>
      <returns>
        <see cref="T:System.Windows.Input.TextCompositionAutoComplete" /> 枚举的成员，指定此文本撰写当前的自动完成行为。</returns>
    </member>
    <member name="M:System.Windows.Input.TextComposition.Complete">
      <summary>完成此文本撰写。</summary>
    </member>
    <member name="P:System.Windows.Input.TextComposition.CompositionText">
      <summary>获取或设置此文本撰写的撰写文本。</summary>
      <returns>包含此文本撰写的撰写文本的字符串。</returns>
    </member>
    <member name="P:System.Windows.Input.TextComposition.ControlText">
      <summary>获取或设置任何与此文本撰写关联的控件文本。</summary>
      <returns>包含任何与此文本撰写关联的控件文本的字符串。</returns>
    </member>
    <member name="P:System.Windows.Input.TextComposition.SystemCompositionText">
      <summary>获取或设置此文本撰写的系统撰写文本。</summary>
      <returns>包含此文本撰写的系统撰写文本的字符串。</returns>
    </member>
    <member name="P:System.Windows.Input.TextComposition.SystemText">
      <summary>获取或设置此文本撰写的系统文本。</summary>
      <returns>包含此文本撰写的系统文本的字符串。</returns>
    </member>
    <member name="P:System.Windows.Input.TextComposition.Text">
      <summary>获取或设置此文本撰写的当前文本。</summary>
      <returns>包含此文本撰写的当前文本的字符串。</returns>
    </member>
    <member name="T:System.Windows.Input.TextCompositionAutoComplete">
      <summary>定义用于处理自动完成文本撰写过程的状态集。</summary>
    </member>
    <member name="F:System.Windows.Input.TextCompositionAutoComplete.Off">
      <summary>自动完成已关闭。</summary>
    </member>
    <member name="F:System.Windows.Input.TextCompositionAutoComplete.On">
      <summary>自动完成已打开。在处理 <see cref="E:System.Windows.Input.TextCompositionManager.TextInputStart" /> 事件后，<see cref="T:System.Windows.Input.TextCompositionManager" /> 将自动引发 <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> 事件。</summary>
    </member>
    <member name="T:System.Windows.Input.TextCompositionEventArgs">
      <summary>包含与 <see cref="T:System.Windows.Input.TextComposition" /> 的更改关联的参数。</summary>
    </member>
    <member name="M:System.Windows.Input.TextCompositionEventArgs.#ctor(System.Windows.Input.InputDevice,System.Windows.Input.TextComposition)">
      <summary>初始化 <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> 类的一个新实例，将指定的 <see cref="T:System.Windows.Input.InputDevice" /> 和 <see cref="T:System.Windows.Input.TextComposition" /> 作为类的初始值。</summary>
      <param name="inputDevice">与此事件关联的输入设备。</param>
      <param name="composition">与此事件关联的 <see cref="T:System.Windows.Input.TextComposition" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">当撰写 为 null 时引发。</exception>
    </member>
    <member name="P:System.Windows.Input.TextCompositionEventArgs.ControlText">
      <summary>获取与 <see cref="T:System.Windows.Input.TextComposition" /> 事件关联的控件文本。</summary>
      <returns>包含任何与此事件关联的控件文本的字符串。</returns>
    </member>
    <member name="M:System.Windows.Input.TextCompositionEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>以特定于类型的方式调用事件处理程序，这样做可以提高事件系统效率。</summary>
      <param name="genericHandler">以特定于类型的方式调用的一般处理程序。</param>
      <param name="genericTarget">要对其调用处理程序的目标。</param>
    </member>
    <member name="P:System.Windows.Input.TextCompositionEventArgs.SystemText">
      <summary>获取与 <see cref="T:System.Windows.Input.TextComposition" /> 事件关联的系统文本。</summary>
      <returns>包含任何与此事件关联的系统文本的字符串。</returns>
    </member>
    <member name="P:System.Windows.Input.TextCompositionEventArgs.Text">
      <summary>获取与 <see cref="T:System.Windows.Input.TextComposition" /> 事件关联的输入文本。</summary>
      <returns>包含任何与此事件关联的输入文本的字符串。</returns>
    </member>
    <member name="P:System.Windows.Input.TextCompositionEventArgs.TextComposition">
      <summary>获取与 <see cref="T:System.Windows.Input.TextComposition" /> 事件关联的 <see cref="T:System.Windows.Input.TextComposition" />。</summary>
      <returns>包含与此事件关联的文本撰写的 <see cref="T:System.Windows.Input.TextComposition" /> 对象。</returns>
    </member>
    <member name="T:System.Windows.Input.TextCompositionEventHandler">
      <summary>表示将处理与 <see cref="T:System.Windows.Input.TextComposition" /> 和 <see cref="T:System.Windows.Input.TextCompositionManager" /> 类（如 <see cref="E:System.Windows.UIElement.TextInput" />）相关的路由事件的方法。</summary>
      <param name="sender">附加此事件处理程序的对象。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Input.TextCompositionManager">
      <summary>提供用于管理与输入和文本撰写相关的事件的设备。</summary>
    </member>
    <member name="M:System.Windows.Input.TextCompositionManager.AddPreviewTextInputHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" />附加事件添加处理程序。</summary>
      <param name="element">要添加事件处理程序的相关性对象。 该相关性对象必须是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">指定要添加的处理程序的委托。</param>
    </member>
    <member name="M:System.Windows.Input.TextCompositionManager.AddPreviewTextInputStartHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInputStart" />附加事件添加处理程序。</summary>
      <param name="element">要添加事件处理程序的相关性对象。 该相关性对象必须是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">指定要添加的处理程序的委托。</param>
    </member>
    <member name="M:System.Windows.Input.TextCompositionManager.AddPreviewTextInputUpdateHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInputUpdate" />附加事件添加处理程序。</summary>
      <param name="element">要添加事件处理程序的相关性对象。 该相关性对象必须是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">指定要添加的处理程序的委托。</param>
    </member>
    <member name="M:System.Windows.Input.TextCompositionManager.AddTextInputHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" />附加事件添加处理程序。</summary>
      <param name="element">要添加事件处理程序的相关性对象。 该相关性对象必须是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">指定要添加的处理程序的委托。</param>
    </member>
    <member name="M:System.Windows.Input.TextCompositionManager.AddTextInputStartHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.TextCompositionManager.TextInputStart" />附加事件添加处理程序。</summary>
      <param name="element">要添加事件处理程序的相关性对象。 该相关性对象必须是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">指定要添加的处理程序的委托。</param>
    </member>
    <member name="M:System.Windows.Input.TextCompositionManager.AddTextInputUpdateHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
      <summary>为 <see cref="E:System.Windows.Input.TextCompositionManager.TextInputUpdate" />附加事件添加处理程序。</summary>
      <param name="element">要添加事件处理程序的相关性对象。 该相关性对象必须是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">指定要添加的处理程序的委托。</param>
    </member>
    <member name="M:System.Windows.Input.TextCompositionManager.CompleteComposition(System.Windows.Input.TextComposition)">
      <summary>完成指定的文本撰写。</summary>
      <returns>
            如果成功完成文本撰写，则为 true；否则为 false。</returns>
      <param name="composition">要完成的 <see cref="T:System.Windows.Input.TextComposition" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">当撰写 为 null 时引发。</exception>
      <exception cref="T:System.ArgumentException">当没有与撰写 关联的输入管理器或者已将文本撰写标记为完成时引发。</exception>
    </member>
    <member name="E:System.Windows.Input.TextCompositionManager.PreviewTextInput">
      <summary>在 <see cref="T:System.Windows.Input.TextComposition" /> 完成时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.TextCompositionManager.PreviewTextInputEvent">
      <summary>标识 <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.TextCompositionManager.PreviewTextInputStart">
      <summary>启动新 <see cref="T:System.Windows.Input.TextComposition" /> 时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.TextCompositionManager.PreviewTextInputStartEvent">
      <summary>标识 <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInputStart" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInputStart" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.TextCompositionManager.PreviewTextInputUpdate">
      <summary>在更新 <see cref="T:System.Windows.Input.TextComposition" /> 时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.TextCompositionManager.PreviewTextInputUpdateEvent">
      <summary>标识 <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInputUpdate" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInputUpdate" /> 附加事件的标识符。</returns>
    </member>
    <member name="M:System.Windows.Input.TextCompositionManager.RemovePreviewTextInputHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" />附加事件的处理程序。</summary>
      <param name="element">要移除事件处理程序的相关性对象。 该相关性对象必须是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">指定要移除的处理程序的委托。</param>
    </member>
    <member name="M:System.Windows.Input.TextCompositionManager.RemovePreviewTextInputStartHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.TextCompositionManager.TextInputStart" />附加事件的处理程序。</summary>
      <param name="element">要移除事件处理程序的相关性对象。 该相关性对象必须是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">指定要移除的处理程序的委托。</param>
    </member>
    <member name="M:System.Windows.Input.TextCompositionManager.RemovePreviewTextInputUpdateHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInputUpdate" />附加事件的处理程序。</summary>
      <param name="element">要移除事件处理程序的相关性对象。 该相关性对象必须是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">指定要移除的处理程序的委托。</param>
    </member>
    <member name="M:System.Windows.Input.TextCompositionManager.RemoveTextInputHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" />附加事件的处理程序。</summary>
      <param name="element">要移除事件处理程序的相关性对象。 该相关性对象必须是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">指定要移除的处理程序的委托。</param>
    </member>
    <member name="M:System.Windows.Input.TextCompositionManager.RemoveTextInputStartHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.TextCompositionManager.TextInputStart" />附加事件的处理程序。</summary>
      <param name="element">要移除事件处理程序的相关性对象。 该相关性对象必须是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">指定要移除的处理程序的委托。</param>
    </member>
    <member name="M:System.Windows.Input.TextCompositionManager.RemoveTextInputUpdateHandler(System.Windows.DependencyObject,System.Windows.Input.TextCompositionEventHandler)">
      <summary>移除 <see cref="E:System.Windows.Input.TextCompositionManager.TextInputUpdate" />附加事件的处理程序。</summary>
      <param name="element">要移除事件处理程序的相关性对象。 该相关性对象必须是 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" />。</param>
      <param name="handler">指定要移除的处理程序的委托。</param>
    </member>
    <member name="M:System.Windows.Input.TextCompositionManager.StartComposition(System.Windows.Input.TextComposition)">
      <summary>启动指定的文本撰写。</summary>
      <returns>
            如果成功启动文本撰写，则为 true；否则为 false。</returns>
      <param name="composition">要启动的 <see cref="T:System.Windows.Input.TextComposition" /> 对象。</param>
    </member>
    <member name="E:System.Windows.Input.TextCompositionManager.TextInput">
      <summary>在 <see cref="T:System.Windows.Input.TextComposition" /> 完成时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.TextCompositionManager.TextInputEvent">
      <summary>标识 <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.TextCompositionManager.TextInputStart">
      <summary>启动新 <see cref="T:System.Windows.Input.TextComposition" /> 时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.TextCompositionManager.TextInputStartEvent">
      <summary>标识 <see cref="E:System.Windows.Input.TextCompositionManager.TextInputStart" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.TextCompositionManager.TextInputStart" /> 附加事件的标识符。</returns>
    </member>
    <member name="E:System.Windows.Input.TextCompositionManager.TextInputUpdate">
      <summary>在更新 <see cref="T:System.Windows.Input.TextComposition" /> 时发生。</summary>
    </member>
    <member name="F:System.Windows.Input.TextCompositionManager.TextInputUpdateEvent">
      <summary>标识 <see cref="E:System.Windows.Input.TextCompositionManager.TextInputUpdate" /> 附加事件。</summary>
      <returns>
        <see cref="E:System.Windows.Input.TextCompositionManager.TextInputUpdate" /> 附加事件的标识符。</returns>
    </member>
    <member name="M:System.Windows.Input.TextCompositionManager.UpdateComposition(System.Windows.Input.TextComposition)">
      <summary>更新指定的文本撰写。</summary>
      <returns>
            如果成功更新文本撰写，则为 true；否则为 false。</returns>
      <param name="composition">要更新的 <see cref="T:System.Windows.Input.TextComposition" /> 对象。</param>
    </member>
    <member name="T:System.Windows.Input.StylusPlugIns.DynamicRenderer">
      <summary>当用户移动 tablet 笔时，会在图面上绘制墨迹。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Input.StylusPlugIns.DynamicRenderer.DrawingAttributes">
      <summary>获取或设置可指定所呈现墨迹的外观的 <see cref="T:System.Windows.Ink.DrawingAttributes" />。</summary>
      <returns>可指定所呈现墨迹的外观的 <see cref="T:System.Windows.Ink.DrawingAttributes" />。</returns>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.GetDispatcher">
      <summary>返回呈现线程的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <returns>呈现线程的 <see cref="T:System.Windows.Threading.Dispatcher" />。</returns>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.OnAdded">
      <summary>在将 <see cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer" /> 添加到元素中时发生。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.OnDraw(System.Windows.Media.DrawingContext,System.Windows.Input.StylusPointCollection,System.Windows.Media.Geometry,System.Windows.Media.Brush)">
      <summary>墨迹的绘制是实时的，因此墨迹看起来就像从 tablet 笔或其他指针设备中“流”出来一样。</summary>
      <param name="drawingContext">在其上呈现笔画的 <see cref="T:System.Windows.Media.DrawingContext" /> 对象。</param>
      <param name="stylusPoints">
        <see cref="T:System.Windows.Input.StylusPointCollection" />，表示要绘制的笔画的线段。</param>
      <param name="geometry">一个表示鼠标指针的路径的 <see cref="T:System.Windows.Media.Geometry" />。</param>
      <param name="fillBrush">一个指定当前笔画的外观的画笔。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.OnDrawingAttributesReplaced">
      <summary>当 <see cref="P:System.Windows.Input.StylusPlugIns.DynamicRenderer.DrawingAttributes" /> 属性更改时发生。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.OnEnabledChanged">
      <summary>当 <see cref="P:System.Windows.Input.StylusPlugIns.StylusPlugIn.Enabled" /> 属性更改时发生。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.OnIsActiveForInputChanged">
      <summary>当 <see cref="P:System.Windows.Input.StylusPlugIns.DynamicRenderer.IsActiveForInput" /> 属性更改时发生。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.OnRemoved">
      <summary>在从元素中移除 <see cref="T:System.Windows.Input.DynamicRenderer.StylusPlugIn" /> 时发生。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.OnStylusDown(System.Windows.Input.StylusPlugIns.RawStylusInput)">
      <summary>当 tablet 笔接触数字化仪时，在笔线程池中的线程上发生。</summary>
      <param name="rawStylusInput">一个包含有关笔输入信息的 <see cref="T:System.Windows.Input.StylusPlugIns.RawStylusInput" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.OnStylusDownProcessed(System.Object,System.Boolean)">
      <summary>当 tablet 笔接触数字化仪时，在应用程序 UI（用户界面）线程上发生。</summary>
      <param name="callbackData">应用程序传递给 <see cref="M:System.Windows.Input.StylusPlugIns.RawStylusInput.NotifyWhenProcessed(System.Object)" /> 方法的对象。</param>
      <param name="targetVerified">
                如果笔输入正确路由到 <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn" />，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.OnStylusEnter(System.Windows.Input.StylusPlugIns.RawStylusInput,System.Boolean)">
      <summary>当光标进入元素的边界时在笔线程上发生。</summary>
      <param name="rawStylusInput">一个包含有关笔输入信息的 <see cref="T:System.Windows.Input.StylusPlugIns.RawStylusInput" />。</param>
      <param name="confirmed">
                如果笔确实进入元素的边界，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.OnStylusLeave(System.Windows.Input.StylusPlugIns.RawStylusInput,System.Boolean)">
      <summary>当光标离开元素的边界时在笔线程上发生。</summary>
      <param name="rawStylusInput">一个包含有关笔输入信息的 <see cref="T:System.Windows.Input.StylusPlugIns.RawStylusInput" />。</param>
      <param name="confirmed">
                如果笔确实离开了元素的边界，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.OnStylusMove(System.Windows.Input.StylusPlugIns.RawStylusInput)">
      <summary>当 tablet 笔移到数字化仪上时，在笔线程上发生。</summary>
      <param name="rawStylusInput">一个包含有关笔输入信息的 <see cref="T:System.Windows.Input.StylusPlugIns.RawStylusInput" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.OnStylusUp(System.Windows.Input.StylusPlugIns.RawStylusInput)">
      <summary>当用户将 tablet 笔从数字化仪上提起时，在笔线程上发生。</summary>
      <param name="rawStylusInput">一个包含有关笔输入信息的 <see cref="T:System.Windows.Input.StylusPlugIns.RawStylusInput" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.OnStylusUpProcessed(System.Object,System.Boolean)">
      <summary>当用户将 tablet 笔从数字化仪上提起时，在应用程序 UI（用户界面）线程上发生。</summary>
      <param name="callbackData">应用程序传递给 <see cref="M:System.Windows.Input.StylusPlugIns.RawStylusInput.NotifyWhenProcessed(System.Object)" /> 方法的对象。</param>
      <param name="targetVerified">
                如果笔输入正确路由到 <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn" />，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.DynamicRenderer.Reset(System.Windows.Input.StylusDevice,System.Windows.Input.StylusPointCollection)">
      <summary>清除对当前笔画的呈现并重新绘制它。</summary>
      <param name="stylusDevice">当前的手写笔设备。</param>
      <param name="stylusPoints">要重新绘制的手写笔接触点。</param>
      <exception cref="T:System.ArgumentException">手写笔或鼠标均未处于关闭状态。</exception>
    </member>
    <member name="P:System.Windows.Input.StylusPlugIns.DynamicRenderer.RootVisual">
      <summary>获取 <see cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer" /> 的根 Visual。</summary>
      <returns>
        <see cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer" /> 的根 <see cref="T:System.Windows.Media.Visual" />。</returns>
    </member>
    <member name="T:System.Windows.Input.StylusPlugIns.RawStylusInput">
      <summary>提供有关从 <see cref="T:System.Windows.Input.StylusDevice" /> 到 <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn" /> 的输入的信息。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.RawStylusInput.GetStylusPoints">
      <summary>获取从手写笔收集到的手写笔接触点。</summary>
      <returns>从手写笔收集到的手写笔接触点。</returns>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.RawStylusInput.NotifyWhenProcessed(System.Object)">
      <summary>订阅应用程序线程的相应手写笔方法。</summary>
      <param name="callbackData">要传递到应用程序线程的数据。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.RawStylusInput.SetStylusPoints(System.Windows.Input.StylusPointCollection)">
      <summary>设置传递到应用程序线程的手写笔接触点。</summary>
      <param name="stylusPoints">要传递到应用程序线程的手写笔接触点。</param>
    </member>
    <member name="P:System.Windows.Input.StylusPlugIns.RawStylusInput.StylusDeviceId">
      <summary>获取当前手写笔设备的标识符。</summary>
      <returns>当前 <see cref="T:System.Windows.Input.StylusDevice" /> 的标识符。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusPlugIns.RawStylusInput.TabletDeviceId">
      <summary>获取当前 Tablet 设备的标识符。</summary>
      <returns>当前 <see cref="T:System.Windows.Input.TabletDevice" /> 的标识符。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusPlugIns.RawStylusInput.Timestamp">
      <summary>获取发生输入的时间。</summary>
      <returns>发生输入的时间。</returns>
    </member>
    <member name="T:System.Windows.Input.StylusPlugIns.StylusPlugIn">
      <summary>表示可添加到控件的 <see cref="P:System.Windows.UIElement.StylusPlugIns" /> 属性中的插件。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Input.StylusPlugIns.StylusPlugIn.Element">
      <summary>获取其中附加了 <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn" /> 的 <see cref="T:System.Windows.UIElement" />。</summary>
      <returns>其中附加了 <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn" /> 的 <see cref="T:System.Windows.UIElement" />。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusPlugIns.StylusPlugIn.ElementBounds">
      <summary>获取元素的缓存边界。</summary>
      <returns>元素的缓存边界。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusPlugIns.StylusPlugIn.Enabled">
      <summary>获取或设置 <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn" /> 是否处于活动状态。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn" /> 处于活动状态，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="P:System.Windows.Input.StylusPlugIns.StylusPlugIn.IsActiveForInput">
      <summary>获取 <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn" /> 是否可以接受输入。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn" /> 可以接受输入，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnAdded">
      <summary>在将 <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn" /> 添加到元素中时发生。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnEnabledChanged">
      <summary>当 <see cref="P:System.Windows.Input.StylusPlugIns.StylusPlugIn.Enabled" /> 属性更改时发生。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnIsActiveForInputChanged">
      <summary>当 <see cref="P:System.Windows.Input.StylusPlugIns.StylusPlugIn.IsActiveForInput" /> 属性更改时发生。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnRemoved">
      <summary>在从元素中移除 <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn" /> 时发生。</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnStylusDown(System.Windows.Input.StylusPlugIns.RawStylusInput)">
      <summary>当 tablet 笔接触数字化仪时，在笔线程池中的线程上发生。</summary>
      <param name="rawStylusInput">一个包含有关笔输入信息的 <see cref="T:System.Windows.Input.StylusPlugIns.RawStylusInput" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnStylusDownProcessed(System.Object,System.Boolean)">
      <summary>当 tablet 笔接触数字化仪时，在应用程序 UI（用户界面）线程上发生。</summary>
      <param name="callbackData">应用程序传递给 <see cref="M:System.Windows.Input.StylusPlugIns.RawStylusInput.NotifyWhenProcessed(System.Object)" /> 方法的对象。</param>
      <param name="targetVerified">
                如果笔输入正确路由到 <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn" />，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnStylusEnter(System.Windows.Input.StylusPlugIns.RawStylusInput,System.Boolean)">
      <summary>当光标进入元素的边界时在笔线程上发生。</summary>
      <param name="rawStylusInput">一个包含有关笔输入信息的 <see cref="T:System.Windows.Input.StylusPlugIns.RawStylusInput" />。</param>
      <param name="confirmed">
                如果笔确实进入元素的边界，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnStylusLeave(System.Windows.Input.StylusPlugIns.RawStylusInput,System.Boolean)">
      <summary>当光标离开元素的边界时在笔线程上发生。</summary>
      <param name="rawStylusInput">一个包含有关笔输入信息的 <see cref="T:System.Windows.Input.StylusPlugIns.RawStylusInput" />。</param>
      <param name="confirmed">
                如果笔确实离开了元素的边界，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnStylusMove(System.Windows.Input.StylusPlugIns.RawStylusInput)">
      <summary>当 tablet 笔移到数字化仪上时，在笔线程上发生。</summary>
      <param name="rawStylusInput">一个包含有关笔输入信息的 <see cref="T:System.Windows.Input.StylusPlugIns.RawStylusInput" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnStylusMoveProcessed(System.Object,System.Boolean)">
      <summary>当 tablet 笔移到数字化仪上时，在应用程序 UI（用户界面）线程上发生。</summary>
      <param name="callbackData">应用程序传递给 <see cref="M:System.Windows.Input.StylusPlugIns.RawStylusInput.NotifyWhenProcessed(System.Object)" /> 方法的对象。</param>
      <param name="targetVerified">
                如果笔输入正确路由到 <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn" />，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnStylusUp(System.Windows.Input.StylusPlugIns.RawStylusInput)">
      <summary>当用户将 tablet 笔从数字化仪上提起时，在笔线程上发生。</summary>
      <param name="rawStylusInput">一个包含有关笔输入信息的 <see cref="T:System.Windows.Input.StylusPlugIns.RawStylusInput" />。</param>
    </member>
    <member name="M:System.Windows.Input.StylusPlugIns.StylusPlugIn.OnStylusUpProcessed(System.Object,System.Boolean)">
      <summary>当用户将 tablet 笔从数字化仪上提起时，在应用程序 UI（用户界面）线程上发生。</summary>
      <param name="callbackData">应用程序传递给 <see cref="M:System.Windows.Input.StylusPlugIns.RawStylusInput.NotifyWhenProcessed(System.Object)" /> 方法的对象。</param>
      <param name="targetVerified">
                如果笔输入正确路由到 <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn" />，则为 true；否则为 false。</param>
    </member>
    <member name="T:System.Windows.Input.StylusPlugIns.StylusPlugInCollection">
      <summary>表示 <see cref="T:System.Windows.Input.StylusPlugIns.StylusPlugIn" /> 对象的集合。</summary>
    </member>
    <member name="T:System.Windows.Interop.CursorInteropHelper">
      <summary>通过一个方法为 WPF/Win32 互操作提供静态帮助器类，该静态帮助器类用于获取基于所提供的 Win32 光标句柄的 Windows Presentation Foundation (WPF) <see cref="T:System.Windows.Input.Cursor" /> 对象。</summary>
    </member>
    <member name="M:System.Windows.Interop.CursorInteropHelper.Create(System.Runtime.InteropServices.SafeHandle)">
      <summary>返回基于所提供的 Win32 光标句柄的 Windows Presentation Foundation (WPF) <see cref="T:System.Windows.Input.Cursor" /> 对象。</summary>
      <returns>基于所提供的 Win32 光标句柄的 Windows Presentation Foundation (WPF) 光标对象。</returns>
      <param name="cursorHandle">用于互操作的光标引用。</param>
    </member>
    <member name="T:System.Windows.Interop.HwndSource">
      <summary>在 Win32 窗口中显示 Windows Presentation Foundation (WPF) 内容。</summary>
    </member>
    <member name="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
      <summary>初始化具有指定类样式、样式、扩展样式、x-y 位置、宽度、高度、名称和父窗口的 <see cref="T:System.Windows.Interop.HwndSource" /> 类的新实例。</summary>
      <param name="classStyle">窗口的 Win32 类样式。</param>
      <param name="style">窗口的 Win32 样式。</param>
      <param name="exStyle">窗口的扩展 Win32 样式。</param>
      <param name="x">窗口左边缘的位置。</param>
      <param name="y">窗口上边缘的位置。</param>
      <param name="width">窗口的宽度。</param>
      <param name="height">窗口的高度。</param>
      <param name="name">窗口的名称。</param>
      <param name="parent">窗口的父窗口的句柄。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr,System.Boolean)">
      <summary>初始化 <see cref="T:System.Windows.Interop.HwndSource" /> 类的新实例，此类具有指定的类样式、样式、扩展样式、x-y 位置、宽度、高度、名称和父窗口，并且指示了窗口是否自动调整大小。</summary>
      <param name="classStyle">窗口的 Win32 类样式。</param>
      <param name="style">窗口的 Win32 样式。</param>
      <param name="exStyle">窗口的扩展 Win32 样式。</param>
      <param name="x">窗口左边缘的位置。</param>
      <param name="y">窗口上边缘的位置。</param>
      <param name="width">窗口的宽度。</param>
      <param name="height">窗口的高度。</param>
      <param name="name">窗口的名称。</param>
      <param name="parent">窗口的父窗口的句柄。</param>
      <param name="adjustSizingForNonClientArea">
                如果布局管理器包含要调整大小的非工作区，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
      <summary>初始化具有指定类样式、样式、扩展样式、x-y 位置、名称和父窗口的 <see cref="T:System.Windows.Interop.HwndSource" /> 类的新实例。</summary>
      <param name="classStyle">窗口的 Win32 类样式。</param>
      <param name="style">窗口的 Win32 样式。</param>
      <param name="exStyle">窗口的扩展 Win32 样式。</param>
      <param name="x">窗口左边缘的位置。</param>
      <param name="y">窗口上边缘的位置。</param>
      <param name="name">窗口的名称。</param>
      <param name="parent">窗口的父窗口的句柄。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndSource.#ctor(System.Windows.Interop.HwndSourceParameters)">
      <summary>通过使用包含初始设置的结构初始化 <see cref="T:System.Windows.Interop.HwndSource" /> 类的新实例。</summary>
      <param name="parameters">包含创建窗口所需的参数的结构。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)">
      <summary>添加接收所有窗口消息的事件处理程序。</summary>
      <param name="hook">接收窗口消息的处理程序实现（基于 <see cref="T:System.Windows.Interop.HwndSourceHook" /> 委托）。</param>
    </member>
    <member name="E:System.Windows.Interop.HwndSource.AutoResized">
      <summary>当布局导致 <see cref="T:System.Windows.Interop.HwndSource" /> 自动调整大小时发生。</summary>
    </member>
    <member name="P:System.Windows.Interop.HwndSource.CompositionTarget">
      <summary>获取所承载的窗口的可视化管理器。</summary>
      <returns>可视化管理器。</returns>
    </member>
    <member name="M:System.Windows.Interop.HwndSource.CreateHandleRef">
      <summary>获取 <see cref="T:System.Windows.Interop.HwndSource" /> 的窗口句柄。此窗口句柄作为 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 结构一部分打包。</summary>
      <returns>包含此 <see cref="T:System.Windows.Interop.HwndSource" /> 的窗口句柄的结构。</returns>
    </member>
    <member name="M:System.Windows.Interop.HwndSource.Dispose">
      <summary>释放 <see cref="T:System.Windows.Interop.HwndSource" /> 使用的所有托管资源，并引发 <see cref="E:System.Windows.Interop.HwndSource.Disposed" /> 事件。</summary>
    </member>
    <member name="E:System.Windows.Interop.HwndSource.Disposed">
      <summary>对此对象调用 <see cref="M:System.Windows.Interop.HwndSource.Dispose" /> 方法时发生。</summary>
    </member>
    <member name="M:System.Windows.Interop.HwndSource.FromHwnd(System.IntPtr)">
      <summary>返回指定窗口的 <see cref="T:System.Windows.Interop.HwndSource" /> 对象。</summary>
      <returns>
        <paramref name="hwnd" /> 窗口句柄指定的窗口的 <see cref="T:System.Windows.Interop.HwndSource" /> 对象。</returns>
      <param name="hwnd">提供的窗口句柄。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndSource.GetCompositionTargetCore">
      <summary>获取窗口的可视化目标。</summary>
      <returns>返回窗口的可视化目标。</returns>
    </member>
    <member name="P:System.Windows.Interop.HwndSource.Handle">
      <summary>获取此 <see cref="T:System.Windows.Interop.HwndSource" /> 的窗口句柄。</summary>
      <returns>窗口句柄。</returns>
    </member>
    <member name="P:System.Windows.Interop.HwndSource.IsDisposed">
      <summary>获取一个值，指示是否已对此 <see cref="T:System.Windows.Interop.HwndSource" /> 调用 <see cref="M:System.Windows.Interop.HwndSource.Dispose" />。</summary>
      <returns>
            如果已对该对象调用了 <see cref="M:System.Windows.Interop.HwndSource.Dispose" />，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Interop.HwndSource.RemoveHook(System.Windows.Interop.HwndSourceHook)">
      <summary>移除 <see cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" /> 已添加的事件处理程序。</summary>
      <param name="hook">要移除的事件处理程序。</param>
    </member>
    <member name="P:System.Windows.Interop.HwndSource.RootVisual">
      <summary>获取或设置窗口的 <see cref="P:System.Windows.Media.CompositionTarget.RootVisual" />。</summary>
      <returns>窗口的根可视化对象。</returns>
    </member>
    <member name="P:System.Windows.Interop.HwndSource.SizeToContent">
      <summary>获取或设置窗口是否根据其内容调整大小以及如何调整大小。</summary>
      <returns>枚举值之一。默认值为 <see cref="F:System.Windows.SizeToContent.Manual" />，它指定窗口不会根据内容调整大小。</returns>
    </member>
    <member name="E:System.Windows.Interop.HwndSource.SizeToContentChanged">
      <summary>当 <see cref="P:System.Windows.Interop.HwndSource.SizeToContent" /> 属性的值更改时发生。</summary>
    </member>
    <member name="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#HasFocusWithin">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Windows.Media.FamilyTypefaceCollection.System#Collections#IList#Remove(System.Object)" />。</summary>
      <returns>
            如果接收器或其所包含的组件之一具有焦点，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#KeyboardInputSite">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite" />。</summary>
      <returns>对容器的 <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> 接口的引用。</returns>
    </member>
    <member name="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />。</summary>
      <returns>
如果消息已得到处理，则为 true；否则为 false。</returns>
      <param name="msg">助记键和关联数据的消息。请勿修改此消息结构。仅由于性能原因，通过引用来传递此消息。</param>
      <param name="modifiers">修改键。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)" />。</summary>
      <returns>所包含组件的 <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> 站点。</returns>
      <param name="sink">所包含组件的 <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> 接收器。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TabInto(System.Windows.Input.TraversalRequest)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)" />。</summary>
      <returns>
            如果已按要求对焦点进行了设置，则为 true；如果没有制表位，则为 false。</returns>
      <param name="request">指定是将焦点设置到第一个制表位，还是设置到最后一个制表位。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />。</summary>
      <returns>
            如果方法实现对该消息进行了处理，则为 true；否则为 false。</returns>
      <param name="msg">消息及关联数据。请勿修改此结构。仅由于性能原因，通过引用来传递此消息。</param>
      <param name="modifiers">修改键。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />。</summary>
      <returns>
            如果消息已处理并且不应调用 <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />，则为 true；否则为 false。</returns>
      <param name="msg">消息及关联数据。请勿修改此结构。仅由于性能原因，通过引用来传递此消息。</param>
      <param name="modifiers">修改键。</param>
    </member>
    <member name="P:System.Windows.Interop.HwndSource.UsesPerPixelOpacity">
      <summary>获取一个值，该值声明是否遵守源窗口内容的每像素不透明度。</summary>
      <returns>
            如果系统使用每像素不透明度，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Windows.Interop.HwndSourceHook">
      <summary> 表示处理 Win32 窗口消息的方法。</summary>
      <returns>相应的返回值取决于特定消息。有关正在处理的 Win32 消息的信息，请参见消息文档详细信息。</returns>
      <param name="hwnd">窗口句柄。</param>
      <param name="msg">消息 ID。</param>
      <param name="wParam">消息的 wParam 值。</param>
      <param name="lParam">消息的 lParam 值。</param>
      <param name="handled">指示该消息是否已处理的值。如果该消息已处理，请将值设置为 true；否则请将其设置为 false。</param>
    </member>
    <member name="T:System.Windows.Interop.HwndSourceParameters">
      <summary>包含用 <see cref="M:System.Windows.Interop.HwndSource.#ctor(System.Windows.Interop.HwndSourceParameters)" /> 构造函数来创建 <see cref="T:System.Windows.Interop.HwndSource" /> 对象所使用的参数。</summary>
    </member>
    <member name="M:System.Windows.Interop.HwndSourceParameters.#ctor(System.String)">
      <summary>用指定的窗口名称初始化 <see cref="T:System.Windows.Interop.HwndSourceParameters" /> 类的新实例。</summary>
      <param name="name">窗口的名称。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndSourceParameters.#ctor(System.String,System.Int32,System.Int32)">
      <summary>用指定的窗口名称和初始大小初始化 <see cref="T:System.Windows.Interop.HwndSourceParameters" /> 类的新实例。</summary>
      <param name="name">窗口的名称。</param>
      <param name="width">以像素为单位的窗口宽度。</param>
      <param name="height">以像素为单位的窗口高度。</param>
    </member>
    <member name="P:System.Windows.Interop.HwndSourceParameters.AdjustSizingForNonClientArea">
      <summary>设置或获取一个值，指示调整大小是否包括非工作区。</summary>
      <returns>
            如果布局管理器调整大小逻辑应包括非工作区，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="M:System.Windows.Interop.HwndSourceParameters.Equals(System.Object)">
      <summary>确定此结构是否与指定对象相等。</summary>
      <returns>
            如果比较结果相等，则为 true；否则为 false。</returns>
      <param name="obj">要测试是否相等的对象。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndSourceParameters.Equals(System.Windows.Interop.HwndSourceParameters)">
      <summary>确定此结构是否与指定的 <see cref="T:System.Windows.Interop.HwndSourceParameters" /> 结构相等。</summary>
      <returns>
            如果结构相等，则为 true；否则为 false。</returns>
      <param name="obj">要测试是否相等的结构。</param>
    </member>
    <member name="P:System.Windows.Interop.HwndSourceParameters.ExtendedWindowStyle">
      <summary> 获取或设置窗口的扩展 Microsoft Windows 样式。</summary>
      <returns>扩展窗口样式 有关这些样式的列表，请参见 CreateWindowEx Function（CreateWindowEx 函数）。默认值为 0（无此类样式）。</returns>
    </member>
    <member name="M:System.Windows.Interop.HwndSourceParameters.GetHashCode">
      <summary>返回此 <see cref="T:System.Windows.Interop.HwndSourceParameters" /> 的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Windows.Interop.HwndSourceParameters.HasAssignedSize">
      <summary>获取一个值，该值指示是否已分配大小。</summary>
      <returns>
            如果已分配窗口大小，则为 true；否则为 false。默认值为 false，除非使用提供的高度和宽度创建该结构，此种情况下，该值为 true。</returns>
    </member>
    <member name="P:System.Windows.Interop.HwndSourceParameters.Height">
      <summary>获取或设置一个值，该值指示窗口的高度。</summary>
      <returns>窗口的高度（以设备像素为单位）。默认值为 1。</returns>
    </member>
    <member name="P:System.Windows.Interop.HwndSourceParameters.HwndSourceHook">
      <summary>获取或设置窗口的消息挂钩。</summary>
      <returns>窗口的消息挂钩。</returns>
    </member>
    <member name="M:System.Windows.Interop.HwndSourceParameters.op_Equality(System.Windows.Interop.HwndSourceParameters,System.Windows.Interop.HwndSourceParameters)">
      <summary>确定 <see cref="T:System.Windows.Interop.HwndSourceParameters" /> 结构是否与另一个 <see cref="T:System.Windows.Interop.HwndSourceParameters" /> 结构相等。</summary>
      <returns>
            如果结构相等，则为 true；否则为 false。</returns>
      <param name="a">要比较的第一个 <see cref="T:System.Windows.Interop.HwndSourceParameters" />。</param>
      <param name="b">要比较的第二个 <see cref="T:System.Windows.Interop.HwndSourceParameters" />。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndSourceParameters.op_Inequality(System.Windows.Interop.HwndSourceParameters,System.Windows.Interop.HwndSourceParameters)">
      <summary>确定 <see cref="T:System.Windows.Interop.HwndSourceParameters" /> 结构是否与另一个 <see cref="T:System.Windows.Interop.HwndSourceParameters" /> 结构不相等。</summary>
      <param name="a">要比较的第一个 <see cref="T:System.Windows.Interop.HwndSourceParameters" />。</param>
      <param name="b">要比较的第二个 <see cref="T:System.Windows.Interop.HwndSourceParameters" />。</param>
    </member>
    <member name="P:System.Windows.Interop.HwndSourceParameters.ParentWindow">
      <summary>获取或设置已创建窗口的父级的窗口句柄 (HWND)。</summary>
      <returns>父窗口的 HWND。</returns>
    </member>
    <member name="P:System.Windows.Interop.HwndSourceParameters.PositionX">
      <summary>获取或设置窗口左边缘的位置。</summary>
      <returns>窗口左边缘的位置。默认值为 CW_USEDEFAULT，该值由 CreateWindow 处理。</returns>
    </member>
    <member name="P:System.Windows.Interop.HwndSourceParameters.PositionY">
      <summary>获取或设置窗口上边缘的位置。</summary>
      <returns>窗口上边缘的位置。默认值为 CW_USEDEFAULT，该值由 CreateWindow 处理。</returns>
    </member>
    <member name="M:System.Windows.Interop.HwndSourceParameters.SetPosition(System.Int32,System.Int32)">
      <summary>设置用于 <see cref="T:System.Windows.Interop.HwndSource" /> 的窗口的屏幕位置的值。</summary>
      <param name="x">窗口左边缘的位置。</param>
      <param name="y">窗口上边缘的位置。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndSourceParameters.SetSize(System.Int32,System.Int32)">
      <summary>设置用于 <see cref="T:System.Windows.Interop.HwndSource" /> 的窗口大小的值。</summary>
      <param name="width">窗口的宽度（以设备像素为单位）。</param>
      <param name="height">窗口的高度（以设备像素为单位）。</param>
    </member>
    <member name="P:System.Windows.Interop.HwndSourceParameters.UsesPerPixelOpacity">
      <summary>获取一个值，该值声明是否遵守源窗口内容的每像素不透明度。</summary>
      <returns>
            如果使用每像素不透明度，则为 true；否则，为 false。</returns>
    </member>
    <member name="P:System.Windows.Interop.HwndSourceParameters.Width">
      <summary>获取或设置一个值，该值指示窗口的宽度。</summary>
      <returns>窗口的宽度（以设备像素为单位）。默认值为 1。</returns>
    </member>
    <member name="P:System.Windows.Interop.HwndSourceParameters.WindowClassStyle">
      <summary>获取或设置窗口的 Microsoft Windows 类样式。</summary>
      <returns>窗口类样式。有关详细信息，请参见 Window Class Styles（窗口类样式）。默认值为 0（无此类样式）。</returns>
    </member>
    <member name="P:System.Windows.Interop.HwndSourceParameters.WindowName">
      <summary>获取或设置窗口的名称。</summary>
      <returns>窗口名称。</returns>
    </member>
    <member name="P:System.Windows.Interop.HwndSourceParameters.WindowStyle">
      <summary>获取或设置窗口的样式。</summary>
      <returns>窗口样式。有关样式位的完整列表，请参见 CreateWindowEx Function（CreateWindowEx 函数）。请参见默认值的备注。</returns>
    </member>
    <member name="T:System.Windows.Interop.HwndTarget">
      <summary>表示到支持可视化撰写的窗口句柄的绑定。</summary>
    </member>
    <member name="M:System.Windows.Interop.HwndTarget.#ctor(System.IntPtr)">
      <summary>使用指定的 HWND 初始化 <see cref="T:System.Windows.Interop.HwndTarget" /> 类的新实例。</summary>
      <param name="hwnd">此对象将要绘制到的窗口的句柄。</param>
    </member>
    <member name="P:System.Windows.Interop.HwndTarget.BackgroundColor">
      <summary>获取或设置由此 <see cref="T:System.Windows.Interop.HwndTarget" /> 引用的窗口的背景色。</summary>
      <returns>背景色，以 <see cref="T:System.Windows.Media.Color" /> 值表示。</returns>
    </member>
    <member name="M:System.Windows.Interop.HwndTarget.Dispose">
      <summary>释放由 <see cref="T:System.Windows.Interop.HwndTarget" /> 使用的所有资源。</summary>
    </member>
    <member name="P:System.Windows.Interop.HwndTarget.RootVisual">
      <summary>获取或设置由此窗口承载的页面的根可视化对象。</summary>
      <returns>所承载页面的根可视化对象。</returns>
    </member>
    <member name="P:System.Windows.Interop.HwndTarget.TransformFromDevice">
      <summary>获取一个矩阵，该矩阵可转换与此目标的呈现目标相关联的设备的坐标。</summary>
      <returns>转换矩阵。</returns>
    </member>
    <member name="P:System.Windows.Interop.HwndTarget.TransformToDevice">
      <summary>获取一个矩阵，该矩阵可转换与呈现目标相关联的设备的目标的坐标。</summary>
      <returns>转换矩阵。</returns>
    </member>
    <member name="P:System.Windows.Interop.HwndTarget.UsesPerPixelOpacity">
      <summary>获取一个值，该值声明源窗口内容的每像素不透明度值是否用于呈现。</summary>
      <returns>
            如果使用每像素不透明度，则为 true；否则，为 false。</returns>
    </member>
    <member name="T:System.Windows.Interop.Imaging">
      <summary>为创建图像对象提供托管到非托管的互操作支持。</summary>
    </member>
    <member name="M:System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(System.IntPtr,System.IntPtr,System.Windows.Int32Rect,System.Windows.Media.Imaging.BitmapSizeOptions)">
      <summary>基于所提供的非托管位图和调色板信息的指针，返回一个托管的 <see cref="T:System.Windows.Media.Imaging.BitmapSource" />。</summary>
      <returns>创建的 <see cref="T:System.Windows.Media.Imaging.BitmapSource" />。</returns>
      <param name="bitmap">非托管位图的指针。</param>
      <param name="palette">位图调色板映射的指针。</param>
      <param name="sourceRect">源图像的大小。</param>
      <param name="sizeOptions">指定如何处理转换的枚举的值。</param>
    </member>
    <member name="M:System.Windows.Interop.Imaging.CreateBitmapSourceFromHIcon(System.IntPtr,System.Windows.Int32Rect,System.Windows.Media.Imaging.BitmapSizeOptions)">
      <summary>基于所提供的非托管图标图像的指针，返回一个托管的 <see cref="T:System.Windows.Media.Imaging.BitmapSource" />。</summary>
      <returns>创建的 <see cref="T:System.Windows.Media.Imaging.BitmapSource" />。</returns>
      <param name="icon">非托管图标源的指针。</param>
      <param name="sourceRect">源图像的大小。</param>
      <param name="sizeOptions">指定如何处理转换的枚举的值。</param>
    </member>
    <member name="M:System.Windows.Interop.Imaging.CreateBitmapSourceFromMemorySection(System.IntPtr,System.Int32,System.Int32,System.Windows.Media.PixelFormat,System.Int32,System.Int32)">
      <summary>基于所提供的非托管内存位置，返回托管的 <see cref="T:System.Windows.Media.Imaging.BitmapSource" />。</summary>
      <returns>创建的 <see cref="T:System.Windows.Media.Imaging.BitmapSource" />。</returns>
      <param name="section">内存部分的指针。</param>
      <param name="pixelWidth">用于指定位图宽度（以像素为单位）的整数。</param>
      <param name="pixelHeight">用于指定位图高度（以像素为单位）的整数。</param>
      <param name="format">枚举的一个值。</param>
      <param name="stride">位图的跨距。</param>
      <param name="offset">图像从其开始的内存流字节偏移量。</param>
    </member>
    <member name="T:System.Windows.Interop.IWin32Window">
      <summary>定义 Win32 窗口句柄的协定。</summary>
    </member>
    <member name="P:System.Windows.Interop.IWin32Window.Handle">
      <summary>获取窗口句柄。</summary>
      <returns>窗口句柄。</returns>
    </member>
    <member name="T:System.Windows.Interop.D3DImage">
      <summary>
                    一个 <see cref="T:System.Windows.Media.ImageSource" />，它显示用户创建的 Direct3D 图面。
                </summary>
    </member>
    <member name="M:System.Windows.Interop.D3DImage.#ctor">
      <summary>
                    初始化 <see cref="T:System.Windows.Interop.D3DImage" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.Windows.Interop.D3DImage.#ctor(System.Double,System.Double)">
      <summary>
                    使用指定的显示分辨率初始化 <see cref="T:System.Windows.Interop.D3DImage" /> 类的新实例。
                </summary>
      <param name="dpiX">
                    显示分辨率位于 x 轴上。
                </param>
      <param name="dpiY">
                    显示分辨率位于 y 轴上。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dpiX" /> 或 <paramref name="dpiY" /> 小于零。
                </exception>
    </member>
    <member name="M:System.Windows.Interop.D3DImage.AddDirtyRect(System.Windows.Int32Rect)">
      <summary>
                    指定后台缓冲区已更改的区域。
                </summary>
      <param name="dirtyRect">
                    一个 <see cref="T:System.Windows.Int32Rect" />，表示已更改的区域。
                </param>
      <exception cref="T:System.InvalidOperationException">
                    对 <see cref="M:System.Windows.Interop.D3DImage.Lock" /> 或 <see cref="M:System.Windows.Interop.D3DImage.TryLock(System.Windows.Duration)" /> 方法的调用未锁定位图。
                
                    - 或 -
                
                    未通过调用 <see cref="M:System.Windows.Interop.D3DImage.SetBackBuffer(System.Windows.Interop.D3DResourceType,System.IntPtr)" /> 方法分配后台缓冲区。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    存在下列一种或多种情况时。
                <paramref name="dirtyRect.X" /> &lt; 0 
                <paramref name="dirtyRect.Y" /> &lt; 0 
                <paramref name="dirtyRect.Width" /> &lt; 0 或 <paramref name="dirtyRect.Width" /> &gt; <see cref="P:System.Windows.Interop.D3DImage.PixelWidth" /><paramref name="dirtyRect.Height" /> &lt; 0 或 <paramref name="dirtyRect.Height" /> &gt; <see cref="P:System.Windows.Interop.D3DImage.PixelHeight" /></exception>
    </member>
    <member name="M:System.Windows.Interop.D3DImage.Clone"></member>
    <member name="M:System.Windows.Interop.D3DImage.CloneCore(System.Windows.Freezable)">
      <param name="sourceFreezable">
要克隆的对象。
                </param>
    </member>
    <member name="M:System.Windows.Interop.D3DImage.CloneCurrentValue"></member>
    <member name="M:System.Windows.Interop.D3DImage.CloneCurrentValueCore(System.Windows.Freezable)">
      <param name="sourceFreezable">
要克隆的 <see cref="T:System.Windows.Freezable" />。
                </param>
    </member>
    <member name="M:System.Windows.Interop.D3DImage.CopyBackBuffer">
      <summary>
                    创建 <see cref="T:System.Windows.Interop.D3DImage" /> 的软件副本。
                </summary>
      <returns>
                    一个 <see cref="T:System.Windows.Media.Imaging.BitmapSource" />，它是后台缓冲区当前状态的软件副本；否则，如果无法读取后台缓冲区，则为 null。
                </returns>
    </member>
    <member name="M:System.Windows.Interop.D3DImage.CreateInstanceCore">
      <summary>
在派生类中实现时，创建 <see cref="T:System.Windows.Interop.D3DImage" /> 派生类的新实例。
                </summary>
      <returns>
新实例。
                </returns>
    </member>
    <member name="M:System.Windows.Interop.D3DImage.Finalize">
      <summary>
                    在通过垃圾回收将 <see cref="T:System.Windows.Interop.D3DImage" /> 回收之前，释放资源并执行其他清理操作。
                </summary>
    </member>
    <member name="M:System.Windows.Interop.D3DImage.FreezeCore(System.Boolean)">
      <summary>
                    使 <see cref="T:System.Windows.Interop.D3DImage" /> 成为不可修改的，或确定是否可使其成为不可修改的。
                </summary>
      <returns>
                    在所有情况下均为 false。
                </returns>
      <param name="isChecking">
                    没有作用。
                </param>
    </member>
    <member name="M:System.Windows.Interop.D3DImage.GetAsFrozenCore(System.Windows.Freezable)">
      <param name="sourceFreezable">
要复制的实例。
                </param>
    </member>
    <member name="M:System.Windows.Interop.D3DImage.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <param name="sourceFreezable">
要复制和冻结的 <see cref="T:System.Windows.Freezable" />。
                </param>
    </member>
    <member name="P:System.Windows.Interop.D3DImage.Height">
      <summary>
获取 <see cref="T:System.Windows.Interop.D3DImage" /> 的高度。
                </summary>
      <returns>
        <see cref="T:System.Windows.Interop.D3DImage" /> 的高度（采用度量单位）。度量单位为 1/96 英寸。
                </returns>
    </member>
    <member name="P:System.Windows.Interop.D3DImage.IsFrontBufferAvailable">
      <summary>
                    获取一个值，该值指示前台缓冲区是否存在。这是一个依赖项属性。
                </summary>
      <returns>
                    如果存在前台缓冲区，则为 true；否则为 false。
                </returns>
    </member>
    <member name="E:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged">
      <summary>
                    当 <see cref="P:System.Windows.Interop.D3DImage.IsFrontBufferAvailable" /> 属性更改时发生。
                </summary>
    </member>
    <member name="F:System.Windows.Interop.D3DImage.IsFrontBufferAvailableProperty">
      <summary>
标识 <see cref="P:System.Windows.Interop.D3DImage.IsFrontBufferAvailable" /> 依赖项属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Interop.D3DImage.IsFrontBufferAvailable" /> 依赖项属性的标识符。
                </returns>
    </member>
    <member name="M:System.Windows.Interop.D3DImage.Lock">
      <summary>
                    锁定 <see cref="T:System.Windows.Interop.D3DImage" /> 并允许对后台缓冲区进行操作。
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    锁计数等于 <see cref="F:System.UInt32.MaxValue" />。
                </exception>
    </member>
    <member name="P:System.Windows.Interop.D3DImage.Metadata">
      <summary>
                    获取与图像源关联的元数据。
                </summary>
      <returns>
                    在所有情况下均为 null。
                </returns>
    </member>
    <member name="P:System.Windows.Interop.D3DImage.PixelHeight">
      <summary>
                    获取 <see cref="T:System.Windows.Interop.D3DImage" /> 的高度（以像素为单位）。
                </summary>
      <returns>
        <see cref="T:System.Windows.Interop.D3DImage" /> 的高度（以像素为单位）。
                </returns>
    </member>
    <member name="P:System.Windows.Interop.D3DImage.PixelWidth">
      <summary>
                    获取 <see cref="T:System.Windows.Interop.D3DImage" /> 的宽度（以像素为单位）。
                </summary>
      <returns>
        <see cref="T:System.Windows.Interop.D3DImage" /> 的宽度（以像素为单位）。
                </returns>
    </member>
    <member name="M:System.Windows.Interop.D3DImage.SetBackBuffer(System.Windows.Interop.D3DResourceType,System.IntPtr)">
      <summary>
                    分配 Direct3D 图面作为后台缓冲区的源。
                </summary>
      <param name="backBufferType">
                    Direct3D 图面的类型。必须为有效的 <see cref="T:System.Windows.Interop.D3DResourceType" />。
                </param>
      <param name="backBuffer">
                    要作为后台缓冲区分配的 Direct3D 图面。
                </param>
      <exception cref="T:System.InvalidOperationException">
                    对 <see cref="M:System.Windows.Interop.D3DImage.Lock" /> 或 <see cref="M:System.Windows.Interop.D3DImage.TryLock(System.Windows.Duration)" /> 方法的调用未锁定 <see cref="T:System.Windows.Interop.D3DImage" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="backBufferType" /> 不是有效的 <see cref="T:System.Windows.Interop.D3DResourceType" />。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="backBuffer" /> 的创建参数不符合 <paramref name="backBufferType" /> 的要求
                
                    - 或 -
                <paramref name="backBuffer" /> 设备无效。
                </exception>
    </member>
    <member name="M:System.Windows.Interop.D3DImage.TryLock(System.Windows.Duration)">
      <summary>
                    尝试锁定 <see cref="T:System.Windows.Interop.D3DImage" /> 并等待指定的持续时间。
                </summary>
      <returns>
                    如果获得锁定，则为 true；否则为 false。
                </returns>
      <param name="timeout">
                    获得锁定之前要等待的持续时间。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 设置为 <see cref="P:System.Windows.Duration.Automatic" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    锁计数等于 <see cref="F:System.UInt32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Windows.Interop.D3DImage.Unlock">
      <summary>
                    使 <see cref="T:System.Windows.Interop.D3DImage" /> 的锁计数递减。
                </summary>
    </member>
    <member name="P:System.Windows.Interop.D3DImage.Width">
      <summary>
获取 <see cref="T:System.Windows.Interop.D3DImage" /> 的宽度。
                </summary>
      <returns>
        <see cref="T:System.Windows.Interop.D3DImage" /> 的宽度（采用度量单位）。度量单位为 1/96 英寸。
                </returns>
    </member>
    <member name="T:System.Windows.Interop.D3DResourceType">
      <summary>
                    Specifies the Direct3D surface types that are compatible with the <see cref="T:System.Windows.Interop.D3DImage" /> class.
                </summary>
    </member>
    <member name="F:System.Windows.Interop.D3DResourceType.IDirect3DSurface9">
      <summary>
                    Specifies an IDirect3DSurface9 surface. 
                </summary>
    </member>
    <member name="P:System.Windows.Interop.HwndTarget.RenderMode">
      <summary>获取或设置由此 <see cref="T:System.Windows.Interop.HwndTarget" /> 引用的窗口的呈现模式。</summary>
      <returns>
        <see cref="T:System.Windows.Interop.RenderMode" /> 值之一，用于指定当前的呈现模式。默认值为 <see cref="F:System.Windows.Interop.RenderMode.Default" />。</returns>
    </member>
    <member name="T:System.Windows.Interop.InteropBitmap">
      <summary>
        <see cref="T:System.Windows.Interop.InteropBitmap" /> 使开发人员能够提高在互操作方案中由 WPF 承载的非 WPFUI 的呈现性能。</summary>
    </member>
    <member name="M:System.Windows.Interop.InteropBitmap.Invalidate">
      <summary>强制呈现已承载的非 WPFUI。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Interop.InteropBitmap" /> 实例已冻结，并且无法写入其成员。</exception>
    </member>
    <member name="T:System.Windows.Interop.RenderMode">
      <summary>指定如何呈现目标窗口的内容。</summary>
    </member>
    <member name="F:System.Windows.Interop.RenderMode.Default">
      <summary>如果可能，WPF 呈现在硬件中实现；否则在软件中实现。</summary>
    </member>
    <member name="F:System.Windows.Interop.RenderMode.SoftwareOnly">
      <summary>WPF 呈现只能在软件中实现。</summary>
    </member>
    <member name="T:System.Windows.Markup.IAddChild">
      <summary>提供对允许有子元素或文本的元素进行分析的方法。</summary>
    </member>
    <member name="M:System.Windows.Markup.IAddChild.AddChild(System.Object)">
      <summary>添加子对象。</summary>
      <param name="value">要添加的子对象。</param>
    </member>
    <member name="M:System.Windows.Markup.IAddChild.AddText(System.String)">
      <summary>将节点的文本内容添加到对象。</summary>
      <param name="text">要添加到对象的文本。</param>
    </member>
    <member name="T:System.Windows.Markup.IUriContext">
      <summary>定义基统一资源标识符 (URI)。</summary>
    </member>
    <member name="P:System.Windows.Markup.IUriContext.BaseUri">
      <summary>获取或设置当前上下文的基统一资源标识符 (URI)。</summary>
      <returns>当前上下文的基 URI。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlLanguage">
      <summary>表示要在 XML 和可扩展应用程序标记语言 (XAML) 标记中使用的 RFC 3066 语言标记。</summary>
    </member>
    <member name="P:System.Windows.Markup.XmlLanguage.Empty">
      <summary>获取一个静态 <see cref="T:System.Windows.Markup.XmlLanguage" /> 实例，该实例相当于 <see cref="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" /> 在语言标记为空的属性字符串的情况下创建的实例。</summary>
      <returns>
        <see cref="T:System.Windows.Markup.XmlLanguage" /> 的空语言标记版本，在比较操作中使用。</returns>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguage.GetEquivalentCulture">
      <summary>当且仅当为该 <see cref="T:System.Windows.Markup.XmlLanguage" /> 的 <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> 值注册了此类 <see cref="T:System.Globalization.CultureInfo" /> 后，才会为此 <see cref="T:System.Windows.Markup.XmlLanguage" /> 返回合适的等效 <see cref="T:System.Globalization.CultureInfo" /></summary>
      <returns>一个 <see cref="T:System.Globalization.CultureInfo" />，它可用于接受该类型作为参数的本地化-全球化 API 调用。</returns>
      <exception cref="T:System.InvalidOperationException">根据对 <see cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" /> 的调用确定，提供的 <see cref="T:System.Windows.Markup.XmlLanguage" /> 不存在已注册的 <see cref="T:System.Globalization.CultureInfo" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)">
      <summary>根据按 RFC 3066 表示语言的字符串，返回一个 <see cref="T:System.Windows.Markup.XmlLanguage" /> 实例。</summary>
      <returns>一个新的 <see cref="T:System.Windows.Markup.XmlLanguage" />，使用提供的字符串作为其 <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> 值。</returns>
      <param name="ietfLanguageTag">一个 RFC 3066 语言字符串或空字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ietfLanguageTag" /> 参数不能为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ietfLanguageTag" /> 参数非空，但不符合 RFC 3066 中指定的语法。请参见备注。</exception>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguage.GetSpecificCulture">
      <summary>为此 <see cref="T:System.Windows.Markup.XmlLanguage" /> 返回最紧密相关的特定 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <returns>一个 <see cref="T:System.Globalization.CultureInfo" />，它可用于接受该类型作为参数的本地化-全球化 API 调用。</returns>
      <exception cref="T:System.InvalidOperationException">没有为当前的 <see cref="T:System.Windows.Markup.XmlLanguage" />  <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> 注册相关的特定 <see cref="T:System.Globalization.CultureInfo" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag">
      <summary>获取语言标记的字符串表示形式。</summary>
      <returns>语言标记的字符串表示形式。</returns>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguage.ToString">
      <summary>返回表示当前 <see cref="T:System.Windows.Markup.XmlLanguage" /> 的 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:System.String" />，表示当前的 <see cref="T:System.Windows.Markup.XmlLanguage" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlLanguageConverter">
      <summary>提供 <see cref="T:System.Windows.Markup.XmlLanguage" /> 类的类型转换。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguageConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.XmlLanguageConverter" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguageConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回此转换器能否将某个类型的对象转换为此转换器支持的 <see cref="T:System.Windows.Markup.XmlLanguage" /> 类型。</summary>
      <returns>
如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="typeDescriptorContext">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="sourceType">一个类型，表示要转换的类型。</param>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguageConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回此转换器是否可将该对象转换为指定的类型。</summary>
      <returns>
如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <param name="typeDescriptorContext">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="destinationType">一个类型，表示要转换为的类型。</param>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguageConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将提供的值转换为此转换器支持的 <see cref="T:System.Windows.Markup.XmlLanguage" /> 类型。</summary>
      <returns>一个对象，表示转换后的 value。</returns>
      <param name="typeDescriptorContext">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="cultureInfo">用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="source">要转换的对象。</param>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguageConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将提供的值对象转换为指定的类型。</summary>
      <returns>一个对象，表示转换后的 value。</returns>
      <param name="typeDescriptorContext">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，提供格式上下文。</param>
      <param name="cultureInfo">用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的对象。该对象的类型应为 <see cref="T:System.Windows.Markup.XmlLanguage" />。</param>
      <param name="destinationType">一个类型，表示要转换为的类型。</param>
    </member>
    <member name="T:System.Windows.Media.AlignmentX">
      <summary>描述如何在容器中水平放置内容。 </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentX.Left">
      <summary>内容与容器的左侧对齐。 </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentX.Center">
      <summary>内容与容器的中心对齐。 </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentX.Right">
      <summary>内容与容器的右侧对齐。 </summary>
    </member>
    <member name="T:System.Windows.Media.AlignmentY">
      <summary>描述如何在容器中垂直放置内容。 </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentY.Top">
      <summary>内容与容器的上边缘对齐。 </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentY.Center">
      <summary>内容与容器的中心对齐。</summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentY.Bottom">
      <summary>内容与容器的下边缘对齐。 </summary>
    </member>
    <member name="T:System.Windows.Media.ArcSegment">
      <summary> 表示两点之间的一条椭圆弧。</summary>
    </member>
    <member name="M:System.Windows.Media.ArcSegment.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Media.ArcSegment" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.ArcSegment.#ctor(System.Windows.Point,System.Windows.Size,System.Double,System.Boolean,System.Windows.Media.SweepDirection,System.Boolean)">
      <summary> 初始化 <see cref="T:System.Windows.Media.ArcSegment" /> 类的新实例。</summary>
      <param name="point">弧的目标点；弧的起点定义为 <see cref="T:System.Windows.Media.PathFigure" /> 的当前点，其中添加了 <see cref="T:System.Windows.Media.ArcSegment" />。</param>
      <param name="size">弧的 X 轴半径和 Y 轴半径。X 轴半径由 <see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Width" /> 属性指定；Y 轴半径由 <see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Height" /> 属性指定。</param>
      <param name="rotationAngle">椭圆的 X 轴旋转角度。</param>
      <param name="isLargeArc">弧是否应大于 180 度。</param>
      <param name="sweepDirection">设为 <see cref="F:System.Windows.Media.SweepDirection.Clockwise" /> 可以正角方向绘制弧；设为 <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" /> 可以负角方向绘制弧。</param>
      <param name="isStroked">如果要在 <see cref="T:System.Windows.Media.Pen" /> 用于呈现线段时绘制弧，则设为 true；否则设为 false。</param>
    </member>
    <member name="M:System.Windows.Media.ArcSegment.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.ArcSegment" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.ArcSegment.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.ArcSegment" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.IsLargeArc">
      <summary>获取或设置一个值，该值指示弧是否应大于 180 度。这是一个依赖项属性。</summary>
      <returns>
            如果弧应大于 180 度，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.IsLargeArcProperty">
      <summary>标识 <see cref="P:System.Windows.Media.ArcSegment.IsLargeArc" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.ArcSegment.IsLargeArc" /> 依赖项属性标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.Point">
      <summary> 获取或设置椭圆弧的终点。这是一个依赖项属性。</summary>
      <returns>弧的绘制终点。默认值为 (0,0)。</returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.PointProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.ArcSegment.Point" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.ArcSegment.Point" /> 依赖项属性标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.RotationAngle">
      <summary>获取或设置椭圆围绕 X 轴旋转的量（以度为单位）。 这是一个依赖项属性。</summary>
      <returns>椭圆围绕 X 轴旋转的量（以度为单位）。默认值为 0。</returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.RotationAngleProperty">
      <summary>标识 <see cref="P:System.Windows.Media.ArcSegment.RotationAngle" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.ArcSegment.RotationAngle" /> 依赖项属性标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.Size">
      <summary> 获取或设置弧的 X 轴半径和 Y 轴半径作为 <see cref="T:System.Windows.Size" /> 结构。这是一个依赖项属性。</summary>
      <returns>描述椭圆弧的 X 轴半径和 Y 轴半径的 <see cref="T:System.Windows.Size" /> 结构。<see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Width" /> 属性指定弧的 X 轴半径；它的 <see cref="P:System.Windows.Size.Height" /> 属性指定弧的 Y 轴半径。默认值为 0,0。</returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.SizeProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.ArcSegment.Size" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.ArcSegment.Size" /> 依赖项属性标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.SweepDirection">
      <summary> 获取或设置一个值，该值指定是以 <see cref="F:System.Windows.Media.SweepDirection.Clockwise" /> 方向还是以 <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" /> 方向绘制弧。 这是一个依赖项属性。</summary>
      <returns>一个指定弧的绘制方向的值。默认值为 <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" />。</returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.SweepDirectionProperty">
      <summary>标识 <see cref="P:System.Windows.Media.ArcSegment.SweepDirection" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.ArcSegment.SweepDirection" /> 依赖项属性标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.BezierSegment">
      <summary>表示在两个点之间绘制的一条三次贝塞尔曲线。</summary>
    </member>
    <member name="M:System.Windows.Media.BezierSegment.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.BezierSegment" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.BezierSegment.#ctor(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Boolean)">
      <summary>用指定的控制点、终点和描边选项初始化 <see cref="T:System.Windows.Media.BezierSegment" /> 类的一个新实例。</summary>
      <param name="point1">确定曲线开始部分的第一个控制点。</param>
      <param name="point2">确定曲线结束部分的第二个控制点。</param>
      <param name="point3">绘制曲线将通过的点。</param>
      <param name="isStroked">
                若要在 <see cref="T:System.Windows.Media.Pen" /> 用于呈现线段时使曲线描边，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Windows.Media.BezierSegment.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.BezierSegment" /> 的一个可修改复本，从而制作此对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.BezierSegment.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.BezierSegment" /> 对象的一个可修改复本，从而制作此对象当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.BezierSegment.Point1">
      <summary>获取或设置曲线的第一个控制点。这是一个依赖项属性。</summary>
      <returns>曲线的第一个控制点。</returns>
    </member>
    <member name="F:System.Windows.Media.BezierSegment.Point1Property">
      <summary>标识 <see cref="P:System.Windows.Media.BezierSegment.Point1" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.BezierSegment.Point1" /> 依赖项属性标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.BezierSegment.Point2">
      <summary>获取或设置曲线的第二个控制点。这是一个依赖项属性。</summary>
      <returns>曲线的第二个控制点。</returns>
    </member>
    <member name="F:System.Windows.Media.BezierSegment.Point2Property">
      <summary>标识 <see cref="P:System.Windows.Media.BezierSegment.Point2" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.BezierSegment.Point2" /> 依赖项属性标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.BezierSegment.Point3">
      <summary>获取或设置曲线的终点。这是一个依赖项属性。</summary>
      <returns>曲线的终点。</returns>
    </member>
    <member name="F:System.Windows.Media.BezierSegment.Point3Property">
      <summary>标识 <see cref="P:System.Windows.Media.BezierSegment.Point3" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.BezierSegment.Point3" /> 依赖项属性标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.BitmapScalingMode">
      <summary>
                    指定用于缩放位图图像的算法。
                </summary>
    </member>
    <member name="F:System.Windows.Media.BitmapScalingMode.Unspecified">
      <summary>
                    使用默认位图缩放模式，即 <see cref="F:System.Windows.Media.BitmapScalingMode.Fant" />。
                </summary>
    </member>
    <member name="F:System.Windows.Media.BitmapScalingMode.LowQuality">
      <summary>
                    使用双线性位图缩放，虽然速度比 <see cref="F:System.Windows.Media.BitmapScalingMode.HighQuality" /> 快，但输出质量较低。<see cref="F:System.Windows.Media.BitmapScalingMode.LowQuality" /> 模式与 <see cref="F:System.Windows.Media.BitmapScalingMode.Linear" /> 模式相同。
                </summary>
    </member>
    <member name="F:System.Windows.Media.BitmapScalingMode.HighQuality">
      <summary>
                    使用高质量位图缩放，虽然速度比 <see cref="F:System.Windows.Media.BitmapScalingMode.LowQuality" /> 模式慢，但输出质量更高。<see cref="F:System.Windows.Media.BitmapScalingMode.HighQuality" /> 模式与 <see cref="F:System.Windows.Media.BitmapScalingMode.Fant" /> 模式相同。
                </summary>
    </member>
    <member name="F:System.Windows.Media.BitmapScalingMode.Linear">
      <summary>
                    使用线性位图缩放，虽然速度比 <see cref="F:System.Windows.Media.BitmapScalingMode.HighQuality" /> 模式快，但输出质量较低。
                </summary>
    </member>
    <member name="F:System.Windows.Media.BitmapScalingMode.Fant">
      <summary>
                    使用超高质量 Fant 位图缩放，虽然速度比所有其他位图缩放模式都慢，但输出质量更高。
                </summary>
    </member>
    <member name="F:System.Windows.Media.BitmapScalingMode.NearestNeighbor">
      <summary>
                    使用最近邻域位图缩放，当使用软件光栅器时，该缩放提供优于 <see cref="F:System.Windows.Media.BitmapScalingMode.LowQuality" /> 模式的性能。该模式常用于放大位图。
                </summary>
    </member>
    <member name="T:System.Windows.Media.Brush">
      <summary>定义用于绘制图形对象的对象。从 <see cref="T:System.Windows.Media.Brush" /> 派生的类描述了绘制区域的方式。</summary>
    </member>
    <member name="M:System.Windows.Media.Brush.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Media.Brush" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.Brush.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.Brush" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.Brush.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.Brush" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.Brush.Opacity">
      <summary> 获取或设置 <see cref="T:System.Windows.Media.Brush" /> 的不透明度。 </summary>
      <returns>
        <see cref="P:System.Windows.Media.Brush.Opacity" /> 属性的值以 0.0 和 1.0 之间的值表示。默认值为 1.0。</returns>
    </member>
    <member name="F:System.Windows.Media.Brush.OpacityProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.Brush.Opacity" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.Brush.Opacity" /> 依赖项属性标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.Brush.RelativeTransform">
      <summary>获取或设置要使用相对坐标应用于画笔的变换。</summary>
      <returns>使用相对坐标应用于画笔的变换。 默认值为 <see cref="P:System.Windows.Media.Transform.Identity" /> 变换。</returns>
    </member>
    <member name="F:System.Windows.Media.Brush.RelativeTransformProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.Brush.RelativeTransform" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.Brush.RelativeTransform" /> 依赖项属性标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.Brush.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="format"></param>
      <param name="provider"></param>
    </member>
    <member name="M:System.Windows.Media.Brush.ToString">
      <summary> 返回此 <see cref="T:System.Windows.Media.Brush" /> 的字符串表示形式。             </summary>
      <returns>此对象的字符串表示形式。</returns>
    </member>
    <member name="M:System.Windows.Media.Brush.ToString(System.IFormatProvider)">
      <summary> 基于指定的区域性特定格式设置信息创建此对象的字符串表示形式。</summary>
      <returns>此对象的字符串表示形式。</returns>
      <param name="provider">区域性特定的格式设置信息；如果使用当前区域性的默认格式设置，则为 null。</param>
    </member>
    <member name="P:System.Windows.Media.Brush.Transform">
      <summary> 获取或设置应用于画笔的变换。此变换在完成画笔输出的映射和定位后应用。</summary>
      <returns>要应用于画笔的变换。默认值为 <see cref="P:System.Windows.Media.Transform.Identity" /> 变换。</returns>
    </member>
    <member name="F:System.Windows.Media.Brush.TransformProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.Brush.Transform" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.Brush.Transform" /> 依赖项属性标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.BrushConverter">
      <summary> 用于将 <see cref="T:System.Windows.Media.Brush" /> 对象转换为其他对象类型或从其他对象类型转换为该对象。</summary>
    </member>
    <member name="M:System.Windows.Media.BrushConverter.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Media.BrushConverter" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.BrushConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> 确定此类是否可以将给定类型的对象转换为 <see cref="T:System.Windows.Media.Brush" /> 对象。</summary>
      <returns>如果可以转换（对象为字符串类型），则返回 true；否则返回 false。</returns>
      <param name="context">转换上下文。</param>
      <param name="sourceType">要转换的类型。</param>
    </member>
    <member name="M:System.Windows.Media.BrushConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> 确定此类是否可以将给定类型的对象转换为指定的目标类型。</summary>
      <returns>如果可以转换，则返回 true；否则返回 false。</returns>
      <param name="context">转换上下文。</param>
      <param name="destinationType">目标类型。</param>
    </member>
    <member name="M:System.Windows.Media.BrushConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary> 将给定类型的对象转换为 <see cref="T:System.Windows.Media.Brush" /> 对象。</summary>
      <returns>如果成功，则返回一个新的 <see cref="T:System.Windows.Media.Brush" /> 对象；否则返回 NULL。</returns>
      <param name="context">转换上下文。</param>
      <param name="culture">应用于转换的区域性信息。</param>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> 为 NULL 或无法转换为 <see cref="T:System.Windows.Media.Brush" />。</exception>
    </member>
    <member name="M:System.Windows.Media.BrushConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary> 使用指定的上下文和区域性信息将 <see cref="T:System.Windows.Media.Brush" /> 对象转换为指定类型。</summary>
      <returns>一个对象，表示转换后的 value。</returns>
      <param name="context">转换上下文。</param>
      <param name="culture">当前区域性信息。</param>
      <param name="value">要转换的 <see cref="T:System.Windows.Media.Brush" />。</param>
      <param name="destinationType">要将 value 对象转换为的目标类型。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> 为 NULL，或者它不是 <see cref="T:System.Windows.Media.Brush" />- 或 -<paramref name="destinationType" /> 不是有效的目标类型。</exception>
    </member>
    <member name="T:System.Windows.Media.Brushes">
      <summary>实现一组预定义的 <see cref="T:System.Windows.Media.SolidColorBrush" /> 对象。</summary>
    </member>
    <member name="P:System.Windows.Media.Brushes.AliceBlue">
      <summary>获取具有十六进制值 #FFF0F8FF 的纯色填充颜色。</summary>
      <returns>
        <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> 为 #FFF0F8FF 的冻结 <see cref="T:System.Windows.Media.SolidColorBrush" />。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.AntiqueWhite">
      <summary>获取具有十六进制值 #FFFAEBD7 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Aqua">
      <summary>获取具有十六进制值 #FF00FFFF 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Aquamarine">
      <summary>获取具有十六进制值 #FF7FFFD4 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Azure">
      <summary>获取具有十六进制值 #FFF0FFFF 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Beige">
      <summary>获取具有十六进制值 #FFF5F5DC 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Bisque">
      <summary>获取具有十六进制值 #FFFFE4C4 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Black">
      <summary>获取具有十六进制值 #FF000000 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.BlanchedAlmond">
      <summary> 获取具有十六进制值 #FFFFEBCD 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Blue">
      <summary>获取具有十六进制值 #FF0000FF 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.BlueViolet">
      <summary>获取具有十六进制值 #FF8A2BE2 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Brown">
      <summary>获取具有十六进制值 #FFA52A2A 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.BurlyWood">
      <summary>获取具有十六进制值 #FFDEB887 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.CadetBlue">
      <summary>获取具有十六进制值 #FF5F9EA0 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Chartreuse">
      <summary>获取具有十六进制值 #FF7FFF00 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Chocolate">
      <summary>获取具有十六进制值 #FFD2691E 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Coral">
      <summary>获取具有十六进制值 #FFFF7F50 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.CornflowerBlue">
      <summary>获取具有十六进制值 #FF6495ED 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Cornsilk">
      <summary>获取具有十六进制值 #FFFFF8DC 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Crimson">
      <summary>获取具有十六进制值 #FFDC143C 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Cyan">
      <summary>获取具有十六进制值 #FF00FFFF 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DarkBlue">
      <summary>获取具有十六进制值 #FF00008B 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DarkCyan">
      <summary>获取具有十六进制值 #FF008B8B 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DarkGoldenrod">
      <summary>获取具有十六进制值 #FFB8860B 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DarkGray">
      <summary>获取具有十六进制值 #FFA9A9A9 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DarkGreen">
      <summary>获取具有十六进制值 #FF006400 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DarkKhaki">
      <summary>获取具有十六进制值 #FFBDB76B 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DarkMagenta">
      <summary>获取具有十六进制值 #FF8B008B 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DarkOliveGreen">
      <summary>获取具有十六进制值 #FF556B2F 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DarkOrange">
      <summary>获取具有十六进制值 #FFFF8C00 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DarkOrchid">
      <summary>获取具有十六进制值 #FF9932CC 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DarkRed">
      <summary>获取具有十六进制值 #FF8B0000 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DarkSalmon">
      <summary>获取具有十六进制值 #FFE9967A 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DarkSeaGreen">
      <summary>获取具有十六进制值 #FF8FBC8F 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DarkSlateBlue">
      <summary>获取具有十六进制值 #FF483D8B 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DarkSlateGray">
      <summary>获取具有十六进制值 #FF2F4F4F 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DarkTurquoise">
      <summary>获取具有十六进制值 #FF00CED1 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DarkViolet">
      <summary>获取具有十六进制值 #FF9400D3 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DeepPink">
      <summary>获取具有十六进制值 #FFFF1493 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DeepSkyBlue">
      <summary>获取具有十六进制值 #FF00BFFF 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DimGray">
      <summary>获取具有十六进制值 #FF696969 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.DodgerBlue">
      <summary>获取具有十六进制值 #FF1E90FF 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Firebrick">
      <summary>获取具有十六进制值 #FFB22222 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.FloralWhite">
      <summary>获取具有十六进制值 #FFFFFAF0 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.ForestGreen">
      <summary>获取具有十六进制值 #FF228B22 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Fuchsia">
      <summary>获取具有十六进制值 #FFFF00FF 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Gainsboro">
      <summary>获取具有十六进制值 #FFDCDCDC 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.GhostWhite">
      <summary>获取具有十六进制值 #FFF8F8FF 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Gold">
      <summary>获取具有十六进制值 #FFFFD700 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Goldenrod">
      <summary>获取具有十六进制值 #FFDAA520 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Gray">
      <summary>获取具有十六进制值 #FF808080 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Green">
      <summary>获取具有十六进制值 #FF008000 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.GreenYellow">
      <summary>获取具有十六进制值 #FFADFF2F 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Honeydew">
      <summary>获取具有十六进制值 #FFF0FFF0 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.HotPink">
      <summary>获取具有十六进制值 #FFFF69B4 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.IndianRed">
      <summary>获取具有十六进制值 #FFCD5C5C 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Indigo">
      <summary>获取具有十六进制值 #FF4B0082 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Ivory">
      <summary>获取具有十六进制值 #FFFFFFF0 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Khaki">
      <summary>获取具有十六进制值 #FFF0E68C 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Lavender">
      <summary>获取具有十六进制值 #FFE6E6FA 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.LavenderBlush">
      <summary>获取具有十六进制值 #FFFFF0F5 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.LawnGreen">
      <summary>获取具有十六进制值 #FF7CFC00 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.LemonChiffon">
      <summary>获取具有十六进制值 #FFFFFACD 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.LightBlue">
      <summary>获取具有十六进制值 #FFADD8E6 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.LightCoral">
      <summary>获取具有十六进制值 #FFF08080 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.LightCyan">
      <summary>获取具有十六进制值 #FFE0FFFF 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.LightGoldenrodYellow">
      <summary>获取具有十六进制值 #FFFAFAD2 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.LightGray">
      <summary>获取具有十六进制值 #FFD3D3D3 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.LightGreen">
      <summary>获取具有十六进制值 #FF90EE90 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.LightPink">
      <summary>获取具有十六进制值 #FFFFB6C1 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.LightSalmon">
      <summary>获取具有十六进制值 #FFFFA07A 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.LightSeaGreen">
      <summary>获取具有十六进制值 #FF20B2AA 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.LightSkyBlue">
      <summary>获取具有十六进制值 #FF87CEFA 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.LightSlateGray">
      <summary>获取具有十六进制值 #FF778899 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.LightSteelBlue">
      <summary>获取具有十六进制值 #FFB0C4DE 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.LightYellow">
      <summary>获取具有十六进制值 #FFFFFFE0 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Lime">
      <summary>获取具有十六进制值 #FF00FF00 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.LimeGreen">
      <summary>获取具有十六进制值 #FF32CD32 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Linen">
      <summary>获取具有十六进制值 #FFFAF0E6 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Magenta">
      <summary>获取具有十六进制值 #FFFF00FF 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Maroon">
      <summary>获取具有十六进制值 #FF800000 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.MediumAquamarine">
      <summary>获取具有十六进制值 #FF66CDAA 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.MediumBlue">
      <summary>获取具有十六进制值 #FF0000CD 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.MediumOrchid">
      <summary>获取具有十六进制值 #FFBA55D3 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.MediumPurple">
      <summary>获取具有十六进制值 #FF9370DB 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.MediumSeaGreen">
      <summary>获取具有十六进制值 #FF3CB371 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.MediumSlateBlue">
      <summary>获取具有十六进制值 #FF7B68EE 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.MediumSpringGreen">
      <summary>获取具有十六进制值 #FF00FA9A 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.MediumTurquoise">
      <summary>获取具有十六进制值 #FF48D1CC 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.MediumVioletRed">
      <summary>获取具有十六进制值 #FFC71585 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.MidnightBlue">
      <summary>获取具有十六进制值 #FF191970 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.MintCream">
      <summary>获取具有十六进制值 #FFF5FFFA 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.MistyRose">
      <summary>获取具有十六进制值 #FFFFE4E1 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Moccasin">
      <summary>获取具有十六进制值 #FFFFE4B5 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.NavajoWhite">
      <summary>获取具有十六进制值 #FFFFDEAD 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Navy">
      <summary>获取具有十六进制值 #FF000080 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.OldLace">
      <summary>获取具有十六进制值 #FFFDF5E6 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Olive">
      <summary>获取具有十六进制值 #FF808000 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.OliveDrab">
      <summary>获取具有十六进制值 #FF6B8E23 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Orange">
      <summary>获取具有十六进制值 #FFFFA500 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.OrangeRed">
      <summary>获取具有十六进制值 #FFFF4500 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Orchid">
      <summary>获取具有十六进制值 #FFDA70D6 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.PaleGoldenrod">
      <summary>获取具有十六进制值 #FFEEE8AA 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.PaleGreen">
      <summary>获取具有十六进制值 #FF98FB98 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.PaleTurquoise">
      <summary>获取具有十六进制值 #FFAFEEEE 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.PaleVioletRed">
      <summary>获取具有十六进制值 #FFDB7093 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.PapayaWhip">
      <summary>获取具有十六进制值 #FFFFEFD5 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.PeachPuff">
      <summary>获取具有十六进制值 #FFFFDAB9 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Peru">
      <summary>获取具有十六进制值 #FFCD853F 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Pink">
      <summary>获取具有十六进制值 #FFFFC0CB 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Plum">
      <summary>获取具有十六进制值 #FFDDA0DD 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.PowderBlue">
      <summary>获取具有十六进制值 #FFB0E0E6 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Purple">
      <summary>获取具有十六进制值 #FF800080 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Red">
      <summary>获取具有十六进制值 #FFFF0000 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.RosyBrown">
      <summary>获取具有十六进制值 #FFBC8F8F 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.RoyalBlue">
      <summary>获取具有十六进制值 #FF4169E1 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.SaddleBrown">
      <summary>获取具有十六进制值 #FF8B4513 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Salmon">
      <summary>获取具有十六进制值 #FFFA8072 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.SandyBrown">
      <summary>获取具有十六进制值 #FFF4A460 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.SeaGreen">
      <summary>获取具有十六进制值 #FF2E8B57 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.SeaShell">
      <summary>获取具有十六进制值 #FFFFF5EE 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Sienna">
      <summary>获取具有十六进制值 #FFA0522D 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Silver">
      <summary>获取具有十六进制值 #FFC0C0C0 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.SkyBlue">
      <summary>获取具有十六进制值 #FF87CEEB 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.SlateBlue">
      <summary>获取具有十六进制值 #FF6A5ACD 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.SlateGray">
      <summary>获取具有十六进制值 #FF708090 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Snow">
      <summary>获取具有十六进制值 #FFFFFAFA 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.SpringGreen">
      <summary>获取具有十六进制值 #FF00FF7F 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.SteelBlue">
      <summary>获取具有十六进制值 #FF4682B4 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Tan">
      <summary>获取具有十六进制值 #FFD2B48C 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Teal">
      <summary>获取具有十六进制值 #FF008080 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Thistle">
      <summary>获取具有十六进制值 #FFD8BFD8 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Tomato">
      <summary>获取具有十六进制值 #FFFF6347 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Transparent">
      <summary>获取具有十六进制值 #00FFFFFF 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Turquoise">
      <summary>获取具有十六进制值 #FF40E0D0 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Violet">
      <summary>获取具有十六进制值 #FFEE82EE 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Wheat">
      <summary>获取具有十六进制值 #FFF5DEB3 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.White">
      <summary>获取具有十六进制值 #FFFFFFFF 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.WhiteSmoke">
      <summary>获取具有十六进制值 #FFF5F5F5 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.Yellow">
      <summary>获取具有十六进制值 #FFFFFF00 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Brushes.YellowGreen">
      <summary>获取具有十六进制值 #FF9ACD32 的纯色填充颜色。</summary>
      <returns>纯色填充颜色。</returns>
    </member>
    <member name="T:System.Windows.Media.BrushMappingMode">
      <summary>指定 <see cref="T:System.Windows.Media.Brush" /> 使用的坐标系。</summary>
    </member>
    <member name="F:System.Windows.Media.BrushMappingMode.Absolute">
      <summary>坐标系与边界框无关。直接在本地空间中解释值。 </summary>
    </member>
    <member name="F:System.Windows.Media.BrushMappingMode.RelativeToBoundingBox">
      <summary>坐标系与边界框相关：0 指示边界框的 0%，1 指示边界框的 100%。例如，(0.5, 0.5) 描述位于边界框中间的一个点，(1, 1) 描述位于边界框右下方的点。</summary>
    </member>
    <member name="T:System.Windows.Media.CachingHint">
      <summary>指定是否缓存图块画笔对象。</summary>
    </member>
    <member name="F:System.Windows.Media.CachingHint.Unspecified">
      <summary>未指定任何缓存提示。</summary>
    </member>
    <member name="F:System.Windows.Media.CachingHint.Cache">
      <summary>使用 <see cref="T:System.Windows.Media.RenderOptions" /> 设置指定的缓存提示将图块画笔对象缓存在离屏缓冲区中。</summary>
    </member>
    <member name="T:System.Windows.Media.CharacterMetrics">
      <summary>表示用于对设备字体字符进行布局的规格。</summary>
    </member>
    <member name="M:System.Windows.Media.CharacterMetrics.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.CharacterMetrics" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.CharacterMetrics.#ctor(System.String)">
      <summary>通过将规格指定为字符串来初始化 <see cref="T:System.Windows.Media.CharacterMetrics" /> 类的新实例。</summary>
      <param name="metrics">一个表示字符规格的用逗号分隔的 <see cref="T:System.String" /> 值。</param>
    </member>
    <member name="P:System.Windows.Media.CharacterMetrics.Baseline">
      <summary>获取字符的基线值。</summary>
      <returns>一个表示基线的 <see cref="T:System.Double" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Media.CharacterMetrics.BlackBoxHeight">
      <summary>获取字符的黑盒高度。</summary>
      <returns>一个表示黑盒高度的 <see cref="T:System.Double" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Media.CharacterMetrics.BlackBoxWidth">
      <summary>获取字符的黑盒宽度。</summary>
      <returns>一个表示黑盒宽度的 <see cref="T:System.Double" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Media.CharacterMetrics.BottomSideBearing">
      <summary>获取建议的黑盒下面的空白。</summary>
      <returns>一个 <see cref="T:System.Double" /> 类型的值。</returns>
    </member>
    <member name="M:System.Windows.Media.CharacterMetrics.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Windows.Media.CharacterMetrics" /> 对象是否等于当前的 <see cref="T:System.Windows.Media.CharacterMetrics" /> 对象。</summary>
      <returns>
            如果对象相等，则为 true；否则为 false。</returns>
      <param name="obj">要与当前 <see cref="T:System.Windows.Media.CharacterMetrics" /> 对象进行比较的 <see cref="T:System.Windows.Media.CharacterMetrics" /> 对象。</param>
    </member>
    <member name="M:System.Windows.Media.CharacterMetrics.GetHashCode">
      <summary>利用 <see cref="T:System.Windows.Media.CharacterMetrics" /> 对象的规格值创建一个哈希代码。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Media.CharacterMetrics.LeftSideBearing">
      <summary>获取建议的黑盒左边的空白。</summary>
      <returns>一个 <see cref="T:System.Double" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Media.CharacterMetrics.Metrics">
      <summary>获取或设置表示规格值的用逗号分隔的字符串。</summary>
      <returns>一个 <see cref="T:System.String" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Media.CharacterMetrics.RightSideBearing">
      <summary>获取建议的黑盒右边的空白。</summary>
      <returns>一个 <see cref="T:System.Double" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Media.CharacterMetrics.TopSideBearing">
      <summary>获取建议的黑盒上面的空白。</summary>
      <returns>一个 <see cref="T:System.Double" /> 类型的值。</returns>
    </member>
    <member name="T:System.Windows.Media.CharacterMetricsDictionary">
      <summary>表示通过 Unicode 标量值编制索引的设备字体的 <see cref="T:System.Windows.Media.CharacterMetrics" /> 对象字典。</summary>
    </member>
    <member name="M:System.Windows.Media.CharacterMetricsDictionary.Add(System.Collections.Generic.KeyValuePair{System.Int32,System.Windows.Media.CharacterMetrics})">
      <summary>使用键/值对向集合中添加字符代码和关联的 <see cref="T:System.Windows.Media.CharacterMetrics" /> 值。</summary>
      <param name="item">表示字符代码和关联的 <see cref="T:System.Windows.Media.CharacterMetrics" /> 值的键/值对。</param>
    </member>
    <member name="M:System.Windows.Media.CharacterMetricsDictionary.Add(System.Int32,System.Windows.Media.CharacterMetrics)">
      <summary>向集合中添加字符代码和关联的 <see cref="T:System.Windows.Media.CharacterMetrics" /> 值。</summary>
      <param name="key">一个表示字符代码的 <see cref="T:System.Int32" /> 类型的值。</param>
      <param name="value">一个 <see cref="T:System.Windows.Media.CharacterMetrics" /> 类型的值。</param>
    </member>
    <member name="M:System.Windows.Media.CharacterMetricsDictionary.Clear">
      <summary>移除集合中的所有元素。</summary>
    </member>
    <member name="M:System.Windows.Media.CharacterMetricsDictionary.Contains(System.Collections.Generic.KeyValuePair{System.Int32,System.Windows.Media.CharacterMetrics})">
      <summary>确定集合是否包含指定的键/值对。</summary>
      <returns>
            如果字典包含 <paramref name="item" /> 中的字符代码所表示的 <see cref="T:System.Windows.Media.CharacterMetrics" />，则为 true；否则为 false。</returns>
      <param name="item">表示字符代码和关联的 <see cref="T:System.Windows.Media.CharacterMetrics" /> 值的键/值对。</param>
    </member>
    <member name="M:System.Windows.Media.CharacterMetricsDictionary.ContainsKey(System.Int32)">
      <summary>确定集合是否包含指定的字符代码。</summary>
      <returns>
            如果字典包含 <paramref name="key" />，则为 true；否则为 false。</returns>
      <param name="key">一个表示字符代码的 <see cref="T:System.Int32" /> 类型的值。</param>
    </member>
    <member name="M:System.Windows.Media.CharacterMetricsDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.Int32,System.Windows.Media.CharacterMetrics}[],System.Int32)">
      <summary>从特定数组索引开始，将集合中的项复制到数组中。</summary>
      <param name="array">一维数组，它是从 <see cref="T:System.Windows.Media.CharacterMetricsDictionary" /> 复制的元素的目标。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。</param>
    </member>
    <member name="P:System.Windows.Media.CharacterMetricsDictionary.Count">
      <summary>获取集合中的元素数。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 类型的值。</returns>
    </member>
    <member name="M:System.Windows.Media.CharacterMetricsDictionary.GetEnumerator">
      <summary>返回一个循环访问集合的枚举数。</summary>
      <returns>一个循环访问集合的枚举数。</returns>
    </member>
    <member name="P:System.Windows.Media.CharacterMetricsDictionary.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Windows.Media.CharacterMetricsDictionary" /> 是否为只读。</summary>
      <returns>
            如果该字典为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.CharacterMetricsDictionary.Item(System.Int32)">
      <summary>获取或设置与指定键匹配的集合中的项的值。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.CharacterMetrics" /> 类型的值。</returns>
      <param name="key">一个 <see cref="T:System.Int32" /> 类型的值。</param>
    </member>
    <member name="P:System.Windows.Media.CharacterMetricsDictionary.Keys">
      <summary>获取 <see cref="T:System.Windows.Media.CharacterMetricsDictionary" /> 中的字符代码的集合。</summary>
      <returns>
        <see cref="T:System.Int32" /> 类型的键的集合。</returns>
    </member>
    <member name="M:System.Windows.Media.CharacterMetricsDictionary.Remove(System.Collections.Generic.KeyValuePair{System.Int32,System.Windows.Media.CharacterMetrics})">
      <summary>根据指定的键/值对从 <see cref="T:System.Windows.Media.CharacterMetricsDictionary" /> 中移除元素。</summary>
      <returns>
            如果成功删除 <see cref="T:System.Windows.Media.CharacterMetrics" /> 项，则为 true；否则为 false。</returns>
      <param name="item">表示字符代码和关联的 <see cref="T:System.Windows.Media.CharacterMetrics" /> 值的键/值对。</param>
    </member>
    <member name="M:System.Windows.Media.CharacterMetricsDictionary.Remove(System.Int32)">
      <summary>根据指定的字符代码从 <see cref="T:System.Windows.Media.CharacterMetricsDictionary" /> 中移除该元素。</summary>
      <returns>
            如果成功删除 <see cref="T:System.Windows.Media.CharacterMetrics" /> 项，则为 true；否则为 false。</returns>
      <param name="key">一个表示字符代码的 <see cref="T:System.Int32" /> 类型的值。</param>
    </member>
    <member name="M:System.Windows.Media.CharacterMetricsDictionary.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />。</summary>
      <param name="array">从零开始的 <see cref="T:System.Array" />，它接收从 <see cref="T:System.Windows.Media.CharacterMetricsDictionary" /> 复制来的项。</param>
      <param name="index">指定的 <see cref="T:System.Array" /> 中接收复制内容的第一个位置。</param>
    </member>
    <member name="P:System.Windows.Media.CharacterMetricsDictionary.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>
            如果对 <see cref="T:System.Windows.Media.CharacterMetricsDictionary" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.CharacterMetricsDictionary.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>可用于同步对 <see cref="T:System.Windows.Media.CharacterMetricsDictionary" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Windows.Media.CharacterMetricsDictionary.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IDictionary.Add(System.Object)" />。</summary>
      <param name="key"></param>
      <param name="value">要添加到 <see cref="T:System.Windows.Media.CharacterMetricsDictionary" /> 的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Windows.Media.CharacterMetricsDictionary.System#Collections#IDictionary#Contains(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IDictionary.Contains(System.Object)" />。</summary>
      <returns>
            如果在 <see cref="T:System.Windows.Media.CharacterMetricsDictionary" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="key"></param>
    </member>
    <member name="M:System.Windows.Media.CharacterMetricsDictionary.System#Collections#IDictionary#GetEnumerator">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IDictionary.GetEnumerator" />。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections." /><see cref="IEnumerator" /> 对象。</returns>
    </member>
    <member name="P:System.Windows.Media.CharacterMetricsDictionary.System#Collections#IDictionary#IsFixedSize">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IDictionary.IsFixedSize" />。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Media.CharacterMetricsDictionary" /> 具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.CharacterMetricsDictionary.System#Collections#IDictionary#Item(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IDictionary.Item(System.Object)" />。</summary>
      <returns>带有指定键的元素。</returns>
      <param name="key">要获取或设置的元素的键。</param>
    </member>
    <member name="P:System.Windows.Media.CharacterMetricsDictionary.System#Collections#IDictionary#Keys">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IDictionary.Keys" />。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.IDictionary" /> 对象的键。</returns>
    </member>
    <member name="M:System.Windows.Media.CharacterMetricsDictionary.System#Collections#IDictionary#Remove(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IDictionary.Remove(System.Object)" />。</summary>
      <param name="key"></param>
    </member>
    <member name="P:System.Windows.Media.CharacterMetricsDictionary.System#Collections#IDictionary#Values">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IDictionary.Values" />。</summary>
      <returns>包含 <see cref="T:System.Collections.IDictionary" /> 对象中的值的 <see cref="T:System.Collections.ICollection" /> 对象。</returns>
    </member>
    <member name="M:System.Windows.Media.CharacterMetricsDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections." /><see cref="IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Windows.Media.CharacterMetricsDictionary.TryGetValue(System.Int32,System.Windows.Media.CharacterMetrics@)">
      <summary>针对指定的字符代码值检索字典中的 <see cref="T:System.Windows.Media.CharacterMetrics" /> 值。</summary>
      <returns>
            如果字典包含 <paramref name="key" /> 的项，则为 true；否则为 false。</returns>
      <param name="key">一个 <see cref="T:System.Int32" /> 类型的值。</param>
      <param name="value">一个 <see cref="T:System.Windows.Media.CharacterMetrics" /> 类型的值。</param>
    </member>
    <member name="P:System.Windows.Media.CharacterMetricsDictionary.Values">
      <summary>获取 <see cref="T:System.Windows.Media.CharacterMetricsDictionary" /> 中 <see cref="T:System.Windows.Media.CharacterMetrics" /> 值的集合。</summary>
      <returns>
        <see cref="T:System.Windows.Media.CharacterMetrics" /> 类型的集合。</returns>
    </member>
    <member name="T:System.Windows.Media.Color">
      <summary>用 Alpha 通道、红色通道、绿色通道和蓝色通道描述颜色。</summary>
    </member>
    <member name="P:System.Windows.Media.Color.A">
      <summary>获取或设置颜色的 sRGB Alpha 通道值。</summary>
      <returns>颜色的 sRGB Alpha 通道值。</returns>
    </member>
    <member name="M:System.Windows.Media.Color.Add(System.Windows.Media.Color,System.Windows.Media.Color)">
      <summary>将两个 <see cref="T:System.Windows.Media.Color" /> 结构相加。</summary>
      <returns>一个新的 <see cref="T:System.Windows.Media.Color" /> 结构，其颜色值是加法运算的结果。</returns>
      <param name="color1">要相加的第一个 <see cref="T:System.Windows.Media.Color" /> 结构。</param>
      <param name="color2">要相加的第二个 <see cref="T:System.Windows.Media.Color" /> 结构。</param>
    </member>
    <member name="M:System.Windows.Media.Color.AreClose(System.Windows.Media.Color,System.Windows.Media.Color)">
      <summary>比较两个 <see cref="T:System.Windows.Media.Color" /> 结构是否模糊相等。</summary>
      <returns>
如果 <paramref name="color1" /> 与 <paramref name="color2" /> 基本上相同，则为 true；否则为 false。</returns>
      <param name="color1">要比较的第一种颜色。</param>
      <param name="color2">要比较的第二种颜色。</param>
    </member>
    <member name="P:System.Windows.Media.Color.B">
      <summary>获取或设置颜色的 sRGB 蓝色通道值。</summary>
      <returns>当前的 <see cref="T:System.Windows.Media.Color" /> 结构的 sRGB 蓝色通道值。</returns>
    </member>
    <member name="M:System.Windows.Media.Color.Clamp">
      <summary>如果颜色的 ScRGB 通道不在 0 到 1 的范围内，请将它们设置在此范围内。</summary>
    </member>
    <member name="P:System.Windows.Media.Color.ColorContext">
      <summary>获取颜色的 国际色彩联合会 (ICC) 或 图像颜色管理 (ICM) 颜色配置文件。</summary>
      <returns>颜色的 国际色彩联合会 (ICC) 或 图像颜色管理 (ICM) 颜色配置文件。</returns>
    </member>
    <member name="M:System.Windows.Media.Color.Equals(System.Object)">
      <summary>测试指定的对象是否为 <see cref="T:System.Windows.Media.Color" /> 结构并等同于当前颜色。</summary>
      <returns>
如果指定的对象是 <see cref="T:System.Windows.Media.Color" /> 结构并与当前的 <see cref="T:System.Windows.Media.Color" /> 结构相同，则为 true；否则为 false。</returns>
      <param name="o">与当前的 <see cref="T:System.Windows.Media.Color" /> 结构比较的对象。</param>
    </member>
    <member name="M:System.Windows.Media.Color.Equals(System.Windows.Media.Color)">
      <summary>测试指定的 <see cref="T:System.Windows.Media.Color" /> 结构是否与当前颜色相同。</summary>
      <returns>
如果指定的 <see cref="T:System.Windows.Media.Color" /> 结构与当前的 <see cref="T:System.Windows.Media.Color" /> 结构相同，则为 true；否则为 false。</returns>
      <param name="color">要与当前的 <see cref="T:System.Windows.Media.Color" /> 结构进行比较的 <see cref="T:System.Windows.Media.Color" /> 结构。</param>
    </member>
    <member name="M:System.Windows.Media.Color.Equals(System.Windows.Media.Color,System.Windows.Media.Color)">
      <summary>测试两个 <see cref="T:System.Windows.Media.Color" /> 结构是否相同。</summary>
      <returns>
如果 <paramref name="color1" /> 与 <paramref name="color2" /> 完全相同，则为 true；否则为 false。</returns>
      <param name="color1">要比较的第一个 <see cref="T:System.Windows.Media.Color" /> 结构。</param>
      <param name="color2">要比较的第二个 <see cref="T:System.Windows.Media.Color" /> 结构。</param>
    </member>
    <member name="M:System.Windows.Media.Color.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>使用指定的 sRGB Alpha 通道和颜色通道值创建一个新的 <see cref="T:System.Windows.Media.Color" /> 结构。</summary>
      <returns>具有指定值的 <see cref="T:System.Windows.Media.Color" /> 结构。</returns>
      <param name="a">新颜色的 Alpha 通道 <see cref="P:System.Windows.Media.Color.A" />。</param>
      <param name="r">新颜色的红色通道 <see cref="P:System.Windows.Media.Color.R" />。</param>
      <param name="g">新颜色的绿色通道 <see cref="P:System.Windows.Media.Color.G" />。</param>
      <param name="b">新颜色的蓝色通道 <see cref="P:System.Windows.Media.Color.B" />。</param>
    </member>
    <member name="M:System.Windows.Media.Color.FromAValues(System.Single,System.Single[],System.Uri)">
      <summary>使用指定的 Alpha 通道、颜色通道值和颜色配置文件创建一个新的 <see cref="T:System.Windows.Media.Color" /> 结构。</summary>
      <returns>具有指定值的 <see cref="T:System.Windows.Media.Color" /> 结构。</returns>
      <param name="a">新颜色的 Alpha 通道。</param>
      <param name="values">一个值集合，其中的值指定新颜色的颜色通道。这些值映射到 <paramref name="profileUri" />。</param>
      <param name="profileUri">新颜色的 国际色彩联合会 (ICC) 或 图像颜色管理 (ICM) 颜色配置文件。</param>
    </member>
    <member name="M:System.Windows.Media.Color.FromRgb(System.Byte,System.Byte,System.Byte)">
      <summary>使用指定的 sRGB 颜色通道值创建一个新的 <see cref="T:System.Windows.Media.Color" /> 结构。</summary>
      <returns>具有指定值且 Alpha 通道值为 1 的 <see cref="T:System.Windows.Media.Color" /> 结构。</returns>
      <param name="r">新颜色的 sRGB 红色通道 <see cref="P:System.Windows.Media.Color.R" />。</param>
      <param name="g">新颜色的 sRGB 绿色通道 <see cref="P:System.Windows.Media.Color.G" />。</param>
      <param name="b">新颜色的 sRGB 蓝色通道 <see cref="P:System.Windows.Media.Color.B" />。</param>
    </member>
    <member name="M:System.Windows.Media.Color.FromScRgb(System.Single,System.Single,System.Single,System.Single)">
      <summary>使用指定的 ScRGB Alpha 通道和颜色通道值创建一个新的 <see cref="T:System.Windows.Media.Color" /> 结构。</summary>
      <returns>具有指定值的 <see cref="T:System.Windows.Media.Color" /> 结构。</returns>
      <param name="a">新颜色的 ScRGB Alpha 通道 <see cref="P:System.Windows.Media.Color.ScA" />。</param>
      <param name="r">新颜色的 ScRGB 红色通道 <see cref="P:System.Windows.Media.Color.ScR" />。</param>
      <param name="g">新颜色的 ScRGB 绿色通道 <see cref="P:System.Windows.Media.Color.ScG" />。</param>
      <param name="b">新颜色的 ScRGB 蓝色通道 <see cref="P:System.Windows.Media.Color.ScB" />。</param>
    </member>
    <member name="M:System.Windows.Media.Color.FromValues(System.Single[],System.Uri)">
      <summary>使用指定的颜色通道值和颜色配置文件创建一个新的 <see cref="T:System.Windows.Media.Color" /> 结构。</summary>
      <returns>具有指定值且 Alpha 通道值为 1 的 <see cref="T:System.Windows.Media.Color" /> 结构。</returns>
      <param name="values">一个值集合，其中的值指定新颜色的颜色通道。这些值映射到 <paramref name="profileUri" />。</param>
      <param name="profileUri">新颜色的 国际色彩联合会 (ICC) 或 图像颜色管理 (ICM) 颜色配置文件。</param>
    </member>
    <member name="P:System.Windows.Media.Color.G">
      <summary>获取或设置颜色的 sRGB 绿色通道值。</summary>
      <returns>当前的 <see cref="T:System.Windows.Media.Color" /> 结构的 sRGB 绿色通道值。</returns>
    </member>
    <member name="M:System.Windows.Media.Color.GetHashCode">
      <summary>获取当前 <see cref="T:System.Windows.Media.Color" /> 结构的哈希代码。</summary>
      <returns>当前 <see cref="T:System.Windows.Media.Color" /> 结构的哈希代码。</returns>
    </member>
    <member name="M:System.Windows.Media.Color.GetNativeColorValues">
      <summary>获取颜色的颜色通道值。</summary>
      <returns>颜色通道值的数组。</returns>
    </member>
    <member name="M:System.Windows.Media.Color.Multiply(System.Windows.Media.Color,System.Single)">
      <summary>将指定的 <see cref="T:System.Windows.Media.Color" /> 结构的 Alpha、红色、蓝色和绿色通道与指定值相乘。</summary>
      <returns>一个新的 <see cref="T:System.Windows.Media.Color" /> 结构，其颜色值是乘法运算的结果。</returns>
      <param name="color">作为被乘数的 <see cref="T:System.Windows.Media.Color" />。</param>
      <param name="coefficient">要相乘的值。</param>
    </member>
    <member name="M:System.Windows.Media.Color.op_Addition(System.Windows.Media.Color,System.Windows.Media.Color)">
      <summary>将两个 <see cref="T:System.Windows.Media.Color" /> 结构相加。</summary>
      <returns>一个新的 <see cref="T:System.Windows.Media.Color" /> 结构，其颜色值是加法运算的结果。</returns>
      <param name="color1">要相加的第一个 <see cref="T:System.Windows.Media.Color" /> 结构。</param>
      <param name="color2">要相加的第二个 <see cref="T:System.Windows.Media.Color" /> 结构。</param>
    </member>
    <member name="M:System.Windows.Media.Color.op_Equality(System.Windows.Media.Color,System.Windows.Media.Color)">
      <summary>测试两个 <see cref="T:System.Windows.Media.Color" /> 结构是否相同。</summary>
      <returns>
如果 <paramref name="color1" /> 与 <paramref name="color2" /> 完全相同，则为 true；否则为 false。</returns>
      <param name="color1">要比较的第一个 <see cref="T:System.Windows.Media.Color" /> 结构。</param>
      <param name="color2">要比较的第二个 <see cref="T:System.Windows.Media.Color" /> 结构。</param>
    </member>
    <member name="M:System.Windows.Media.Color.op_Inequality(System.Windows.Media.Color,System.Windows.Media.Color)">
      <summary>测试两个 <see cref="T:System.Windows.Media.Color" /> 结构是否不同。</summary>
      <returns>
如果 <paramref name="color1" /> 和 <paramref name="color2" /> 不相等，则为 true；否则为 false。</returns>
      <param name="color1">要比较的第一个 <see cref="T:System.Windows.Media.Color" /> 结构。</param>
      <param name="color2">要比较的第二个 <see cref="T:System.Windows.Media.Color" /> 结构。</param>
    </member>
    <member name="M:System.Windows.Media.Color.op_Multiply(System.Windows.Media.Color,System.Single)">
      <summary>将指定的 <see cref="T:System.Windows.Media.Color" /> 结构的 Alpha、红色、蓝色和绿色通道与指定值相乘。</summary>
      <returns>一个新的 <see cref="T:System.Windows.Media.Color" /> 结构，其颜色值是乘法运算的结果。</returns>
      <param name="color">作为被乘数的 <see cref="T:System.Windows.Media.Color" />。</param>
      <param name="coefficient">要相乘的值。</param>
    </member>
    <member name="M:System.Windows.Media.Color.op_Subtraction(System.Windows.Media.Color,System.Windows.Media.Color)">
      <summary>从一个 <see cref="T:System.Windows.Media.Color" /> 结构中减去另一个 <see cref="T:System.Windows.Media.Color" /> 结构。</summary>
      <returns>一个新的 <see cref="T:System.Windows.Media.Color" /> 结构，其颜色值是减法运算的结果。</returns>
      <param name="color1">作为被减数的 <see cref="T:System.Windows.Media.Color" /> 结构。</param>
      <param name="color2">要从 <paramref name="color1" /> 中减去的 <see cref="T:System.Windows.Media.Color" /> 结构。</param>
    </member>
    <member name="P:System.Windows.Media.Color.R">
      <summary>获取或设置颜色的 sRGB 红色通道值。</summary>
      <returns>当前的 <see cref="T:System.Windows.Media.Color" /> 结构的 sRGB 红色通道值。</returns>
    </member>
    <member name="P:System.Windows.Media.Color.ScA">
      <summary>获取或设置颜色的 ScRGB Alpha 通道值。</summary>
      <returns>当前的 <see cref="T:System.Windows.Media.Color" /> 结构的 ScRGB Alpha 通道值。</returns>
    </member>
    <member name="P:System.Windows.Media.Color.ScB">
      <summary>获取或设置颜色的 ScRGB 蓝色通道值。</summary>
      <returns>当前的 <see cref="T:System.Windows.Media.Color" /> 结构的 ScRGB 红色通道值。</returns>
    </member>
    <member name="P:System.Windows.Media.Color.ScG">
      <summary>获取或设置颜色的 ScRGB 绿色通道值。</summary>
      <returns>当前的 <see cref="T:System.Windows.Media.Color" /> 结构的 ScRGB 绿色通道值。</returns>
    </member>
    <member name="P:System.Windows.Media.Color.ScR">
      <summary>获取或设置颜色的 ScRGB 红色通道值。</summary>
      <returns>当前的 <see cref="T:System.Windows.Media.Color" /> 结构的 ScRGB 红色通道值。</returns>
    </member>
    <member name="M:System.Windows.Media.Color.Subtract(System.Windows.Media.Color,System.Windows.Media.Color)">
      <summary>从一个 <see cref="T:System.Windows.Media.Color" /> 结构中减去另一个 <see cref="T:System.Windows.Media.Color" /> 结构。</summary>
      <returns>一个新的 <see cref="T:System.Windows.Media.Color" /> 结构，其颜色值是减法运算的结果。</returns>
      <param name="color1">作为被减数的 <see cref="T:System.Windows.Media.Color" /> 结构。</param>
      <param name="color2">要从 <paramref name="color1" /> 中减去的 <see cref="T:System.Windows.Media.Color" /> 结构。</param>
    </member>
    <member name="M:System.Windows.Media.Color.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="format"></param>
      <param name="provider"></param>
    </member>
    <member name="M:System.Windows.Media.Color.ToString">
      <summary>使用 ScRGB 通道创建颜色的字符串表示形式。</summary>
      <returns>颜色的字符串表示形式。</returns>
    </member>
    <member name="M:System.Windows.Media.Color.ToString(System.IFormatProvider)">
      <summary>使用 ScRGB 通道和指定的格式提供程序创建颜色的字符串表示形式。</summary>
      <returns>颜色的字符串表示形式。</returns>
      <param name="provider">特定于区域的格式设置信息。</param>
    </member>
    <member name="T:System.Windows.Media.ColorContext">
      <summary>表示与位图图像关联的国际色彩联合会 (ICC) 或图像颜色管理 (ICM) 颜色配置文件。</summary>
    </member>
    <member name="M:System.Windows.Media.ColorContext.#ctor(System.Uri)">
      <summary>使用位于给定 <see cref="T:System.Uri" /> 的 国际色彩联合会 (ICC) 或 图像颜色管理 (ICM) 颜色配置文件初始化 <see cref="T:System.Windows.Media.ColorContext" /> 的一个新实例。</summary>
      <param name="profileUri">标识所需颜色配置文件的位置的 <see cref="T:System.Uri" />。</param>
    </member>
    <member name="M:System.Windows.Media.ColorContext.#ctor(System.Windows.Media.PixelFormat)">
      <summary>使用与提供的 <see cref="T:System.Windows.Media.PixelFormat" /> 最匹配的标准颜色配置文件（sRGB、ScRGB、RGB、CMYK、灰色或多通道）初始化 <see cref="T:System.Windows.Media.ColorContext" /> 的一个新实例。</summary>
      <param name="pixelFormat">从其中派生 <see cref="T:System.Windows.Media.ColorContext" /> 的 <see cref="T:System.Windows.Media.PixelFormat" />。</param>
    </member>
    <member name="M:System.Windows.Media.ColorContext.Equals(System.Object)">
      <summary>确定 <see cref="T:System.Object" /> 是否等同于 <see cref="T:System.Windows.Media.ColorContext" /> 的实例。</summary>
      <returns>
            如果提供的 <see cref="T:System.Object" /> 等同于 <see cref="T:System.Windows.Media.ColorContext" /> 的此实例，则为 true；否则为 false。</returns>
      <param name="obj">标识要比较是否相等的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Windows.Media.ColorContext.GetHashCode">
      <summary>获取此 <see cref="T:System.Windows.Media.ColorContext" /> 实例的哈希代码。 </summary>
      <returns>一个 <see cref="T:System.Int32" />，表示对象的哈希代码。</returns>
    </member>
    <member name="M:System.Windows.Media.ColorContext.op_Equality(System.Windows.Media.ColorContext,System.Windows.Media.ColorContext)">
      <summary>对 <see cref="T:System.Windows.Media.ColorContext" /> 的两个实例进行运算，以确定它们是否相等。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Media.ColorContext" /> 的实例相等，则为 true；否则为 false。</returns>
      <param name="context1">要比较的第一个 <see cref="T:System.Windows.Media.ColorContext" /> 实例。</param>
      <param name="context2">要比较的第二个 <see cref="T:System.Windows.Media.ColorContext" /> 实例。</param>
    </member>
    <member name="M:System.Windows.Media.ColorContext.op_Inequality(System.Windows.Media.ColorContext,System.Windows.Media.ColorContext)">
      <summary>对 <see cref="T:System.Windows.Media.ColorContext" /> 的两个实例进行运算，以确定它们是否不相等。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Media.ColorContext" /> 的实例不相等，则为 true；否则为 false。</returns>
      <param name="context1">要比较的第一个 <see cref="T:System.Windows.Media.ColorContext" /> 实例。</param>
      <param name="context2">要比较的第二个 <see cref="T:System.Windows.Media.ColorContext" /> 实例。</param>
    </member>
    <member name="M:System.Windows.Media.ColorContext.OpenProfileStream">
      <summary>返回原始颜色配置文件数据的可读 <see cref="T:System.IO.Stream" />。</summary>
      <returns>原始颜色配置文件数据的可读 <see cref="T:System.IO.Stream" />。</returns>
    </member>
    <member name="P:System.Windows.Media.ColorContext.ProfileUri">
      <summary>获取一个表示 国际色彩联合会 (ICC) 或 图像颜色管理 (ICM) 颜色配置文件的位置的 <see cref="T:System.Uri" />。</summary>
      <returns>
        <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.Windows.Media.ColorConverter">
      <summary> 在 <see cref="T:System.Windows.Media.Color" /> 的实例与其他类型的实例之间进行转换。 </summary>
    </member>
    <member name="M:System.Windows.Media.ColorConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.ColorConverter" /> 的新实例。 </summary>
    </member>
    <member name="M:System.Windows.Media.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> 确定是否可将一个对象从给定类型转换成 <see cref="T:System.Windows.Media.Color" /> 的实例。  </summary>
      <returns>
            如果此类型可以转换为 <see cref="T:System.Windows.Media.Color" />，则为 true；否则为 false。</returns>
      <param name="td">描述类型的上下文信息。</param>
      <param name="t">正被计算用于转换的源类型。</param>
    </member>
    <member name="M:System.Windows.Media.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> 确定是否可将 <see cref="T:System.Windows.Media.Color" /> 的实例转换成其他类型。 </summary>
      <returns>
            如果此 <see cref="T:System.Windows.Media.Color" /> 可以转换为 <paramref name="destinationType" />，则为 true；否则为 false。</returns>
      <param name="context">描述类型的上下文信息。</param>
      <param name="destinationType">要计算用于转换的此 <see cref="T:System.Windows.Media.Color" /> 的所需类型。</param>
    </member>
    <member name="M:System.Windows.Media.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary> 尝试将指定对象转换为 <see cref="T:System.Windows.Media.Color" />。 </summary>
      <returns>通过转换 <paramref name="value" /> 创建的 <see cref="T:System.Windows.Media.Color" />。</returns>
      <param name="td">描述类型的上下文信息。</param>
      <param name="ci">要在转换过程中考虑的区域性信息。</param>
      <param name="value">正在转换的对象。</param>
    </member>
    <member name="M:System.Windows.Media.ColorConverter.ConvertFromString(System.String)">
      <summary>尝试将字符串转换为 <see cref="T:System.Windows.Media.Color" />。</summary>
      <param name="value">要转换为 <see cref="T:System.Windows.Media.Color" /> 的字符串。</param>
    </member>
    <member name="M:System.Windows.Media.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary> 尝试将 <see cref="T:System.Windows.Media.Color" /> 转换为指定类型。 </summary>
      <returns>通过转换此 <see cref="T:System.Windows.Media.Color" /> 创建的对象。</returns>
      <param name="context">描述类型的上下文信息。</param>
      <param name="culture">描述正在转换的类型的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的 <see cref="T:System.Windows.Media.Color" />。</param>
      <param name="destinationType">要将此 <see cref="T:System.Windows.Media.Color" /> 转换到的类型。</param>
    </member>
    <member name="T:System.Windows.Media.ColorInterpolationMode">
      <summary>确定插入渐变颜色的方式。</summary>
    </member>
    <member name="F:System.Windows.Media.ColorInterpolationMode.ScRgbLinearInterpolation">
      <summary>在 scRGB 颜色空间中插入颜色。 </summary>
    </member>
    <member name="F:System.Windows.Media.ColorInterpolationMode.SRgbLinearInterpolation">
      <summary>在 sRGB 颜色空间中插入颜色。 </summary>
    </member>
    <member name="T:System.Windows.Media.Colors">
      <summary>实现一组预定义的颜色。</summary>
    </member>
    <member name="P:System.Windows.Media.Colors.AliceBlue">
      <summary>获取 ARGB 值为 #FFF0F8FF 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.AntiqueWhite">
      <summary>获取 ARGB 值为 #FFFAEBD7 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Aqua">
      <summary>获取 ARGB 值为 #FF00FFFF 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Aquamarine">
      <summary>获取 ARGB 值为 #FF7FFFD4 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Azure">
      <summary>获取 ARGB 值为 #FFF0FFFF 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Beige">
      <summary>获取 ARGB 值为 #FFF5F5DC 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Bisque">
      <summary>获取 ARGB 值为 #FFFFE4C4 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Black">
      <summary>获取 ARGB 值为 #FF000000 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.BlanchedAlmond">
      <summary>获取 ARGB 值为 #FFFFEBCD 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Blue">
      <summary>获取 ARGB 值为 #FF0000FF 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.BlueViolet">
      <summary>获取 ARGB 值为 #FF8A2BE2 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Brown">
      <summary>获取 ARGB 值为 #FFA52A2A 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.BurlyWood">
      <summary>获取 ARGB 值为 #FFDEB887 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.CadetBlue">
      <summary>获取 ARGB 值为 #FF5F9EA0 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Chartreuse">
      <summary>获取 ARGB 值为 #FF7FFF00 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Chocolate">
      <summary>获取 ARGB 值为 #FFD2691E 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Coral">
      <summary>获取 ARGB 值为 #FFFF7F50 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.CornflowerBlue">
      <summary>获取 ARGB 值为 #FF6495ED 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Cornsilk">
      <summary>获取 ARGB 值为 #FFFFF8DC 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Crimson">
      <summary>获取 ARGB 值为 #FFDC143C 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Cyan">
      <summary>获取 ARGB 值为 #FF00FFFF 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DarkBlue">
      <summary>获取 ARGB 值为 #FF00008B 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DarkCyan">
      <summary>获取 ARGB 值为 #FF008B8B 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DarkGoldenrod">
      <summary>获取 ARGB 值为 #FFB8860B 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DarkGray">
      <summary>获取 ARGB 值为 #FFA9A9A9 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DarkGreen">
      <summary>获取 ARGB 值为 #FF006400 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DarkKhaki">
      <summary>获取 ARGB 值为 #FFBDB76B 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DarkMagenta">
      <summary>获取 ARGB 值为 #FF8B008B 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DarkOliveGreen">
      <summary>获取 ARGB 值为 #FF556B2F 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DarkOrange">
      <summary>获取 ARGB 值为 #FFFF8C00 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DarkOrchid">
      <summary>获取 ARGB 值为 #FF9932CC 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DarkRed">
      <summary>获取 ARGB 值为 #FF8B0000 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DarkSalmon">
      <summary>获取 ARGB 值为 #FFE9967A 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DarkSeaGreen">
      <summary>获取 ARGB 值为 #FF8FBC8F 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DarkSlateBlue">
      <summary>获取 ARGB 值为 #FF483D8B 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DarkSlateGray">
      <summary>获取 ARGB 值为 #FF2F4F4F 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DarkTurquoise">
      <summary>获取 ARGB 值为 #FF00CED1 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DarkViolet">
      <summary>获取 ARGB 值为 #FF9400D3 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DeepPink">
      <summary>获取 ARGB 值为 #FFFF1493 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DeepSkyBlue">
      <summary>获取 ARGB 值为 #FF00BFFF 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DimGray">
      <summary>获取 ARGB 值为 #FF696969 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.DodgerBlue">
      <summary>获取 ARGB 值为 #FF1E90FF 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Firebrick">
      <summary>获取 ARGB 值为 #FFB22222 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.FloralWhite">
      <summary>获取 ARGB 值为 #FFFFFAF0 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.ForestGreen">
      <summary>获取 ARGB 值为 #FF228B22 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Fuchsia">
      <summary>获取 ARGB 值为 #FFFF00FF 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Gainsboro">
      <summary>获取 ARGB 值为 #FFDCDCDC 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.GhostWhite">
      <summary>获取 ARGB 值为 #FFF8F8FF 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Gold">
      <summary>获取 ARGB 值为 #FFFFD700 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Goldenrod">
      <summary>获取 ARGB 值为 #FFDAA520 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Gray">
      <summary>获取 ARGB 值为 #FF808080 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Green">
      <summary>获取 ARGB 值为 #FF008000 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.GreenYellow">
      <summary>获取 ARGB 值为 #FFADFF2F 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Honeydew">
      <summary>获取 ARGB 值为 #FFF0FFF0 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.HotPink">
      <summary>获取 ARGB 值为 #FFFF69B4 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.IndianRed">
      <summary>获取 ARGB 值为 #FFCD5C5C 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Indigo">
      <summary>获取 ARGB 值为 #FF4B0082 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Ivory">
      <summary>获取 ARGB 值为 #FFFFFFF0 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Khaki">
      <summary>获取 ARGB 值为 #FFF0E68C 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Lavender">
      <summary>获取 ARGB 值为 #FFE6E6FA 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.LavenderBlush">
      <summary>获取 ARGB 值为 #FFFFF0F5 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.LawnGreen">
      <summary>获取 ARGB 值为 #FF7CFC00 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.LemonChiffon">
      <summary>获取 ARGB 值为 #FFFFFACD 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.LightBlue">
      <summary>获取 ARGB 值为 #FFADD8E6 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.LightCoral">
      <summary>获取 ARGB 值为 #FFF08080 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.LightCyan">
      <summary>获取 ARGB 值为 #FFE0FFFF 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.LightGoldenrodYellow">
      <summary>获取 ARGB 值为 #FFFAFAD2 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.LightGray">
      <summary>获取 ARGB 值为 #FFD3D3D3 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.LightGreen">
      <summary>获取 ARGB 值为 #FF90EE90 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.LightPink">
      <summary>获取 ARGB 值为 #FFFFB6C1 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.LightSalmon">
      <summary>获取 ARGB 值为 #FFFFA07A 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.LightSeaGreen">
      <summary>获取 ARGB 值为 #FF20B2AA 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.LightSkyBlue">
      <summary>获取 ARGB 值为 #FF87CEFA 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.LightSlateGray">
      <summary>获取 ARGB 值为 #FF778899 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.LightSteelBlue">
      <summary>获取 ARGB 值为 #FFB0C4DE 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.LightYellow">
      <summary>获取 ARGB 值为 #FFFFFFE0 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Lime">
      <summary>获取 ARGB 值为 #FF00FF00 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.LimeGreen">
      <summary>获取 ARGB 值为 #FF32CD32 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Linen">
      <summary>获取 ARGB 值为 #FFFAF0E6 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Magenta">
      <summary>获取 ARGB 值为 #FFFF00FF 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Maroon">
      <summary>获取 ARGB 值为 #FF800000 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.MediumAquamarine">
      <summary>获取 ARGB 值为 #FF66CDAA 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.MediumBlue">
      <summary>获取 ARGB 值为 #FF0000CD 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.MediumOrchid">
      <summary>获取 ARGB 值为 #FFBA55D3 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.MediumPurple">
      <summary>获取 ARGB 值为 #FF9370DB 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.MediumSeaGreen">
      <summary>获取 ARGB 值为 #FF3CB371 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.MediumSlateBlue">
      <summary>获取 ARGB 值为 #FF7B68EE 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.MediumSpringGreen">
      <summary>获取 ARGB 值为 #FF00FA9A 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.MediumTurquoise">
      <summary>获取 ARGB 值为 #FF48D1CC 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.MediumVioletRed">
      <summary>获取 ARGB 值为 #FFC71585 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.MidnightBlue">
      <summary>获取 ARGB 值为 #FF191970 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.MintCream">
      <summary>获取 ARGB 值为 #FFF5FFFA 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.MistyRose">
      <summary>获取 ARGB 值为 #FFFFE4E1 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Moccasin">
      <summary>获取 ARGB 值为 #FFFFE4B5 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.NavajoWhite">
      <summary>获取 ARGB 值为 #FFFFDEAD 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Navy">
      <summary>获取 ARGB 值为 #FF000080 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.OldLace">
      <summary>获取 ARGB 值为 #FFFDF5E6 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Olive">
      <summary>获取 ARGB 值为 #FF808000 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.OliveDrab">
      <summary>获取 ARGB 值为 #FF6B8E23 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Orange">
      <summary>获取 ARGB 值为 #FFFFA500 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.OrangeRed">
      <summary>获取 ARGB 值为 #FFFF4500 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Orchid">
      <summary>获取 ARGB 值为 #FFDA70D6 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.PaleGoldenrod">
      <summary>获取 ARGB 值为 #FFEEE8AA 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.PaleGreen">
      <summary>获取 ARGB 值为 #FF98FB98 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.PaleTurquoise">
      <summary>获取 ARGB 值为 #FFAFEEEE 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.PaleVioletRed">
      <summary>获取 ARGB 值为 #FFDB7093 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.PapayaWhip">
      <summary>获取 ARGB 值为 #FFFFEFD5 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.PeachPuff">
      <summary>获取 ARGB 值为 #FFFFDAB9 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Peru">
      <summary>获取 ARGB 值为 #FFCD853F 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Pink">
      <summary>获取 ARGB 值为 #FFFFC0CB 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Plum">
      <summary>获取 ARGB 值为 #FFDDA0DD 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.PowderBlue">
      <summary>获取 ARGB 值为 #FFB0E0E6 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Purple">
      <summary>获取 ARGB 值为 #FF800080 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Red">
      <summary>获取 ARGB 值为 #FFFF0000 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.RosyBrown">
      <summary>获取 ARGB 值为 #FFBC8F8F 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.RoyalBlue">
      <summary>获取 ARGB 值为 #FF4169E1 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.SaddleBrown">
      <summary>获取 ARGB 值为 #FF8B4513 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Salmon">
      <summary>获取 ARGB 值为 #FFFA8072 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.SandyBrown">
      <summary>获取 ARGB 值为 #FFF4A460 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.SeaGreen">
      <summary>获取 ARGB 值为 #FF2E8B57 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.SeaShell">
      <summary>获取 ARGB 值为 #FFFFF5EE 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Sienna">
      <summary>获取 ARGB 值为 #FFA0522D 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Silver">
      <summary>获取 ARGB 值为 #FFC0C0C0 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.SkyBlue">
      <summary>获取 ARGB 值为 #FF87CEEB 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.SlateBlue">
      <summary>获取 ARGB 值为 #FF6A5ACD 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.SlateGray">
      <summary>获取 ARGB 值为 #FF708090 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Snow">
      <summary>获取 ARGB 值为 #FFFFFAFA 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.SpringGreen">
      <summary>获取 ARGB 值为 #FF00FF7F 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.SteelBlue">
      <summary>获取 ARGB 值为 #FF4682B4 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Tan">
      <summary>获取 ARGB 值为 #FFD2B48C 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Teal">
      <summary>获取 ARGB 值为 #FF008080 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Thistle">
      <summary>获取 ARGB 值为 #FFD8BFD8 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Tomato">
      <summary>获取 ARGB 值为 #FFFF6347 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Transparent">
      <summary>获取 ARGB 值为 #00FFFFFF 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Turquoise">
      <summary>获取 ARGB 值为 #FF40E0D0 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Violet">
      <summary>获取 ARGB 值为 #FFEE82EE 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Wheat">
      <summary>获取 ARGB 值为 #FFF5DEB3 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.White">
      <summary>获取 ARGB 值为 #FFFFFFFF 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.WhiteSmoke">
      <summary>获取 ARGB 值为 #FFF5F5F5 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.Yellow">
      <summary>获取 ARGB 值为 #FFFFFF00 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="P:System.Windows.Media.Colors.YellowGreen">
      <summary>获取 ARGB 值为 #FF9ACD32 的系统定义颜色。</summary>
      <returns>表示由 alpha、红色、绿色和蓝色通道表示的颜色。</returns>
    </member>
    <member name="T:System.Windows.Media.CombinedGeometry">
      <summary>表示由两个 <see cref="T:System.Windows.Media.Geometry" /> 对象组合定义的二维几何形状。</summary>
    </member>
    <member name="M:System.Windows.Media.CombinedGeometry.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Media.CombinedGeometry" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.CombinedGeometry.#ctor(System.Windows.Media.Geometry,System.Windows.Media.Geometry)">
      <summary> 使用指定的 <see cref="T:System.Windows.Media.Geometry" /> 对象初始化 <see cref="T:System.Windows.Media.CombinedGeometry" /> 类的新实例。</summary>
      <param name="geometry1">要组合的第一个 <see cref="T:System.Windows.Media.Geometry" />。</param>
      <param name="geometry2">要组合的第二个 <see cref="T:System.Windows.Media.Geometry" />。</param>
    </member>
    <member name="M:System.Windows.Media.CombinedGeometry.#ctor(System.Windows.Media.GeometryCombineMode,System.Windows.Media.Geometry,System.Windows.Media.Geometry)">
      <summary>使用指定的 <see cref="T:System.Windows.Media.Geometry" /> 对象和 <see cref="P:System.Windows.Media.CombinedGeometry.GeometryCombineMode" /> 初始化 <see cref="T:System.Windows.Media.CombinedGeometry" /> 类的新实例。</summary>
      <param name="geometryCombineMode">组合 <paramref name="geometry1" /> 和 <paramref name="geometry2" /> 的方法。</param>
      <param name="geometry1">要组合的第一个 <see cref="T:System.Windows.Media.Geometry" />。</param>
      <param name="geometry2">要组合的第二个 <see cref="T:System.Windows.Media.Geometry" />。</param>
    </member>
    <member name="M:System.Windows.Media.CombinedGeometry.#ctor(System.Windows.Media.GeometryCombineMode,System.Windows.Media.Geometry,System.Windows.Media.Geometry,System.Windows.Media.Transform)">
      <summary>使用指定的 <see cref="T:System.Windows.Media.Geometry" /> 对象、<see cref="P:System.Windows.Media.CombinedGeometry.GeometryCombineMode" /> 和 <see cref="P:System.Windows.Media.Geometry.Transform" /> 初始化 <see cref="T:System.Windows.Media.CombinedGeometry" /> 类的新实例。</summary>
      <param name="geometryCombineMode">组合 <paramref name="geometry1" /> 和 <paramref name="geometry2" /> 的方法。</param>
      <param name="geometry1">要组合的第一个 <see cref="T:System.Windows.Media.Geometry" />。</param>
      <param name="geometry2">要组合的第二个 <see cref="T:System.Windows.Media.Geometry" />。</param>
      <param name="transform">应用于 <see cref="T:System.Windows.Media.CombinedGeometry" /> 的 <see cref="P:System.Windows.Media.Geometry.Transform" />。</param>
    </member>
    <member name="P:System.Windows.Media.CombinedGeometry.Bounds">
      <summary> 获取一个 <see cref="T:System.Windows.Rect" />，它指定此 <see cref="T:System.Windows.Media.CombinedGeometry" /> 对象的边界框。 注意：此方法不考虑任何钢笔。</summary>
      <returns>此 <see cref="T:System.Windows.Media.CombinedGeometry" /> 的边界框。</returns>
    </member>
    <member name="M:System.Windows.Media.CombinedGeometry.Clone">
      <summary>创建该 <see cref="T:System.Windows.Media.CombinedGeometry" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.CombinedGeometry.CloneCurrentValue">
      <summary>创建该 <see cref="T:System.Windows.Media.CombinedGeometry" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.CombinedGeometry.Geometry1">
      <summary> 获取或设置此 <see cref="T:System.Windows.Media.CombinedGeometry" /> 对象的第一个 <see cref="T:System.Windows.Media.Geometry" /> 对象。这是一个依赖项属性。</summary>
      <returns>要组合的第一个 <see cref="T:System.Windows.Media.Geometry" /> 对象。</returns>
    </member>
    <member name="F:System.Windows.Media.CombinedGeometry.Geometry1Property">
      <summary> 标识 <see cref="P:System.Windows.Media.CombinedGeometry.Geometry1" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.CombinedGeometry.Geometry1" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.CombinedGeometry.Geometry2">
      <summary> 获取或设置此 <see cref="T:System.Windows.Media.CombinedGeometry" /> 对象的第二个 <see cref="T:System.Windows.Media.Geometry" /> 对象。这是一个依赖项属性。</summary>
      <returns>第二个 <see cref="T:System.Windows.Media.Geometry" /> 对象。</returns>
    </member>
    <member name="F:System.Windows.Media.CombinedGeometry.Geometry2Property">
      <summary> 标识 <see cref="P:System.Windows.Media.CombinedGeometry.Geometry2" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.CombinedGeometry.Geometry2" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.CombinedGeometry.GeometryCombineMode">
      <summary>获取或设置组合两个几何图形（由<see cref="P:System.Windows.Media.CombinedGeometry.Geometry1" /> 和 <see cref="P:System.Windows.Media.CombinedGeometry.Geometry2" /> 属性指定）的方法。这是一个依赖项属性。</summary>
      <returns>组合 <see cref="P:System.Windows.Media.CombinedGeometry.Geometry1" /> 和 <see cref="P:System.Windows.Media.CombinedGeometry.Geometry2" /> 的方法。默认值为 <see cref="F:System.Windows.Media.GeometryCombineMode.Union" />。</returns>
    </member>
    <member name="F:System.Windows.Media.CombinedGeometry.GeometryCombineModeProperty">
      <summary>标识 <see cref="P:System.Windows.Media.CombinedGeometry.GeometryCombineMode" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.CombinedGeometry.GeometryCombineMode" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.CombinedGeometry.GetArea(System.Double,System.Windows.Media.ToleranceType)">
      <summary> 获取已填充区域的面积。</summary>
      <returns>此组合几何图形的填充区域的面积。</returns>
      <param name="tolerance">计算的容错。</param>
      <param name="type">指定解释容错的方式。</param>
    </member>
    <member name="M:System.Windows.Media.CombinedGeometry.IsEmpty">
      <summary> 确定此 <see cref="T:System.Windows.Media.CombinedGeometry" /> 对象是否为空。</summary>
      <returns>
            如果此 <see cref="T:System.Windows.Media.CombinedGeometry" /> 为空，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.CombinedGeometry.MayHaveCurves">
      <summary> 确定该 <see cref="T:System.Windows.Media.CombinedGeometry" /> 对象是否可以具有曲线段。</summary>
      <returns>
            如果此 <see cref="T:System.Windows.Media.CombinedGeometry" /> 对象可以具有曲线段，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Windows.Media.CompositionTarget">
      <summary>表示您的应用程序的显示图面。</summary>
    </member>
    <member name="M:System.Windows.Media.CompositionTarget.Dispose">
      <summary>释放 <see cref="T:System.Windows.Media.CompositionTarget" />。</summary>
    </member>
    <member name="E:System.Windows.Media.CompositionTarget.Rendering">
      <summary>恰好在呈现组合树中的对象之前发生。</summary>
    </member>
    <member name="P:System.Windows.Media.CompositionTarget.RootVisual">
      <summary>获取或设置 <see cref="T:System.Windows.Media.CompositionTarget" /> 的根 Visual。</summary>
      <returns>
        <see cref="T:System.Windows.Media.CompositionTarget" /> 的根 Visual。</returns>
    </member>
    <member name="P:System.Windows.Media.CompositionTarget.TransformFromDevice">
      <summary>获取一个矩阵，可用它将坐标从呈现目标设备转换到该目标中。</summary>
    </member>
    <member name="P:System.Windows.Media.CompositionTarget.TransformToDevice">
      <summary>获取一个矩阵，可用它将坐标从该目标转换到呈现目标设备中。</summary>
    </member>
    <member name="T:System.Windows.Media.ContainerVisual">
      <summary>管理 <see cref="T:System.Windows.Media.Visual" /> 对象集合。</summary>
    </member>
    <member name="M:System.Windows.Media.ContainerVisual.#ctor">
      <summary>创建 <see cref="T:System.Windows.Media.ContainerVisual" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Media.ContainerVisual.BitmapEffect">
      <summary>获取或设置 <see cref="T:System.Windows.Media.ContainerVisual" /> 的 <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> 值。</summary>
      <returns>此可视对象的位图效果。</returns>
    </member>
    <member name="P:System.Windows.Media.ContainerVisual.BitmapEffectInput">
      <summary>获取或设置 <see cref="T:System.Windows.Media.ContainerVisual" /> 的 <see cref="T:System.Windows.Media.Effects.BitmapEffectInput" /> 值。</summary>
      <returns>此可视对象的位图效果输入值。</returns>
    </member>
    <member name="P:System.Windows.Media.ContainerVisual.Children">
      <summary>获取 <see cref="T:System.Windows.Media.ContainerVisual" /> 的子集合。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.VisualCollection" />，包含 <see cref="T:System.Windows.Media.ContainerVisual" /> 的子对象。</returns>
    </member>
    <member name="P:System.Windows.Media.ContainerVisual.Clip">
      <summary>获取或设置 <see cref="T:System.Windows.Media.ContainerVisual" /> 的剪辑区域。</summary>
      <returns>定义剪辑区域的 <see cref="T:System.Windows.Media.Geometry" />。</returns>
    </member>
    <member name="P:System.Windows.Media.ContainerVisual.ContentBounds">
      <summary>获取 <see cref="T:System.Windows.Media.ContainerVisual" /> 内容的边界框。</summary>
      <returns>一个指定边界框的 <see cref="T:System.Windows.Rect" />。</returns>
    </member>
    <member name="P:System.Windows.Media.ContainerVisual.DescendantBounds">
      <summary>获取 <see cref="T:System.Windows.Media.ContainerVisual" /> 所有子代的所有内容边界框的联合，但不包括 <see cref="T:System.Windows.Media.ContainerVisual" /> 的内容。</summary>
      <returns>一个指定组合边界框的 <see cref="T:System.Windows.Rect" />。</returns>
    </member>
    <member name="M:System.Windows.Media.ContainerVisual.GetVisualChild(System.Int32)">
      <summary>返回父 <see cref="T:System.Windows.Media.ContainerVisual" /> 的指定子 <see cref="T:System.Windows.Media.Visual" />。</summary>
      <returns>子 <see cref="T:System.Windows.Media.Visual" />。</returns>
      <param name="index">一个 32 位有符号整数，表示子 <see cref="T:System.Windows.Media.Visual" /> 的索引值。<paramref name="index" /> 的值必须介于 0 和 <see cref="P:System.Windows.Media.ContainerVisual.VisualChildrenCount" /> - 1 之间。</param>
    </member>
    <member name="M:System.Windows.Media.ContainerVisual.HitTest(System.Windows.Media.HitTestFilterCallback,System.Windows.Media.HitTestResultCallback,System.Windows.Media.HitTestParameters)">
      <summary>使用 <see cref="T:System.Windows.Media.HitTestFilterCallback" /> 和 <see cref="T:System.Windows.Media.HitTestResultCallback" /> 对象启动 <see cref="T:System.Windows.Media.ContainerVisual" /> 上的命中测试。</summary>
      <param name="filterCallback">允许在处理命中测试结果时忽略无关的可视化树部分的委托。</param>
      <param name="resultCallback">用于控制返回命中测试信息的委托。</param>
      <param name="hitTestParameters">定义命中测试的参数集。</param>
    </member>
    <member name="M:System.Windows.Media.ContainerVisual.HitTest(System.Windows.Point)">
      <summary>通过指定 <see cref="T:System.Windows.Point" /> 返回命中测试最顶部的可视对象。</summary>
      <returns>作为 <see cref="T:System.Windows.Media.HitTestResult" /> 类型返回的可视对象的命中测试结果。</returns>
      <param name="point">要进行命中测试的点值。</param>
    </member>
    <member name="P:System.Windows.Media.ContainerVisual.Offset">
      <summary>获取或设置 <see cref="T:System.Windows.Media.ContainerVisual" /> 相对于其参考点的偏移值。</summary>
      <returns>一个 <see cref="T:System.Windows.Vector" />，表示 <see cref="T:System.Windows.Media.ContainerVisual" /> 的偏移值。</returns>
    </member>
    <member name="P:System.Windows.Media.ContainerVisual.Opacity">
      <summary>获取或设置 <see cref="T:System.Windows.Media.ContainerVisual" /> 的不透明度（基于 0=透明，1=不透明）。</summary>
      <returns>一个介于 0 到 1 之间的值，它指定从完全透明到完全不透明之间的一个范围。如果值为 0，则指示 <see cref="T:System.Windows.Media.ContainerVisual" /> 完全透明；如果值为 1，则指示 <see cref="T:System.Windows.Media.ContainerVisual" /> 完全不透明。值 0.5 指示不透明度为 50%，值 0.725 指示不透明度为 72.5%，依此类推。小于 0 的值将被视为 0，而大于 1 的值将被视为 1。</returns>
    </member>
    <member name="P:System.Windows.Media.ContainerVisual.OpacityMask">
      <summary>获取或设置指定 <see cref="T:System.Windows.Media.ContainerVisual" /> 可能的不透明蒙板的画笔。</summary>
      <returns>一个类型为 <see cref="T:System.Windows.Media.Brush" /> 的值，表示 <see cref="T:System.Windows.Media.ContainerVisual" /> 的不透明蒙板值。</returns>
    </member>
    <member name="P:System.Windows.Media.ContainerVisual.Parent">
      <summary>获取 <see cref="T:System.Windows.Media.ContainerVisual" /> 的父 <see cref="T:System.Windows.Media.Visual" />。</summary>
      <returns>该可视对象的父项。</returns>
    </member>
    <member name="P:System.Windows.Media.ContainerVisual.Transform">
      <summary>获取或设置应用于 <see cref="T:System.Windows.Media.ContainerVisual" /> 的转换。</summary>
      <returns>转换值。</returns>
    </member>
    <member name="P:System.Windows.Media.ContainerVisual.VisualChildrenCount">
      <summary>获取 <see cref="T:System.Windows.Media.ContainerVisual" /> 的子对象个数。</summary>
      <returns>
        <see cref="T:System.Windows.Media.ContainerVisual" /> 的 <see cref="T:System.Windows.Media.VisualCollection" /> 中的子对象个数。</returns>
    </member>
    <member name="P:System.Windows.Media.ContainerVisual.XSnappingGuidelines">
      <summary>获取或设置 <see cref="T:System.Windows.Media.ContainerVisual" /> 的 X（水平）准线。</summary>
      <returns>水平准线。</returns>
    </member>
    <member name="P:System.Windows.Media.ContainerVisual.YSnappingGuidelines">
      <summary>获取或设置 <see cref="T:System.Windows.Media.ContainerVisual" /> 的 Y（垂直）准线。</summary>
      <returns>垂直准线。</returns>
    </member>
    <member name="T:System.Windows.Media.DashStyle">
      <summary>表示 <see cref="T:System.Windows.Media.Pen" /> 将应用的虚线和间距的序列。</summary>
    </member>
    <member name="M:System.Windows.Media.DashStyle.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.DashStyle" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.DashStyle.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
      <summary>使用指定的 <see cref="P:System.Windows.Media.DashStyle.Dashes" /> 和 <see cref="P:System.Windows.Media.DashStyle.Offset" /> 初始化 <see cref="T:System.Windows.Media.Animation.TimelineGroup" /> 类的新实例。</summary>
      <param name="dashes">
        <see cref="T:System.Windows.Media.DashStyle" /> 的 <see cref="P:System.Windows.Media.DashStyle.Dashes" />。</param>
      <param name="offset">
        <see cref="T:System.Windows.Media.DashStyle" /> 的 <see cref="P:System.Windows.Media.DashStyle.Offset" />。</param>
    </member>
    <member name="M:System.Windows.Media.DashStyle.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.DashStyle" /> 的可修改复本，从而制作该对象的值的深层副本。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.DashStyle.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.DashStyle" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.DashStyle.Dashes">
      <summary>获取或设置此 <see cref="T:System.Windows.Media.DashStyle" /> 中虚线和间距的集合。这是一个依赖项属性。</summary>
      <returns>虚线和间距的集合。 默认值为空 <see cref="T:System.Windows.Media.DoubleCollection" />。</returns>
    </member>
    <member name="F:System.Windows.Media.DashStyle.DashesProperty">
      <summary>标识 <see cref="P:System.Windows.Media.DashStyle.Dashes" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.DashStyle.Dashes" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.DashStyle.Offset">
      <summary>获取或设置笔画在虚线序列中开始的距离。这是一个依赖项属性。</summary>
      <returns>虚线序列的偏移量。 默认值为 0。</returns>
    </member>
    <member name="F:System.Windows.Media.DashStyle.OffsetProperty">
      <summary>标识 <see cref="P:System.Windows.Media.DashStyle.Offset" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.DashStyle.Offset" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.DashStyles">
      <summary>实现一组预定义的 <see cref="T:System.Windows.Media.DashStyle" /> 对象。 </summary>
    </member>
    <member name="P:System.Windows.Media.DashStyles.Dash">
      <summary>获取 <see cref="P:System.Windows.Media.DashStyle.Dashes" /> 属性等于 2,2 的 <see cref="T:System.Windows.Media.DashStyle" />。 </summary>
      <returns>2,2 的虚线序列，描述由长度为钢笔 <see cref="P:System.Windows.Media.Pen.Thickness" /> 两倍的虚线后跟长度为 <see cref="P:System.Windows.Media.Pen.Thickness" /> 两倍的空格构成的一个序列。</returns>
    </member>
    <member name="P:System.Windows.Media.DashStyles.DashDot">
      <summary>获取 <see cref="P:System.Windows.Media.DashStyle.Dashes" /> 属性等于 2,2,0,2 的 <see cref="T:System.Windows.Media.DashStyle" />。 </summary>
      <returns>2,2,0,2 的虚线序列。</returns>
    </member>
    <member name="P:System.Windows.Media.DashStyles.DashDotDot">
      <summary>获取 <see cref="P:System.Windows.Media.DashStyle.Dashes" /> 属性等于 2,2,0,2,0,2 的 <see cref="T:System.Windows.Media.DashStyle" />。 </summary>
      <returns>2,2,0,2,0,2 的虚线序列。</returns>
    </member>
    <member name="P:System.Windows.Media.DashStyles.Dot">
      <summary>获取 <see cref="P:System.Windows.Media.DashStyle.Dashes" /> 属性等于 0,2 的 <see cref="T:System.Windows.Media.DashStyle" />。 </summary>
      <returns>0,2 的虚线序列。</returns>
    </member>
    <member name="P:System.Windows.Media.DashStyles.Solid">
      <summary>获取 <see cref="P:System.Windows.Media.DashStyle.Dashes" /> 属性为空的 <see cref="T:System.Windows.Media.DashStyle" />。 </summary>
      <returns>没有虚线的虚线序列。</returns>
    </member>
    <member name="T:System.Windows.Media.DoubleCollection">
      <summary>
                     表示一个由 <see cref="T:System.Double" /> 值组成的有序集合。
                </summary>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.#ctor">
      <summary>
初始化 <see cref="T:System.Windows.Media.DoubleCollection" /> 的新实例。
                </summary>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
                    用指定的 <see cref="T:System.Double" /> 值的集合来初始化 <see cref="T:System.Windows.Media.DoubleCollection" /> 类的新实例。
                </summary>
      <param name="collection">
                    构成 <see cref="T:System.Windows.Media.DoubleCollection" /> 的 <see cref="T:System.Double" /> 值的集合。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.#ctor(System.Int32)">
      <summary>
                    使用指定的容量或集合最初可存储的 <see cref="T:System.Double" /> 值数来初始化 <see cref="T:System.Windows.Media.DoubleCollection" /> 类的一个新实例。
                </summary>
      <param name="capacity">
                    集合最初可存储的 <see cref="T:System.Double" /> 值数。
                </param>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.Add(System.Double)">
      <summary>
                     将 <see cref="T:System.Double" /> 添加到此 <see cref="T:System.Windows.Media.DoubleCollection" /> 的末尾。
                </summary>
      <param name="value">
                    要添加到此集合末尾的项。
                </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.DoubleCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.DoubleCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.Clear">
      <summary>
                     从此 <see cref="T:System.Windows.Media.DoubleCollection" /> 中移除所有项。
                </summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.DoubleCollection" /> 是只读的。
                </exception>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.Clone">
      <summary>
                    创建此 <see cref="T:System.Windows.Media.DoubleCollection" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。
                </summary>
      <returns>
                    当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.CloneCurrentValue">
      <summary>
                    创建此 <see cref="T:System.Windows.Media.DoubleCollection" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。
                </summary>
      <returns>
                    当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.Contains(System.Double)">
      <summary>
                     确定 <see cref="T:System.Double" /> 是否在此 <see cref="T:System.Windows.Media.DoubleCollection" /> 中。
                </summary>
      <returns>
                    如果 <paramref name="value" />（指定的 <see cref="T:System.Double" />）在此 <see cref="T:System.Windows.Media.DoubleCollection" /> 中，则为 true，否则为 false。
                </returns>
      <param name="value">
                    要在此集合中查找的项。
                </param>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.CopyTo(System.Double[],System.Int32)">
      <summary>
                     从指定的索引开始，将此 <see cref="T:System.Windows.Media.DoubleCollection" /> 的项复制到 <see cref="T:System.Double" /> 值的数组中。
                </summary>
      <param name="array">
                    一个数组，它是从此 <see cref="T:System.Windows.Media.DoubleCollection" /> 中复制的项的目标位置。
                </param>
      <param name="index">
                    开始复制的索引位置。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的
                
                    - 或 -
                <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                
                    源 <see cref="T:System.Windows.Media.DoubleCollection" /> 中的项数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。
                </exception>
    </member>
    <member name="P:System.Windows.Media.DoubleCollection.Count">
      <summary>
                     获取 <see cref="T:System.Windows.Media.DoubleCollection" /> 中包含的双精度数的数目。
                </summary>
      <returns>
        <see cref="T:System.Windows.Media.DoubleCollection" /> 中包含的双精度数的数目。
                </returns>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.GetEnumerator">
      <summary>
                    返回可循环访问集合的枚举数。
                </summary>
      <returns>
                    一个可以循环访问集合的 <see cref="T:System.Windows.Media.DoubleCollection.Enumerator" />。
                </returns>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.IndexOf(System.Double)">
      <summary>
                     获取指定的 <see cref="T:System.Double" /> 的第一个匹配项的索引。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Media.DoubleCollection" /> 找到了，则为 <paramref name="value" /> 的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.DoubleCollection" /> 中定位的 <see cref="T:System.Double" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.Insert(System.Int32,System.Double)">
      <summary>
                     将 <see cref="T:System.Double" /> 插入到此 <see cref="T:System.Windows.Media.DoubleCollection" /> 的指定索引位置。
                </summary>
      <param name="index">
                    要在其中插入 <paramref name="value" />（指定的 <see cref="T:System.Double" />）的索引位置。
                </param>
      <param name="value">
                    要插入的项。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Windows.Media.DoubleCollection" /> 中的有效索引。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.DoubleCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.DoubleCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="P:System.Windows.Media.DoubleCollection.Item(System.Int32)">
      <summary>
                     获取或设置位于指定的从零开始的索引处的 <see cref="T:System.Double" />。
                </summary>
      <returns>
                    指定索引处的 <see cref="T:System.Double" />。
                </returns>
      <param name="index">
                    要获取或设置的 <see cref="T:System.Double" /> 值的从零开始的索引。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Windows.Media.DoubleCollection" /> 中的有效索引。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.DoubleCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.DoubleCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.Parse(System.String)">
      <summary>
                     将双精度数集合的 <see cref="T:System.String" /> 表示形式转换为等效的 <see cref="T:System.Windows.Media.DoubleCollection" />。
                </summary>
      <returns>
                    返回等效的 <see cref="T:System.Windows.Media.DoubleCollection" />。
                </returns>
      <param name="source">
                    双精度数集合的 <see cref="T:System.String" /> 表示形式。
                </param>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.Remove(System.Double)">
      <summary>
                     从此 <see cref="T:System.Windows.Media.DoubleCollection" /> 中移除指定的 <see cref="T:System.Double" /> 的第一个匹配项。
                </summary>
      <returns>
                    如果从 <see cref="T:System.Windows.Media.DoubleCollection" /> 中移除了 <paramref name="value" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要从此集合中移除的项。
                </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.DoubleCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.DoubleCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.RemoveAt(System.Int32)">
      <summary>
                     从此 <see cref="T:System.Windows.Media.DoubleCollection" /> 中移除指定索引处的 <see cref="T:System.Double" />。
                </summary>
      <param name="index">
                    要移除的项的索引。
                </param>
    </member>
    <member name="P:System.Windows.Media.DoubleCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.DoubleCollection" /> 是只读的，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator`1" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />。
                </summary>
      <param name="array">
                    从零开始的 <see cref="T:System.Array" />，它接收从 <see cref="T:System.Windows.Media.DoubleCollection" /> 复制来的项。
                </param>
      <param name="index">
                    指定的 <see cref="T:System.Array" /> 中接收复制内容的第一个位置。
                </param>
    </member>
    <member name="P:System.Windows.Media.DoubleCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。
                </summary>
      <returns>
                    如果对 <see cref="T:System.Windows.Media.DoubleCollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.DoubleCollection.System#Collections#ICollection#SyncRoot">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。
                </summary>
      <returns>
                    可用于同步对 <see cref="T:System.Windows.Media.DoubleCollection" /> 的访问的对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections." /><see cref="IEnumerator" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.System#Collections#IList#Add(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。
                </summary>
      <returns>
                    新元素的插入位置。
                </returns>
      <param name="value">
                    要添加到 <see cref="T:System.Windows.Media.DoubleCollection" /> 的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Media.DoubleCollection" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.DoubleCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。
                </summary>
      <returns>
                    如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.DoubleCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。
                </summary>
      <param name="index">
                    从零开始的索引，在该处插入 <see cref="T:System.Object" />。
                </param>
      <param name="value">
                    要插入 <see cref="T:System.Windows.Media.DoubleCollection" /> 中的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="P:System.Windows.Media.DoubleCollection.System#Collections#IList#IsFixedSize">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.DoubleCollection" /> 具有固定大小，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.DoubleCollection.System#Collections#IList#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.DoubleCollection" /> 是只读的，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.DoubleCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.Item(System.Int32)" />。
                </summary>
      <returns>
                    指定索引处的元素。
                </returns>
      <param name="index">
                    要获得或设置的元素从零开始的索引。
                </param>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Remove(System.Object)" />。
                </summary>
      <param name="value">
                    要从 <see cref="T:System.Windows.Media.DoubleCollection" /> 移除的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" />，包含具有指定格式的当前实例的值。
                </returns>
      <param name="format">
                    指定要使用的格式的 <see cref="T:System." /><see cref="String" />。
                
                    - 或 -
                
                    如果为 null（在 Visual Basic 中为 Nothing），则使用为 <see cref="T:System.IFormattable" /> 实现的类型定义的默认格式。
                </param>
      <param name="provider">
                    用于格式化该值的 <see cref="T:System." /><see cref="IFormatProvider" />。
                
                    - 或 -
                
                    如果为 null（在 Visual Basic 中为 Nothing），则从操作系统的当前区域设置中获取数字信息。
                </param>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.ToString">
      <summary>
创建此 <see cref="T:System.Windows.Media.DoubleCollection" /> 的 <see cref="T:System.String" /> 表示形式。
                </summary>
      <returns>
返回包含此 <see cref="T:System.Windows.Media.DoubleCollection" /> 的值的 <see cref="T:System.String" />。
                </returns>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.ToString(System.IFormatProvider)">
      <summary>
创建此 <see cref="T:System.Windows.Media.DoubleCollection" /> 的 <see cref="T:System.String" /> 表示形式。
                </summary>
      <returns>
返回包含此 <see cref="T:System.Windows.Media.DoubleCollection" /> 的值的 <see cref="T:System.String" />。
                </returns>
      <param name="provider">
                    特定于区域性的格式设置信息。
                </param>
    </member>
    <member name="T:System.Windows.Media.DoubleCollection.Enumerator">
      <summary>枚举 <see cref="T:System.Windows.Media.DoubleCollection" /> 中的 <see cref="T:System.Double" /> 项。 </summary>
    </member>
    <member name="P:System.Windows.Media.DoubleCollection.Enumerator.Current">
      <summary>获取集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.Enumerator.MoveNext">
      <summary>将枚举数前移到集合中的下一个元素。</summary>
      <returns>
            如果枚举数成功前移到了下一个元素，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.Enumerator.Reset">
      <summary>将枚举数重置至其初始位置，即位于集合中第一个元素之前。</summary>
    </member>
    <member name="P:System.Windows.Media.DoubleCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Media.DoubleCollection.Enumerator.System#IDisposable#Dispose">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="T:System.Windows.Media.DoubleCollectionConverter">
      <summary>在 <see cref="T:System.Windows.Media.DoubleCollection" /> 实例与其他类型的实例之间进行转换。 </summary>
    </member>
    <member name="M:System.Windows.Media.DoubleCollectionConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.DoubleCollection" /> 类的一个新实例。 </summary>
    </member>
    <member name="M:System.Windows.Media.DoubleCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将一个对象从指定类型转换为 <see cref="T:System.Windows.Media.DoubleCollection" /> 的实例。  </summary>
      <returns>
如果该类型可以转换为 <see cref="T:System.Windows.Media.DoubleCollection" />，则为 true；否则为 false。</returns>
      <param name="context">类型的上下文信息。</param>
      <param name="sourceType">正在为了进行转换而计算的源的类型。</param>
    </member>
    <member name="M:System.Windows.Media.DoubleCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将 <see cref="T:System.Windows.Media.DoubleCollection" /> 的实例转换为其他类型。 </summary>
      <returns>
如果此 <see cref="T:System.Windows.Media.DoubleCollection" /> 可以转换为 <paramref name="destinationType" />，则为 true；否则为 false。</returns>
      <param name="context">类型的上下文信息。</param>
      <param name="destinationType">在计算此 <see cref="T:System.Windows.Media.DoubleCollection" /> 以进行转换时所需的类型。</param>
    </member>
    <member name="M:System.Windows.Media.DoubleCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>试图将指定对象转换为 <see cref="T:System.Windows.Media.DoubleCollection" />。 </summary>
      <returns>由转换 <paramref name="value" /> 创建的 <see cref="T:System.Windows.Media.DoubleCollection" />。</returns>
      <param name="context">类型的上下文信息。</param>
      <param name="culture">正在转换的类型的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">正在转换的对象。</param>
    </member>
    <member name="M:System.Windows.Media.DoubleCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>试图将 <see cref="T:System.Windows.Media.DoubleCollection" /> 转换为指定类型。 </summary>
      <returns>在转换此 <see cref="T:System.Windows.Media.DoubleCollection" /> 时创建的对象。</returns>
      <param name="context">类型的上下文信息。</param>
      <param name="culture">要转换的类型的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的 <see cref="T:System.Windows.Media.DoubleCollection" />。</param>
      <param name="destinationType">要将此 <see cref="T:System.Windows.Media.DoubleCollection" /> 转换为的类型。</param>
    </member>
    <member name="T:System.Windows.Media.Drawing">
      <summary>描述二维绘图的抽象类。此类不能由您的代码继承。</summary>
    </member>
    <member name="P:System.Windows.Media.Drawing.Bounds">
      <summary> 获取绘图内容与轴对齐的边界。</summary>
      <returns>绘图内容与轴对齐的边界。</returns>
    </member>
    <member name="M:System.Windows.Media.Drawing.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.Drawing" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.Drawing.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.Drawing" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="T:System.Windows.Media.DrawingBrush">
      <summary>用 <see cref="T:System.Windows.Media.Drawing" /> 绘制区域，其中可以包括形状、文本、视频、图像或其他绘图。</summary>
    </member>
    <member name="M:System.Windows.Media.DrawingBrush.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.DrawingBrush" /> 类的一个新实例。生成的画笔没有任何内容。</summary>
    </member>
    <member name="M:System.Windows.Media.DrawingBrush.#ctor(System.Windows.Media.Drawing)">
      <summary>初始化包含指定 <see cref="T:System.Windows.Media.Drawing" /> 的 <see cref="T:System.Windows.Media.DrawingBrush" /> 类的一个新实例。</summary>
      <param name="drawing">描述画笔内容的 <see cref="T:System.Windows.Media.Drawing" />。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingBrush.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.DrawingBrush" /> 的一个可修改复本，从而制作此对象的值的深度副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.DrawingBrush.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.DrawingBrush" /> 对象的一个可修改复本，从而制作此对象的当前值的深度副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.DrawingBrush.Drawing">
      <summary>获取或设置描述此 <see cref="T:System.Windows.Media.DrawingBrush" /> 的内容的 <see cref="T:System.Windows.Media.Drawing" />。 这是一个依赖项属性。</summary>
      <returns>描述此 <see cref="T:System.Windows.Media.DrawingBrush" /> 的内容的 <see cref="T:System.Windows.Media.Drawing" />。默认值为空引用（在 Visual Basic 中为 Nothing）。</returns>
    </member>
    <member name="F:System.Windows.Media.DrawingBrush.DrawingProperty">
      <summary>标识 <see cref="P:System.Windows.Media.DrawingBrush.Drawing" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.DrawingBrush.Drawing" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.DrawingCollection">
      <summary>
                    表示一个由 <see cref="T:System.Windows.Media.Drawing" /> 对象组成的有序集合。
                </summary>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.#ctor">
      <summary>
                    初始化 <see cref="T:System.Windows.Media.DrawingCollection" /> 类的一个新实例。
                </summary>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.Drawing})">
      <summary>
                    用指定的 <see cref="T:System.Windows.Media.Drawing" /> 对象的集合来初始化 <see cref="T:System.Windows.Media.DrawingCollection" /> 类的新实例。
                </summary>
      <param name="collection">
                    构成 <see cref="T:System.Windows.Media.DrawingCollection" /> 的 <see cref="T:System.Windows.Media.Drawing" /> 对象的集合。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.#ctor(System.Int32)">
      <summary>
                    用指定的容量初始化 <see cref="T:System.Windows.Media.DrawingCollection" /> 的新实例。
                </summary>
      <param name="capacity">
                    集合的总容量。
                </param>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.Add(System.Windows.Media.Drawing)">
      <summary>
                    将 <see cref="T:System.Windows.Media.Drawing" /> 添加到 <see cref="T:System.Windows.Media.DrawingCollection" /> 的末尾。
                </summary>
      <param name="value">
                    要添加到此集合末尾的项。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.DrawingCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.DrawingCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.Clear">
      <summary>
                    从此 <see cref="T:System.Windows.Media.DrawingCollection" /> 中移除所有项。
                </summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.DrawingCollection" /> 是只读的。
                </exception>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.Clone">
      <summary>
                    创建此 <see cref="T:System.Windows.Media.DrawingCollection" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。
                </summary>
      <returns>
                    当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.CloneCurrentValue">
      <summary>
                    创建此 <see cref="T:System.Windows.Media.DrawingCollection" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。
                </summary>
      <returns>
                    当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.Contains(System.Windows.Media.Drawing)">
      <summary>
                     确定给定的 <see cref="T:System.Windows.Media.Drawing" /> 是否在此 <see cref="T:System.Windows.Media.DrawingCollection" /> 中。
                </summary>
      <returns>
                    如果 <paramref name="value" />（指定的 <see cref="T:System.Windows.Media.Drawing" />）在此 <see cref="T:System.Windows.Media.DrawingCollection" /> 中，则为 true，否则为 false。
                </returns>
      <param name="value">
                    要在此集合中查找的项。
                </param>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.CopyTo(System.Windows.Media.Drawing[],System.Int32)">
      <summary>
                    从指定的索引值开始，将此 <see cref="T:System.Windows.Media.DrawingCollection" /> 的项复制到 <see cref="T:System.Windows.Media.Drawing" /> 对象的数组中。
                </summary>
      <param name="array">
                    一个数组，它是从此 <see cref="T:System.Windows.Media.DrawingCollection" /> 中复制的项的目标位置。
                </param>
      <param name="index">
                    复制操作开始处的索引。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的
                
                    - 或 -
                <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                
                    源 <see cref="T:System.Windows.Media.DrawingCollection" /> 中的项数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。
                </exception>
    </member>
    <member name="P:System.Windows.Media.DrawingCollection.Count">
      <summary>
                    获取 <see cref="T:System.Windows.Media.DrawingCollection" /> 中包含的 <see cref="T:System.Windows.Media.Drawing" /> 对象数。
                </summary>
      <returns>
        <see cref="T:System.Windows.Media.DrawingCollection" /> 中包含的 <see cref="T:System.Windows.Media.Drawing" /> 对象数。
                </returns>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.GetEnumerator">
      <summary>
                    返回可循环访问集合的枚举数。
                </summary>
      <returns>
                    一个可循环访问集合的枚举数。
                </returns>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.IndexOf(System.Windows.Media.Drawing)">
      <summary>
                    获取指定的 <see cref="T:System.Windows.Media.Drawing" /> 第一次出现的索引位置。
                </summary>
      <returns>
                    指定的 <see cref="T:System.Windows.Media.Drawing" /> 的索引位置。
                </returns>
      <param name="value">
                    要搜索的项。
                </param>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.Insert(System.Int32,System.Windows.Media.Drawing)">
      <summary>
                    将 <see cref="T:System.Windows.Media.Drawing" /> 插入到此 <see cref="T:System.Windows.Media.DrawingCollection" /> 的指定索引位置。
                </summary>
      <param name="index">
                    要在其中插入 <paramref name="value" />（指定的 <see cref="T:System.Windows.Media.Drawing" />）的索引位置。
                </param>
      <param name="value">
                    要插入的项。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Windows.Media.DrawingCollection" /> 中的有效索引。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.DrawingCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.DrawingCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="P:System.Windows.Media.DrawingCollection.Item(System.Int32)">
      <summary>
                     获取或设置位于指定的从零开始的索引处的 <see cref="T:System.Windows.Media.Drawing" />。
                </summary>
      <returns>
                    指定索引处的 <see cref="T:System.Windows.Media.Drawing" />。
                </returns>
      <param name="index">
                    要获取或设置的 <see cref="T:System.Windows.Media.Drawing" /> 对象的从零开始的索引。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Windows.Media.DrawingCollection" /> 中的有效索引。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.DrawingCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.DrawingCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.Remove(System.Windows.Media.Drawing)">
      <summary>
                    从 <see cref="T:System.Windows.Media.DrawingCollection" /> 中移除指定的 <see cref="T:System.Windows.Media.Drawing" /> 的第一个匹配项。
                </summary>
      <returns>
                    如果操作成功，则为 true，否则为 false。
                </returns>
      <param name="value">
                    要从此集合中移除的项。
                </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.DrawingCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.DrawingCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.RemoveAt(System.Int32)">
      <summary>
                    从 <see cref="T:System.Windows.Media.DrawingCollection" /> 中移除指定索引位置处的 <see cref="T:System.Windows.Media.Drawing" />。
                </summary>
      <param name="index">
                    要移除的项的索引位置。
                </param>
    </member>
    <member name="P:System.Windows.Media.DrawingCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.DrawingCollection" /> 是只读的，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator`1" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />。
                </summary>
      <param name="array">
                    从零开始的 <see cref="T:System.Array" />，它接收从 <see cref="T:System.Windows.Media.DrawingCollection" /> 复制来的项。
                </param>
      <param name="index">
                    指定的 <see cref="T:System.Array" /> 中接收复制内容的第一个位置。
                </param>
    </member>
    <member name="P:System.Windows.Media.DrawingCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。
                </summary>
      <returns>
                    如果对 <see cref="T:System.Windows.Media.DrawingCollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.DrawingCollection.System#Collections#ICollection#SyncRoot">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。
                </summary>
      <returns>
                    可用于同步对 <see cref="T:System.Windows.Media.DrawingCollection" /> 的访问的对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections." /><see cref="IEnumerator" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.System#Collections#IList#Add(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。
                </summary>
      <returns>
                    新元素的插入位置。
                </returns>
      <param name="value">
                    要添加到 <see cref="T:System.Windows.Media.DrawingCollection" /> 的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Media.DrawingCollection" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.DrawingCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。
                </summary>
      <returns>
                    如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.DrawingCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。
                </summary>
      <param name="index">
                    从零开始的索引，在该处插入 <see cref="T:System.Object" />。
                </param>
      <param name="value">
                    要插入 <see cref="T:System.Windows.Media.DrawingCollection" /> 中的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="P:System.Windows.Media.DrawingCollection.System#Collections#IList#IsFixedSize">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.DrawingCollection" /> 具有固定大小，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.DrawingCollection.System#Collections#IList#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.DrawingCollection" /> 是只读的，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.DrawingCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.Item(System.Int32)" />。
                </summary>
      <returns>
                    指定索引处的元素。
                </returns>
      <param name="index">
                    要获得或设置的元素从零开始的索引。
                </param>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Remove(System.Object)" />。
                </summary>
      <param name="value">
                    要从 <see cref="T:System.Windows.Media.DrawingCollection" /> 移除的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="T:System.Windows.Media.DrawingCollection.Enumerator">
      <summary>枚举 <see cref="T:System.Windows.Media.DrawingCollection" /> 中的 <see cref="T:System.Windows.Media.Drawing" /> 项。 </summary>
    </member>
    <member name="P:System.Windows.Media.DrawingCollection.Enumerator.Current">
      <summary>获取集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.Enumerator.MoveNext">
      <summary>将枚举数前移到集合中的下一个元素。</summary>
      <returns>
            如果枚举数成功前移到了下一个元素，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.Enumerator.Reset">
      <summary>将枚举数重置至其初始位置，即位于集合中第一个元素之前。</summary>
    </member>
    <member name="P:System.Windows.Media.DrawingCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Media.DrawingCollection.Enumerator.System#IDisposable#Dispose">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="T:System.Windows.Media.DrawingContext">
      <summary>使用 draw、push 和 pop 命令描述可视内容。</summary>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.Close">
      <summary>关闭 <see cref="T:System.Windows.Media.DrawingContext" /> 并刷新内容。此后，将不能修改 <see cref="T:System.Windows.Media.DrawingContext" />。</summary>
      <exception cref="T:System.ObjectDisposedException">此对象已被关闭或释放。</exception>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.DisposeCore">
      <summary>释放由 <see cref="T:System.Windows.Media.DrawingContext" /> 使用的所有资源。</summary>
      <exception cref="T:System.ObjectDisposedException">该对象已被关闭或释放。</exception>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.DrawDrawing(System.Windows.Media.Drawing)">
      <summary>绘制指定的 <see cref="T:System.Windows.Media.Drawing" /> 对象。</summary>
      <param name="drawing">要追加的绘图。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.DrawEllipse(System.Windows.Media.Brush,System.Windows.Media.Pen,System.Windows.Point,System.Double,System.Double)">
      <summary>使用指定的 <see cref="T:System.Windows.Media.Brush" /> 和 <see cref="T:System.Windows.Media.Pen" /> 绘制一个椭圆。</summary>
      <param name="brush">用于填充椭圆的画笔。 此参数可选，而且可以为 null。如果 brush 为 null，则不绘制任何填充。</param>
      <param name="pen">用于绘制椭圆笔画的笔。 此参数可选，而且可以为 null。如果 pen 为 null，则不绘制任何笔画。</param>
      <param name="center">椭圆的中心位置。</param>
      <param name="radiusX">椭圆的水平半径。</param>
      <param name="radiusY">椭圆的垂直半径。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.DrawEllipse(System.Windows.Media.Brush,System.Windows.Media.Pen,System.Windows.Point,System.Windows.Media.Animation.AnimationClock,System.Double,System.Windows.Media.Animation.AnimationClock,System.Double,System.Windows.Media.Animation.AnimationClock)">
      <summary>使用指定的 <see cref="T:System.Windows.Media.Brush" /> 和 <see cref="T:System.Windows.Media.Pen" /> 绘制一个椭圆并应用指定的动画时钟。</summary>
      <param name="brush">用于填充椭圆的画笔。 此参数可选，而且可以为 null。如果 brush 为 null，则不绘制任何填充。</param>
      <param name="pen">用于绘制椭圆笔画的笔。 此参数可选，而且可以为 null。如果 pen 为 null，则不绘制任何笔画。</param>
      <param name="center">椭圆的中心位置。</param>
      <param name="centerAnimations">用于对椭圆的中心位置进行动画处理的时钟；如果没有动画，则为 null。此时钟必须基于能够对 <see cref="T:System.Windows.Point" /> 对象进行动画处理的 <see cref="T:System.Windows.Media.Animation.AnimationTimeline" /> 来创建。</param>
      <param name="radiusX">椭圆的水平半径。</param>
      <param name="radiusXAnimations">用于对椭圆的 x 轴半径进行动画处理的时钟；如果没有动画，则为 null。此时钟必须基于能够对 <see cref="T:System.Double" /> 对象进行动画处理的 <see cref="T:System.Windows.Media.Animation.AnimationTimeline" /> 来创建。</param>
      <param name="radiusY">椭圆的垂直半径。</param>
      <param name="radiusYAnimations">用于对椭圆的 y 轴半径进行动画处理的时钟；如果没有动画，则为 null。此时钟必须基于能够对 <see cref="T:System.Double" /> 对象进行动画处理的 <see cref="T:System.Windows.Media.Animation.AnimationTimeline" /> 来创建。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.DrawGeometry(System.Windows.Media.Brush,System.Windows.Media.Pen,System.Windows.Media.Geometry)">
      <summary>使用指定的 <see cref="T:System.Windows.Media.Brush" /> 和 <see cref="T:System.Windows.Media.Pen" /> 绘制指定的 <see cref="T:System.Windows.Media.Geometry" />。</summary>
      <param name="brush">用于填充 <see cref="T:System.Windows.Media.Geometry" /> 的 <see cref="T:System.Windows.Media.Brush" />。此参数可选，而且可以为 null。如果 brush 为 null，则不绘制任何填充。</param>
      <param name="pen">用于绘制 <see cref="T:System.Windows.Media.Geometry" /> 笔画的 <see cref="T:System.Windows.Media.Pen" />。此参数可选，而且可以为 null。如果 pen 为 null，则不绘制任何笔画。</param>
      <param name="geometry">要绘制的 <see cref="T:System.Windows.Media.Geometry" />。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.DrawGlyphRun(System.Windows.Media.Brush,System.Windows.Media.GlyphRun)">
      <summary>绘制指定的文本。</summary>
      <param name="foregroundBrush">用于绘制文本的画笔。</param>
      <param name="glyphRun">要绘制的文本。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.DrawImage(System.Windows.Media.ImageSource,System.Windows.Rect)">
      <summary>将图像绘制到由指定的 <see cref="T:System.Windows.Rect" /> 定义的区域中。</summary>
      <param name="imageSource">要绘制的图像。</param>
      <param name="rectangle">要在其中绘制 <paramref name="bitmapSource" /> 的区域。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.DrawImage(System.Windows.Media.ImageSource,System.Windows.Rect,System.Windows.Media.Animation.AnimationClock)">
      <summary>将图像绘制到由指定的 <see cref="T:System.Windows.Rect" /> 定义的区域中并应用指定的动画时钟。 </summary>
      <param name="imageSource">要绘制的图像。</param>
      <param name="rectangle">要在其中绘制 <paramref name="bitmapSource" /> 的区域。</param>
      <param name="rectangleAnimations">用于对矩形的大小和维数进行动画处理的时钟；如果没有动画，则为 null。此时钟必须基于能够对 <see cref="T:System.Windows.Rect" /> 对象进行动画处理的 <see cref="T:System.Windows.Media.Animation.AnimationTimeline" /> 来创建。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.DrawLine(System.Windows.Media.Pen,System.Windows.Point,System.Windows.Media.Animation.AnimationClock,System.Windows.Point,System.Windows.Media.Animation.AnimationClock)">
      <summary>使用指定的 <see cref="T:System.Windows.Media.Pen" /> 在两个指定点之间绘制一条线，并应用指定的动画时钟。</summary>
      <param name="pen">用于绘制线条笔画的笔。</param>
      <param name="point0">线条的起点。</param>
      <param name="point0Animations">用于对线条的起点进行动画处理的时钟；如果没有动画，则为 null。此时钟必须基于能够对 <see cref="T:System.Windows.Point" /> 对象进行动画处理的 <see cref="T:System.Windows.Media.Animation.AnimationTimeline" /> 来创建。</param>
      <param name="point1">线条的终点。</param>
      <param name="point1Animations">用于对线条的终点进行动画处理的时钟；如果没有动画，则为 null。此时钟必须基于能够对 <see cref="T:System.Windows.Point" /> 对象进行动画处理的 <see cref="T:System.Windows.Media.Animation.AnimationTimeline" /> 来创建。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.DrawLine(System.Windows.Media.Pen,System.Windows.Point,System.Windows.Point)">
      <summary>使用指定的 <see cref="T:System.Windows.Media.Pen" /> 在两个指定的点之间绘制一条线。</summary>
      <param name="pen">用于绘制线条笔画的笔。</param>
      <param name="point0">线条的起点。</param>
      <param name="point1">线条的终点。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.DrawRectangle(System.Windows.Media.Brush,System.Windows.Media.Pen,System.Windows.Rect)">
      <summary>使用指定的 <see cref="T:System.Windows.Media.Brush" /> 和 <see cref="T:System.Windows.Media.Pen" /> 绘制一个矩形。pen 和 brush 都可以为 null。</summary>
      <param name="brush">用于填充矩形的画笔。 此参数可选，而且可以为 null。如果 brush 为 null，则不绘制任何填充。</param>
      <param name="pen">用于绘制矩形笔画的笔。 此参数可选，而且可以为 null。如果 pen 为 null，则不绘制任何笔画。</param>
      <param name="rectangle">要绘制的矩形。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.DrawRectangle(System.Windows.Media.Brush,System.Windows.Media.Pen,System.Windows.Rect,System.Windows.Media.Animation.AnimationClock)">
      <summary>使用指定的 <see cref="T:System.Windows.Media.Brush" /> 和 <see cref="T:System.Windows.Media.Pen" /> 绘制一个矩形并应用指定的动画时钟。</summary>
      <param name="brush">用于填充矩形的画笔。 此参数可选，而且可以为 null。如果 brush 为 null，则不绘制任何填充。</param>
      <param name="pen">用于绘制矩形笔画的笔。 此参数可选，而且可以为 null。如果 pen 为 null，则不绘制任何笔画。</param>
      <param name="rectangle">要绘制的矩形。</param>
      <param name="rectangleAnimations">用于对矩形的大小和维数进行动画处理的时钟；如果没有动画，则为 null。此时钟必须基于能够对 <see cref="T:System.Windows.Rect" /> 对象进行动画处理的 <see cref="T:System.Windows.Media.Animation.AnimationTimeline" /> 来创建。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.DrawRoundedRectangle(System.Windows.Media.Brush,System.Windows.Media.Pen,System.Windows.Rect,System.Double,System.Double)">
      <summary>使用指定的 <see cref="T:System.Windows.Media.Brush" /> 和 <see cref="T:System.Windows.Media.Pen" /> 绘制一个圆角矩形。</summary>
      <param name="brush">用于填充矩形的画笔。</param>
      <param name="pen">用于绘制矩形笔画的笔。</param>
      <param name="rectangle">要绘制的矩形。</param>
      <param name="radiusX">圆角 X 维的半径。 此值将被限制到 0 至 <see cref="P:System.Windows.Rect.Width" />/2 的范围。</param>
      <param name="radiusY">圆角 Y 维的半径。 此值将被限制到 0 至 <see cref="P:System.Windows.Rect.Height" />/2 的范围。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.DrawRoundedRectangle(System.Windows.Media.Brush,System.Windows.Media.Pen,System.Windows.Rect,System.Windows.Media.Animation.AnimationClock,System.Double,System.Windows.Media.Animation.AnimationClock,System.Double,System.Windows.Media.Animation.AnimationClock)">
      <summary>使用指定的 <see cref="T:System.Windows.Media.Brush" /> 和 <see cref="T:System.Windows.Media.Pen" /> 绘制一个圆角矩形并应用指定的动画时钟。</summary>
      <param name="brush">用于填充矩形的画笔；如果不填充，则为 null。</param>
      <param name="pen">用于绘制矩形笔画的笔；如果不绘制笔画，则为 null。</param>
      <param name="rectangle">要绘制的矩形。</param>
      <param name="rectangleAnimations">用于对矩形的大小和维数进行动画处理的时钟；如果没有动画，则为 null。此时钟必须基于能够对 <see cref="T:System.Windows.Rect" /> 对象进行动画处理的 <see cref="T:System.Windows.Media.Animation.AnimationTimeline" /> 来创建。</param>
      <param name="radiusX">圆角 X 维的半径。 此值将被限制到 0 至 <see cref="P:System.Windows.Rect.Width" />/2 的范围。</param>
      <param name="radiusXAnimations">用于对矩形的 radiusX 值进行动画处理的时钟；如果没有动画，则为 null。此时钟必须基于能够对 <see cref="T:System.Double" /> 值进行动画处理的 <see cref="T:System.Windows.Media.Animation.AnimationTimeline" /> 来创建。</param>
      <param name="radiusY">圆角 Y 维的半径。 此值将被限制到 0 至 <see cref="P:System.Windows.Rect.Height" />/2 的范围。</param>
      <param name="radiusYAnimations">用于对矩形的 radiusY 值进行动画处理的时钟；如果没有动画，则为 null。此时钟必须基于能够对 <see cref="T:System.Double" /> 值进行动画处理的 <see cref="T:System.Windows.Media.Animation.AnimationTimeline" /> 来创建。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.DrawText(System.Windows.Media.FormattedText,System.Windows.Point)">
      <summary>在指定位置绘制格式化文本。</summary>
      <param name="formattedText">要绘制的格式化文本。</param>
      <param name="origin">要绘制文本的位置。</param>
      <exception cref="T:System.ObjectDisposedException">该对象已被关闭或释放。</exception>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.DrawVideo(System.Windows.Media.MediaPlayer,System.Windows.Rect)">
      <summary>将视频绘制到指定区域内。</summary>
      <param name="player">要绘制的媒体。</param>
      <param name="rectangle">要在其中绘制 <paramref name="player" /> 的区域。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.DrawVideo(System.Windows.Media.MediaPlayer,System.Windows.Rect,System.Windows.Media.Animation.AnimationClock)">
      <summary>将视频绘制到指定区域内，并应用指定的动画时钟。</summary>
      <param name="player">要绘制的媒体。</param>
      <param name="rectangle">要在其中绘制媒体的区域。</param>
      <param name="rectangleAnimations">用于对矩形的大小和维数进行动画处理的时钟；如果没有动画，则为 null。此时钟必须基于能够对 <see cref="T:System.Windows.Rect" /> 对象进行动画处理的 <see cref="T:System.Windows.Media.Animation.AnimationTimeline" /> 来创建。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.Pop">
      <summary>弹出推送到绘制上下文上的最后一个不透明蒙板、不透明度、剪辑、效果或转换操作。</summary>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.PushClip(System.Windows.Media.Geometry)">
      <summary>将指定的剪辑区域推送到绘图上下文上。 </summary>
      <param name="clipGeometry">要应用于后续的绘图命令的剪辑区域。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.PushEffect(System.Windows.Media.Effects.BitmapEffect,System.Windows.Media.Effects.BitmapEffectInput)">
      <summary>将指定的 <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> 推送到绘图上下文上。</summary>
      <param name="effect">要应用于后续绘图的效果。</param>
      <param name="effectInput">要应用该效果的区域；如果该效果将应用于后续绘图的整个区域，则为 null。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.PushGuidelineSet(System.Windows.Media.GuidelineSet)">
      <summary>将指定的 <see cref="T:System.Windows.Media.GuidelineSet" /> 推送到绘图上下文上。</summary>
      <param name="guidelines">要应用于后续的绘图命令的准则集。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.PushOpacity(System.Double)">
      <summary>将指定的不透明度设置推送到绘图上下文上。</summary>
      <param name="opacity">要应用于后续的绘图命令的不透明度因子。此因子会在以前 <see cref="M:System.Windows.Media.DrawingContext.PushOpacity(System.Double)" /> 操作的基础上累积。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.PushOpacity(System.Double,System.Windows.Media.Animation.AnimationClock)">
      <summary>将指定的不透明度设置推送到绘图上下文上，并应用指定的动画时钟。</summary>
      <param name="opacity">要应用于后续的绘图命令的不透明度因子。此因子会在以前 <see cref="M:System.Windows.Media.DrawingContext.PushOpacity(System.Double)" /> 操作的基础上累积。</param>
      <param name="opacityAnimations">用于对不透明度值进行动画处理的时钟；如果没有动画，则为 null。此时钟必须基于能够对 <see cref="T:System.Double" /> 值进行动画处理的 <see cref="T:System.Windows.Media.Animation.AnimationTimeline" /> 来创建。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.PushOpacityMask(System.Windows.Media.Brush)">
      <summary>将指定的不透明蒙板推送到绘图上下文上。</summary>
      <param name="opacityMask">要应用于后续绘图的不透明蒙板。此画笔的 Alpha 值决定了它要应用到的绘图的不透明度。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.PushTransform(System.Windows.Media.Transform)">
      <summary>将指定的 <see cref="T:System.Windows.Media.Transform" /> 推送到绘图上下文上。</summary>
      <param name="transform">要应用于后续的绘图命令的转换。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.System#IDisposable#Dispose">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Media.DrawingContext.VerifyApiNonstructuralChange">
      <summary>此成员支持 WPF 基础结构，不应在代码中直接使用。</summary>
    </member>
    <member name="T:System.Windows.Media.DrawingGroup">
      <summary>表示可以作为单个绘图进行运算的绘图集合。</summary>
    </member>
    <member name="M:System.Windows.Media.DrawingGroup.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.DrawingGroup" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.DrawingGroup.Append">
      <summary>打开 <see cref="T:System.Windows.Media.DrawingGroup" /> 以填充其 <see cref="P:System.Windows.Media.DrawingGroup.Children" />。可以使用此方法将附加的 <see cref="P:System.Windows.Media.DrawingGroup.Children" /> 追加到此 <see cref="T:System.Windows.Media.DrawingGroup" />。</summary>
      <returns>可用于描述此 <see cref="T:System.Windows.Media.DrawingGroup" /> 对象的内容的 <see cref="T:System.Windows.Media.DrawingContext" />。</returns>
    </member>
    <member name="P:System.Windows.Media.DrawingGroup.BitmapEffect">
      <summary>获取或设置要应用到此 <see cref="T:System.Windows.Media.DrawingGroup" /> 的 <see cref="T:System.Windows.Media.Effects.BitmapEffect" />。这是一个依赖项属性。</summary>
      <returns>要应用到此 <see cref="T:System.Windows.Media.DrawingGroup" /> 的 <see cref="T:System.Windows.Media.Effects.BitmapEffect" />。默认值为 null。</returns>
    </member>
    <member name="P:System.Windows.Media.DrawingGroup.BitmapEffectInput">
      <summary>获取或设置 <see cref="T:System.Windows.Media.DrawingGroup" /> 应用其 <see cref="P:System.Windows.Media.DrawingGroup.BitmapEffect" /> 以及可能将 <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> 用作其 <see cref="P:System.Windows.Media.DrawingGroup.BitmapEffect" /> 的输入的区域。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.Media.DrawingGroup" /> 应用其 <see cref="P:System.Windows.Media.DrawingGroup.BitmapEffect" /> 以及可能将 <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> 用作输入的区域；或者如果 <see cref="P:System.Windows.Media.DrawingGroup.BitmapEffect" /> 应用到整个 <see cref="T:System.Windows.Media.DrawingGroup" /> 并将 <see cref="T:System.Windows.Media.DrawingGroup" /> 用作其输入，则为 null。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Media.DrawingGroup.BitmapEffectInputProperty">
      <summary>标识 <see cref="P:System.Windows.Media.DrawingGroup.BitmapEffectInput" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.DrawingGroup.BitmapEffectInput" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="F:System.Windows.Media.DrawingGroup.BitmapEffectProperty">
      <summary>标识 <see cref="P:System.Windows.Media.DrawingGroup.BitmapEffect" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.DrawingGroup.BitmapEffect" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.DrawingGroup.Children">
      <summary>获取或设置包含在此 <see cref="T:System.Windows.Media.DrawingGroup" /> 中的 <see cref="T:System.Windows.Media.Drawing" /> 对象。这是一个依赖项属性。</summary>
      <returns>此 <see cref="T:System.Windows.Media.DrawingGroup" /> 中 <see cref="T:System.Windows.Media.Drawing" /> 对象的集合。默认值为空 <see cref="T:System.Windows.Media.DrawingCollection" />。</returns>
    </member>
    <member name="F:System.Windows.Media.DrawingGroup.ChildrenProperty">
      <summary>标识 <see cref="P:System.Windows.Media.DrawingGroup.Children" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.DrawingGroup.Children" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.DrawingGroup.ClipGeometry">
      <summary>获取或设置此 <see cref="T:System.Windows.Media.DrawingGroup" /> 的剪裁区域。这是一个依赖项属性。</summary>
      <returns>用于剪裁此 <see cref="T:System.Windows.Media.DrawingGroup" /> 的 <see cref="T:System.Windows.Media.Geometry" />。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Media.DrawingGroup.ClipGeometryProperty">
      <summary>标识 <see cref="P:System.Windows.Media.DrawingGroup.ClipGeometry" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.DrawingGroup.ClipGeometry" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.DrawingGroup.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.DrawingGroup" /> 的可修改深层副本并创建其值的深层副本。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也会返回 false。</returns>
    </member>
    <member name="M:System.Windows.Media.DrawingGroup.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.DrawingGroup" /> 对象的可修改深层副本并创建其当前值的深层副本。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.DrawingGroup.GuidelineSet">
      <summary>获取或设置要应用到此 <see cref="T:System.Windows.Media.DrawingGroup" /> 的 <see cref="T:System.Windows.Media.GuidelineSet" />。这是一个依赖项属性。</summary>
      <returns>要应用到此 <see cref="T:System.Windows.Media.DrawingGroup" /> 的 <see cref="T:System.Windows.Media.GuidelineSet" />。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Media.DrawingGroup.GuidelineSetProperty">
      <summary>标识 <see cref="P:System.Windows.Media.DrawingGroup.GuidelineSet" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.DrawingGroup.GuidelineSet" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.DrawingGroup.Opacity">
      <summary>获取或设置此 <see cref="T:System.Windows.Media.DrawingGroup" /> 的不透明度。这是一个依赖项属性。</summary>
      <returns>介于 0 和 1 之间（包括 0 和 1）的值，用于描述此 <see cref="T:System.Windows.Media.DrawingGroup" /> 的不透明度。默认值为 1。</returns>
    </member>
    <member name="P:System.Windows.Media.DrawingGroup.OpacityMask">
      <summary>获取或设置用于改变此 <see cref="T:System.Windows.Media.DrawingGroup" /> 的所选区域的不透明度的画笔。这是一个依赖项属性。</summary>
      <returns>用于描述此 <see cref="T:System.Windows.Media.DrawingGroup" /> 的不透明度的 <see cref="T:System.Windows.Media.Brush" />；如果为 null，则指示不存在不透明蒙版，不透明度是统一的。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Media.DrawingGroup.OpacityMaskProperty">
      <summary>标识 <see cref="P:System.Windows.Media.DrawingGroup.OpacityMask" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.DrawingGroup.OpacityMask" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="F:System.Windows.Media.DrawingGroup.OpacityProperty">
      <summary>标识 <see cref="P:System.Windows.Media.DrawingGroup.Opacity" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.DrawingGroup.Opacity" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.DrawingGroup.Open">
      <summary>打开 <see cref="T:System.Windows.Media.DrawingGroup" /> 以填充其 <see cref="P:System.Windows.Media.DrawingGroup.Children" />，并清除现有的 <see cref="P:System.Windows.Media.DrawingGroup.Children" />。</summary>
      <returns>可用于描述此 <see cref="T:System.Windows.Media.DrawingGroup" /> 对象的内容的 <see cref="T:System.Windows.Media.DrawingContext" />。</returns>
    </member>
    <member name="P:System.Windows.Media.DrawingGroup.Transform">
      <summary>获取或设置应用到此 <see cref="T:System.Windows.Media.DrawingGroup" /> 的 <see cref="T:System.Windows.Media.Transform" />。这是一个依赖项属性。</summary>
      <returns>要应用到此 <see cref="T:System.Windows.Media.DrawingGroup" /> 的转换。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Media.DrawingGroup.TransformProperty">
      <summary>标识 <see cref="P:System.Windows.Media.DrawingGroup.Transform" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.DrawingGroup.Transform" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.DrawingImage">
      <summary> 一个使用内容的 <see cref="T:System.Windows.Media.Drawing" /> 的 <see cref="T:System.Windows.Media.ImageSource" />。</summary>
    </member>
    <member name="M:System.Windows.Media.DrawingImage.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.DrawingImage" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.DrawingImage.#ctor(System.Windows.Media.Drawing)">
      <summary>初始化具有指定 <see cref="P:System.Windows.Media.DrawingImage.Drawing" /> 的 <see cref="T:System.Windows.Media.DrawingImage" /> 类的新实例。 </summary>
      <param name="drawing">新的 <see cref="T:System.Windows.Media.DrawingImage" /> 实例的 <see cref="P:System.Windows.Media.DrawingImage.Drawing" />。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingImage.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.DrawingImage" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.DrawingImage.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.DrawingImage" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.DrawingImage.Drawing">
      <summary> 获取或设置 <see cref="T:System.Windows.Media.DrawingImage" /> 的绘图内容。</summary>
      <returns>
        <see cref="T:System.Windows.Media.DrawingImage" /> 的绘图内容。默认值为 Null。</returns>
    </member>
    <member name="F:System.Windows.Media.DrawingImage.DrawingProperty">
      <summary>标识 <see cref="P:System.Windows.Media.DrawingImage.Drawing" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.DrawingImage.Drawing" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.DrawingImage.Height">
      <summary> 获取 <see cref="T:System.Windows.Media.DrawingImage" /> 的高度。</summary>
      <returns>
        <see cref="T:System.Windows.Media.DrawingImage" />的高度。</returns>
    </member>
    <member name="P:System.Windows.Media.DrawingImage.Metadata">
      <summary>获取 <see cref="T:System.Windows.Media.DrawingImage" /> 的元数据。</summary>
      <returns>
        <see cref="T:System.Windows.Media.DrawingImage" /> 的元数据。</returns>
    </member>
    <member name="P:System.Windows.Media.DrawingImage.Width">
      <summary> 获取 <see cref="T:System.Windows.Media.DrawingImage" /> 的宽度。</summary>
      <returns>
        <see cref="T:System.Windows.Media.DrawingImage" />的宽度。</returns>
    </member>
    <member name="T:System.Windows.Media.DrawingVisual">
      <summary>
        <see cref="T:System.Windows.Media.DrawingVisual" /> 是一个可视对象，可用于在屏幕上呈现向量图形。内容由系统保存。</summary>
    </member>
    <member name="M:System.Windows.Media.DrawingVisual.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.DrawingVisual" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Windows.Media.DrawingVisual.Drawing">
      <summary>获取 <see cref="T:System.Windows.Media.DrawingVisual" /> 对象的绘图内容。</summary>
      <returns>获取一个 <see cref="T:System.Windows.Media.DrawingGroup" /> 类型的值，该值表示 <see cref="T:System.Windows.Media.DrawingVisual" /> 中 <see cref="T:System.Windows.Media.Drawing" /> 对象的集合。</returns>
    </member>
    <member name="M:System.Windows.Media.DrawingVisual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
      <summary>确定可视对象的边界中是否存在几何图形值。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.GeometryHitTestResult" /> 类型的值。</returns>
      <param name="hitTestParameters">一个 <see cref="T:System.Windows.Media.GeometryHitTestParameters" /> 类型的值，指定命中测试所依据的 <see cref="T:System.Windows.Media.Geometry" />。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingVisual.HitTestCore(System.Windows.Media.PointHitTestParameters)">
      <summary>确定在 <see cref="T:System.Windows.Media.DrawingVisual" /> 对象的边界中是否存在点坐标值。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.HitTestResult" /> 类型的值，表示从命中测试中返回的 <see cref="T:System.Windows.Media.Visual" />。</returns>
      <param name="hitTestParameters">一个 <see cref="T:System.Windows.Media.PointHitTestParameters" /> 类型的值，指定命中测试所依据的 <see cref="T:System.Windows.Point" />。</param>
    </member>
    <member name="M:System.Windows.Media.DrawingVisual.RenderOpen">
      <summary>打开用于呈现的 <see cref="T:System.Windows.Media.DrawingVisual" /> 对象。返回的 <see cref="T:System.Windows.Media.DrawingContext" /> 值可用于呈现为 <see cref="T:System.Windows.Media.DrawingVisual" />。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.DrawingContext" /> 类型的值。</returns>
    </member>
    <member name="T:System.Windows.Media.EdgeMode">
      <summary>确定如何呈现非文本绘图基元的边缘。</summary>
    </member>
    <member name="F:System.Windows.Media.EdgeMode.Unspecified">
      <summary>未指定边缘模式。请不要改变非文本绘图基元当前的边缘模式。这是默认值。</summary>
    </member>
    <member name="F:System.Windows.Media.EdgeMode.Aliased">
      <summary>将非文本绘图基元的边缘呈现为锯齿形边缘。</summary>
    </member>
    <member name="T:System.Windows.Media.EllipseGeometry">
      <summary>表示圆或椭圆的几何图形。</summary>
    </member>
    <member name="M:System.Windows.Media.EllipseGeometry.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.EllipseGeometry" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.EllipseGeometry.#ctor(System.Windows.Point,System.Double,System.Double)">
      <summary>将 <see cref="T:System.Windows.Media.EllipseGeometry" /> 类的新实例初始化为一个具有指定中心点位置、x 轴半径和 y 轴半径的椭圆。</summary>
      <param name="center">椭圆的中心位置。</param>
      <param name="radiusX">椭圆的水平半径。</param>
      <param name="radiusY">椭圆的垂直半径。</param>
    </member>
    <member name="M:System.Windows.Media.EllipseGeometry.#ctor(System.Windows.Point,System.Double,System.Double,System.Windows.Media.Transform)">
      <summary>初始化具有指定位置、大小和转换的 <see cref="T:System.Windows.Media.EllipseGeometry" /> 类的一个新实例。 </summary>
      <param name="center">椭圆的中心位置。</param>
      <param name="radiusX">椭圆的水平半径。</param>
      <param name="radiusY">椭圆的垂直半径。</param>
      <param name="transform">要应用于椭圆的转换。</param>
    </member>
    <member name="M:System.Windows.Media.EllipseGeometry.#ctor(System.Windows.Rect)">
      <summary>初始化 <see cref="T:System.Windows.Media.EllipseGeometry" /> 类的一个新实例，其水平直径与传递的 <see cref="T:System.Windows.Rect" /> 的宽度相等，垂直直径与传递的 <see cref="T:System.Windows.Rect" /> 的长度相等，中心点位置与传递的 <see cref="T:System.Windows.Rect" /> 的中心相等。</summary>
      <param name="rect">描述椭圆维度的矩形。</param>
    </member>
    <member name="P:System.Windows.Media.EllipseGeometry.Bounds">
      <summary>获取表示此 <see cref="T:System.Windows.Media.EllipseGeometry" /> 的边界框的 <see cref="T:System.Windows.Rect" />。此方法不考虑可能由笔画添加的额外区域。</summary>
      <returns>
        <see cref="T:System.Windows.Media.EllipseGeometry" /> 的边界框。</returns>
    </member>
    <member name="P:System.Windows.Media.EllipseGeometry.Center">
      <summary>获取或设置 <see cref="T:System.Windows.Media.EllipseGeometry" /> 的中心点。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.Media.EllipseGeometry" /> 的中心点。</returns>
    </member>
    <member name="F:System.Windows.Media.EllipseGeometry.CenterProperty">
      <summary>标识 <see cref="P:System.Windows.Media.EllipseGeometry.Center" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.EllipseGeometry.Center" /> 依赖项属性标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.EllipseGeometry.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.EllipseGeometry" /> 的可修改复本，并制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.EllipseGeometry.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.EllipseGeometry" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.EllipseGeometry.GetArea(System.Double,System.Windows.Media.ToleranceType)">
      <summary>获取此 <see cref="T:System.Windows.Media.EllipseGeometry" /> 的面积。</summary>
      <returns>此椭圆的填充区域的面积。</returns>
      <param name="tolerance">几何图形的多边形近似中两点间距离的最大界限。值越小，生成的结果就越准确，但执行速度会变慢。如果 <paramref name="tolerance" /> 小于 10-6，则改用 10-6。</param>
      <param name="type">枚举值之一，<see cref="F:System.Windows.Media.ToleranceType.Absolute" /> 或 <see cref="F:System.Windows.Media.ToleranceType.Relative" />，该值指定公差因子是绝对值还是此几何图形面积的相对值。</param>
    </member>
    <member name="M:System.Windows.Media.EllipseGeometry.IsEmpty">
      <summary>确定此 <see cref="T:System.Windows.Media.EllipseGeometry" /> 对象是否为空。</summary>
      <returns>
            如果此 <see cref="T:System.Windows.Media.EllipseGeometry" /> 为空，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.EllipseGeometry.MayHaveCurves">
      <summary>确定此 <see cref="T:System.Windows.Media.EllipseGeometry" /> 对象是否可以具有曲线段。</summary>
      <returns>
            如果此 <see cref="T:System.Windows.Media.EllipseGeometry" /> 对象可以具有曲线段，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.EllipseGeometry.RadiusX">
      <summary>获取或设置 <see cref="T:System.Windows.Media.EllipseGeometry" /> 的 x 轴半径值。 这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.Media.EllipseGeometry" /> 的 x 轴半径值。</returns>
    </member>
    <member name="F:System.Windows.Media.EllipseGeometry.RadiusXProperty">
      <summary>标识 <see cref="P:System.Windows.Media.EllipseGeometry.RadiusX" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.EllipseGeometry.RadiusX" /> 依赖项属性标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.EllipseGeometry.RadiusY">
      <summary>获取或设置 <see cref="T:System.Windows.Media.EllipseGeometry" /> 的 y 轴半径值。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.Media.EllipseGeometry" /> 的 y 轴半径值。</returns>
    </member>
    <member name="F:System.Windows.Media.EllipseGeometry.RadiusYProperty">
      <summary>标识 <see cref="P:System.Windows.Media.EllipseGeometry.RadiusY" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.EllipseGeometry.RadiusY" /> 依赖项属性标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.ExceptionEventArgs">
      <summary>提供媒体事件的错误异常数据。</summary>
    </member>
    <member name="P:System.Windows.Media.ExceptionEventArgs.ErrorException">
      <summary>获取详细描述失败原因的异常。</summary>
      <returns>用于详细描述错误情况的异常。</returns>
      <exception cref="T:System.Security.SecurityException">试图访问媒体或图像文件遭到拒绝。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到媒体或图像文件。</exception>
      <exception cref="T:System.IO.FileFormatException">所安装的任何编解码器都不支持此媒体或图像格式。- 或 -无法识别文件格式。</exception>
      <exception cref="T:System.Windows.Media.InvalidWmpVersionException">所检测到的 Microsoft Windows Media Player 版本不受支持。</exception>
      <exception cref="T:System.NotSupportedException">该操作不受支持。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">出现 COM 错误代码。</exception>
    </member>
    <member name="T:System.Windows.Media.FamilyTypeface">
      <summary>指定 <see cref="T:System.Windows.Media.FontFamily" /> 所支持的一种字样的详细信息。</summary>
    </member>
    <member name="M:System.Windows.Media.FamilyTypeface.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.FamilyTypeface" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Media.FamilyTypeface.AdjustedFaceNames">
      <summary>获取字体差分器调整的本地化字体名称的集合。</summary>
      <returns>一个表示本地化字样名称的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 类型的数组。</returns>
    </member>
    <member name="P:System.Windows.Media.FamilyTypeface.CapsHeight">
      <summary>获取或设置从基线到英语大写字母顶部的距离（相对于 em 大小）。</summary>
      <returns>一个 <see cref="T:System.Double" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Media.FamilyTypeface.DeviceFontCharacterMetrics">
      <summary>获取设备字体系列字样的字符规格的集合。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.CharacterMetricsDictionary" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Media.FamilyTypeface.DeviceFontName">
      <summary>获取或设置设备字体系列字样的名称或唯一标识符。</summary>
      <returns>一个表示设备字体名称的 <see cref="T:System.String" /> 类型的值。</returns>
    </member>
    <member name="M:System.Windows.Media.FamilyTypeface.Equals(System.Object)">
      <summary>比较两个字体系列字样是否相等。</summary>
      <returns>
            如果 <paramref name="typeface" /> 不为 Null 并且与此字样具有相同的属性，则为 true；否则为 false。</returns>
      <param name="o">表示要比较的字样的 <see cref="T:System.Object" /> 值。</param>
    </member>
    <member name="M:System.Windows.Media.FamilyTypeface.Equals(System.Windows.Media.FamilyTypeface)">
      <summary>比较两个字体系列字样是否相等。</summary>
      <returns>
            如果 <paramref name="typeface" /> 不为 Null 并且与此字体系列字样具有相同的属性，则为 true；否则为 false。</returns>
      <param name="typeface">要比较的 <see cref="T:System.Windows.Media.FamilyTypeface" /> 值。</param>
    </member>
    <member name="M:System.Windows.Media.FamilyTypeface.GetHashCode">
      <summary>作为 <see cref="T:System.Windows.Media.FamilyTypeface" /> 对象的哈希函数。<see cref="M:System.Windows.Media.FamilyTypeface.GetHashCode" /> 方法适合在哈希算法和类似哈希表的数据结构中使用。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Media.FamilyTypeface.Stretch">
      <summary>获取或设置所设计的字体系列字样的拉伸值。</summary>
      <returns>一个 <see cref="T:System.Windows.FontStretch" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Media.FamilyTypeface.StrikethroughPosition">
      <summary>获取或设置相对于基线的删除线的位置值。此值也相对于 em 大小。</summary>
      <returns>一个 <see cref="T:System.Double" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Media.FamilyTypeface.StrikethroughThickness">
      <summary>获取或设置相对于 em 大小的删除线宽度。</summary>
      <returns>一个 <see cref="T:System.Double" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Media.FamilyTypeface.Style">
      <summary>获取或设置字体系列字样设计的样式。</summary>
      <returns>一个 <see cref="T:System.Windows.FontStyle" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Media.FamilyTypeface.UnderlinePosition">
      <summary>获取或设置相对于基线的下划线的位置值。此值也相对于 em 大小。</summary>
      <returns>一个 <see cref="T:System.Double" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Media.FamilyTypeface.UnderlineThickness">
      <summary>获取或设置相对于 em 大小的下划线宽度。</summary>
      <returns>一个 <see cref="T:System.Double" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Media.FamilyTypeface.Weight">
      <summary>获取或设置所设计的此字体系列字样的粗细。</summary>
      <returns>一个 <see cref="T:System.Windows.FontWeight" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Media.FamilyTypeface.XHeight">
      <summary>获取或设置相对于 em 大小的西文 x 高度。</summary>
      <returns>一个 <see cref="T:System.Double" /> 类型的值。</returns>
    </member>
    <member name="T:System.Windows.Media.FamilyTypefaceCollection">
      <summary>表示 <see cref="T:System.Windows.Media.FamilyTypeface" /> 实例的集合。</summary>
    </member>
    <member name="M:System.Windows.Media.FamilyTypefaceCollection.Add(System.Windows.Media.FamilyTypeface)">
      <summary>将指定的 <see cref="T:System.Windows.Media.FamilyTypeface" /> 对象插入集合中。</summary>
      <param name="item">要插入的 <see cref="T:System.Windows.Media.FamilyTypeface" /> 对象。</param>
    </member>
    <member name="M:System.Windows.Media.FamilyTypefaceCollection.Clear">
      <summary>从 <see cref="T:System.Windows.Media.FamilyTypefaceCollection" /> 中移除所有 <see cref="T:System.Windows.Media.FamilyTypeface" /> 对象。</summary>
    </member>
    <member name="M:System.Windows.Media.FamilyTypefaceCollection.Contains(System.Windows.Media.FamilyTypeface)">
      <summary>确定集合是否包含指定的 <see cref="T:System.Windows.Media.FamilyTypeface" />。</summary>
      <returns>
            如果 <paramref name="item" /> 位于集合中，则为 true ；否则为 false。</returns>
      <param name="item">要定位的 <see cref="T:System.Windows.Media.FamilyTypeface" /> 对象。</param>
    </member>
    <member name="M:System.Windows.Media.FamilyTypefaceCollection.CopyTo(System.Windows.Media.FamilyTypeface[],System.Int32)">
      <summary>从指定的索引位置开始，将集合中的 <see cref="T:System.Windows.Media.FamilyTypeface" /> 对象复制到 <see cref="T:System.Windows.Media.FamilyTypefaceCollection" /> 数组中。</summary>
      <param name="array">目标数组。</param>
      <param name="index">开始进行复制的索引位置（索引从零开始）。</param>
    </member>
    <member name="P:System.Windows.Media.FamilyTypefaceCollection.Count">
      <summary>获取 <see cref="T:System.Windows.Media.FamilyTypefaceCollection" /> 中的 <see cref="T:System.Windows.Media.FamilyTypeface" /> 对象数。</summary>
      <returns>集合中的对象数。</returns>
    </member>
    <member name="M:System.Windows.Media.FamilyTypefaceCollection.GetEnumerator">
      <summary>返回可循环访问集合的枚举数。</summary>
      <returns>可循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Windows.Media.FamilyTypefaceCollection.IndexOf(System.Windows.Media.FamilyTypeface)">
      <summary>返回集合内指定 <see cref="T:System.Windows.Media.FamilyTypeface" /> 对象的索引。</summary>
      <returns>如果可找到，则为 <paramref name="item" /> 的从零开始的索引；否则为 -1；</returns>
      <param name="item">要定位的 <see cref="T:System.Windows.Media.FamilyTypeface" /> 对象。</param>
    </member>
    <member name="M:System.Windows.Media.FamilyTypefaceCollection.Insert(System.Int32,System.Windows.Media.FamilyTypeface)">
      <summary>将指定 <see cref="T:System.Windows.Media.FamilyTypeface" /> 对象插入到集合中的指定索引位置处。</summary>
      <param name="index">要插入对象的从零开始的索引位置。</param>
      <param name="item">要插入的 <see cref="T:System.Windows.Media.FamilyTypeface" /> 对象。</param>
    </member>
    <member name="P:System.Windows.Media.FamilyTypefaceCollection.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Windows.Media.FamilyTypefaceCollection" /> 是否为只读。</summary>
      <returns>
            如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.FamilyTypefaceCollection.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.Windows.Media.FamilyTypeface" />，它存储在 <see cref="T:System.Windows.Media.FamilyTypefaceCollection" /> 的从零开始的索引处。</summary>
      <param name="index">
        <see cref="T:System.Windows.Media.FamilyTypefaceCollection" /> 的从零开始的索引，从此位置可获取或设置 <see cref="T:System.Windows.Media.FamilyTypeface" />。</param>
    </member>
    <member name="M:System.Windows.Media.FamilyTypefaceCollection.Remove(System.Windows.Media.FamilyTypeface)">
      <summary>从集合中移除指定的 <see cref="T:System.Windows.Media.FamilyTypeface" /> 对象。</summary>
      <returns>
            如果成功删除了 <paramref name="item" />，则为 true；否则为 false。</returns>
      <param name="item">要移除的 <see cref="T:System.Windows.Media.FamilyTypeface" /> 对象。</param>
    </member>
    <member name="M:System.Windows.Media.FamilyTypefaceCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除位于指定索引位置的指定 <see cref="T:System.Windows.Media.FamilyTypeface" /> 对象。</summary>
      <param name="index">要从中删除对象的从零开始的索引位置。</param>
    </member>
    <member name="M:System.Windows.Media.FamilyTypefaceCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />。</summary>
      <param name="array">从零开始的 <see cref="T:System.Array" />，它接收从 <see cref="T:System.Windows.Media.FamilyTypeFaceCollection" /> 复制来的项。</param>
      <param name="index">指定的 <see cref="T:System.Array" /> 中接收复制内容的第一个位置。</param>
    </member>
    <member name="P:System.Windows.Media.FamilyTypefaceCollection.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>
            如果对 <see cref="T:System.Windows.Media.FamilyTypeFaceCollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.FamilyTypefaceCollection.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>可用于同步对 <see cref="T:System.Windows.Media.FamilyTypeFaceCollection" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Windows.Media.FamilyTypefaceCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections." /><see cref="IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Windows.Media.FamilyTypefaceCollection.System#Collections#IList#Add(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。</summary>
      <returns>新元素的插入位置。</returns>
      <param name="value">要添加到 <see cref="T:System.Windows.Media.FamilyTypeFaceCollection" /> 的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Windows.Media.FamilyTypefaceCollection.System#Collections#IList#Contains(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。</summary>
      <returns>
            如果在 <see cref="T:System.Windows.Media.FamilyTypeFaceCollection" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Windows.Media.TextEffectCollection" /> 中查找的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Windows.Media.FamilyTypefaceCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。</summary>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <param name="value">要在 <see cref="T:System.Windows.Media.FamilyTypeFaceCollection" /> 中查找的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Windows.Media.FamilyTypefaceCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。</summary>
      <param name="index">从零开始的索引，在该处插入 <see cref="T:System.Object" />。</param>
      <param name="item"></param>
    </member>
    <member name="P:System.Windows.Media.FamilyTypefaceCollection.System#Collections#IList#IsFixedSize">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Media.FamilyTypeFaceCollection" /> 具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.FamilyTypefaceCollection.System#Collections#IList#Item(System.Int32)">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.Item(System.Int32)" />。</summary>
      <returns>指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
    </member>
    <member name="M:System.Windows.Media.FamilyTypefaceCollection.System#Collections#IList#Remove(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Remove(System.Object)" />。</summary>
      <param name="value">要从 <see cref="T:System.Windows.Media.FamilyTypeFaceCollection" /> 移除的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="T:System.Windows.Media.FillRule">
      <summary> 指定如何组合 <see cref="T:System.Windows.Media.Geometry" /> 中包含的 <see cref="T:System.Windows.Media.PathFigure" /> 对象的相交区域，以便形成 <see cref="T:System.Windows.Media.Geometry" /> 的区域。</summary>
    </member>
    <member name="F:System.Windows.Media.FillRule.EvenOdd">
      <summary>确定一个点是否位于填充区域内的规则，具体方法是从该点沿任意方向画一条无限长的射线，然后计算该射线在给定形状中因交叉而形成的路径段数。如果此数目为奇数，则该点在内部；如果是偶数，则该点在外部。</summary>
    </member>
    <member name="F:System.Windows.Media.FillRule.Nonzero">
      <summary>确定一个点是否位于路径填充区域内的规则，具体方法是从该点沿任意方向画一条无限长的射线，然后检查形状段与该射线的交点。从零开始计数，每当线段从左向右穿过该射线时加 1，而每当路径段从右向左穿过该射线时减 1。计算交点的数目后，如果结果为零，则说明该点在路径外部。否则，说明该点位于路径内部。</summary>
    </member>
    <member name="T:System.Windows.Media.FontEmbeddingManager">
      <summary>提供物理字体和复合字体嵌入功能。</summary>
    </member>
    <member name="M:System.Windows.Media.FontEmbeddingManager.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.FontEmbeddingManager" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.FontEmbeddingManager.GetUsedGlyphs(System.Uri)">
      <summary>检索标志符号字样所使用的标志符号列表。</summary>
      <returns>表示标志符号的 <see cref="T:System.UInt16" /> 值的集合。</returns>
      <param name="glyphTypeface">一个 <see cref="T:System.Uri" /> 值，该值表示包含标志符号的标志符号字样的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="glyphTypeface" /> 值不引用以前记录的标志符号字样。</exception>
    </member>
    <member name="P:System.Windows.Media.FontEmbeddingManager.GlyphTypefaceUris">
      <summary>返回 <see cref="M:System.Windows.Media.FontEmbeddingManager.RecordUsage(System.Windows.Media.GlyphRun)" /> 方法中指定的 <see cref="T:System.Windows.Media.GlyphRun" /> 所使用的标志符号字样集合。</summary>
      <returns>表示标志符号字样的 <see cref="T:System.Uri" /> 值的集合。</returns>
    </member>
    <member name="M:System.Windows.Media.FontEmbeddingManager.RecordUsage(System.Windows.Media.GlyphRun)">
      <summary>启动有关标志符号字样和索引（由指定的 <see cref="T:System.Windows.Media.GlyphRun" /> 所使用）的用法信息的集合。</summary>
      <param name="glyphRun">已收集其用法信息的 <see cref="T:System.Windows.Media.GlyphRun" />。</param>
    </member>
    <member name="T:System.Windows.Media.FontEmbeddingRight">
      <summary>描述在 OpenType 字体文件中指定的字体嵌入权限。</summary>
    </member>
    <member name="F:System.Windows.Media.FontEmbeddingRight.Installable">
      <summary>字体如果具有该设置，则表示可以通过应用程序将字体嵌入并永久安装在远程系统上。对于该字体，远程系统用户与原购买者具有相同的权利、义务和许可，并且应与原购买者遵守同样的最终用户许可协议、著作权、设计专利和/或商标法。</summary>
    </member>
    <member name="F:System.Windows.Media.FontEmbeddingRight.InstallableButNoSubsetting">
      <summary>字体如果具有该设置，则表示可以通过应用程序将字体嵌入并永久安装在远程系统上。在嵌入之前，这些字体不可以带有子集。</summary>
    </member>
    <member name="F:System.Windows.Media.FontEmbeddingRight.InstallableButWithBitmapsOnly">
      <summary>字体如果具有该设置，则表示可以通过应用程序将字体嵌入并永久安装在远程系统上。只可以嵌入字体中包含的位图。不可以嵌入大纲数据。</summary>
    </member>
    <member name="F:System.Windows.Media.FontEmbeddingRight.InstallableButNoSubsettingAndWithBitmapsOnly">
      <summary>字体如果具有该设置，则表示可以通过应用程序将字体嵌入并永久安装在远程系统上。在嵌入之前，这些字体不可以带有子集。只可以嵌入字体中包含的位图。不可以嵌入大纲数据。</summary>
    </member>
    <member name="F:System.Windows.Media.FontEmbeddingRight.RestrictedLicense">
      <summary>字体如果具有该设置，则在未事先获得法定所有者的允许之前，不得修改、嵌入或交换字体。</summary>
    </member>
    <member name="F:System.Windows.Media.FontEmbeddingRight.PreviewAndPrint">
      <summary>可以嵌入字体以及将字体临时加载到远程系统上。必须以只读模式打开包含该字体的文档。</summary>
    </member>
    <member name="F:System.Windows.Media.FontEmbeddingRight.PreviewAndPrintButNoSubsetting">
      <summary>可以嵌入字体以及将字体临时加载到远程系统上。必须以只读模式打开包含该字体的文档。在嵌入之前，该字体不可以带有子集。</summary>
    </member>
    <member name="F:System.Windows.Media.FontEmbeddingRight.PreviewAndPrintButWithBitmapsOnly">
      <summary>可以嵌入字体以及将字体临时加载到远程系统上。必须以只读模式打开包含该字体的文档。只可以嵌入该字体中包含的位图。不可以嵌入大纲数据。</summary>
    </member>
    <member name="F:System.Windows.Media.FontEmbeddingRight.PreviewAndPrintButNoSubsettingAndWithBitmapsOnly">
      <summary>可以嵌入字体以及将字体临时加载到远程系统上。必须以只读模式打开包含该字体的文档。在嵌入之前，该字体不可以带有子集。只可以嵌入该字体中包含的位图。不可以嵌入大纲数据。</summary>
    </member>
    <member name="F:System.Windows.Media.FontEmbeddingRight.Editable">
      <summary>可以嵌入字体，但只能将字体临时安装在其他系统上。与 <see cref="F:System.Windows.Media.FontEmbeddingRight.PreviewAndPrint" /> 设置相反，您可以打开包含“可编辑”字体的文档以进行阅读，可以进行编辑，也可以保存所做的更改。</summary>
    </member>
    <member name="F:System.Windows.Media.FontEmbeddingRight.EditableButNoSubsetting">
      <summary>可以嵌入字体，但只能将字体临时安装在其他系统上。您可以打开包含该字体的文档以进行阅读，可以进行编辑，也可以保存所做的更改。在嵌入之前，该字体不可以带有子集。</summary>
    </member>
    <member name="F:System.Windows.Media.FontEmbeddingRight.EditableButWithBitmapsOnly">
      <summary>可以嵌入字体，但只能将字体临时安装在其他系统上。您可以打开包含该字体的文档以进行阅读，可以进行编辑，也可以保存所做的更改。只可以嵌入该字体中包含的位图。不可以嵌入大纲数据。</summary>
    </member>
    <member name="F:System.Windows.Media.FontEmbeddingRight.EditableButNoSubsettingAndWithBitmapsOnly">
      <summary>可以嵌入字体，但只能将字体临时安装在其他系统上。您可以打开包含该字体的文档以进行阅读，可以进行编辑，也可以保存所做的更改。在嵌入之前，该字体不可以带有子集。只可以嵌入该字体中包含的位图。不可以嵌入大纲数据。</summary>
    </member>
    <member name="T:System.Windows.Media.FontFamily">
      <summary>表示一系列相关字体。</summary>
    </member>
    <member name="M:System.Windows.Media.FontFamily.#ctor">
      <summary>初始化匿名 <see cref="T:System.Windows.Media.FontFamily" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.FontFamily.#ctor(System.String)">
      <summary>从指定的字体系列名称初始化 <see cref="T:System.Windows.Media.FontFamily" /> 类的一个新实例。</summary>
      <param name="familyName">构成新 <see cref="T:System.Windows.Media.FontFamily" /> 的一个或多个系列名称。多个系列名称之间应使用逗号分隔。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="familyName" /> 不能为 null。</exception>
    </member>
    <member name="M:System.Windows.Media.FontFamily.#ctor(System.Uri,System.String)">
      <summary>从指定的字体系列名称和可选的基统一资源标识符 (URI) 值初始化 <see cref="T:System.Windows.Media.FontFamily" /> 类的一个新实例。</summary>
      <param name="baseUri">指定用来解析 <paramref name="familyName" /> 的基URI。</param>
      <param name="familyName">构成新 <see cref="T:System.Windows.Media.FontFamily" /> 的一个或多个系列名称。多个系列名称之间应使用逗号分隔。</param>
    </member>
    <member name="P:System.Windows.Media.FontFamily.Baseline">
      <summary>获取或设置基线与字符单元格顶部之间的距离。</summary>
      <returns>一个 <see cref="T:System.Double" />，指示基线与字符单元格顶部之间的距离，表示为字体全身大小的一部分。</returns>
    </member>
    <member name="P:System.Windows.Media.FontFamily.BaseUri">
      <summary>获取用于解析字体系列名称的基统一资源标识符 (URI)。</summary>
      <returns>一个 <see cref="T:System.Uri" /> 类型的值。</returns>
    </member>
    <member name="M:System.Windows.Media.FontFamily.Equals(System.Object)">
      <summary>获取一个值，该值指示当前的字体系列对象是否与指定的字体系列对象相同。</summary>
      <returns>
如果 <paramref name="o" /> 与当前的 <see cref="T:System.Windows.Media.FontFamily" /> 对象相同，则为 true；否则为 false。如果 <paramref name="o" /> 不是 <see cref="T:System.Windows.Media.FontFamily" /> 对象，则返回 false。</returns>
      <param name="o">要比较的 <see cref="T:System.Windows.Media.FontFamily" /> 对象。</param>
    </member>
    <member name="P:System.Windows.Media.FontFamily.FamilyMaps">
      <summary>获取 <see cref="T:System.Windows.Media.FontFamilyMap" /> 对象的集合。</summary>
      <returns>一个包含 <see cref="T:System.Windows.Media.FontFamilyMap" /> 对象的 <see cref="T:System.Windows.Media.FontFamilyMapCollection" />。</returns>
    </member>
    <member name="P:System.Windows.Media.FontFamily.FamilyNames">
      <summary>获取表示 <see cref="T:System.Windows.Media.FontFamily" /> 对象的字体系列名称的字符串和 <see cref="T:System.Globalization.CultureInfo" /> 值的集合。</summary>
      <returns>一个表示字体系列名称的 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" />。</returns>
    </member>
    <member name="P:System.Windows.Media.FontFamily.FamilyTypefaces">
      <summary>获取 <see cref="T:System.Windows.Media.FontFamily" /> 对象的字体集合。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.FamilyTypefaceCollection" />，表示 <see cref="T:System.Windows.Media.FontFamily" /> 对象的字体集合。</returns>
    </member>
    <member name="M:System.Windows.Media.FontFamily.GetHashCode">
      <summary>作为 <see cref="T:System.Windows.Media.FontFamily" /> 的哈希函数。它适用于哈希算法和诸如哈希表之类的数据结构。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 值，表示当前对象的哈希代码。</returns>
    </member>
    <member name="M:System.Windows.Media.FontFamily.GetTypefaces">
      <summary>返回 <see cref="T:System.Windows.Media.Typeface" /> 对象的集合，这些对象表示默认的系统字体位置中的字体。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Typeface" /> 对象的 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="P:System.Windows.Media.FontFamily.LineSpacing">
      <summary>获取或设置 <see cref="T:System.Windows.Media.FontFamily" /> 对象的行距值。行距是使用此字体的文本的建议基线间距离（相对于全身大小）。</summary>
      <returns>一个 <see cref="T:System.Double" />，表示 <see cref="T:System.Windows.Media.FontFamily" /> 对象的行距。</returns>
    </member>
    <member name="P:System.Windows.Media.FontFamily.Source">
      <summary>获取用于构造 <see cref="T:System.Windows.Media.FontFamily" /> 对象的字体系列名称。</summary>
      <returns>
        <see cref="T:System.Windows.Media.FontFamily" /> 对象的字体系列名称。</returns>
    </member>
    <member name="M:System.Windows.Media.FontFamily.ToString">
      <summary>返回 <see cref="P:System.Windows.Media.FontFamily.Source" /> 属性的值。</summary>
      <returns>
        <see cref="T:System.Windows.Media.FontFamily" /> 对象的源位置，包括目录或统一资源标识符 (URI) 位置引用。</returns>
    </member>
    <member name="T:System.Windows.Media.FontFamilyConverter">
      <summary>在 <see cref="T:System.String" /> 类型的实例与 <see cref="T:System.Windows.Media.FontFamily" /> 实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Media.FontFamilyConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.FontFamilyConverter" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.FontFamilyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将一个类从给定类型转换成 <see cref="T:System.Windows.Media.FontFamily" /> 实例。</summary>
      <returns>
            如果转换器可从指定类型转换成 <see cref="T:System.Windows.GridLength" /> 的实例，则为 true；否则为 false。</returns>
      <param name="td">描述类型的上下文信息。</param>
      <param name="t">正被计算用于转换的源类型。</param>
    </member>
    <member name="M:System.Windows.Media.FontFamilyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将 <see cref="T:System.Windows.Media.FontFamily" /> 实例转换成不同类型。</summary>
      <returns>
            如果转换器可以将此 <see cref="T:System.Windows.Media.FontFamily" /> 实例转换为指定类型，则为 true；否则为 false。</returns>
      <param name="context">描述类型的上下文信息。</param>
      <param name="destinationType">正被计算用于转换的此 <see cref="T:System.Windows.Media.FontFamily" /> 实例的所需类型。</param>
    </member>
    <member name="M:System.Windows.Media.FontFamilyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>试图将指定对象转换为 <see cref="T:System.Windows.Media.FontFamily" /> 的实例。</summary>
      <returns>从已转换的 <paramref name="o" /> 参数创建的 <see cref="T:System.Windows.Media.FontFamily" /> 实例。</returns>
      <param name="context">描述类型的上下文信息。</param>
      <param name="cultureInfo">转换过程中应考虑的区域性特定信息。</param>
      <param name="o">正在转换的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> 不是 null，而且不是可转换为 <see cref="T:System.Windows.Media.FontFamily" /> 的有效类型。</exception>
    </member>
    <member name="M:System.Windows.Media.FontFamilyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>试图将指定对象转换为 <see cref="T:System.Windows.Media.FontFamily" /> 的实例。</summary>
      <returns>从 <see cref="T:System.Windows.Media.FontFamily" /> 的已转换实例创建的对象。</returns>
      <param name="context">描述类型的上下文信息。</param>
      <param name="culture">转换过程中应考虑的区域性特定信息。</param>
      <param name="value">正在转换的对象。</param>
      <param name="destinationType">此 <see cref="T:System.Windows.Media.FontFamily" /> 实例被转换成的类型。</param>
      <exception cref="T:System.ArgumentException">当 <paramref name="value" /> 或 <paramref name="destinationType" /> 不是有效的转换类型时发生。</exception>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="value" /> 或 <paramref name="destinationType" /> 为 null，则发生。</exception>
    </member>
    <member name="T:System.Windows.Media.FontFamilyMap">
      <summary>定义要用于一组指定的 Unicode 码位和一种特定于区域性的语言的 <see cref="T:System.Windows.Media.FontFamily" />。</summary>
    </member>
    <member name="M:System.Windows.Media.FontFamilyMap.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.FontFamilyMap" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Media.FontFamilyMap.Language">
      <summary>获取或设置 <see cref="T:System.Windows.Media.FontFamilyMap" /> 的特定于区域性的语言。</summary>
      <returns>一个表示特定于区域性的语言的 <see cref="T:System.Windows.Markup.XmlLanguage" /> 值。默认值为 null 字符串。</returns>
    </member>
    <member name="P:System.Windows.Media.FontFamilyMap.Scale">
      <summary>获取或设置目标 <see cref="T:System.Windows.Media.FontFamily" /> 的字体缩放比例。</summary>
      <returns>一个表示缩放比例的 <see cref="T:System.Double" /> 值。默认值为 1.0。</returns>
    </member>
    <member name="P:System.Windows.Media.FontFamilyMap.Target">
      <summary>获取或设置 Unicode 范围所适用的目标字体系列名称。</summary>
      <returns>一个表示字体系列名称的 <see cref="T:System.String" /> 值。默认值为 null 字符串。</returns>
    </member>
    <member name="P:System.Windows.Media.FontFamilyMap.Unicode">
      <summary>获取或设置一个表示一个或多个 Unicode 码位范围的字符串值。</summary>
      <returns>一个表示 Unicode 码位范围的 <see cref="T:System.String" /> 值。默认值为“0000-10ffff”。</returns>
      <exception cref="T:System.FormatException">Unicode 范围无效。</exception>
    </member>
    <member name="T:System.Windows.Media.FontFamilyMapCollection">
      <summary>表示一个由 <see cref="T:System.Windows.Media.FontFamilyMap" /> 对象组成的有序集合。</summary>
    </member>
    <member name="M:System.Windows.Media.FontFamilyMapCollection.Add(System.Windows.Media.FontFamilyMap)">
      <summary>将指定的 <see cref="T:System.Windows.Media.FontFamilyMap" /> 对象插入集合中。</summary>
      <param name="item">要插入的对象。</param>
    </member>
    <member name="M:System.Windows.Media.FontFamilyMapCollection.Clear">
      <summary>从 <see cref="T:System.Windows.Media.FontFamilyMapCollection" /> 中移除所有 <see cref="T:System.Windows.Media.FontFamilyMap" /> 对象。</summary>
    </member>
    <member name="M:System.Windows.Media.FontFamilyMapCollection.Contains(System.Windows.Media.FontFamilyMap)">
      <summary>指示 <see cref="T:System.Windows.Media.FontFamilyMapCollection" /> 是否包含指定的 <see cref="T:System.Windows.Media.FontFamilyMap" /> 对象。</summary>
      <returns>
            如果该集合包含 <paramref name="item" />，则为 true；否则为 false。</returns>
      <param name="item">要定位的对象。</param>
    </member>
    <member name="M:System.Windows.Media.FontFamilyMapCollection.CopyTo(System.Windows.Media.FontFamilyMap[],System.Int32)">
      <summary>从指定的索引位置开始，将集合中的 <see cref="T:System.Windows.Media.FontFamilyMap" /> 对象复制到 FontFamilyMaps 数组中。</summary>
      <param name="array">目标数组。</param>
      <param name="index">开始进行复制的索引位置（索引从零开始）。</param>
    </member>
    <member name="P:System.Windows.Media.FontFamilyMapCollection.Count">
      <summary>获取 <see cref="T:System.Windows.Media.FontFamilyMapCollection" /> 中的 <see cref="T:System.Windows.Media.FontFamilyMap" /> 对象数。</summary>
      <returns>集合中的对象数。</returns>
    </member>
    <member name="M:System.Windows.Media.FontFamilyMapCollection.GetEnumerator">
      <summary>返回可循环访问集合的枚举数。</summary>
      <returns>可循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Windows.Media.FontFamilyMapCollection.IndexOf(System.Windows.Media.FontFamilyMap)">
      <summary>返回集合内指定 <see cref="T:System.Windows.Media.FontFamilyMap" /> 对象的索引。</summary>
      <returns>如果可找到，则为 <paramref name="item" /> 的从零开始的索引；否则为 -1；</returns>
      <param name="item">要定位的对象。</param>
    </member>
    <member name="M:System.Windows.Media.FontFamilyMapCollection.Insert(System.Int32,System.Windows.Media.FontFamilyMap)">
      <summary>将指定 <see cref="T:System.Windows.Media.FontFamilyMap" /> 对象插入到集合中的指定索引位置处。</summary>
      <param name="index">要插入对象的从零开始的索引位置。</param>
      <param name="item">要插入的对象。</param>
    </member>
    <member name="P:System.Windows.Media.FontFamilyMapCollection.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Windows.Media.FontFamilyMapCollection" /> 是否为只读。</summary>
      <returns>
            如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.FontFamilyMapCollection.Item(System.Int32)">
      <summary>获取或设置位于指定索引位置的 <see cref="T:System.Windows.Media.FontFamilyMap" /> 对象。</summary>
      <returns>位于 <paramref name="index" /> 位置的 <see cref="T:System.Windows.Media.FontFamilyMap" /> 对象。</returns>
      <param name="index">要获取或设置的对象的从零开始的索引位置。</param>
    </member>
    <member name="M:System.Windows.Media.FontFamilyMapCollection.Remove(System.Windows.Media.FontFamilyMap)">
      <summary>从集合中移除指定的 <see cref="T:System.Windows.Media.FontFamilyMap" /> 对象。</summary>
      <returns>
            如果成功删除了 <paramref name="item" />，则为 true；否则为 false。</returns>
      <param name="item">要移除的对象。</param>
    </member>
    <member name="M:System.Windows.Media.FontFamilyMapCollection.RemoveAt(System.Int32)">
      <summary>从 <see cref="T:System.Windows.Media.FontFamilyMapCollection" /> 中删除 <see cref="T:System.Windows.Media.FontFamilyMap" /> 对象。</summary>
      <param name="index">要移除对象的从零开始的索引位置。</param>
    </member>
    <member name="M:System.Windows.Media.FontFamilyMapCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />。</summary>
      <param name="array">从零开始的 <see cref="T:System.Array" />，它接收从 <see cref="T:System.Windows.Media.FontFamilyMapCollection" /> 复制来的项。</param>
      <param name="index">指定的 <see cref="T:System.Array" /> 中接收复制内容的第一个位置。</param>
    </member>
    <member name="P:System.Windows.Media.FontFamilyMapCollection.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>
            如果对 <see cref="T:System.Windows.Media.FontFamilyMapCollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.FontFamilyMapCollection.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>可用于同步对 <see cref="T:System.Windows.Media.FontFamilyMapCollection" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Windows.Media.FontFamilyMapCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections." /><see cref="IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Windows.Media.FontFamilyMapCollection.System#Collections#IList#Add(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。</summary>
      <returns>新元素的插入位置。</returns>
      <param name="value">要添加到 <see cref="T:System.Windows.Media.FontFamilyMapCollection" /> 的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Windows.Media.FontFamilyMapCollection.System#Collections#IList#Contains(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。</summary>
      <returns>
            如果在 <see cref="T:System.Windows.Media.FontFamilyMapCollection" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Windows.Media.TextEffectCollection" /> 中查找的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Windows.Media.FontFamilyMapCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。</summary>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <param name="value">要在 <see cref="T:System.Windows.Media.FontFamilyMapCollection" /> 中查找的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Windows.Media.FontFamilyMapCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。</summary>
      <param name="index">从零开始的索引，在该处插入 <see cref="T:System.Object" />。</param>
      <param name="item"></param>
    </member>
    <member name="P:System.Windows.Media.FontFamilyMapCollection.System#Collections#IList#IsFixedSize">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Media.FontFamilyMapCollection" /> 具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.FontFamilyMapCollection.System#Collections#IList#Item(System.Int32)">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IList.Item(System.Int32)" />。</summary>
      <returns>指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
    </member>
    <member name="M:System.Windows.Media.FontFamilyMapCollection.System#Collections#IList#Remove(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Remove(System.Object)" />。</summary>
      <param name="value">要从 <see cref="T:System.Windows.Media.FontFamilyMapCollection" /> 移除的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="T:System.Windows.Media.FontFamilyValueSerializer">
      <summary>在 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Media.FontFamily" /> 的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Media.FontFamilyValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.FontFamilyValueSerializer" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.FontFamilyValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定是否可以从给定的 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Media.FontFamily" /> 的实例。</summary>
      <returns>
            如果可以转换 <paramref name="value" />，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Media.FontFamilyValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定是否可将 <see cref="T:System.Windows.Media.FontFamily" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <returns>
            如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的 <see cref="T:System.Windows.Media.FontFamily" /> 的实例。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Media.FontFamilyValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Media.FontFamily" />。</summary>
      <returns>基于提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Media.FontFamily" /> 的一个新实例。</returns>
      <param name="value">
                要转换为 <see cref="T:System.Windows.Media.FontFamily" /> 的 <see cref="T:System.String" /> 值。</param>
      <param name="context">用于转换的上下文信息。</param>
      <exception cref="T:System.NotSupportedException">在 <paramref name="value" /> 为 null 或等于 <see cref="F:System.String.Empty" /> 时发生。</exception>
    </member>
    <member name="M:System.Windows.Media.FontFamilyValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.Windows.Media.FontFamily" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <returns>提供的 <see cref="T:System.Windows.Media.FontFamily" /> 对象的 <see cref="T:System.String" /> 表示形式。</returns>
      <param name="value">要进行计算以供转换的 <see cref="T:System.Windows.Media.FontFamily" /> 的实例。</param>
      <param name="context">用于转换的上下文信息。</param>
      <exception cref="T:System.NotSupportedException">在 <paramref name="value" /> 为 null 或等于 <see cref="F:System.String.Empty" /> 时发生。</exception>
    </member>
    <member name="T:System.Windows.Media.Fonts">
      <summary>为 <see cref="T:System.Windows.Media.FontFamily" /> 和 <see cref="T:System.Windows.Media.Typeface" /> 对象提供枚举支持。</summary>
    </member>
    <member name="M:System.Windows.Media.Fonts.GetFontFamilies(System.String)">
      <summary>从表示字体位置的字符串值返回 <see cref="T:System.Windows.Media.FontFamily" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.Windows.Media.FontFamily" /> 对象的 <see cref="T:System.Collections.Generic.ICollection`1" />，这些对象表示 <paramref name="location" /> 中的字体。</returns>
      <param name="location">包含字体的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="location" /> 为 null。不能传递 null，因为此参数将作为路径或URI 处理。</exception>
    </member>
    <member name="M:System.Windows.Media.Fonts.GetFontFamilies(System.Uri)">
      <summary>从表示字体位置的统一资源标识符 (URI) 值返回 <see cref="T:System.Windows.Media.FontFamily" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.Windows.Media.FontFamily" /> 对象的 <see cref="T:System.Collections.Generic.ICollection`1" />，这些对象表示 <paramref name="baseUri" /> 中的字体。</returns>
      <param name="baseUri">字体位置的基URI 值。</param>
    </member>
    <member name="M:System.Windows.Media.Fonts.GetFontFamilies(System.Uri,System.String)">
      <summary>通过使用基统一资源标识符 (URI) 值解析字体位置来返回 <see cref="T:System.Windows.Media.FontFamily" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.Windows.Media.FontFamily" /> 对象的 <see cref="T:System.Collections.Generic.ICollection`1" />，这些对象表示已解析的字体位置中的字体。</returns>
      <param name="baseUri">字体位置的基URI 值。</param>
      <param name="location">包含字体的位置。</param>
    </member>
    <member name="M:System.Windows.Media.Fonts.GetTypefaces(System.String)">
      <summary>从表示字体目录位置的字符串值返回 <see cref="T:System.Windows.Media.Typeface" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Typeface" /> 对象的 <see cref="T:System.Collections.Generic.ICollection`1" />，这些对象表示 <paramref name="location" /> 中的字体。</returns>
      <param name="location">包含字体的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="location" /> 为 null。不能传递 null，因为此参数将作为路径或URI 处理。</exception>
    </member>
    <member name="M:System.Windows.Media.Fonts.GetTypefaces(System.Uri)">
      <summary>从表示字体位置的统一资源标识符 (URI) 值返回 <see cref="T:System.Windows.Media.Typeface" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Typeface" /> 对象的 <see cref="T:System.Collections.Generic.ICollection`1" />，这些对象表示 <paramref name="baseUri" /> 中的字体。</returns>
      <param name="baseUri">字体位置的基URI 值。</param>
    </member>
    <member name="M:System.Windows.Media.Fonts.GetTypefaces(System.Uri,System.String)">
      <summary>通过使用基统一资源标识符 (URI) 值解析字体位置来返回 <see cref="T:System.Windows.Media.Typeface" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Typeface" /> 对象的 <see cref="T:System.Collections.Generic.ICollection`1" />，这些对象表示已解析的字体位置中的字体。</returns>
      <param name="baseUri">字体位置的基URI 值。</param>
      <param name="location">包含字体的位置。</param>
    </member>
    <member name="P:System.Windows.Media.Fonts.SystemFontFamilies">
      <summary>从默认的系统字体位置获取 <see cref="T:System.Windows.Media.FontFamily" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.Windows.Media.FontFamily" /> 对象的 <see cref="T:System.Collections.Generic.ICollection`1" />，这些对象表示系统字体集合中的字体。</returns>
    </member>
    <member name="P:System.Windows.Media.Fonts.SystemTypefaces">
      <summary>从默认的系统字体位置获取 <see cref="T:System.Windows.Media.Typeface" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Typeface" /> 对象的 <see cref="T:System.Collections.Generic.ICollection`1" />，这些对象表示系统字体集合中的字体。</returns>
    </member>
    <member name="T:System.Windows.Media.FormattedText">
      <summary>为在 Windows Presentation Foundation (WPF) 应用程序中绘制文本提供低级别控制。</summary>
    </member>
    <member name="M:System.Windows.Media.FormattedText.#ctor(System.String,System.Globalization.CultureInfo,System.Windows.FlowDirection,System.Windows.Media.Typeface,System.Double,System.Windows.Media.Brush)">
      <summary>使用指定的文本、区域性、流方向、字体、字号和画笔初始化 <see cref="T:System.Windows.Media.FormattedText" /> 类的一个新实例。</summary>
      <param name="textToFormat">要显示的文本。</param>
      <param name="culture">文本的特定区域性。</param>
      <param name="flowDirection">读取文本的方向。</param>
      <param name="typeface">设置文本格式时应使用的字体系列、粗细、样式和拉伸。</param>
      <param name="emSize">设置文本格式时应使用的字号。</param>
      <param name="foreground">用于绘制每个标志符号的画笔。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.#ctor(System.String,System.Globalization.CultureInfo,System.Windows.FlowDirection,System.Windows.Media.Typeface,System.Double,System.Windows.Media.Brush,System.Windows.Media.NumberSubstitution)">
      <summary>使用指定的文本、区域性、流方向、字体、字号、画笔和数字替换行为初始化 <see cref="T:System.Windows.Media.FormattedText" /> 类的一个新实例。</summary>
      <param name="textToFormat">要显示的文本。</param>
      <param name="culture">文本的特定区域性。</param>
      <param name="flowDirection">读取文本的方向。</param>
      <param name="typeface">设置文本格式时应使用的字体系列、粗细、样式和拉伸。</param>
      <param name="emSize">文本显示全长尺寸时的字号，用与设备无关的单位（每个单位 1/96 英寸）提供。</param>
      <param name="foreground">用于绘制每个标志符号的画笔。</param>
      <param name="numberSubstitution">要应用于文本的数字替换行为。</param>
    </member>
    <member name="P:System.Windows.Media.FormattedText.Baseline">
      <summary>获取 <see cref="T:System.Windows.Media.FormattedText" /> 对象中从第一行顶部到第一行基线的距离。</summary>
      <returns>从第一行顶部到第一行基线的距离，用与设备无关的单位（每个单位 1/96 英寸）提供。</returns>
    </member>
    <member name="M:System.Windows.Media.FormattedText.BuildGeometry(System.Windows.Point)">
      <summary>返回一个 <see cref="T:System.Windows.Media.Geometry" /> 对象，该对象表示格式化文本，包括所有标志符号和文本修饰。</summary>
      <returns>格式化文本的 <see cref="T:System.Windows.Media.Geometry" /> 对象表示形式。</returns>
      <param name="origin">所生成的几何图形的左上原点。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.BuildHighlightGeometry(System.Windows.Point)">
      <summary>返回一个 <see cref="T:System.Windows.Media.Geometry" /> 对象，该对象表示格式化文本的高光点边界框。</summary>
      <returns>返回一个 <see cref="T:System.Windows.Media.Geometry" /> 对象，该对象表示格式化文本的高光点边界框。</returns>
      <param name="origin">高光点区域的原点。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.BuildHighlightGeometry(System.Windows.Point,System.Int32,System.Int32)">
      <summary>返回一个 <see cref="T:System.Windows.Media.Geometry" /> 对象，该对象表示格式化文本的指定子字符串的高光点边界框。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Geometry" /> 对象，表示格式化文本子字符串的高光点边界框。</returns>
      <param name="origin">高光点区域的原点。</param>
      <param name="startIndex">应为其获取高光点边界的初始字符的索引。</param>
      <param name="count">高光点边界应包含的字符数。</param>
    </member>
    <member name="P:System.Windows.Media.FormattedText.Extent">
      <summary>获取从第一行最顶部绘制的像素到最后一行最底部绘制的像素之间的距离。</summary>
      <returns>从第一行最顶部绘制的像素到最后一行最底部绘制的像素之间的距离，用与设备无关的单位（每个单位 1/96 英寸）提供。</returns>
    </member>
    <member name="P:System.Windows.Media.FormattedText.FlowDirection">
      <summary>获取或设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象的 <see cref="T:System.Windows.FlowDirection" />。</summary>
      <returns>格式化文本的 <see cref="T:System.Windows.FlowDirection" />。</returns>
    </member>
    <member name="M:System.Windows.Media.FormattedText.GetMaxTextWidths">
      <summary>检索一个由文本宽度组成的数组。该数组中的每个元素都表示连续文本行的最大文本宽度。</summary>
      <returns>一个由最大文本宽度组成的数组，其中每个宽度都用与设备无关的单位（每个单位 1/96 英寸）提供。</returns>
    </member>
    <member name="P:System.Windows.Media.FormattedText.Height">
      <summary>获取 <see cref="T:System.Windows.Media.FormattedText" /> 对象中从第一行顶部到最后一行底部的距离。</summary>
      <returns>从第一行顶部到最后一行底部的距离，用与设备无关的单位（每个单位 1/96 英寸）提供。</returns>
    </member>
    <member name="P:System.Windows.Media.FormattedText.LineHeight">
      <summary>获取文本行之间的行高或行距。</summary>
      <returns>文本行之间的行距，用与设备无关的单位（每个单位 1/96 英寸）提供。</returns>
    </member>
    <member name="P:System.Windows.Media.FormattedText.MaxLineCount">
      <summary>获取或设置要显示的最大行数。超出 <see cref="P:System.Windows.Media.FormattedText.MaxLineCount" /> 的文本将不会显示。</summary>
      <returns>要显示的最大行数。</returns>
    </member>
    <member name="P:System.Windows.Media.FormattedText.MaxTextHeight">
      <summary>获取或设置文本列的最大高度。</summary>
      <returns>文本列的最大高度，用与设备无关的单位（每个单位 1/96 英寸）提供。</returns>
    </member>
    <member name="P:System.Windows.Media.FormattedText.MaxTextWidth">
      <summary>获取或设置文本行的最大文本宽度（长度）。</summary>
      <returns>文本行的最大文本宽度，用与设备无关的单位（每个单位 1/96 英寸）提供。</returns>
    </member>
    <member name="P:System.Windows.Media.FormattedText.MinWidth">
      <summary>获取可完全容纳指定文本内容的可能的最小文本宽度。</summary>
      <returns>文本源的最小文本宽度，用与设备无关的单位（每个单位 1/96 英寸）提供。</returns>
    </member>
    <member name="P:System.Windows.Media.FormattedText.OverhangAfter">
      <summary>获取从文本最后一行的底部到最底部绘制的像素之间的距离。</summary>
      <returns>从最后一行的底部到最底部绘制的像素之间的距离，用与设备无关的单位（每个单位 1/96 英寸）提供。</returns>
    </member>
    <member name="P:System.Windows.Media.FormattedText.OverhangLeading">
      <summary>获取一行中从前导对齐点到前导绘制像素之间的最大距离。</summary>
      <returns>一行中从前导对齐点到前导绘制像素之间的最大距离，用与设备无关的单位（每个单位 1/96 英寸）提供。</returns>
    </member>
    <member name="P:System.Windows.Media.FormattedText.OverhangTrailing">
      <summary>获取一行中从尾随绘制像素到尾随对齐点之间的最大距离。</summary>
      <returns>一行中从尾随绘制像素到尾随对齐点之间的最大距离，用与设备无关的单位（每个单位 1/96 英寸）提供。</returns>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetCulture(System.Globalization.CultureInfo)">
      <summary>设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象中整个字符集的 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <param name="culture">要用于设置文本格式的 <see cref="T:System.Globalization.CultureInfo" />。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetCulture(System.Globalization.CultureInfo,System.Int32,System.Int32)">
      <summary>设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象中指定的字符子集的 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <param name="culture">要用于设置文本格式的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="startIndex">要向其应用更改的初始字符的起始索引。</param>
      <param name="count">应向其应用更改的字符数。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetFontFamily(System.String)">
      <summary>设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象中整个字符集的字体系列。</summary>
      <param name="fontFamily">一个字符串，用于构造在设置文本格式时要使用的 <see cref="T:System.Windows.Media.FontFamily" />。允许回退；有关详细信息，请参见 <see cref="T:System.Windows.Media.FontFamily" />。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetFontFamily(System.String,System.Int32,System.Int32)">
      <summary>设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象中指定的字符子集的字体系列。</summary>
      <param name="fontFamily">一个字符串，用于构造在设置文本格式时要使用的 <see cref="T:System.Windows.Media.FontFamily" />。允许回退；有关详细信息，请参见 <see cref="T:System.Windows.Media.FontFamily" />。</param>
      <param name="startIndex">要向其应用字体系列更改的初始字符的起始索引。</param>
      <param name="count">应向其应用更改的字符数。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetFontFamily(System.Windows.Media.FontFamily)">
      <summary>设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象的字体系列。</summary>
      <param name="fontFamily">要用于设置文本格式的 <see cref="T:System.Windows.Media.FontFamily" />。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetFontFamily(System.Windows.Media.FontFamily,System.Int32,System.Int32)">
      <summary>设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象中指定的字符子集的字体系列。</summary>
      <param name="fontFamily">要用于设置文本格式的 <see cref="T:System.Windows.Media.FontFamily" />。</param>
      <param name="startIndex">要向其应用字体系列更改的初始字符的起始索引。</param>
      <param name="count">应向其应用更改的字符数。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetFontSize(System.Double)">
      <summary>设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象中整个字符集的字号。</summary>
      <param name="emSize">字体的全身尺寸，用与设备无关的单位（每个单位 1/96 英寸）提供。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetFontSize(System.Double,System.Int32,System.Int32)">
      <summary>设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象中指定的字符子集的字号。</summary>
      <param name="emSize">字体的全身尺寸，用与设备无关的单位（每个单位 1/96 英寸）提供。</param>
      <param name="startIndex">要向其应用字号的初始字符的起始索引。</param>
      <param name="count">要向其应用字号的字符数。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetFontStretch(System.Windows.FontStretch)">
      <summary>设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象中整个字符集的字体拉伸值。</summary>
      <param name="stretch">设置文本格式时要使用的理想 <see cref="T:System.Windows.FontStretch" /> 值。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetFontStretch(System.Windows.FontStretch,System.Int32,System.Int32)">
      <summary>设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象中指定的字符子集的字体拉伸值。</summary>
      <param name="stretch">设置文本格式时要使用的理想 <see cref="T:System.Windows.FontStretch" /> 值。</param>
      <param name="startIndex">要向其应用字体拉伸的初始字符的起始索引。</param>
      <param name="count">要向其应用字体拉伸的字符数。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetFontStyle(System.Windows.FontStyle)">
      <summary>设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象中整个字符集的字体样式。</summary>
      <param name="style">要用于设置文本格式的 <see cref="T:System.Windows.FontStyle" /> 值。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetFontStyle(System.Windows.FontStyle,System.Int32,System.Int32)">
      <summary>设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象中指定的字符子集的字体样式。</summary>
      <param name="style">要用于设置文本格式的 <see cref="T:System.Windows.FontStyle" /> 值。</param>
      <param name="startIndex">要向其应用字体样式的初始字符的起始索引。</param>
      <param name="count">要向其应用字体样式的字符数。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetFontTypeface(System.Windows.Media.Typeface)">
      <summary>设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象中整个字符集的字体。</summary>
      <param name="typeface">要用于设置文本格式的 <see cref="T:System.Windows.Media.Typeface" />。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetFontTypeface(System.Windows.Media.Typeface,System.Int32,System.Int32)">
      <summary>设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象中指定的字符子集的字体。</summary>
      <param name="typeface">要用于设置文本格式的 <see cref="T:System.Windows.Media.Typeface" />。</param>
      <param name="startIndex">要向其应用字体的初始字符的起始索引。</param>
      <param name="count">要向其应用字体的字符数。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetFontWeight(System.Windows.FontWeight)">
      <summary>设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象中整个字符集的字体粗细。</summary>
      <param name="weight">要用于设置文本格式的 <see cref="T:System.Windows.FontWeight" />。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetFontWeight(System.Windows.FontWeight,System.Int32,System.Int32)">
      <summary>更改 <see cref="T:System.Windows.Media.FormattedText" /> 对象中指定文本的 <see cref="T:System.Windows.FontWeight" />。</summary>
      <param name="weight">设置文本格式时要使用的字体粗细。</param>
      <param name="startIndex">要向其应用字体粗细的初始字符的起始索引。</param>
      <param name="count">要向其应用字体粗细的字符数。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetForegroundBrush(System.Windows.Media.Brush)">
      <summary>更改整个 <see cref="T:System.Windows.Media.FormattedText" /> 对象的前景 <see cref="T:System.Windows.Media.Brush" />。</summary>
      <param name="foregroundBrush">要用于文本前景的画笔。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetForegroundBrush(System.Windows.Media.Brush,System.Int32,System.Int32)">
      <summary>更改 <see cref="T:System.Windows.Media.FormattedText" /> 对象中指定文本的前景 <see cref="T:System.Windows.Media.Brush" />。</summary>
      <param name="foregroundBrush">要用于文本前景的画笔。</param>
      <param name="startIndex">要向其应用前景画笔的初始字符的起始索引。</param>
      <param name="count">要向其应用前景画笔的字符数。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetMaxTextWidths(System.Double[])">
      <summary>逐行设置 <see cref="T:System.Windows.Media.FormattedText" /> 中最大文本宽度的数组。该数组中的每个元素都表示连续文本行的最大文本宽度。</summary>
      <param name="maxTextWidths">一个由最大文本宽度组成的数组，其中每个宽度都用与设备无关的单位（每个单位 1/96 英寸）提供。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetNumberSubstitution(System.Windows.Media.NumberSubstitution)">
      <summary>设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象中整个字符集的数字替换行为。</summary>
      <param name="numberSubstitution">要应用于文本的数字替换行为；它可以为 null，此时将使用针对文本区域性的默认数字替换方法。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetNumberSubstitution(System.Windows.Media.NumberSubstitution,System.Int32,System.Int32)">
      <summary>设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象中指定文本的数字替换行为。</summary>
      <param name="numberSubstitution">要应用于文本的数字替换行为；它可以为 null，此时将使用针对文本区域性的默认数字替换方法。</param>
      <param name="startIndex">要向其应用更改的初始字符的起始索引。</param>
      <param name="count">应向其应用更改的字符数。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetTextDecorations(System.Windows.TextDecorationCollection)">
      <summary>设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象中整个字符集的 <see cref="T:System.Windows.TextDecorationCollection" />。</summary>
      <param name="textDecorations">要应用于文本的 <see cref="T:System.Windows.TextDecorationCollection" />。</param>
    </member>
    <member name="M:System.Windows.Media.FormattedText.SetTextDecorations(System.Windows.TextDecorationCollection,System.Int32,System.Int32)">
      <summary>设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象中指定文本的 <see cref="T:System.Windows.TextDecorationCollection" />。</summary>
      <param name="textDecorations">要应用于文本的 <see cref="T:System.Windows.TextDecorationCollection" />。</param>
      <param name="startIndex">要向其应用文本修饰的初始字符的起始索引。</param>
      <param name="count">要向其应用文本修饰的字符数。</param>
    </member>
    <member name="P:System.Windows.Media.FormattedText.Text">
      <summary>获取要显示的文本字符串。</summary>
      <returns>要显示的文本字符串。</returns>
    </member>
    <member name="P:System.Windows.Media.FormattedText.TextAlignment">
      <summary>获取或设置 <see cref="T:System.Windows.Media.FormattedText" /> 对象中文本的对齐方式。</summary>
      <returns>
        <see cref="T:System.Windows.TextAlignment" /> 值之一，它指定 <see cref="T:System.Windows.Media.FormattedText" /> 对象中的文本的对齐方式。</returns>
    </member>
    <member name="P:System.Windows.Media.FormattedText.Trimming">
      <summary>获取或设置省略文本的指示方式。</summary>
      <returns>
        <see cref="T:System.Windows.TextTrimming" /> 值之一，它指定省略文本的指示方式。默认值为 <see cref="F:System.Windows.TextTrimming.WordEllipsis" />。</returns>
    </member>
    <member name="P:System.Windows.Media.FormattedText.Width">
      <summary>获取一行中前导对齐点和尾随对齐点之间的宽度（不包括任何尾随空格字符）。</summary>
      <returns>一行中前导对齐点和尾随对齐点之间的宽度（不包括任何尾随空格字符）。用与设备无关的单位（每个单位 1/96 英寸）提供。</returns>
    </member>
    <member name="P:System.Windows.Media.FormattedText.WidthIncludingTrailingWhitespace">
      <summary>获取一行中前导对齐点和尾随对齐点之间的宽度（包括所有尾随空格字符）。</summary>
      <returns>一行中前导对齐点和尾随对齐点之间的宽度（包括所有尾随空格字符）。用与设备无关的单位（每个单位 1/96 英寸）提供。</returns>
    </member>
    <member name="T:System.Windows.Media.GeneralTransform">
      <summary>为点和矩形之类的对象提供通用的变换支持。这是一个抽象类。</summary>
    </member>
    <member name="M:System.Windows.Media.GeneralTransform.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.GeneralTransform" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.GeneralTransform.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.GeneralTransform" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.GeneralTransform.Inverse">
      <summary>如果可能，获取此 <see cref="T:System.Windows.Media.GeneralTransform" /> 的逆变换。</summary>
      <returns>如果可能，则为此实例的逆实例；否则为 null。</returns>
    </member>
    <member name="M:System.Windows.Media.GeneralTransform.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="format"></param>
      <param name="provider"></param>
    </member>
    <member name="M:System.Windows.Media.GeneralTransform.ToString">
      <summary>创建此 <see cref="T:System.Windows.Media.GeneralTransform" /> 的字符串表示形式。</summary>
      <returns>此实例的字符串表示形式。</returns>
    </member>
    <member name="M:System.Windows.Media.GeneralTransform.ToString(System.IFormatProvider)">
      <summary>基于传递的 <see cref="T:System.IFormatProvider" /> 参数创建此实例的字符串表示形式。</summary>
      <returns>基于 <paramref name="provider" /> 的此实例的字符串表示形式。</returns>
      <param name="provider">
                用于处理此实例的 <see cref="T:System.IFormatProvider" /> 实例。</param>
    </member>
    <member name="M:System.Windows.Media.GeneralTransform.Transform(System.Windows.Point)">
      <summary>变换指定的点并返回结果。</summary>
      <returns>变换 <paramref name="point" /> 的结果。</returns>
      <param name="point">要变换的点。</param>
      <exception cref="T:System.InvalidOperationException">变换未成功。</exception>
    </member>
    <member name="M:System.Windows.Media.GeneralTransform.TransformBounds(System.Windows.Rect)">
      <summary>在派生的类中重写时，变换指定的边界框，并返回一个正好能容纳它的与坐标轴对齐的边界框。</summary>
      <returns>能容纳所变换的 <paramref name="rect" /> 的最小的与坐标轴对齐的边界框。</returns>
      <param name="rect">要变换的边界框。</param>
    </member>
    <member name="M:System.Windows.Media.GeneralTransform.TryTransform(System.Windows.Point,System.Windows.Point@)">
      <summary>在派生的类中重写时，尝试变换指定的点，并返回一个指示变换是否成功的值。</summary>
      <returns>
            如果 <paramref name="inPoint" /> 已变换，则为 true；否则为 false。</returns>
      <param name="inPoint">要变换的点。</param>
      <param name="result">变换 <paramref name="inPoint" /> 的结果。</param>
    </member>
    <member name="T:System.Windows.Media.GeneralTransformCollection">
      <summary>
                    表示一个由 <see cref="T:System.Windows.Media.GeneralTransform" /> 对象组成的有序集合。
                </summary>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.#ctor">
      <summary>
                    初始化 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 类的一个新实例。
                </summary>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.GeneralTransform})">
      <summary>
                    初始化 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 类的一个新实例。
                </summary>
      <param name="collection">
                    新的集合类中的初始对象。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.#ctor(System.Int32)">
      <summary>
                    使用指定的容量或集合最初可存储的 <see cref="T:System.Windows.Media.GeneralTransform" /> 对象数来初始化 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 类的一个新实例。
                </summary>
      <param name="capacity">
                       集合最初可存储的 <see cref="T:System.Windows.Media.GeneralTransform" /> 对象数。
                </param>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.Add(System.Windows.Media.GeneralTransform)">
      <summary>
                    将 <see cref="T:System.Windows.Media.GeneralTransform" /> 对象添加到 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 的结尾处。
                </summary>
      <param name="value">
                    要添加到 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 的末尾的 <see cref="T:System.Windows.Media.GeneralTransform" />。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.Clear">
      <summary>
                    从 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 中移除所有 <see cref="T:System.Windows.Media.GeneralTransform" /> 对象。
                </summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 是只读的。
                </exception>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.Clone">
      <summary>
                    创建此 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。
                </summary>
      <returns>
                    当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.CloneCurrentValue">
      <summary>
                    创建此 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。
                </summary>
      <returns>
                    当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.Contains(System.Windows.Media.GeneralTransform)">
      <summary>
                    指示 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 是否包含指定的 <see cref="T:System.Windows.Media.GeneralTransform" /> 对象。
                </summary>
      <returns>
                    如果集合包含 <paramref name="value" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 中定位的 <see cref="T:System.Windows.Media.GeneralTransform" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.CopyTo(System.Windows.Media.GeneralTransform[],System.Int32)">
      <summary>
                    从指定的索引位置开始，将集合中的 <see cref="T:System.Windows.Media.GeneralTransform" /> 对象复制到 GeneralTransforms 的数组中。
                </summary>
      <param name="array">
                    目标数组。
                </param>
      <param name="index">
                    开始进行复制的索引位置（索引从零开始）。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的
                
                    - 或 -
                <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                
                    源 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 中的项数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。
                </exception>
    </member>
    <member name="P:System.Windows.Media.GeneralTransformCollection.Count">
      <summary>
                    获取 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 中的 <see cref="T:System.Windows.Media.GeneralTransform" /> 对象数。
                </summary>
      <returns>
                    集合中的项数。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.GetEnumerator">
      <summary>
                    返回可循环访问集合的枚举数。
                </summary>
      <returns>
                    一个可循环访问集合的枚举数。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.IndexOf(System.Windows.Media.GeneralTransform)">
      <summary>
                    在 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 中搜索指定的 <see cref="T:System.Windows.Media.GeneralTransform" /> 对象。
                </summary>
      <returns>
                    如果可找到，则为 <paramref name="value" /> 的从零开始的索引位置；否则为 -1；
                </returns>
      <param name="value">
                    要定位的对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.Insert(System.Int32,System.Windows.Media.GeneralTransform)">
      <summary>
                    将 <see cref="T:System.Windows.Media.GeneralTransform" /> 对象插入到 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 中的指定索引位置处。
                </summary>
      <param name="index">
                    要插入对象的从零开始的索引位置。
                </param>
      <param name="value">
                    要插入的对象。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 中的有效索引。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="P:System.Windows.Media.GeneralTransformCollection.Item(System.Int32)">
      <summary>
                    获取或设置位于指定索引位置的 <see cref="T:System.Windows.Media.GeneralTransform" /> 对象。
                </summary>
      <returns>
                    位于 <paramref name="index" /> 位置的 <see cref="T:System.Windows.Media.GeneralTransform" /> 对象。
                </returns>
      <param name="index">
                    要获取或设置的对象的从零开始的索引位置。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 中的有效索引。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.Remove(System.Windows.Media.GeneralTransform)">
      <summary>
从 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 中删除 <see cref="T:System.Windows.Media.GeneralTransform" /> 对象。
                </summary>
      <returns>
                    如果成功删除了 <paramref name="value" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要移除的对象。
                </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.RemoveAt(System.Int32)">
      <summary>
从 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 中删除 <see cref="T:System.Windows.Media.GeneralTransform" /> 对象。
                </summary>
      <param name="index">
                    要移除对象的从零开始的索引位置。
                </param>
    </member>
    <member name="P:System.Windows.Media.GeneralTransformCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 是只读的，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator`1" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />。
                </summary>
      <param name="array">
                    从零开始的 <see cref="T:System.Array" />，它接收从 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 复制来的项。
                </param>
      <param name="index">
                    指定的 <see cref="T:System.Array" /> 中接收复制内容的第一个位置。
                </param>
    </member>
    <member name="P:System.Windows.Media.GeneralTransformCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。
                </summary>
      <returns>
                    如果对 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.GeneralTransformCollection.System#Collections#ICollection#SyncRoot">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。
                </summary>
      <returns>
                    可用于同步对 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 的访问的对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections." /><see cref="IEnumerator" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.System#Collections#IList#Add(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。
                </summary>
      <returns>
                    新元素的插入位置。
                </returns>
      <param name="value">
                    要添加到 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。
                </summary>
      <returns>
                    如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
                </returns>
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。
                </summary>
      <returns>
                    如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。
                </summary>
      <param name="index">
                    从零开始的索引，在该处插入 <see cref="T:System.Object" />。
                </param>
      <param name="value">
                    要插入 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 中的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="P:System.Windows.Media.GeneralTransformCollection.System#Collections#IList#IsFixedSize">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 具有固定大小，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.GeneralTransformCollection.System#Collections#IList#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 是只读的，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.GeneralTransformCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.Item(System.Int32)" />。
                </summary>
      <returns>
                    指定索引处的元素。
                </returns>
      <param name="index">
                    要获得或设置的元素从零开始的索引。
                </param>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Remove(System.Object)" />。
                </summary>
      <param name="value">
                    要从 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 移除的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="T:System.Windows.Media.GeneralTransformCollection.Enumerator">
      <summary>枚举 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 中的 <see cref="T:System.Windows.Media.GeneralTransform" /> 项。 </summary>
    </member>
    <member name="P:System.Windows.Media.GeneralTransformCollection.Enumerator.Current">
      <summary>获取集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.Enumerator.MoveNext">
      <summary>将枚举数前移到集合中的下一个元素。</summary>
      <returns>
            如果枚举数成功前移到了下一个元素，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.Enumerator.Reset">
      <summary>将枚举数重置至其初始位置，即位于集合中第一个元素之前。</summary>
    </member>
    <member name="P:System.Windows.Media.GeneralTransformCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformCollection.Enumerator.System#IDisposable#Dispose">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="T:System.Windows.Media.GeneralTransformGroup">
      <summary>表示 <see cref="T:System.Windows.Media.GeneralTransform" />，是其 <see cref="T:System.Windows.Media.GeneralTransformCollection" /> 中的变换的一种复合形式。</summary>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformGroup.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.GeneralTransformGroup" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Media.GeneralTransformGroup.Children">
      <summary>获取或设置构成此 <see cref="T:System.Windows.Media.GeneralTransformGroup" /> 的 <see cref="T:System.Windows.Media.GeneralTransformGroup" /> 对象的集合。这是一个依赖项属性。</summary>
      <returns>构成此 <see cref="T:System.Windows.Media.GeneralTransformGroup" /> 的 <see cref="T:System.Windows.Media.GeneralTransformGroup" /> 对象的集合。默认值是一个空集合。</returns>
    </member>
    <member name="F:System.Windows.Media.GeneralTransformGroup.ChildrenProperty">
      <summary>标识 <see cref="P:System.Windows.Media.GeneralTransformGroup.Children" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.GeneralTransformGroup.Children" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformGroup.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.GeneralTransformGroup" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformGroup.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.GeneralTransformGroup" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.GeneralTransformGroup.Inverse">
      <summary>获取此 <see cref="T:System.Windows.Media.GeneralTransformGroup" /> 的逆变换（如果它具有逆变换）。</summary>
      <returns>此 <see cref="T:System.Windows.Media.GeneralTransformGroup" /> 的逆变换（如果它具有逆变换），如果不具有逆变换，则为 null。</returns>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformGroup.TransformBounds(System.Windows.Rect)">
      <summary>将指定的边界框变换为与坐标轴对齐的最小边界框，此边界框可能包含原边界框中的所有点。</summary>
      <returns>变换的边界框，它是与坐标轴对齐的最小边界框，并且可能包含原边界框中的所有点。</returns>
      <param name="rect">要变换的边界框。</param>
    </member>
    <member name="M:System.Windows.Media.GeneralTransformGroup.TryTransform(System.Windows.Point,System.Windows.Point@)">
      <summary>试图变换指定的点。</summary>
      <returns>
            如果 <paramref name="inPoint" /> 已变换，则为 true；否则为 false。</returns>
      <param name="inPoint">要变换的点。</param>
      <param name="result">变换 <paramref name="inPoint" /> 的结果。</param>
    </member>
    <member name="T:System.Windows.Media.Geometry">
      <summary>从此抽象基类派生的类定义几何形状。<see cref="T:System.Windows.Media.Geometry" /> 对象可用于剪裁和呈现二维图形数据以及对其进行点击测试。</summary>
    </member>
    <member name="P:System.Windows.Media.Geometry.Bounds">
      <summary>获取一个 <see cref="T:System.Windows.Rect" />，后者指定 <see cref="T:System.Windows.Media.Geometry" /> 的与坐标轴对齐的边界框。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Geometry" /> 的与坐标轴对齐的边界框。</returns>
    </member>
    <member name="M:System.Windows.Media.Geometry.Clone">
      <summary>创建 <see cref="T:System.Windows.Media.Geometry" /> 的一个可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.Geometry.CloneCurrentValue">
      <summary>创建 <see cref="T:System.Windows.Media.Geometry" /> 对象的一个可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.Geometry.Combine(System.Windows.Media.Geometry,System.Windows.Media.Geometry,System.Windows.Media.GeometryCombineMode,System.Windows.Media.Transform)">
      <summary>使用指定的 <see cref="T:System.Windows.Media.GeometryCombineMode" /> 合并两个几何图形，并对生成的几何图形应用指定的转换。</summary>
      <returns>合并后的几何图形。</returns>
      <param name="geometry1">要合并的第一个几何图形。</param>
      <param name="geometry2">要合并的第二个几何图形。</param>
      <param name="mode">枚举值之一，指定几何图形的合并方式。</param>
      <param name="transform">要向合并后的几何图形应用的转换或 null。</param>
    </member>
    <member name="M:System.Windows.Media.Geometry.Combine(System.Windows.Media.Geometry,System.Windows.Media.Geometry,System.Windows.Media.GeometryCombineMode,System.Windows.Media.Transform,System.Double,System.Windows.Media.ToleranceType)">
      <summary>使用指定的 <see cref="T:System.Windows.Media.GeometryCombineMode" /> 和公差因子合并两个几何图形，并对生成的几何图形应用指定的转换。</summary>
      <returns>合并后的几何图形。</returns>
      <param name="geometry1">要合并的第一个几何图形。</param>
      <param name="geometry2">要合并的第二个几何图形。</param>
      <param name="mode">枚举值之一，指定几何图形的合并方式。</param>
      <param name="transform">要向合并后的几何图形应用的转换或 null。</param>
      <param name="tolerance">几何图形的多边形近似中两点间距离的上限。值越小，生成的结果就越准确，但执行速度会变慢。如果 <paramref name="tolerance" /> 小于 10-6，则改用 10-6。</param>
      <param name="type">
        <see cref="T:System.Windows.Media.ToleranceType" /> 值之一，指定公差因子是绝对值还是相对于几何图形区域的相对值。</param>
    </member>
    <member name="P:System.Windows.Media.Geometry.Empty">
      <summary>获取一个空对象。</summary>
      <returns>空的几何图形对象。</returns>
    </member>
    <member name="M:System.Windows.Media.Geometry.FillContains(System.Windows.Media.Geometry)">
      <summary>指示当前几何图形是否完全包含指定的 <see cref="T:System.Windows.Media.Geometry" />。</summary>
      <returns>
            如果当前几何图形完全包含 <paramref name="geometry" />，则为 true；否则为 false。</returns>
      <param name="geometry">要进行包容测试的几何图形。</param>
    </member>
    <member name="M:System.Windows.Media.Geometry.FillContains(System.Windows.Media.Geometry,System.Double,System.Windows.Media.ToleranceType)">
      <summary>在给出指定的误差范围的情况下，指示当前几何图形是否包含指定的 <see cref="T:System.Windows.Media.Geometry" />。</summary>
      <returns>
            在给出指定误差范围的情况下，如果当前几何图形包含 <paramref name="geometry" />，则为 true；否则为 false。</returns>
      <param name="geometry">要进行包容测试的几何图形。</param>
      <param name="tolerance">几何图形的多边形近似中两点间距离的上限。值越小，生成的结果就越准确，但执行速度会变慢。如果 <paramref name="tolerance" /> 小于 10-6，则改用 10-6。</param>
      <param name="type">
        <see cref="T:System.Windows.Media.ToleranceType" /> 值之一，指定公差因子是绝对值还是相对于几何图形区域的相对值。</param>
    </member>
    <member name="M:System.Windows.Media.Geometry.FillContains(System.Windows.Point)">
      <summary>指示该几何图形是否包含指定的 <see cref="T:System.Windows.Point" />。</summary>
      <returns>
            如果该几何图形包含 <paramref name="hitPoint" />，则为 true；否则为 false。</returns>
      <param name="hitPoint">要进行包容测试的点。</param>
    </member>
    <member name="M:System.Windows.Media.Geometry.FillContains(System.Windows.Point,System.Double,System.Windows.Media.ToleranceType)">
      <summary>在给出指定误差范围的情况下，指示几何图形是否包含指定的 <see cref="T:System.Windows.Point" />。</summary>
      <returns>
            在给出指定误差范围的情况下，如果几何图形包含 <paramref name="hitPoint" />，则为 true；否则为 false。</returns>
      <param name="hitPoint">要进行包容测试的点。</param>
      <param name="tolerance">几何图形的多边形近似中两点间距离的上限。值越小，生成的结果就越准确，但执行速度会变慢。如果 <paramref name="tolerance" /> 小于 10-6，则改用 10-6。</param>
      <param name="type">
        <see cref="T:System.Windows.Media.ToleranceType" /> 值之一，指定公差因子是绝对值还是相对于几何图形区域的相对值。</param>
    </member>
    <member name="M:System.Windows.Media.Geometry.FillContainsWithDetail(System.Windows.Media.Geometry)">
      <summary>返回一个值，该值描述当前几何图形与指定几何图形的交集。</summary>
      <returns>枚举值之一。</returns>
      <param name="geometry">要进行包容测试的几何图形。</param>
    </member>
    <member name="M:System.Windows.Media.Geometry.FillContainsWithDetail(System.Windows.Media.Geometry,System.Double,System.Windows.Media.ToleranceType)">
      <summary>在给出指定误差范围的情况下，返回一个值，该值描述当前几何图形与指定几何图形的交集。</summary>
      <returns>枚举值之一。</returns>
      <param name="geometry">要进行包容测试的几何图形。</param>
      <param name="tolerance">几何图形的多边形近似中两点间距离的上限。值越小，生成的结果就越准确，但执行速度会变慢。如果 <paramref name="tolerance" /> 小于 10-6，则改用 10-6。</param>
      <param name="type">
        <see cref="T:System.Windows.Media.ToleranceType" /> 值之一，指定公差因子是绝对值还是相对于几何图形区域的相对值。</param>
    </member>
    <member name="M:System.Windows.Media.Geometry.GetArea">
      <summary>获取 <see cref="T:System.Windows.Media.Geometry" /> 对象填充区域的区域。</summary>
      <returns>几何图形的填充区域的区域。</returns>
    </member>
    <member name="M:System.Windows.Media.Geometry.GetArea(System.Double,System.Windows.Media.ToleranceType)">
      <summary>在指定的公差范围内获取 <see cref="T:System.Windows.Media.Geometry" /> 对象填充区域的区域。</summary>
      <returns>几何图形的填充区域的区域。</returns>
      <param name="tolerance">几何图形的多边形近似中两点间距离的上限。值越小，生成的结果就越准确，但执行速度会变慢。如果 <paramref name="tolerance" /> 小于 10-6，则改用 10-6。</param>
      <param name="type">
        <see cref="T:System.Windows.Media.ToleranceType" /> 值之一，指定公差因子是绝对值还是相对于几何图形区域的相对值。</param>
    </member>
    <member name="M:System.Windows.Media.Geometry.GetFlattenedPathGeometry">
      <summary>获取 <see cref="T:System.Windows.Media.Geometry" /> 对象的多边形近似 <see cref="T:System.Windows.Media.PathGeometry" />。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Geometry" /> 的多边形近似。</returns>
    </member>
    <member name="M:System.Windows.Media.Geometry.GetFlattenedPathGeometry(System.Double,System.Windows.Media.ToleranceType)">
      <summary>在指定的公差范围内获取 <see cref="T:System.Windows.Media.Geometry" /> 对象的多边形近似 <see cref="T:System.Windows.Media.PathGeometry" />。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Geometry" /> 的多边形近似。</returns>
      <param name="tolerance">几何图形的多边形近似中两点间距离的上限。值越小，生成的结果就越准确，但执行速度会变慢。如果 <paramref name="tolerance" /> 小于 10-6，则改用 10-6。</param>
      <param name="type">
        <see cref="T:System.Windows.Media.ToleranceType" /> 值之一，指定公差因子是绝对值还是相对于几何图形区域的相对值。</param>
    </member>
    <member name="M:System.Windows.Media.Geometry.GetOutlinedPathGeometry">
      <summary>获取 <see cref="T:System.Windows.Media.Geometry" /> 填充区域的简化轮廓 <see cref="T:System.Windows.Media.PathGeometry" />。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Geometry" /> 填充区域的简化轮廓。</returns>
    </member>
    <member name="M:System.Windows.Media.Geometry.GetOutlinedPathGeometry(System.Double,System.Windows.Media.ToleranceType)">
      <summary>在指定的公差范围内获取 <see cref="T:System.Windows.Media.Geometry" /> 填充区域的简化轮廓 <see cref="T:System.Windows.Media.PathGeometry" />。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Geometry" /> 填充区域的简化轮廓。</returns>
      <param name="tolerance">几何图形的多边形近似中两点间距离的上限。值越小，生成的结果就越准确，但执行速度会变慢。如果 <paramref name="tolerance" /> 小于 10-6，则改用 10-6。</param>
      <param name="type">
        <see cref="T:System.Windows.Media.ToleranceType" /> 值之一，指定公差因子是绝对值还是相对于几何图形区域的相对值。</param>
    </member>
    <member name="M:System.Windows.Media.Geometry.GetRenderBounds(System.Windows.Media.Pen)">
      <summary>返回一个与坐标轴对齐的矩形，该矩形的大小正好能容纳用指定的 <see cref="T:System.Windows.Media.Pen" /> 勾勒的几何图形。</summary>
      <returns>一个与坐标轴对齐的矩形，它的大小正好能容纳勾勒出的几何图形。</returns>
      <param name="pen">一个描述几何图形笔画区域的对象。</param>
    </member>
    <member name="M:System.Windows.Media.Geometry.GetRenderBounds(System.Windows.Media.Pen,System.Double,System.Windows.Media.ToleranceType)">
      <summary>在给出指定的公差因子的情况下，返回一个与坐标轴对齐的矩形，该矩形的大小正好能容纳用指定的 <see cref="T:System.Windows.Media.Pen" /> 勾勒的几何图形。</summary>
      <returns>一个与坐标轴对齐的矩形，它的大小正好能容纳勾勒出的几何图形。</returns>
      <param name="pen">一个描述几何图形笔画区域的对象。</param>
      <param name="tolerance">几何图形的多边形近似中两点间距离的上限。值越小，生成的结果就越准确，但执行速度会变慢。如果 <paramref name="tolerance" /> 小于 10-6，则改用 10-6。</param>
      <param name="type">
        <see cref="T:System.Windows.Media.ToleranceType" /> 值之一，指定公差因子是绝对值还是相对于几何图形区域的相对值。</param>
    </member>
    <member name="M:System.Windows.Media.Geometry.GetWidenedPathGeometry(System.Windows.Media.Pen)">
      <summary>获取一个由指定 <see cref="T:System.Windows.Media.Pen" /> 生成的 <see cref="T:System.Windows.Media.Geometry" /> 上的笔画所定义的形状 <see cref="T:System.Windows.Media.PathGeometry" />。</summary>
      <returns>勾勒的几何图形。</returns>
      <param name="pen">一个描述几何图形笔画区域的对象。</param>
    </member>
    <member name="M:System.Windows.Media.Geometry.GetWidenedPathGeometry(System.Windows.Media.Pen,System.Double,System.Windows.Media.ToleranceType)">
      <summary>在给出指定的公差因子的情况下，获取一个由指定 <see cref="T:System.Windows.Media.Pen" /> 生成的 <see cref="T:System.Windows.Media.Geometry" /> 上的笔画所定义的形状 <see cref="T:System.Windows.Media.PathGeometry" />。</summary>
      <returns>由 <paramref name="pen" /> 扩大的几何图形。</returns>
      <param name="pen">用于定义几何图形笔画区域的对象。</param>
      <param name="tolerance">几何图形的多边形近似中两点间距离的上限。值越小，生成的结果就越准确，但执行速度会变慢。如果 <paramref name="tolerance" /> 小于 10-6，则改用 10-6。</param>
      <param name="type">
        <see cref="T:System.Windows.Media.ToleranceType" /> 值之一，指定公差因子是绝对值还是相对于几何图形区域的相对值。</param>
    </member>
    <member name="M:System.Windows.Media.Geometry.IsEmpty">
      <summary>确定对象是否为空。</summary>
      <returns>
            如果几何图形为空，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.Geometry.MayHaveCurves">
      <summary>确定对象是否可以具有曲线段。</summary>
      <returns>
            如果几何图形对象可以具有曲线段，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.Geometry.Parse(System.String)">
      <summary>使用当前区域性基于指定的字符串创建新的 <see cref="T:System.Windows.Media.Geometry" /> 实例。</summary>
      <returns>一个基于指定字符串创建的新 <see cref="T:System.Windows.Media.Geometry" /> 实例。</returns>
      <param name="source">一个字符串，描述要创建的几何图形。有关如何设置此字符串的格式的信息，请参见路径标记语法。</param>
    </member>
    <member name="M:System.Windows.Media.Geometry.ShouldSerializeTransform">
      <summary>获取一个值，该值指示是否应序列化 <see cref="P:System.Windows.Media.Geometry.Transform" /> 属性的值。</summary>
      <returns>
            如果几何图形的 <see cref="P:System.Windows.Media.Geometry.Transform" /> 属性值应被序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.Geometry.StandardFlatteningTolerance">
      <summary>获取用于多边形近似的标准公差。</summary>
      <returns>标准公差 0.25。</returns>
    </member>
    <member name="M:System.Windows.Media.Geometry.StrokeContains(System.Windows.Media.Pen,System.Windows.Point)">
      <summary>确定指定的 <see cref="T:System.Windows.Point" /> 是否包含在通过向几何图形应用指定 <see cref="T:System.Windows.Media.Pen" /> 所生成的笔画中。</summary>
      <returns>
            如果 <paramref name="hitPoint" /> 包含在通过向几何图形应用指定 <see cref="T:System.Windows.Media.Pen" /> 所生成的笔画中，则为 true；否则为 false。</returns>
      <param name="pen">一个确定几何图形笔画区域的对象。</param>
      <param name="hitPoint">要进行包容测试的点。</param>
    </member>
    <member name="M:System.Windows.Media.Geometry.StrokeContains(System.Windows.Media.Pen,System.Windows.Point,System.Double,System.Windows.Media.ToleranceType)">
      <summary>在给出指定误差范围的情况下，确定指定的 <see cref="T:System.Windows.Point" /> 是否包含在通过向几何图形应用指定 <see cref="T:System.Windows.Media.Pen" /> 所生成的笔画中。</summary>
      <returns>
            在给出指定公差因子的情况下，如果通过向几何图形应用指定 <see cref="T:System.Windows.Media.Pen" /> 创建的笔画包含指定的点，则为 true；否则为 false。</returns>
      <param name="pen">一个定义几何图形笔画的对象。</param>
      <param name="hitPoint">要进行包容测试的点。</param>
      <param name="tolerance">几何图形的多边形近似中两点间距离的上限。值越小，生成的结果就越准确，但执行速度会变慢。如果 <paramref name="tolerance" /> 小于 10-6，则改用 10-6。</param>
      <param name="type">
        <see cref="T:System.Windows.Media.ToleranceType" /> 值之一，指定公差因子是绝对值还是相对于几何图形区域的相对值。</param>
    </member>
    <member name="M:System.Windows.Media.Geometry.StrokeContainsWithDetail(System.Windows.Media.Pen,System.Windows.Media.Geometry)">
      <summary>返回一个值，该值描述指定的 <see cref="T:System.Windows.Media.Geometry" /> 与通过向当前几何图形应用指定 <see cref="T:System.Windows.Media.Pen" /> 所创建的笔画的交集。</summary>
      <returns>枚举值之一。</returns>
      <param name="pen">一个确定当前几何图形的笔画区域的对象。</param>
      <param name="geometry">要进行包容测试的几何图形。</param>
    </member>
    <member name="M:System.Windows.Media.Geometry.StrokeContainsWithDetail(System.Windows.Media.Pen,System.Windows.Media.Geometry,System.Double,System.Windows.Media.ToleranceType)">
      <summary>在给出指定的误差范围的情况下，获取一个值，该值描述指定的 <see cref="T:System.Windows.Media.Geometry" /> 与通过向当前几何图形应用指定 <see cref="T:System.Windows.Media.Pen" /> 所创建的笔画的交集。</summary>
      <returns>枚举值之一。</returns>
      <param name="pen">一个确定当前几何图形的笔画区域的对象。</param>
      <param name="geometry">要进行包容测试的几何图形。</param>
      <param name="tolerance">几何图形的多边形近似中两点间距离的上限。值越小，生成的结果就越准确，但执行速度会变慢。如果 <paramref name="tolerance" /> 小于 10-6，则改用 10-6。</param>
      <param name="type">
        <see cref="T:System.Windows.Media.ToleranceType" /> 值之一，指定公差因子是绝对值还是相对于几何图形区域的相对值。</param>
    </member>
    <member name="M:System.Windows.Media.Geometry.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="format"></param>
      <param name="provider"></param>
    </member>
    <member name="M:System.Windows.Media.Geometry.ToString">
      <summary>基于当前区域性创建对象的字符串表示形式。</summary>
      <returns>对象的字符串表示形式。</returns>
    </member>
    <member name="M:System.Windows.Media.Geometry.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定的格式设置信息创建对象的字符串表示形式。</summary>
      <returns>对象的字符串表示形式。</returns>
      <param name="provider">区域性特定的格式设置信息；如果使用当前区域性，则为 null。</param>
    </member>
    <member name="P:System.Windows.Media.Geometry.Transform">
      <summary>获取或设置应用于 <see cref="T:System.Windows.Media.Geometry" /> 的 <see cref="T:System.Windows.Media.Transform" /> 对象。这是一个依赖项属性。</summary>
      <returns>应用于 <see cref="T:System.Windows.Media.Geometry" /> 的转换。请注意，此值可以是单个 <see cref="T:System.Windows.Media.Transform" />，也可以是强制转换为 <see cref="T:System.Windows.Media.Transform" /> 的 <see cref="T:System.Windows.Media.TransformCollection" />。</returns>
    </member>
    <member name="F:System.Windows.Media.Geometry.TransformProperty">
      <summary>标识 <see cref="P:System.Windows.Media.Geometry.Transform" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.Geometry.Transform" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.GeometryCollection">
      <summary>
                     表示 <see cref="T:System.Windows.Media.Geometry" /> 对象的集合。
                </summary>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.#ctor">
      <summary>
                    初始化 <see cref="T:System.Windows.Media.GeometryCollection" /> 类的一个新实例。
                </summary>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.Geometry})">
      <summary>
                    用指定的 <see cref="T:System.Windows.Media.Geometry" /> 对象的集合来初始化 <see cref="T:System.Windows.Media.GeometryCollection" /> 类的新实例。
                </summary>
      <param name="collection">
                    构成 <see cref="T:System.Windows.Media.GeometryCollection" /> 的 <see cref="T:System.Windows.Media.Geometry" /> 对象的集合。
                </param>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.#ctor(System.Int32)">
      <summary>
                    使用指定的容量或集合最初可存储的 <see cref="T:System.Windows.Media.Geometry" /> 对象数来初始化 <see cref="T:System.Windows.Media.GeometryCollection" /> 类的一个新实例。
                </summary>
      <param name="capacity">
                    集合最初可存储的 <see cref="T:System.Windows.Media.Geometry" /> 对象数。
                </param>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.Add(System.Windows.Media.Geometry)">
      <summary>
                    将 <see cref="T:System.Windows.Media.Geometry" /> 添加到集合的末尾。
                </summary>
      <param name="value">
                    要添加到集合末尾的 <see cref="T:System.Windows.Media.Geometry" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.Clear">
      <summary>
                    从集合中移除所有 <see cref="T:System.Windows.Media.Geometry" /> 对象。
                </summary>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.Clone">
      <summary>
                    创建此 <see cref="T:System.Windows.Media.GeometryCollection" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。
                </summary>
      <returns>
                    当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.CloneCurrentValue">
      <summary>
                    创建此 <see cref="T:System.Windows.Media.GeometryCollection" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。
                </summary>
      <returns>
                    当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.Contains(System.Windows.Media.Geometry)">
      <summary>
                    返回一个指示集合是否包含指定的 <see cref="T:System.Windows.Media.Geometry" /> 的值。
                </summary>
      <param name="value">
                    要在集合中定位的 <see cref="T:System.Windows.Media.Geometry" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.CopyTo(System.Windows.Media.Geometry[],System.Int32)">
      <summary>
                    将集合中的所有 <see cref="T:System.Windows.Media.Geometry" /> 对象复制到指定的数组中。
                </summary>
      <param name="array">
                    标识内容要复制到的数组。
                </param>
      <param name="index">
                    集合内容要复制到的数组中的索引位置。
                </param>
    </member>
    <member name="P:System.Windows.Media.GeometryCollection.Count">
      <summary>
                     获取 <see cref="T:System.Windows.Media.GeometryCollection" /> 中包含的几何图形的数目。
                </summary>
      <returns>
        <see cref="T:System.Windows.Media.GeometryCollection" /> 中包含的几何图形的数目。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.GetEnumerator">
      <summary>
                    返回可循环访问集合的枚举数。
                </summary>
      <returns>
                    一个可以循环访问集合的 <see cref="T:System.Windows.Media.GeometryCollection.Enumerator" />。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.IndexOf(System.Windows.Media.Geometry)">
      <summary>
                    搜索指定的 <see cref="T:System.Windows.Media.Geometry" />，并返回整个集合中第一个匹配项的从零开始的索引。
                </summary>
      <returns>
                    如果在整个集合中找到 <paramref name="value" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在集合中定位的 <see cref="T:System.Windows.Media.Geometry" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.Insert(System.Int32,System.Windows.Media.Geometry)">
      <summary>
                    在集合中的特定位置插入 <see cref="T:System.Windows.Media.Geometry" />。
                </summary>
      <param name="index">
        <see cref="T:System.Windows.Media.Geometry" /> 所插入到的索引位置。
                </param>
      <param name="value">
                    要在集合中插入的 <see cref="T:System.Windows.Media.Geometry" /> 对象。
                </param>
    </member>
    <member name="P:System.Windows.Media.GeometryCollection.Item(System.Int32)">
      <summary>
                    获取或设置指定索引位置处的 <see cref="T:System.Windows.Media.Geometry" />。
                </summary>
      <returns>
                    指定索引处的 <see cref="T:System.Windows.Media.Geometry" />。
                </returns>
      <param name="index">
                        要获取或设置的 <see cref="T:System.Windows.Media.Geometry" /> 的从零开始的索引。
                </param>
      <exception cref="T:System.InvalidOperationException">
                    由于集合被冻结（其 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true），因此试图修改它的行为将无效。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                    - 或 -
                <paramref name="index" /> 等于或大于 <see cref="P:System.Windows.Media.Animation.DoubleKeyFrameCollection.Count" />。
                </exception>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.Remove(System.Windows.Media.Geometry)">
      <summary>
                     从此 <see cref="T:System.Windows.Media.GeometryCollection" /> 中移除指定的 <see cref="T:System.Windows.Media.Geometry" /> 的第一个匹配项。
                </summary>
      <returns>
                    如果已从集合中移除了 <paramref name="value" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要从此 <see cref="T:System.Windows.Media.GeometryCollection" /> 中移除的 <see cref="T:System.Windows.Media.Geometry" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.RemoveAt(System.Int32)">
      <summary>
                     从此 <see cref="T:System.Windows.Media.GeometryCollection" /> 中移除指定索引处的 <see cref="T:System.Windows.Media.Geometry" />。
                </summary>
      <param name="index">
                    要移除的 <see cref="T:System.Windows.Media.Geometry" /> 的索引。
                </param>
    </member>
    <member name="P:System.Windows.Media.GeometryCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.GeometryCollection" /> 是只读的，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator`1" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />。
                </summary>
      <param name="array">
                    从零开始的 <see cref="T:System.Array" />，它接收从 <see cref="T:System.Windows.Media.GeometryCollection" /> 复制来的项。
                </param>
      <param name="index">
                    指定的 <see cref="T:System.Array" /> 中接收复制内容的第一个位置。
                </param>
    </member>
    <member name="P:System.Windows.Media.GeometryCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。
                </summary>
      <returns>
                    如果对 <see cref="T:System.Windows.Media.GeometryCollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.GeometryCollection.System#Collections#ICollection#SyncRoot">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。
                </summary>
      <returns>
                    可用于同步对 <see cref="T:System.Windows.Media.GeometryCollection" /> 的访问的对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections." /><see cref="IEnumerator" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.System#Collections#IList#Add(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。
                </summary>
      <returns>
                    新元素的插入位置。
                </returns>
      <param name="value">
                    要添加到 <see cref="T:System.Windows.Media.GeometryCollection" /> 的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Media.GeometryCollection" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.GeometryCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。
                </summary>
      <returns>
                    如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.GeometryCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。
                </summary>
      <param name="index">
                    从零开始的索引，在该处插入 <see cref="T:System.Object" />。
                </param>
      <param name="value">
                    要插入 <see cref="T:System.Windows.Media.GeometryCollection" /> 中的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="P:System.Windows.Media.GeometryCollection.System#Collections#IList#IsFixedSize">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.GeometryCollection" /> 具有固定大小，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.GeometryCollection.System#Collections#IList#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.GeometryCollection" /> 是只读的，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.GeometryCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.Item(System.Int32)" />。
                </summary>
      <returns>
                    指定索引处的元素。
                </returns>
      <param name="index">
                    要获得或设置的元素从零开始的索引。
                </param>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Remove(System.Object)" />。
                </summary>
      <param name="value">
                    要从 <see cref="T:System.Windows.Media.GeometryCollection" /> 移除的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="T:System.Windows.Media.GeometryCollection.Enumerator">
      <summary>枚举 <see cref="T:System.Windows.Media.GeometryCollection" /> 中的 <see cref="T:System.Windows.Media.Geometry" /> 项。 </summary>
    </member>
    <member name="P:System.Windows.Media.GeometryCollection.Enumerator.Current">
      <summary>获取集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.Enumerator.MoveNext">
      <summary>将枚举数前移到集合中的下一个元素。</summary>
      <returns>
            如果枚举数成功前移到了下一个元素，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.Enumerator.Reset">
      <summary>将枚举数重置至其初始位置，即位于集合中第一个元素之前。</summary>
    </member>
    <member name="P:System.Windows.Media.GeometryCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Media.GeometryCollection.Enumerator.System#IDisposable#Dispose">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="T:System.Windows.Media.GeometryCombineMode">
      <summary>指定可用于合并两个几何图形的不同方法。</summary>
    </member>
    <member name="F:System.Windows.Media.GeometryCombineMode.Union">
      <summary>通过采用两个区域的并集合并两个区域。 所生成的几何图形为几何图形 <paramref name="A" /> + 几何图形 <paramref name="B" />。</summary>
    </member>
    <member name="F:System.Windows.Media.GeometryCombineMode.Intersect">
      <summary>通过采用两个区域的交集合并两个区域。 新的区域由两个几何图形之间的重叠区域组成。</summary>
    </member>
    <member name="F:System.Windows.Media.GeometryCombineMode.Xor">
      <summary>将在第一个区域中但不在第二个区域中的区域与在第二个区域中但不在第一个区域中的区域进行合并。 新的区域由 <paramref name="(A-B)" /> + <paramref name="(B-A)" /> 组成，其中 <paramref name="A" /> 和 <paramref name="B" /> 为几何图形。</summary>
    </member>
    <member name="F:System.Windows.Media.GeometryCombineMode.Exclude">
      <summary>从第一个区域中除去第二个区域。 如果给出两个几何图形 <paramref name="A" /> 和 <paramref name="B" />，则从几何图形 <paramref name="A" /> 的区域中除去几何图形 <paramref name="B" /> 的区域，所产生的区域为 <paramref name="A-B" />。</summary>
    </member>
    <member name="T:System.Windows.Media.GeometryConverter">
      <summary>在 <see cref="T:System.Windows.Media.Geometry" /> 实例与其他类型的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Media.GeometryConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.Geometry" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.GeometryConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指示是否可将一个对象从给定类型转换成 <see cref="T:System.Windows.Media.Geometry" /> 实例。 </summary>
      <returns>
            如果可以将指定类型的对象转换为 <see cref="T:System.Windows.Media.Geometry" />，则为 true；否则为 false。</returns>
      <param name="context">转换所需的上下文信息。</param>
      <param name="sourceType">将对其查询转换支持的源 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Windows.Media.GeometryConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将 <see cref="T:System.Windows.Media.Geometry" /> 实例转换成指定类型。</summary>
      <returns>
            如果可以将 <see cref="T:System.Windows.Media.Geometry" /> 的实例转换为 <paramref name="destinationType" />，则为 true；否则为 false。</returns>
      <param name="context">转换所需的上下文信息。</param>
      <param name="destinationType">所计算的此 <see cref="T:System.Windows.Media.Geometry" /> 要转换为的期望类型。</param>
    </member>
    <member name="M:System.Windows.Media.GeometryConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定对象转换为 <see cref="T:System.Windows.Media.Geometry" />。 </summary>
      <returns>通过转换 <paramref name="value" /> 创建的 <see cref="T:System.Windows.Media.Geometry" />。</returns>
      <param name="context">转换所需的上下文信息。</param>
      <param name="culture">转换过程中考虑的区域性信息。</param>
      <param name="value">正在转换的对象。</param>
      <exception cref="T:System.NotSupportedException">如果 <paramref name="value" /> 为 null 或者不是可转换为 <see cref="T:System.Windows.Media.Geometry" /> 的有效类型，则引发该异常。</exception>
    </member>
    <member name="M:System.Windows.Media.GeometryConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将指定的 <see cref="T:System.Windows.Media.Geometry" /> 转换为指定类型。</summary>
      <returns>通过转换此 <see cref="T:System.Windows.Media.Geometry" /> 创建的对象。</returns>
      <param name="context">转换所需的上下文信息。</param>
      <param name="culture">转换过程中考虑的区域性信息。</param>
      <param name="value">要转换的 <see cref="T:System.Windows.Media.Geometry" />。</param>
      <param name="destinationType">
        <see cref="T:System.Windows.Media.Geometry" /> 所要转换成的类型。</param>
      <exception cref="T:System.NotSupportedException">如果 <paramref name="value" /> 为 null 或者不是 <see cref="T:System.Windows.Media.Geometry" />，或者无法将 <paramref name="destinationType" /> 转换为 <see cref="T:System.Windows.Media.Geometry" />，则引发该异常。</exception>
    </member>
    <member name="T:System.Windows.Media.GeometryDrawing">
      <summary>使用指定的 <see cref="P:System.Windows.Media.GeometryDrawing.Brush" /> 和 <see cref="P:System.Windows.Media.GeometryDrawing.Pen" /> 绘制 <see cref="T:System.Windows.Media.Geometry" />。 </summary>
    </member>
    <member name="M:System.Windows.Media.GeometryDrawing.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Media.GeometryDrawing" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.GeometryDrawing.#ctor(System.Windows.Media.Brush,System.Windows.Media.Pen,System.Windows.Media.Geometry)">
      <summary> 使用指定的 <see cref="T:System.Windows.Media.Brush" />、<see cref="T:System.Windows.Media.Pen" /> 和 <see cref="T:System.Windows.Media.Geometry" /> 初始化 <see cref="T:System.Windows.Media.GeometryDrawing" /> 类的新实例。</summary>
      <param name="brush">用于填充此 <see cref="T:System.Windows.Media.GeometryDrawing" /> 的画笔。</param>
      <param name="pen">用于绘制此 <see cref="T:System.Windows.Media.GeometryDrawing" /> 的钢笔。</param>
      <param name="geometry">几何图形 </param>
    </member>
    <member name="P:System.Windows.Media.GeometryDrawing.Brush">
      <summary> 获取或设置 <see cref="T:System.Windows.Media.Brush" />，将它用于填充此 <see cref="T:System.Windows.Media.GeometryDrawing" /> 所描述形状的内部。 这是一个依赖项属性。</summary>
      <returns>用于填充此 <see cref="T:System.Windows.Media.GeometryDrawing" /> 的画笔。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Media.GeometryDrawing.BrushProperty">
      <summary>标识 <see cref="P:System.Windows.Media.GeometryDrawing.Brush" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.GeometryDrawing.Brush" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.GeometryDrawing.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.GeometryDrawing" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.GeometryDrawing.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.GeometryDrawing" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.GeometryDrawing.Geometry">
      <summary>获取或设置描述此 <see cref="T:System.Windows.Media.GeometryDrawing" /> 形状的 <see cref="T:System.Windows.Media.Geometry" />。 这是一个依赖项属性。</summary>
      <returns>此 <see cref="T:System.Windows.Media.GeometryDrawing" /> 所描述的形状。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Media.GeometryDrawing.GeometryProperty">
      <summary>标识 <see cref="P:System.Windows.Media.GeometryDrawing.Geometry" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.GeometryDrawing.Geometry" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.GeometryDrawing.Pen">
      <summary> 获取或设置用于绘制此 <see cref="T:System.Windows.Media.GeometryDrawing" /> 的 <see cref="T:System.Windows.Media.Pen" />。 这是一个依赖项属性。</summary>
      <returns>用于绘制此 <see cref="T:System.Windows.Media.GeometryDrawing" /> 的钢笔。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Media.GeometryDrawing.PenProperty">
      <summary>标识 <see cref="P:System.Windows.Media.GeometryDrawing.Pen" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.GeometryDrawing.Pen" /> 依赖项属性标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.GeometryGroup">
      <summary>表示由其他 <see cref="T:System.Windows.Media.Geometry" /> 对象组成的复合几何图形。</summary>
    </member>
    <member name="M:System.Windows.Media.GeometryGroup.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Media.GeometryGroup" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Windows.Media.GeometryGroup.Children">
      <summary> 获取或设置包含定义此 <see cref="T:System.Windows.Media.GeometryGroup" /> 的对象的 <see cref="T:System.Windows.Media.GeometryCollection" />。 这是一个依赖项属性。</summary>
      <returns>包含此 <see cref="T:System.Windows.Media.GeometryGroup" /> 的子级的集合。</returns>
    </member>
    <member name="F:System.Windows.Media.GeometryGroup.ChildrenProperty">
      <summary>标识 <see cref="P:System.Windows.Media.GeometryGroup.Children" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.GeometryGroup.Children" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.GeometryGroup.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.GeometryGroup" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.GeometryGroup.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.GeometryGroup" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.GeometryGroup.FillRule">
      <summary> 获取或设置如何组合此 <see cref="T:System.Windows.Media.GeometryGroup" /> 中所包含对象的相交区域。 这是一个依赖项属性。</summary>
      <returns>指定如何组合相交区域可形成结果区域。默认值为 EvenOdd。</returns>
    </member>
    <member name="F:System.Windows.Media.GeometryGroup.FillRuleProperty">
      <summary>标识 <see cref="P:System.Windows.Media.GeometryGroup.FillRule" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.GeometryGroup.FillRule" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.GeometryGroup.IsEmpty">
      <summary> 确定此 <see cref="T:System.Windows.Media.GeometryGroup" /> 对象是否为空。</summary>
      <returns>
            如果此 <see cref="T:System.Windows.Media.GeometryGroup" /> 为空，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.GeometryGroup.MayHaveCurves">
      <summary> 确定此 <see cref="T:System.Windows.Media.GeometryGroup" /> 对象是否可以具有曲线段。</summary>
      <returns>
            如果此 <see cref="T:System.Windows.Media.GeometryGroup" /> 对象可以具有曲线段，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Windows.Media.GeometryHitTestParameters">
      <summary>指定一个 <see cref="T:System.Windows.Media.Geometry" /> 作为要用于命中测试可视化树的参数。</summary>
    </member>
    <member name="M:System.Windows.Media.GeometryHitTestParameters.#ctor(System.Windows.Media.Geometry)">
      <summary>使用指定的 <see cref="T:System.Windows.Media.Geometry" /> 初始化 <see cref="T:System.Windows.Media.GeometryHitTestParameters" /> 类的一个新实例。</summary>
      <param name="geometry">用于命中测试几何图形的 <see cref="T:System.Windows.Media.Geometry" /> 值。</param>
    </member>
    <member name="P:System.Windows.Media.GeometryHitTestParameters.HitGeometry">
      <summary>获取为此 <see cref="T:System.Windows.Media.GeometryHitTestParameters" /> 实例定义命中测试几何图形的 <see cref="T:System.Windows.Media.Geometry" />。</summary>
      <returns>定义命中测试区域的 <see cref="T:System.Windows.Media.Geometry" />。</returns>
    </member>
    <member name="T:System.Windows.Media.GeometryHitTestResult">
      <summary>返回使用 <see cref="T:System.Windows.Media.Geometry" /> 作为命中测试参数的命中测试的结果。</summary>
    </member>
    <member name="M:System.Windows.Media.GeometryHitTestResult.#ctor(System.Windows.Media.Visual,System.Windows.Media.IntersectionDetail)">
      <summary>使用指定的可视对象和 <see cref="T:System.Windows.Media.IntersectionDetail" /> 值初始化 <see cref="T:System.Windows.Media.GeometryHitTestResult" /> 类的新实例。</summary>
      <param name="visualHit">在命中测试期间命中的可视对象。</param>
      <param name="intersectionDetail">描述 <see cref="T:System.Windows.Media.Geometry" /> 和 <paramref name="visualHit" /> 之间的交集。</param>
    </member>
    <member name="P:System.Windows.Media.GeometryHitTestResult.IntersectionDetail">
      <summary>获取命中测试的 <see cref="T:System.Windows.Media.IntersectionDetail" /> 值。</summary>
      <returns>命中测试的 <see cref="T:System.Windows.Media.IntersectionDetail" /> 值。</returns>
    </member>
    <member name="P:System.Windows.Media.GeometryHitTestResult.VisualHit">
      <summary>获取从命中测试结果中返回的可视对象。</summary>
      <returns>一个表示命中测试结果的 <see cref="T:System.Windows.Media.Visual" /> 对象。</returns>
    </member>
    <member name="T:System.Windows.Media.GlyphRun">
      <summary>表示一序列标志符号，这些标志符号来自具有一种字号和一种呈现样式的一种字体。</summary>
    </member>
    <member name="M:System.Windows.Media.GlyphRun.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.GlyphRun" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.GlyphRun.#ctor(System.Windows.Media.GlyphTypeface,System.Int32,System.Boolean,System.Double,System.Collections.Generic.IList{System.UInt16},System.Windows.Point,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Windows.Point},System.Collections.Generic.IList{System.Char},System.String,System.Collections.Generic.IList{System.UInt16},System.Collections.Generic.IList{System.Boolean},System.Windows.Markup.XmlLanguage)">
      <summary>通过指定 <see cref="T:System.Windows.Media.GlyphRun" /> 类的属性初始化该类的新实例。</summary>
      <param name="glyphTypeface">一个 <see cref="T:System.Windows.Media.GlyphTypeface" /> 类型的值。</param>
      <param name="bidiLevel">一个 <see cref="T:System.Int32" /> 类型的值。</param>
      <param name="isSideways">一个 <see cref="T:System.Boolean" /> 类型的值。</param>
      <param name="renderingEmSize">一个 <see cref="T:System.Double" /> 类型的值。</param>
      <param name="glyphIndices">
        <see cref="T:System.Collections.Generic.IList`1" /> 类型数组。</param>
      <param name="baselineOrigin">一个 <see cref="T:System.Windows.Point" /> 类型的值。</param>
      <param name="advanceWidths">
        <see cref="T:System.Collections.Generic.IList`1" /> 类型数组。</param>
      <param name="glyphOffsets">
        <see cref="T:System.Collections.Generic.IList`1" /> 类型数组。</param>
      <param name="characters">
        <see cref="T:System.Collections.Generic.IList`1" /> 类型数组。</param>
      <param name="deviceFontName">一个 <see cref="T:System.String" /> 类型的值。</param>
      <param name="clusterMap">
        <see cref="T:System.Collections.Generic.IList`1" /> 类型数组。</param>
      <param name="caretStops">
        <see cref="T:System.Collections.Generic.IList`1" /> 类型数组。</param>
      <param name="language">一个 <see cref="T:System.Windows.Markup.XmlLanguage" /> 类型的值。</param>
    </member>
    <member name="P:System.Windows.Media.GlyphRun.AdvanceWidths">
      <summary>获取或设置 <see cref="T:System.Double" /> 值的列表，这些值表示与标志符号索引对应的步进宽度。</summary>
      <returns>表示步进宽度的 <see cref="T:System.Double" /> 值的列表。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphRun.BaselineOrigin">
      <summary>获取或设置 <see cref="T:System.Windows.Media.GlyphRun" /> 的基线原点。</summary>
      <returns>一个表示基线原点的 <see cref="T:System.Windows.Point" /> 值。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphRun.BidiLevel">
      <summary>获取或设置 <see cref="T:System.Windows.Media.GlyphRun" /> 的双向嵌套级别。</summary>
      <returns>一个表示双向嵌套级别的 <see cref="T:System.Int32" /> 值。</returns>
    </member>
    <member name="M:System.Windows.Media.GlyphRun.BuildGeometry">
      <summary>检索 <see cref="T:System.Windows.Media.GlyphRun" /> 的 <see cref="T:System.Windows.Media.Geometry" />。</summary>
      <returns>与 <see cref="T:System.Windows.Media.GlyphRun" /> 相对应的 <see cref="T:System.Windows.Media.Geometry" />。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphRun.CaretStops">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值的列表，这些值确定 Unicode 中的每个 UTF16 码位中是否存在表示 <see cref="T:System.Windows.Media.GlyphRun" /> 的脱字符。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值的列表，这些值表示是否存在脱字符。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphRun.Characters">
      <summary>获取或设置 UTF16 码位的列表，UTF16 码位表示 <see cref="T:System.Windows.Media.GlyphRun" /> 的 Unicode 内容。</summary>
      <returns>表示 Unicode 内容的 <see cref="T:System.Char" /> 值的列表。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphRun.ClusterMap">
      <summary>获取或设置 <see cref="T:System.UInt16" /> 值的列表，这些值将 <see cref="T:System.Windows.Media.GlyphRun" /> 中的字符映射到标志符号索引中。</summary>
      <returns>一个 <see cref="T:System.UInt16" /> 值的列表，这些值表示映射的标志符号索引。</returns>
    </member>
    <member name="M:System.Windows.Media.GlyphRun.ComputeAlignmentBox">
      <summary>搜索 <see cref="T:System.Windows.Media.GlyphRun" /> 的对齐框。</summary>
      <returns>一个 <see cref="T:System.Windows.Rect" />，表示 <see cref="T:System.Windows.Media.GlyphRun" /> 的对齐框。</returns>
    </member>
    <member name="M:System.Windows.Media.GlyphRun.ComputeInkBoundingBox">
      <summary>检索 <see cref="T:System.Windows.Media.GlyphRun" /> 的墨迹边界框。</summary>
      <returns>一个 <see cref="T:System.Windows.Rect" />，表示 <see cref="T:System.Windows.Media.GlyphRun" /> 的墨迹边界框。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphRun.DeviceFontName">
      <summary>获取或设置已优化其 <see cref="T:System.Windows.Media.GlyphRun" /> 的特定设备字体。</summary>
      <returns>一个表示设备字体的 <see cref="T:System.String" /> 值。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphRun.FontRenderingEmSize">
      <summary>获取或设置用于呈现 <see cref="T:System.Windows.Media.GlyphRun" /> 的全身大小。</summary>
      <returns>一个 <see cref="T:System.Double" /> 值，表示用于呈现的全身大小。</returns>
    </member>
    <member name="M:System.Windows.Media.GlyphRun.GetCaretCharacterHitFromDistance(System.Double,System.Boolean@)">
      <summary>检索 <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" /> 值，该值表示 <see cref="T:System.Windows.Media.GlyphRun" /> 的插入符号的字符命中。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" /> 值，表示与 <paramref name="distance" /> 值最接近的字符命中。如果字符命中在 <see cref="T:System.Windows.Media.GlyphRun" /> 内，则输出参数 <paramref name="isInside" /> 返回 true；否则返回 false。</returns>
      <param name="distance">用于计算插入符号字符命中的偏移量。</param>
      <param name="isInside">确定字符命中是否在 T:System.Windows.Media.GlyphRun 内。</param>
    </member>
    <member name="M:System.Windows.Media.GlyphRun.GetDistanceFromCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)">
      <summary>检索 <see cref="T:System.Windows.Media.GlyphRun" /> 的前导边缘相对于脱字符（包含指定的字符命中）的前导边缘或尾随边缘的偏移量。</summary>
      <returns>一个 <see cref="T:System.Double" />，表示 <see cref="T:System.Windows.Media.GlyphRun" /> 的前导边缘相对于脱字符（包含字符命中）的前导或尾随边缘的偏移量。</returns>
      <param name="characterHit">用于计算偏移量的 <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">字符命中在由 <see cref="T:System.Windows.Media.GlyphRun" /> Unicode 字符串指定的范围外部。</exception>
    </member>
    <member name="M:System.Windows.Media.GlyphRun.GetNextCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)">
      <summary>检索 <see cref="T:System.Windows.Media.GlyphRun" /> 中逻辑方向上的下一个有效插入符号字符命中。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" />，表示逻辑方向上的下一个有效脱字符命中。如果返回值与 <paramref name="characterHit" /> 相等，则 <see cref="T:System.Windows.Media.GlyphRun" /> 中不可能有进一步导航。</returns>
      <param name="characterHit">用于计算下一个命中值的 <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" />。</param>
    </member>
    <member name="M:System.Windows.Media.GlyphRun.GetPreviousCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)">
      <summary>检索 <see cref="T:System.Windows.Media.GlyphRun" /> 中逻辑方向上的上一个有效插入符号字符命中。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" />，表示逻辑方向上的上一个有效插入符号字符命中。如果返回值与 <paramref name="characterHit" /> 相等，则 <see cref="T:System.Windows.Media.GlyphRun" /> 中不可能有进一步导航。</returns>
      <param name="characterHit">用于计算上一个命中值的 <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" />。</param>
    </member>
    <member name="P:System.Windows.Media.GlyphRun.GlyphIndices">
      <summary>获取或设置 <see cref="T:System.UInt16" /> 值的数组，这些值表示采用呈现物理字体的标志符号索引。</summary>
      <returns>一个 <see cref="T:System.UInt16" /> 值列表，这些值表示标志符号索引。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphRun.GlyphOffsets">
      <summary>获取或设置 <see cref="T:System.Windows.Point" /> 值的数组，这些值表示 <see cref="T:System.Windows.Media.GlyphRun" /> 中标志符号的偏移量。</summary>
      <returns>一个 <see cref="T:System.Windows.Point" /> 值的列表，表示标志符号的偏移量。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphRun.GlyphTypeface">
      <summary>获取或设置 <see cref="T:System.Windows.Media.GlyphRun" /> 的 <see cref="T:System.Windows.Media.GlyphTypeface" />。</summary>
      <returns>
        <see cref="T:System.Windows.Media.GlyphRun" /> 的 <see cref="T:System.Windows.Media.GlyphTypeface" />。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphRun.IsHitTestable">
      <summary>获取一个值，该值指示 <see cref="T:System.Windows.Media.GlyphRun" /> 中是否存在任何有效的插入符号字符命中。</summary>
      <returns>
            如果存在有效的插入符号字符命中，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphRun.IsSideways">
      <summary>获取或设置一个值，该值指示是否旋转标志字符。</summary>
      <returns>
            如果可以旋转该标志字符，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphRun.Language">
      <summary>获取或设置 <see cref="T:System.Windows.Media.GlyphRun" /> 的 <see cref="T:System.Windows.Markup.XmlLanguage" />。</summary>
      <returns>
        <see cref="T:System.Windows.Media.GlyphRun" /> 的 <see cref="T:System.Windows.Markup.XmlLanguage" />。</returns>
    </member>
    <member name="M:System.Windows.Media.GlyphRun.System#ComponentModel#ISupportInitialize#BeginInit">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" />。</summary>
    </member>
    <member name="M:System.Windows.Media.GlyphRun.System#ComponentModel#ISupportInitialize#EndInit">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" />。</summary>
    </member>
    <member name="T:System.Windows.Media.GlyphRunDrawing">
      <summary>表示一个呈现 <see cref="T:System.Windows.Media.GlyphRun" /> 的 <see cref="T:System.Windows.Media.Drawing" /> 对象。</summary>
    </member>
    <member name="M:System.Windows.Media.GlyphRunDrawing.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.GlyphRunDrawing" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.GlyphRunDrawing.#ctor(System.Windows.Media.Brush,System.Windows.Media.GlyphRun)">
      <summary>通过指定前景画笔和 <see cref="T:System.Windows.Media.GlyphRun" /> 来初始化 <see cref="T:System.Windows.Media.GlyphRunDrawing" /> 类的新实例。</summary>
      <param name="foregroundBrush">要用于 <see cref="T:System.Windows.Media.GlyphRunDrawing" /> 的前景画笔。</param>
      <param name="glyphRun">要在此 <see cref="T:System.Windows.Media.GlyphRunDrawing" /> 中使用的 <see cref="T:System.Windows.Media.GlyphRun" />。</param>
    </member>
    <member name="M:System.Windows.Media.GlyphRunDrawing.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.GlyphRunDrawing" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.GlyphRunDrawing.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.GlyphRunDrawing" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphRunDrawing.ForegroundBrush">
      <summary>获取或设置 <see cref="T:System.Windows.Media.GlyphRunDrawing" /> 的前景画笔。这是一个依赖项属性。</summary>
      <returns>绘制 <see cref="T:System.Windows.Media.GlyphRun" /> 的画笔。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Media.GlyphRunDrawing.ForegroundBrushProperty">
      <summary>标识 <see cref="P:System.Windows.Media.GlyphRunDrawing.ForegroundBrush" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.GlyphRunDrawing.ForegroundBrush" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphRunDrawing.GlyphRun">
      <summary>获取或设置描述要绘制的文本的 <see cref="T:System.Windows.Media.GlyphRun" />。这是一个依赖项属性。</summary>
      <returns>描述要绘制的文本的 <see cref="T:System.Windows.Media.GlyphRun" />。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Media.GlyphRunDrawing.GlyphRunProperty">
      <summary>标识 <see cref="P:System.Windows.Media.GlyphRunDrawing.GlyphRun" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.GlyphRunDrawing.GlyphRun" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.GlyphTypeface">
      <summary>指定与磁盘上的字体文件相对应的物理字体。</summary>
    </member>
    <member name="M:System.Windows.Media.GlyphTypeface.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.GlyphTypeface" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.GlyphTypeface.#ctor(System.Uri)">
      <summary>使用指定的字体文件位置初始化 <see cref="T:System.Windows.Media.GlyphTypeface" /> 类的一个新实例。</summary>
      <param name="typefaceSource">指定字体文件位置的 URI。</param>
    </member>
    <member name="M:System.Windows.Media.GlyphTypeface.#ctor(System.Uri,System.Windows.Media.StyleSimulations)">
      <summary>使用指定的字体文件位置和 <see cref="T:System.Windows.Media.StyleSimulations" /> 值初始化 <see cref="T:System.Windows.Media.GlyphTypeface" /> 类的一个新实例。</summary>
      <param name="typefaceSource">指定字体文件位置的 URI。</param>
      <param name="styleSimulations">
        <see cref="T:System.Windows.Media.StyleSimulations" /> 值之一。</param>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.AdvanceHeights">
      <summary>获取由 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象表示的标志符号的步进高度。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示标志符号的步进高度信息的键值对。该键是一个标识标志符号索引的 <see cref="T:System.UInt16" />。该值是一个表示步进高度的 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.AdvanceWidths">
      <summary>获取由 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象表示的标志符号的步进宽度。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示标志符号的步进宽度信息的键/值对。该键是一个标识标志符号索引的 <see cref="T:System.UInt16" />。该值是一个表示步进宽度的 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.Baseline">
      <summary>获取 <see cref="T:System.Windows.Media.GlyphTypeface" /> 的基线值。</summary>
      <returns>一个表示基线的 <see cref="T:System.Double" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.BottomSideBearings">
      <summary>获取由 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象表示的标志符号中从黑盒下边缘到步进向量底端的距离。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示距离信息的键/值对。该键是一个标识标志符号的 <see cref="T:System.UInt16" />。该值是一个表示距离的 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.CapsHeight">
      <summary>获取 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象中从基线到英语大写字母顶部的距离（相对于 em 大小）。</summary>
      <returns>一个 <see cref="T:System.Double" />，指示从基线到英语大写字母顶部的距离，以字体 em 大小的一个分数表示。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.CharacterToGlyphMap">
      <summary>根据字体“CMAP”表的定义获取 Unicode 码位与标志符号索引之间的名义映射。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含 Unicode 码位与 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象中所有标志符号的标志符号索引之间的映射。</returns>
    </member>
    <member name="M:System.Windows.Media.GlyphTypeface.ComputeSubset(System.Collections.Generic.ICollection{System.UInt16})">
      <summary>基于指定的标志符号集合返回字体子集的二进制图像。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 数组，表示字体子集的二进制图像。</returns>
      <param name="glyphs">要包括在子集中的标志符号索引的集合。</param>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.Copyrights">
      <summary>获取 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象的版权信息。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示版权信息的键/值对。该键是一个标识区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。该值是一个版权信息字符串。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.Descriptions">
      <summary>获取 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象的说明信息。</summary>
      <returns>一个包含键/值对的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象。该键是一个标识区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。该值是一个说明信息字符串。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.DesignerNames">
      <summary>获取 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象的设计器信息。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示设计器信息的键/值对。该键是一个标识区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。该值是一个设计器信息字符串。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.DesignerUrls">
      <summary>获取 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象的设计器 URL 信息。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示设计器信息的键/值对。该键是一个标识区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。该值是一个引用设计器 URL 的字符串。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.DistancesFromHorizontalBaselineToBlackBoxBottom">
      <summary>获取水平西文基线与标志符号（由 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象表示）的标志符号黑盒底部之间的偏移值。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示标志符号偏移量的键/值对。该键是一个标识标志符号索引的 <see cref="T:System.UInt16" />。该值是一个表示偏移值的 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.EmbeddingRights">
      <summary>获取 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象的字体嵌入权限。</summary>
      <returns>表示字体嵌入权限的 <see cref="T:System.Windows.Media.FontEmbeddingRight" /> 值之一。</returns>
    </member>
    <member name="M:System.Windows.Media.GlyphTypeface.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前的 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象。</summary>
      <returns>
            如果 <paramref name="o" /> 是 <see cref="T:System.Windows.Media.GlyphTypeface" /> 并且等于当前的 <see cref="T:System.Windows.Media.GlyphTypeface" />，则为 true；否则为 false。</returns>
      <param name="o">要与当前的 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.FaceNames">
      <summary>获取 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象的字体名称。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示字体名称信息的键/值对。该键是一个标识区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。该值是一个包含字体名称的字符串。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.FamilyNames">
      <summary>获取 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象的系列名称。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示系列名称信息的键/值对。该键是一个标识区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。该值是一个包含系列名称的字符串。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.FontUri">
      <summary>获取或设置 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象的 URI。</summary>
      <returns>
        <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象的 URI。</returns>
    </member>
    <member name="M:System.Windows.Media.GlyphTypeface.GetFontStream">
      <summary>返回由 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象表示的字体文件流。</summary>
      <returns>一个表示字体文件的 <see cref="T:System.IO.Stream" /> 值。</returns>
    </member>
    <member name="M:System.Windows.Media.GlyphTypeface.GetGlyphOutline(System.UInt16,System.Double,System.Double)">
      <summary>返回一个 <see cref="T:System.Windows.Media.Geometry" /> 值，该值描述字体中单个标志符号的路径。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.Geometry" /> 值，表示标志符号的路径。</returns>
      <param name="glyphIndex">要获取其轮廓的标志符号的索引。</param>
      <param name="renderingEmSize">绘制图面单元时使用的字号。</param>
      <param name="hintingEmSize">提示时要使用的字号（以磅为单位）。</param>
    </member>
    <member name="M:System.Windows.Media.GlyphTypeface.GetHashCode">
      <summary>作为 <see cref="T:System.Windows.Media.GlyphTypeface" /> 的哈希函数。</summary>
      <returns>当前对象的哈希代码。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.GlyphCount">
      <summary>获取 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象的标志符号数。</summary>
      <returns>标志符号的总数。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.Height">
      <summary>获取字符单元格的高度（相对于 em 大小）。</summary>
      <returns>一个 <see cref="T:System.Double" /> 值，表示字符单元格的高度。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.LeftSideBearings">
      <summary>获取由 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象表示的标志符号中从步进向量前导端到黑盒左边缘的距离。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示标志符号的距离信息的键/值对。该键是一个标识标志符号索引的 <see cref="T:System.UInt16" />。该值是一个表示距离的 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.LicenseDescriptions">
      <summary>获取 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象的字体许可证说明信息。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示字体许可证信息的键/值对。该键是一个标识区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。该值是一个描述字体许可证信息的字符串。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.ManufacturerNames">
      <summary>获取 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象的字体制造商信息。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示字体制造商信息的键/值对。该键是一个标识区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。该值是一个描述字体制造商信息的字符串。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.RightSideBearings">
      <summary>获取由 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象表示的标志符号中从黑盒右边缘到步进向量右端的距离。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示距离信息的键/值对。该键是一个标识标志符号索引的 <see cref="T:System.UInt16" />。该值是一个表示距离的 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.SampleTexts">
      <summary>获取 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象的示例文本信息。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示示例文本信息的键/值对。该键是一个标识区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。该值是一个描述示例文本信息的字符串。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.Stretch">
      <summary>获取 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象的 <see cref="T:System.Windows.FontStretch" /> 值。</summary>
      <returns>一个表示字体拉伸程度的 <see cref="T:System.Windows.FontStretch" /> 值。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.StrikethroughPosition">
      <summary>获取一个值，该值指示从字样基线到字样删除线的距离。</summary>
      <returns>一个表示删除线位置的 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.StrikethroughThickness">
      <summary>获取一个值，该值指示删除线相对于字体 em 大小的宽度。</summary>
      <returns>一个指示删除线宽度的 <see cref="T:System.Double" />，以字体 em 大小的一个分数表示。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.Style">
      <summary>获取 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象的样式。</summary>
      <returns>一个表示样式值的 <see cref="T:System.Windows.FontStyle" /> 值。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.StyleSimulations">
      <summary>获取或设置 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象的 <see cref="T:System.Windows.Media.StyleSimulations" />。</summary>
      <returns>表示字体样式模拟的 <see cref="T:System.Windows.Media.StyleSimulations" /> 值之一。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.Symbol">
      <summary>获取一个值，该值指示 <see cref="T:System.Windows.Media.GlyphTypeface" /> 字体是否符合 Unicode 编码规范。</summary>
      <returns>
            如果字体符合 Unicode 编码规范，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.GlyphTypeface.System#ComponentModel#ISupportInitialize#BeginInit">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" />。</summary>
    </member>
    <member name="M:System.Windows.Media.GlyphTypeface.System#ComponentModel#ISupportInitialize#EndInit">
      <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" />。</summary>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.TopSideBearings">
      <summary>获取由 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象表示的标志符号中从垂直步进向量的顶端到黑盒上边缘的距离。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示距离信息的键/值对。该键是一个标识标志符号索引的 <see cref="T:System.UInt16" />。该值是一个表示距离的 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.Trademarks">
      <summary>获取 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象的商标声明信息。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示商标声明信息的键/值对。该键是一个标识区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。该值是一个描述商标声明信息的字符串。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.UnderlinePosition">
      <summary>获取 <see cref="T:System.Windows.Media.GlyphTypeface" /> 中的下划线位置。</summary>
      <returns>一个表示下划线位置的 <see cref="T:System.Double" /> 值。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.UnderlineThickness">
      <summary>获取下划线相对于 em 大小的宽度。</summary>
      <returns>一个 <see cref="T:System.Double" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.VendorUrls">
      <summary>获取 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象的供应商 URL 信息。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示供应商 URL 信息的键/值对。该键是一个标识区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。该值是一个引用供应商 URL 的字符串。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.Version">
      <summary>获取字体的“NAME”表中解释的字体版本。</summary>
      <returns>一个表示版本的 <see cref="T:System.Double" /> 值。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.VersionStrings">
      <summary>获取字体的“NAME”表中解释的 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象的版本字符串信息。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示版本字符串信息的键/值对。该键是一个标识区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。该值是一个表示版本的字符串。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.Weight">
      <summary>获取由 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象表示的字体的设计粗细。</summary>
      <returns>一个类型为 <see cref="T:System.Windows.FontWeight" /> 的值，表示字体的粗细。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.Win32FaceNames">
      <summary>获取由 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象表示的字体的 Win32 字体名称。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示 Win32 字体名称信息的键/值对。该键是一个标识区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。该值是一个表示 Win32 字体名称的字符串。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.Win32FamilyNames">
      <summary>获取由 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象表示的字体的 Win32 系列名称。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象，包含表示 Win32 系列名称信息的键/值对。该键是一个标识区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。该值是一个表示 Win32 系列名称的字符串。</returns>
    </member>
    <member name="P:System.Windows.Media.GlyphTypeface.XHeight">
      <summary>获取由 <see cref="T:System.Windows.Media.GlyphTypeface" /> 对象表示的字体的西文 x 高度（相对于 em 大小）。</summary>
      <returns>一个 <see cref="T:System.Double" /> 类型的值。</returns>
    </member>
    <member name="T:System.Windows.Media.GradientBrush">
      <summary> 一个描述由渐变停止点组成的渐变的抽象类。从 <see cref="T:System.Windows.Media.GradientBrush" /> 继承的类描述了解释渐变停止点的不同方式。</summary>
    </member>
    <member name="M:System.Windows.Media.GradientBrush.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.GradientBrush" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.GradientBrush.#ctor(System.Windows.Media.GradientStopCollection)">
      <summary>用指定的 <see cref="T:System.Windows.Media.GradientStopCollection" /> 初始化 <see cref="T:System.Windows.Media.GradientBrush" /> 类的新实例。</summary>
      <param name="gradientStopCollection">用于指定过渡点在渐变中的位置和颜色的 <see cref="T:System.Windows.Media.GradientStopCollection" />。</param>
    </member>
    <member name="M:System.Windows.Media.GradientBrush.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.GradientBrush" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.GradientBrush.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.GradientBrush" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.GradientBrush.ColorInterpolationMode">
      <summary>获取或设置一个 <see cref="T:System.Windows.Media.ColorInterpolationMode" /> 枚举，该枚举指定内插渐变颜色的方式。 这是一个依赖项属性。</summary>
      <returns>指定如何内插渐变中的颜色。默认为 <see cref="F:System.Windows.Media.ColorInterpolationMode.SRgbLinearInterpolation" />。</returns>
    </member>
    <member name="F:System.Windows.Media.GradientBrush.ColorInterpolationModeProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.GradientBrush.ColorInterpolationMode" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.GradientBrush.ColorInterpolationMode" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.GradientBrush.GradientStops">
      <summary>获取或设置画笔的渐变停止点。</summary>
      <returns>一个与画笔相关联的 <see cref="T:System.Windows.Media.GradientStop" /> 对象的集合，其中每个对象指定一种颜色和一个沿画笔渐变轴的偏移量。默认为空 <see cref="T:System.Windows.Media.GradientStopCollection" />。</returns>
    </member>
    <member name="F:System.Windows.Media.GradientBrush.GradientStopsProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.GradientBrush.GradientStops" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.GradientBrush.GradientStops" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.GradientBrush.MappingMode">
      <summary> 获取或设置一个 <see cref="T:System.Windows.Media.BrushMappingMode" /> 枚举，该枚举指定渐变画笔的定位坐标相对于输出区域是绝对的还是相对的。 这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.BrushMappingMode" /> 值，指定如何解释渐变画笔的定位坐标。默认为 <see cref="F:System.Windows.Media.BrushMappingMode.RelativeToBoundingBox" />。</returns>
    </member>
    <member name="F:System.Windows.Media.GradientBrush.MappingModeProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.GradientBrush.MappingMode" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.GradientBrush.MappingMode" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.GradientBrush.SpreadMethod">
      <summary> 获取或设置扩展方法的类型，该类型指定如何在要绘制对象的边界内绘制开始或结束的渐变。</summary>
      <returns>用于绘制渐变的扩展方法的类型。默认为 <see cref="F:System.Windows.Media.GradientSpreadMethod.Pad" />。</returns>
    </member>
    <member name="F:System.Windows.Media.GradientBrush.SpreadMethodProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.GradientBrush.SpreadMethod" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.GradientBrush.SpreadMethod" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.GradientSpreadMethod">
      <summary>指定如何在渐变画笔的渐变向量或空间外部绘制渐变。 </summary>
    </member>
    <member name="F:System.Windows.Media.GradientSpreadMethod.Pad">
      <summary>默认值。渐变向量末端的颜色值填充剩余的空间。</summary>
    </member>
    <member name="F:System.Windows.Media.GradientSpreadMethod.Reflect">
      <summary>按相反方向重复渐变，直至充满空间。</summary>
    </member>
    <member name="F:System.Windows.Media.GradientSpreadMethod.Repeat">
      <summary>按原始方向重复渐变，直至充满空间。</summary>
    </member>
    <member name="T:System.Windows.Media.GradientStop">
      <summary> 描述渐变中过渡点的位置和颜色。</summary>
    </member>
    <member name="M:System.Windows.Media.GradientStop.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Media.GradientStop" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.GradientStop.#ctor(System.Windows.Media.Color,System.Double)">
      <summary> 使用指定的颜色和偏移量初始化 <see cref="T:System.Windows.Media.GradientStop" /> 类的新实例。</summary>
      <param name="color">渐变停止点的颜色值。</param>
      <param name="offset">渐变停止点在渐变中的位置。</param>
    </member>
    <member name="M:System.Windows.Media.GradientStop.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.GradientStop" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.GradientStop.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.GradientStop" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.GradientStop.Color">
      <summary> 获取或设置渐变停止点的颜色。</summary>
      <returns>渐变停止点的颜色。默认值为 <see cref="P:System.Windows.Media.Colors.Transparent" />。</returns>
    </member>
    <member name="F:System.Windows.Media.GradientStop.ColorProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.GradientStop.Color" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.GradientStop.Color" /> 依赖项属性标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.GradientStop.Offset">
      <summary> 获取渐变停止点在渐变向量中的位置。</summary>
      <returns>此渐变停止点沿渐变向量的相对位置。默认值为 0.0。</returns>
    </member>
    <member name="F:System.Windows.Media.GradientStop.OffsetProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.GradientStop.Offset" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.GradientStop.Offset" /> 依赖项属性标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.GradientStop.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="format"></param>
      <param name="provider"></param>
    </member>
    <member name="M:System.Windows.Media.GradientStop.ToString">
      <summary> 基于当前区域性创建此对象的字符串表示形式。</summary>
      <returns>此对象的字符串表示形式，包含该对象的 <see cref="P:System.Windows.Media.GradientStop.Color" /> 和 <see cref="P:System.Windows.Media.GradientStop.Offset" /> 值。</returns>
    </member>
    <member name="M:System.Windows.Media.GradientStop.ToString(System.IFormatProvider)">
      <summary> 基于指定的区域性特定格式设置信息创建此对象的字符串表示形式。</summary>
      <returns>此对象的字符串表示形式，包含该对象的 <see cref="P:System.Windows.Media.GradientStop.Color" /> 和 <see cref="P:System.Windows.Media.GradientStop.Offset" /> 值。</returns>
      <param name="provider">区域性特定的格式设置信息；如果使用当前区域性，则为 null。</param>
    </member>
    <member name="T:System.Windows.Media.GradientStopCollection">
      <summary>
                    表示可按照索引单独访问的 <see cref="T:System.Windows.Media.GradientStop" /> 对象的集合。
                </summary>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.#ctor">
      <summary>
                     初始化 <see cref="T:System.Windows.Media.GradientStopCollection" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.GradientStop})">
      <summary>
                    初始化 <see cref="T:System.Windows.Media.GradientStopCollection" /> 类的一个新实例，该实例包含指定集合中的元素。
                </summary>
      <param name="collection">
                    要复制的集合。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.#ctor(System.Int32)">
      <summary>
                    初始化 <see cref="T:System.Windows.Media.GradientStopCollection" /> 类的一个新实例，该实例最初能够存储指定数目的项。
                </summary>
      <param name="capacity">
                    集合最初能够存储的 <see cref="T:System.Windows.Media.GradientStop" /> 对象数。
                </param>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.Add(System.Windows.Media.GradientStop)">
      <summary>
                     将 <see cref="T:System.Windows.Media.GradientStop" /> 添加到渐变停止点集合。
                </summary>
      <param name="value">
                    要添加到 <see cref="T:System.Windows.Media.GradientStopCollection" /> 的末尾的 <see cref="T:System.Windows.Media.GradientStop" />。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.GradientStopCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.GradientStopCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.Clear">
      <summary>
                     移除渐变停止点列表中的所有项。
                </summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.GradientStopCollection" /> 是只读的。
                </exception>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.Clone">
      <summary>
                    创建该 <see cref="T:System.Windows.Media.GradientStopCollection" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。
                </summary>
      <returns>
                    当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.CloneCurrentValue">
      <summary>
                    创建此 <see cref="T:System.Windows.Media.GradientStopCollection" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。
                </summary>
      <returns>
                    当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.Contains(System.Windows.Media.GradientStop)">
      <summary>
                     确定集合是否包含指定的 <see cref="T:System.Windows.Media.GradientStop" />。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Media.GradientStopCollection" /> 中找到 <see cref="T:System.Windows.Media.GradientStop" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.GradientStopCollection" /> 中查找的 <see cref="T:System.Windows.Media.GradientStop" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.CopyTo(System.Windows.Media.GradientStop[],System.Int32)">
      <summary>
                     从目标数组的指定索引处开始将整个 <see cref="T:System.Windows.Media.GradientStopCollection" /> 复制到兼容的一维 <see cref="T:System.Array" />。
                </summary>
      <param name="array">
                    一维数组，作为从 <see cref="T:System.Windows.Media.GradientStopCollection" /> 复制的项的目标位置。该数组必须具有从零开始的索引。
                </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的
                
                    - 或 -
                <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                
                    源 <see cref="T:System.Windows.Media.GradientStopCollection" /> 中的项数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。
                </exception>
    </member>
    <member name="P:System.Windows.Media.GradientStopCollection.Count">
      <summary>
                     获取 <see cref="T:System.Windows.Media.GradientStopCollection" /> 中包含的项数。
                </summary>
      <returns>
        <see cref="T:System.Windows.Media.GradientStopCollection" /> 中的项数。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.GetEnumerator">
      <summary>
                      返回可循环访问集合的枚举数。
                </summary>
      <returns>
                    一个可以循环访问集合的 <see cref="T:System.Windows.Media.GradientStopCollection.Enumerator" />。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.IndexOf(System.Windows.Media.GradientStop)">
      <summary>
                    返回指定 <see cref="T:System.Windows.Media.GradientStop" /> 的从零开始的索引。
                </summary>
      <returns>
                    如果找到了对象，则为相应的索引；否则为 -1。
                </returns>
      <param name="value">
                    要搜索的项。
                </param>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.Insert(System.Int32,System.Windows.Media.GradientStop)">
      <summary>
                     将 <see cref="T:System.Windows.Media.GradientStop" /> 插入到渐变停止点列表中的指定位置。
                </summary>
      <param name="index">
                    从零开始的索引，对象将插入到此处。
                </param>
      <param name="value">
                    要插入的 <see cref="T:System.Windows.Media.GradientStop" />。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Windows.Media.GradientStopCollection" /> 中的有效索引。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.GradientStopCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.GradientStopCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="P:System.Windows.Media.GradientStopCollection.Item(System.Int32)">
      <summary>
                     获取或设置从零开始的指定索引处的 <see cref="T:System.Windows.Media.GradientStop" />。
                </summary>
      <returns>
                    指定索引处的 <see cref="T:System.Windows.Media.GradientStop" />。
                </returns>
      <param name="index">
                    要获取或设置的 <see cref="T:System.Windows.Media.GradientStop" /> 的从零开始的索引。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Windows.Media.GradientStopCollection" /> 中的有效索引。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.GradientStopCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.GradientStopCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.Parse(System.String)">
      <summary>
                     将 GradientStopCollection 的 <see cref="T:System.String" /> 表示形式转换为等效的 <see cref="T:System.Windows.Media.GradientStopCollection" />。
                </summary>
      <returns>
                    返回等效的 <see cref="T:System.Windows.Media.GradientStopCollection" />。
                </returns>
      <param name="source">
                    GradientStopCollection 的 <see cref="T:System.String" /> 表示形式。
                </param>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.Remove(System.Windows.Media.GradientStop)">
      <summary>
                     从此 <see cref="T:System.Windows.Media.GradientStopCollection" /> 中移除指定的 <see cref="T:System.Windows.Media.GradientStop" /> 的第一个匹配项。
                </summary>
      <returns>
                    如果从 <see cref="T:System.Windows.Media.GradientStopCollection" /> 中移除了 <paramref name="value" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要从此 <see cref="T:System.Windows.Media.GradientStopCollection" /> 中移除的 <see cref="T:System.Windows.Media.GradientStop" />。
                </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.GradientStopCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.GradientStopCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.RemoveAt(System.Int32)">
      <summary>
                     从此 <see cref="T:System.Windows.Media.GradientStopCollection" /> 中移除指定索引处的 <see cref="T:System.Windows.Media.GradientStop" />。
                </summary>
      <param name="index">
                    要移除的 <see cref="T:System.Windows.Media.GradientStop" /> 的索引。
                </param>
    </member>
    <member name="P:System.Windows.Media.GradientStopCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.GradientStopCollection" /> 是只读的，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator`1" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />。
                </summary>
      <param name="array">
                    从零开始的 <see cref="T:System.Array" />，它接收从 <see cref="T:System.Windows.Media.GradientStopCollection" /> 复制来的项。
                </param>
      <param name="index">
                    指定的 <see cref="T:System.Array" /> 中接收复制内容的第一个位置。
                </param>
    </member>
    <member name="P:System.Windows.Media.GradientStopCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。
                </summary>
      <returns>
                    如果对 <see cref="T:System.Windows.Media.GradientStopCollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.GradientStopCollection.System#Collections#ICollection#SyncRoot">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。
                </summary>
      <returns>
                    可用于同步对 <see cref="T:System.Windows.Media.GradientStopCollection" /> 的访问的对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections." /><see cref="IEnumerator" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.System#Collections#IList#Add(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。
                </summary>
      <returns>
                    新元素的插入位置。
                </returns>
      <param name="value">
                    要添加到 <see cref="T:System.Windows.Media.GradientStopCollection" /> 的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Media.GradientStopCollection" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.GradientStopCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。
                </summary>
      <returns>
                    如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.GradientStopCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。
                </summary>
      <param name="index">
                    从零开始的索引，在该处插入 <see cref="T:System.Object" />。
                </param>
      <param name="value">
                    要插入 <see cref="T:System.Windows.Media.GradientStopCollection" /> 中的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="P:System.Windows.Media.GradientStopCollection.System#Collections#IList#IsFixedSize">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.GradientStopCollection" /> 具有固定大小，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.GradientStopCollection.System#Collections#IList#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.GradientStopCollection" /> 是只读的，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.GradientStopCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.Item(System.Int32)" />。
                </summary>
      <returns>
                    指定索引处的元素。
                </returns>
      <param name="index">
                    要获得或设置的元素从零开始的索引。
                </param>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Remove(System.Object)" />。
                </summary>
      <param name="value">
                    要从 <see cref="T:System.Windows.Media.GradientStopCollection" /> 移除的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" />，包含具有指定格式的当前实例的值。
                </returns>
      <param name="format">
                    指定要使用的格式的 <see cref="T:System." /><see cref="String" />。
                
                    - 或 -
                
                    如果为 null（在 Visual Basic 中为 Nothing），则使用为 <see cref="T:System.IFormattable" /> 实现的类型定义的默认格式。
                </param>
      <param name="provider">
                    用于格式化该值的 <see cref="T:System." /><see cref="IFormatProvider" />。
                
                    - 或 -
                
                    如果为 null（在 Visual Basic 中为 Nothing），则从操作系统的当前区域设置中获取数字信息。
                </param>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.ToString">
      <summary>
创建此 <see cref="T:System.Windows.Media.GradientStopCollection" /> 的 <see cref="T:System.String" /> 表示形式。
                </summary>
      <returns>
返回包含此 <see cref="T:System.Windows.Media.GradientStopCollection" /> 的值的 <see cref="T:System.String" />。
                </returns>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.ToString(System.IFormatProvider)">
      <summary>
创建此 <see cref="T:System.Windows.Media.GradientStopCollection" /> 的 <see cref="T:System.String" /> 表示形式。
                </summary>
      <returns>
返回包含此 <see cref="T:System.Windows.Media.GradientStopCollection" /> 的值的 <see cref="T:System.String" />。
                </returns>
      <param name="provider">
                    特定于区域性的格式设置信息。
                </param>
    </member>
    <member name="T:System.Windows.Media.GradientStopCollection.Enumerator">
      <summary>枚举 <see cref="T:System.Windows.Media.GradientStopCollection" /> 中的 <see cref="T:System.Windows.Media.GradientStop" /> 项。 </summary>
    </member>
    <member name="P:System.Windows.Media.GradientStopCollection.Enumerator.Current">
      <summary>获取集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.Enumerator.MoveNext">
      <summary>将枚举数前移到集合中的下一个元素。</summary>
      <returns>
            如果枚举数成功前移到了下一个元素，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.Enumerator.Reset">
      <summary>将枚举数重置至其初始位置，即位于集合中第一个元素之前。</summary>
    </member>
    <member name="P:System.Windows.Media.GradientStopCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Media.GradientStopCollection.Enumerator.System#IDisposable#Dispose">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="T:System.Windows.Media.GuidelineSet">
      <summary>表示可有助于将呈现的数字与设备像素网格对齐的参考线的集合。</summary>
    </member>
    <member name="M:System.Windows.Media.GuidelineSet.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.GuidelineSet" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.GuidelineSet.#ctor(System.Double[],System.Double[])">
      <summary>用指定的 <see cref="P:System.Windows.Media.GuidelineSet.GuidelinesX" /> 和 <see cref="P:System.Windows.Media.GuidelineSet.GuidelinesY" /> 值初始化 <see cref="T:System.Windows.Media.GuidelineSet" /> 类的新实例。</summary>
      <param name="guidelinesX">
        <see cref="P:System.Windows.Media.GuidelineSet.GuidelinesX" /> 属性的值。</param>
      <param name="guidelinesY">
        <see cref="P:System.Windows.Media.GuidelineSet.GuidelinesY" /> 属性的值。</param>
    </member>
    <member name="M:System.Windows.Media.GuidelineSet.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.GuidelineSet" /> 的可修改复本，并制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.GuidelineSet.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.GuidelineSet" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.GuidelineSet.GuidelinesX">
      <summary>获取或设置表示 X 轴上的参考线的一系列坐标值。这是一个依赖项属性。</summary>
      <returns>表示 X 轴上的参考线的值的 <see cref="T:System.Windows.Media.DoubleCollection" />。</returns>
    </member>
    <member name="F:System.Windows.Media.GuidelineSet.GuidelinesXProperty">
      <summary>标识 <see cref="P:System.Windows.Media.GuidelineSet.GuidelinesX" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.GuidelineSet.GuidelinesX" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.GuidelineSet.GuidelinesY">
      <summary>获取或设置表示 Y 轴上的参考线的一系列坐标值。这是一个依赖项属性。</summary>
      <returns>表示 Y 轴上的参考线的值的 <see cref="T:System.Windows.Media.DoubleCollection" />。</returns>
    </member>
    <member name="F:System.Windows.Media.GuidelineSet.GuidelinesYProperty">
      <summary>标识 <see cref="P:System.Windows.Media.GuidelineSet.GuidelinesY" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.GuidelineSet.GuidelinesY" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.HitTestFilterBehavior">
      <summary>在命中测试筛选器回调方法中指定命中测试的返回行为。</summary>
    </member>
    <member name="F:System.Windows.Media.HitTestFilterBehavior.ContinueSkipChildren">
      <summary>针对当前的 <see cref="T:System.Windows.Media.Visual" />（但不包括其子代）进行命中测试。</summary>
    </member>
    <member name="F:System.Windows.Media.HitTestFilterBehavior.ContinueSkipSelfAndChildren">
      <summary>不要针对当前的 <see cref="T:System.Windows.Media.Visual" /> 或其子代进行命中测试。</summary>
    </member>
    <member name="F:System.Windows.Media.HitTestFilterBehavior.ContinueSkipSelf">
      <summary>不要针对当前的 <see cref="T:System.Windows.Media.Visual" /> 进行命中测试，但要针对其子代进行命中测试。</summary>
    </member>
    <member name="F:System.Windows.Media.HitTestFilterBehavior.Continue">
      <summary>针对当前的 <see cref="T:System.Windows.Media.Visual" /> 及其子代进行命中测试。</summary>
    </member>
    <member name="F:System.Windows.Media.HitTestFilterBehavior.Stop">
      <summary>在当前 <see cref="T:System.Windows.Media.Visual" /> 处停止命中测试。</summary>
    </member>
    <member name="T:System.Windows.Media.HitTestFilterCallback">
      <summary>表示用于指定要从命中测试处理中忽略的可视化树部分的回调方法</summary>
    </member>
    <member name="T:System.Windows.Media.HitTestParameters">
      <summary>定义命中测试的参数。从此公共基类派生出来的可用于实际命中测试的类包括 <see cref="T:System.Windows.Media.PointHitTestParameters" /> 和 <see cref="T:System.Windows.Media.GeometryHitTestParameters" />。</summary>
    </member>
    <member name="T:System.Windows.Media.HitTestResult">
      <summary>为表示命中测试返回值的若干个派生类提供基类。</summary>
    </member>
    <member name="P:System.Windows.Media.HitTestResult.VisualHit">
      <summary>获取已被点击的可视对象。</summary>
      <returns>一个 <see cref="T:System.Windows.DependencyObject" /> 值，它表示已被点击的可视对象。</returns>
    </member>
    <member name="T:System.Windows.Media.HitTestResultBehavior">
      <summary>确定在命中测试期间是否继续枚举其余的任何可视对象。</summary>
    </member>
    <member name="F:System.Windows.Media.HitTestResultBehavior.Stop">
      <summary>停止任何进一步的命中测试并从回调中返回。</summary>
    </member>
    <member name="F:System.Windows.Media.HitTestResultBehavior.Continue">
      <summary>对可视化树层次结构中的下一个可视对象继续进行命中测试。</summary>
    </member>
    <member name="T:System.Windows.Media.HitTestResultCallback">
      <summary>表示用于自定义命中测试的回调。WPF 调用 <see cref="T:System.Windows.Media.HitTestResultCallback" /> 以向用户报告命中测试交集。</summary>
      <param name="result">
        <see cref="T:System.Windows.Media.HitTestResult" /> 值，该值表示从命中测试返回的可视对象。</param>
    </member>
    <member name="T:System.Windows.Media.HostVisual">
      <summary>表示一个可在任何地方连接到父可视化树的 <see cref="T:System.Windows.Media.Visual" /> 对象。</summary>
    </member>
    <member name="M:System.Windows.Media.HostVisual.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.HostVisual" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.HostVisual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
      <summary>实现 <see cref="M:System.Windows.Media.HostVisual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> 以提供基本命中测试行为（返回 <see cref="T:System.Windows.Media.GeometryHitTestParameters" />）。</summary>
      <returns>返回 <see cref="T:System.Windows.Media.GeometryHitTestResult" /> 类型的值。<see cref="P:System.Windows.Media.GeometryHitTestResult.VisualHit" /> 属性包含命中的可视对象。</returns>
      <param name="hitTestParameters">一个 <see cref="T:System.Windows.Media.GeometryHitTestParameters" /> 类型的值。</param>
    </member>
    <member name="M:System.Windows.Media.HostVisual.HitTestCore(System.Windows.Media.PointHitTestParameters)">
      <summary>实现 <see cref="M:System.Windows.Media.HostVisual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> 以提供基本命中测试行为（返回 <see cref="T:System.Windows.Media.PointHitTestParameters" />）。</summary>
      <returns>返回 <see cref="T:System.Windows.Media.HitTestResult" /> 类型的值。<see cref="P:System.Windows.Media.HitTestResult.VisualHit" /> 属性包含命中的可视对象。</returns>
      <param name="hitTestParameters">一个 <see cref="T:System.Windows.Media.PointHitTestParameters" /> 类型的值。</param>
    </member>
    <member name="T:System.Windows.Media.ImageBrush">
      <summary>利用图像绘制区域。</summary>
    </member>
    <member name="M:System.Windows.Media.ImageBrush.#ctor">
      <summary>不使用任何内容初始化 <see cref="T:System.Windows.Media.ImageBrush" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.ImageBrush.#ctor(System.Windows.Media.ImageSource)">
      <summary>初始化 <see cref="T:System.Windows.Media.ImageBrush" /> 类的新实例，该实例利用指定的图像绘制区域。</summary>
      <param name="image">要显示的图像。</param>
    </member>
    <member name="M:System.Windows.Media.ImageBrush.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.ImageBrush" /> 的可修改复本，从而制作该对象的值的深层副本。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.ImageBrush.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.ImageBrush" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.ImageBrush.ImageSource">
      <summary>获取或设置由此 <see cref="T:System.Windows.Media.ImageBrush" /> 显示的图像。</summary>
      <returns>由此 <see cref="T:System.Windows.Media.ImageBrush" /> 显示的图像。</returns>
    </member>
    <member name="F:System.Windows.Media.ImageBrush.ImageSourceProperty">
      <summary>标识 <see cref="P:System.Windows.Media.ImageBrush.ImageSource" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.ImageBrush.ImageSource" /> 依赖项属性标志符。</returns>
    </member>
    <member name="T:System.Windows.Media.ImageDrawing">
      <summary> 在由 <see cref="T:System.Windows.Rect" /> 定义的区域内绘制图像。</summary>
    </member>
    <member name="M:System.Windows.Media.ImageDrawing.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Media.ImageDrawing" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.ImageDrawing.#ctor(System.Windows.Media.ImageSource,System.Windows.Rect)">
      <summary> 初始化 <see cref="T:System.Windows.Media.ImageDrawing" /> 类的新实例，该实例具有指定的目标 <see cref="P:System.Windows.Media.ImageDrawing.ImageSource" /> 和 <see cref="P:System.Windows.Media.ImageDrawing.Rect" />。</summary>
      <param name="imageSource">要绘制的图像源。</param>
      <param name="rect">定义要在其中绘制图像的矩形区域。</param>
    </member>
    <member name="M:System.Windows.Media.ImageDrawing.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.ImageDrawing" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.ImageDrawing.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.ImageDrawing" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.ImageDrawing.ImageSource">
      <summary> 获取或设置图像的源。</summary>
      <returns>图像的源。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Media.ImageDrawing.ImageSourceProperty">
      <summary>标识 <see cref="P:System.Windows.Media.ImageDrawing.ImageSource" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.ImageDrawing.ImageSource" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.ImageDrawing.Rect">
      <summary> 获取或设置要在其中绘制图像的区域。</summary>
      <returns>要在其中绘制图像的区域。默认值为 Empty。</returns>
    </member>
    <member name="F:System.Windows.Media.ImageDrawing.RectProperty">
      <summary>标识 <see cref="P:System.Windows.Media.ImageDrawing.Rect" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.ImageDrawing.Rect" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.ImageMetadata">
      <summary>为所有对与图像处理相关的 API 执行的元数据操作定义一个基类。这是一个抽象类。</summary>
    </member>
    <member name="M:System.Windows.Media.ImageMetadata.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.ImageMetadata" /> 的可修改复本，从而制作此对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能无法再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="T:System.Windows.Media.ImageSource">
      <summary>表示一个具有宽度、高度和 <see cref="T:System.Windows.Media.ImageMetadata" /> 的对象类型，例如 <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> 和 <see cref="T:System.Windows.Media.DrawingImage" />。这是一个抽象类。</summary>
    </member>
    <member name="M:System.Windows.Media.ImageSource.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.ImageSource" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.ImageSource.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.ImageSource" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.ImageSource.Height">
      <summary>在派生类中重写时，获取图像高度（以 1 英寸的 1/96 为单位）。</summary>
      <returns>图像的高度。</returns>
    </member>
    <member name="P:System.Windows.Media.ImageSource.Metadata">
      <summary>在派生类中重写时，获取与此图像关联的 <see cref="T:System.Windows.Media.ImageMetadata" />。</summary>
      <returns>与此图像关联的元数据。</returns>
    </member>
    <member name="M:System.Windows.Media.ImageSource.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="format"></param>
      <param name="provider"></param>
    </member>
    <member name="M:System.Windows.Media.ImageSource.ToString">
      <summary> 基于当前区域性创建此对象的字符串表示形式。</summary>
      <returns>此对象的字符串表示形式。</returns>
    </member>
    <member name="M:System.Windows.Media.ImageSource.ToString(System.IFormatProvider)">
      <summary> 基于传入的 IFormatProvider 创建此对象的字符串表示形式。如果提供程序为 Null，则使用 CurrentCulture。</summary>
      <returns>此对象的字符串表示形式。</returns>
      <param name="provider"></param>
    </member>
    <member name="P:System.Windows.Media.ImageSource.Width">
      <summary>在派生类中重写时，获取图像宽度（以 1 英寸的 1/96 为单位）。</summary>
      <returns>提供 </returns>
    </member>
    <member name="T:System.Windows.Media.ImageSourceConverter">
      <summary>在 <see cref="T:System.Windows.Media.ImageSource" /> 与其他数据类型之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Media.ImageSourceConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.ImageSourceConverter" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.ImageSourceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定转换器是否能将给定类型的对象转换为 <see cref="T:System.Windows.Media.ImageSource" /> 实例。 </summary>
      <returns>
            如果转换器可以将提供的类型转换为 <see cref="T:System.Windows.Media.ImageSource" /> 实例，则为 true；否则为 false。</returns>
      <param name="context">键入用于计算转换的上下文信息。</param>
      <param name="sourceType">正被计算用于转换的源类型。</param>
    </member>
    <member name="M:System.Windows.Media.ImageSourceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将 <see cref="T:System.Windows.Media.ImageSource" /> 实例转换成不同类型。</summary>
      <returns>
            如果转换器可以转换此 <see cref="T:System.Windows.Media.ImageSource" /> 实例，则为 true；否则为 false。</returns>
      <param name="context">键入用于计算转换的上下文信息。</param>
      <param name="destinationType">要将转换计算为的所需类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="context" /> 实例不是 <see cref="T:System.Windows.Media.ImageSource" />。</exception>
    </member>
    <member name="M:System.Windows.Media.ImageSourceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>试图将指定对象转换为 <see cref="T:System.Windows.Media.ImageSource" /> 的实例。  </summary>
      <returns>
        <see cref="T:System.Windows.Media.ImageSource" /> 的新实例。</returns>
      <param name="context">键入用于转换的上下文信息。</param>
      <param name="culture">转换过程中考虑的区域性信息。</param>
      <param name="value">正在转换的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> 为 null 或是无效类型。</exception>
    </member>
    <member name="M:System.Windows.Media.ImageSourceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>试图将 <see cref="T:System.Windows.Media.ImageSource" /> 的实例转换为指定类型。</summary>
      <returns>
        <paramref name="destinationType" /> 的新实例。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="culture">转换过程中考虑的区域性信息。</param>
      <param name="value">
                要转换的 <see cref="T:System.Windows.Media.ImageSource" />。</param>
      <param name="destinationType">要进行计算以供转换的类型。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> 为 null 或不是有效类型。- 或 -
                无法将 <paramref name="context" /> 实例序列化为字符串。</exception>
    </member>
    <member name="T:System.Windows.Media.ImageSourceValueSerializer">
      <summary>在 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Media.ImageSource" /> 的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Media.ImageSourceValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.ImageSourceValueSerializer" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.ImageSourceValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定是否可将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Media.ImageSource" /> 的实例。</summary>
      <returns>
            如果可以转换 value，则为 true；否则为 false。</returns>
      <param name="value">
                要进行计算以供转换的 <see cref="T:System.String" />。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Media.ImageSourceValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定是否可将 <see cref="T:System.Windows.Media.ImageSource" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <returns>
            如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
      <param name="value">要进行计算以供转换的 <see cref="T:System.Windows.Media.ImageSource" /> 的实例。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Media.ImageSourceValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Media.ImageSource" />。</summary>
      <returns>基于提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Media.ImageSource" /> 的一个新实例。</returns>
      <param name="value">要转换为 <see cref="T:System.Windows.Media.ImageSource" /> 的字符串值。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Media.ImageSourceValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.Windows.Media.ImageSource" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <returns>提供的 <see cref="T:System.Windows.Media.ImageSource" /> 对象的 <see cref="T:System.String" /> 表示形式。</returns>
      <param name="value">要进行计算以供转换的 <see cref="T:System.Windows.Media.ImageSource" />。</param>
      <param name="context">用于转换的上下文信息。</param>
    </member>
    <member name="T:System.Windows.Media.Int32Collection">
      <summary>
                    表示 <see cref="T:System.Int32" /> 值的集合。
                </summary>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.#ctor">
      <summary>
                    初始化 <see cref="T:System.Windows.Media.Int32Collection" /> 类的一个新实例。
                </summary>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
                    用指定的 <see cref="T:System.Int32" /> 值的集合来初始化 <see cref="T:System.Windows.Media.Int32Collection" /> 类的新实例。
                </summary>
      <param name="collection">
                    构成 <see cref="T:System.Windows.Media.Int32Collection" /> 的 <see cref="T:System.Int32" /> 值的集合。
                </param>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.#ctor(System.Int32)">
      <summary>
                    使用指定的容量或集合最初可存储的 <see cref="T:System.Int32" /> 值的数目来初始化 <see cref="T:System.Windows.Media.Int32Collection" /> 类的一个新实例。
                </summary>
      <param name="capacity">
                    集合最初可存储的 <see cref="T:System.Int32" /> 值的数目。
                </param>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.Add(System.Int32)">
      <summary>
                    将 <see cref="T:System.Int32" /> 添加到集合的末尾。
                </summary>
      <param name="value">
                    要添加到集合末尾的 <see cref="T:System.Int32" />。
                </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.Int32Collection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.Int32Collection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.Clear">
      <summary>
                    从集合中移除所有 <see cref="T:System.Int32" /> 值。
                </summary>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.Clone">
      <summary>
                    创建此 <see cref="T:System.Windows.Media.Int32Collection" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。
                </summary>
      <returns>
                    当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.CloneCurrentValue">
      <summary>
                    创建此 <see cref="T:System.Windows.Media.Int32Collection" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。
                </summary>
      <returns>
                    当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.Contains(System.Int32)">
      <summary>
                    获取一个指示集合是否包含指定的 <see cref="T:System.Int32" /> 的值。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Media.Int32Collection" /> 中找到 <see cref="T:System.Int32" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在集合中定位的 <see cref="T:System.Int32" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.CopyTo(System.Int32[],System.Int32)">
      <summary>
                    将集合中的所有 <see cref="T:System.Int32" /> 值复制到指定的数组中。
                </summary>
      <param name="array">
                    标识内容要复制到的数组。
                </param>
      <param name="index">
                    集合内容要复制到的数组中的索引位置。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的
                
                    - 或 -
                <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                
                    源 <see cref="T:System.Windows.Media.Int32Collection" /> 中的项数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。
                </exception>
    </member>
    <member name="P:System.Windows.Media.Int32Collection.Count">
      <summary>
                    获取 <see cref="T:System.Windows.Media.Int32Collection" /> 中包含的 <see cref="T:System.Int32" /> 值的数目。
                </summary>
      <returns>
        <see cref="T:System.Windows.Media.Int32Collection" /> 中包含的 <see cref="T:System.Int32" /> 值的数目。
                </returns>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.GetEnumerator">
      <summary>
                    返回可循环访问集合的 <see cref="T:System.Windows.Media.Int32Collection.Enumerator" />。
                </summary>
      <returns>
                    一个可以循环访问集合的 <see cref="T:System.Windows.Media.Int32Collection.Enumerator" />。
                </returns>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.IndexOf(System.Int32)">
      <summary>
                    搜索指定的 <see cref="T:System.Int32" />，并返回整个集合中第一个匹配项的从零开始的索引。
                </summary>
      <returns>
                    如果在整个集合中找到 <paramref name="value" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在集合中定位的 <see cref="T:System.Int32" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.Insert(System.Int32,System.Int32)">
      <summary>
                    在集合中的特定位置插入 <see cref="T:System.Int32" />。
                </summary>
      <param name="index">
        <see cref="T:System.Int32" /> 所插入到的索引位置。
                </param>
      <param name="value">
                    要在集合中插入的 <see cref="T:System.Int32" />。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Windows.Media.Int32Collection" /> 中的有效索引。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.Int32Collection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.Int32Collection" /> 具有固定大小。
                </exception>
    </member>
    <member name="P:System.Windows.Media.Int32Collection.Item(System.Int32)">
      <summary>
                    获取或设置指定索引位置处的 <see cref="T:System.Int32" />。
                </summary>
      <returns>
                    指定索引处的 <see cref="T:System.Int32" />。
                </returns>
      <param name="index">
                    要获取或设置的 <see cref="T:System.Int32" /> 的从零开始的索引。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                
                    - 或 -
                <paramref name="index" /> 等于或大于 <see cref="P:System.Windows.Media.Int32Collection.Count" />。
                </exception>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.Parse(System.String)">
      <summary>
                          返回基于指定字符串创建的 <see cref="T:System.Windows.Media.Int32Collection" /> 实例。
                </summary>
      <returns>
                    从 <paramref name="source" /> 中创建的 <see cref="T:System.Windows.Media.Int32Collection" /> 的实例。
                </returns>
      <param name="source">
                    转换为 <see cref="T:System.Int32" /> 的字符串。
                </param>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.Remove(System.Int32)">
      <summary>
                    从集合中移除 <see cref="T:System.Int32" />。
                </summary>
      <returns>
                    如果从 <see cref="T:System.Windows.Media.Int32Collection" /> 中移除了 <paramref name="value" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    标识要从集合中移除的 <see cref="T:System.Int32" />。
                </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.Int32Collection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.Int32Collection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.RemoveAt(System.Int32)">
      <summary>
                    从集合中移除指定索引位置处的 <see cref="T:System.Int32" />。
                </summary>
      <param name="index">
                    要移除的 <see cref="T:System.Int32" /> 的索引位置。
                </param>
    </member>
    <member name="P:System.Windows.Media.Int32Collection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.Int32Collection" /> 是只读的，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator`1" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />。
                </summary>
      <param name="array">
                    从零开始的 <see cref="T:System.Array" />，它接收从 <see cref="T:System.Windows.Media.Int32Collection" /> 复制来的项。
                </param>
      <param name="index">
                    指定的 <see cref="T:System.Array" /> 中接收复制内容的第一个位置。
                </param>
    </member>
    <member name="P:System.Windows.Media.Int32Collection.System#Collections#ICollection#IsSynchronized">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。
                </summary>
      <returns>
                    如果对 <see cref="T:System.Windows.Media.Int32Collection" /> 的访问是同步的（线程安全），则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.Int32Collection.System#Collections#ICollection#SyncRoot">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。
                </summary>
      <returns>
                    可用于同步对 <see cref="T:System.Windows.Media.Int32Collection" /> 的访问的对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections." /><see cref="IEnumerator" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.System#Collections#IList#Add(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。
                </summary>
      <returns>
                    新元素的插入位置。
                </returns>
      <param name="value">
                    要添加到 <see cref="T:System.Windows.Media.Int32Collection" /> 的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.System#Collections#IList#Contains(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Media.Int32Collection" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.Int32Collection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。
                </summary>
      <returns>
                    如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.Int32Collection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。
                </summary>
      <param name="index">
                    从零开始的索引，在该处插入 <see cref="T:System.Object" />。
                </param>
      <param name="value">
                    要插入 <see cref="T:System.Windows.Media.Int32Collection" /> 中的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="P:System.Windows.Media.Int32Collection.System#Collections#IList#IsFixedSize">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.Int32Collection" /> 具有固定大小，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.Int32Collection.System#Collections#IList#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.Int32Collection" /> 是只读的，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.Int32Collection.System#Collections#IList#Item(System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.Item(System.Int32)" />。
                </summary>
      <returns>
                    指定索引处的元素。
                </returns>
      <param name="index">
                    要获得或设置的元素从零开始的索引。
                </param>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.System#Collections#IList#Remove(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Remove(System.Object)" />。
                </summary>
      <param name="value">
                    要从 <see cref="T:System.Windows.Media.Int32Collection" /> 移除的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" />，包含具有指定格式的当前实例的值。
                </returns>
      <param name="format">
                    指定要使用的格式的 <see cref="T:System." /><see cref="String" />。
                
                    - 或 -
                
                    如果为 null（在 Visual Basic 中为 Nothing），则使用为 <see cref="T:System.IFormattable" /> 实现的类型定义的默认格式。
                </param>
      <param name="provider">
                    用于格式化该值的 <see cref="T:System." /><see cref="IFormatProvider" />。
                
                    - 或 -
                
                    如果为 null（在 Visual Basic 中为 Nothing），则从操作系统的当前区域设置中获取数字信息。
                </param>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.ToString">
      <summary>
将 <see cref="T:System.Windows.Media.Int32Collection" /> 的当前值转换为 <see cref="T:System.String" />。
                </summary>
      <returns>
        <see cref="T:System.Windows.Media.Int32Collection" /> 的字符串表示形式。
                </returns>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.ToString(System.IFormatProvider)">
      <summary>
                    通过使用指定的特定于区域性的格式设置信息，将 <see cref="T:System.Windows.Media.Int32Collection" /> 的当前值转换为 <see cref="T:System.String" />。
                </summary>
      <returns>
        <see cref="T:System.Windows.Media.Int32Collection" /> 的字符串表示形式。
                </returns>
      <param name="provider">
                    特定于区域性的格式设置信息。
                </param>
    </member>
    <member name="T:System.Windows.Media.Int32Collection.Enumerator">
      <summary>枚举 <see cref="T:System.Windows.Media.Int32Collection" /> 中的 <see cref="T:System.Int32" /> 项。 </summary>
    </member>
    <member name="P:System.Windows.Media.Int32Collection.Enumerator.Current">
      <summary>获取集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.Enumerator.MoveNext">
      <summary>将枚举数前移到集合中的下一个元素。</summary>
      <returns>
            如果枚举数成功前移到了下一个元素，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.Enumerator.Reset">
      <summary>将枚举数重置至其初始位置，即位于集合中第一个元素之前。</summary>
    </member>
    <member name="P:System.Windows.Media.Int32Collection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Media.Int32Collection.Enumerator.System#IDisposable#Dispose">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="T:System.Windows.Media.Int32CollectionConverter">
      <summary>在 <see cref="T:System.Windows.Media.Int32Collection" /> 与其他数据类型之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Media.Int32CollectionConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.Int32Collection" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.Int32CollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定转换器是否能将给定类型的对象转换为 <see cref="T:System.Windows.Media.Int32Collection" /> 实例。</summary>
      <returns>
            如果转换器可以将提供的类型转换为 <see cref="T:System.Windows.Media.Int32Collection" /> 实例，则为 true；否则为 false。</returns>
      <param name="context">描述类型的上下文信息。</param>
      <param name="sourceType">正被计算用于转换的源类型。</param>
    </member>
    <member name="M:System.Windows.Media.Int32CollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定转换器是否可以将 <see cref="T:System.Windows.Media.Int32Collection" /> 转换为给定的数据类型。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Media.Int32Collection" /> 可以转换为 <paramref name="destinationType" />，则为 true；否则为 false。</returns>
      <param name="context">类型的上下文信息。</param>
      <param name="destinationType">要将转换计算为的所需类型。</param>
    </member>
    <member name="M:System.Windows.Media.Int32CollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>试图将指定对象转换为 <see cref="T:System.Windows.Media.Int32Collection" /> 实例。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Int32Collection" /> 的新实例。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="culture">转换过程中考虑的区域性信息。</param>
      <param name="value">正在转换的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> 为 null 或者类型无效。</exception>
    </member>
    <member name="M:System.Windows.Media.Int32CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>试图将 <see cref="T:System.Windows.Media.Int32Collection" /> 的实例转换为指定类型。</summary>
      <returns>
        <paramref name="destinationType" /> 的新实例。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="culture">转换过程中考虑的区域性信息。</param>
      <param name="value">
                要转换的 <see cref="T:System.Windows.Media.Int32Collection" />。</param>
      <param name="destinationType">要进行计算以供转换的类型。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> 为 null 或者类型无效。</exception>
    </member>
    <member name="T:System.Windows.Media.IntersectionDetail">
      <summary>提供有关 <see cref="T:System.Windows.Media.GeometryHitTestParameters" /> 中的几何图形与点击过的可视对象之间的交集的信息。</summary>
    </member>
    <member name="F:System.Windows.Media.IntersectionDetail.NotCalculated">
      <summary>不计算 <see cref="T:System.Windows.Media.IntersectionDetail" /> 值。</summary>
    </member>
    <member name="F:System.Windows.Media.IntersectionDetail.Empty">
      <summary>
        <see cref="T:System.Windows.Media.Geometry" /> 命中测试参数与目标可视对象（即几何图形）不相交。</summary>
    </member>
    <member name="F:System.Windows.Media.IntersectionDetail.FullyInside">
      <summary>目标可视对象（即几何图形）完全位于 <see cref="T:System.Windows.Media.Geometry" /> 命中测试参数内。</summary>
    </member>
    <member name="F:System.Windows.Media.IntersectionDetail.FullyContains">
      <summary>
        <see cref="T:System.Windows.Media.Geometry" /> 命中测试参数完全包含在目标可视对象（即几何图形）的边界内。</summary>
    </member>
    <member name="F:System.Windows.Media.IntersectionDetail.Intersects">
      <summary>
        <see cref="T:System.Windows.Media.Geometry" /> 命中测试参数与目标可视对象（即几何图形）相交。这意味着两个元素重叠，但任何一个元素都不包含对方。</summary>
    </member>
    <member name="T:System.Windows.Media.InvalidWmpVersionException">
      <summary>当所安装的 Microsoft Windows Media Player 版本不受支持时引发的异常。</summary>
    </member>
    <member name="M:System.Windows.Media.InvalidWmpVersionException.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.InvalidWmpVersionException" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.InvalidWmpVersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以序列化信息初始化 <see cref="T:System.Windows.Media.InvalidWmpVersionException" /> 类的新实例。</summary>
      <param name="info">有关对象的序列化信息。</param>
      <param name="context">有关序列化流的上下文信息。</param>
    </member>
    <member name="M:System.Windows.Media.InvalidWmpVersionException.#ctor(System.String)">
      <summary>用给定的错误消息初始化 <see cref="T:System.Windows.Media.InvalidWmpVersionException" /> 类的一个新实例。</summary>
      <param name="message">用于初始化例外的错误消息。</param>
    </member>
    <member name="M:System.Windows.Media.InvalidWmpVersionException.#ctor(System.String,System.Exception)">
      <summary>使用给定的错误消息和对引起此异常的内部异常的引用来初始化 <see cref="T:System.Windows.Media.InvalidWmpVersionException" /> 类的新实例。</summary>
      <param name="message">关于错误的说明。</param>
      <param name="innerException">引起此异常的内部异常。</param>
    </member>
    <member name="T:System.Windows.Media.LanguageSpecificStringDictionary">
      <summary>表示用于以不同语言表示对象名称的字符串的字典。</summary>
    </member>
    <member name="M:System.Windows.Media.LanguageSpecificStringDictionary.Add(System.Collections.Generic.KeyValuePair{System.Windows.Markup.XmlLanguage,System.String})">
      <summary>向 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" /> 中添加键/值对。</summary>
      <param name="item">键/值对的数组。键是 <see cref="T:System.Windows.Markup.XmlLanguage" /> 类型的对象。值为关联的字符串。</param>
    </member>
    <member name="M:System.Windows.Media.LanguageSpecificStringDictionary.Add(System.Windows.Markup.XmlLanguage,System.String)">
      <summary>将语言和关联的字符串添加到 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" /> 中。</summary>
      <param name="key">一个 <see cref="T:System.Windows.Markup.XmlLanguage" /> 类型的值。</param>
      <param name="value">一个 <see cref="T:System.String" /> 类型的值。</param>
    </member>
    <member name="M:System.Windows.Media.LanguageSpecificStringDictionary.Clear">
      <summary>移除集合中的所有元素。</summary>
    </member>
    <member name="M:System.Windows.Media.LanguageSpecificStringDictionary.Contains(System.Collections.Generic.KeyValuePair{System.Windows.Markup.XmlLanguage,System.String})">
      <summary>确定 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" /> 是否包含键/值对。</summary>
      <returns>
            如果集合包含键/值对，则为 true；否则为 false。</returns>
      <param name="item">要查找的键/值对。键是 <see cref="T:System.Windows.Markup.XmlLanguage" /> 类型的对象。值为关联的字符串。</param>
    </member>
    <member name="M:System.Windows.Media.LanguageSpecificStringDictionary.ContainsKey(System.Windows.Markup.XmlLanguage)">
      <summary>确定 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" /> 是否包含指定的语言。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" /> 包含 <paramref name="key" />，则为 true ；否则为 false。</returns>
      <param name="key">一个 <see cref="T:System.Windows.Markup.XmlLanguage" /> 类型的值。</param>
    </member>
    <member name="M:System.Windows.Media.LanguageSpecificStringDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.Windows.Markup.XmlLanguage,System.String}[],System.Int32)">
      <summary>从特定的数组索引位置开始将 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" /> 的元素复制到数组中。</summary>
      <param name="array">要复制到的目标数组。</param>
      <param name="index">在源 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" /> 中从其开始复制的索引。</param>
    </member>
    <member name="P:System.Windows.Media.LanguageSpecificStringDictionary.Count">
      <summary>获取 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" /> 中的字符串数。</summary>
      <returns>一个表示字符串总数的 <see cref="T:System.Int32" /> 类型的值。</returns>
    </member>
    <member name="M:System.Windows.Media.LanguageSpecificStringDictionary.GetEnumerator">
      <summary>返回一个循环访问集合的枚举数。</summary>
      <returns>一个循环访问集合的枚举数。</returns>
    </member>
    <member name="P:System.Windows.Media.LanguageSpecificStringDictionary.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" /> 是否为只读。</summary>
      <returns>
            如果该字典为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.LanguageSpecificStringDictionary.Item(System.Windows.Markup.XmlLanguage)">
      <summary>获取或设置与指定的语言相关联的字符串。</summary>
      <returns>一个 <see cref="T:System.String" /> 类型的值。</returns>
      <param name="key">一个 <see cref="T:System.Windows.Markup.XmlLanguage" /> 类型的值。</param>
    </member>
    <member name="P:System.Windows.Media.LanguageSpecificStringDictionary.Keys">
      <summary>获取一个包含字典中的键或 <see cref="T:System.Windows.Markup.XmlLanguage" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.Windows.Markup.XmlLanguage" /> 类型的对象集合。</returns>
    </member>
    <member name="M:System.Windows.Media.LanguageSpecificStringDictionary.Remove(System.Collections.Generic.KeyValuePair{System.Windows.Markup.XmlLanguage,System.String})">
      <summary>从集合中移除具有指定的键/值对的元素。</summary>
      <returns>
            如果该元素已成功移除，则为 true；否则为 false。如果在原始集合中未找到 <paramref name="item" />，此方法也会返回 false。</returns>
      <param name="item">要移除的元素的键/值对。</param>
    </member>
    <member name="M:System.Windows.Media.LanguageSpecificStringDictionary.Remove(System.Windows.Markup.XmlLanguage)">
      <summary>根据指定的键值从 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" /> 中移除该元素。</summary>
      <returns>
            如果成功删除了 <paramref name="key" /> 所引用的元素，则为 true；否则为 false。</returns>
      <param name="key">一个 <see cref="T:System.Windows.Markup.XmlLanguage" /> 类型的值。</param>
    </member>
    <member name="M:System.Windows.Media.LanguageSpecificStringDictionary.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />。</summary>
      <param name="array">从零开始的 <see cref="T:System.Array" />，它接收从 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" /> 复制来的项。</param>
      <param name="index">指定的 <see cref="T:System.Array" /> 中接收复制内容的第一个位置。</param>
    </member>
    <member name="P:System.Windows.Media.LanguageSpecificStringDictionary.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>
            如果对 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.LanguageSpecificStringDictionary.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>可用于同步对 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Windows.Media.LanguageSpecificStringDictionary.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IDictionary.Add(System.Object)" />。</summary>
      <param name="key"></param>
      <param name="value">要添加到 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" /> 的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Windows.Media.LanguageSpecificStringDictionary.System#Collections#IDictionary#Contains(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IDictionary.Contains(System.Object)" />。</summary>
      <returns>
            如果在 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="key"></param>
    </member>
    <member name="M:System.Windows.Media.LanguageSpecificStringDictionary.System#Collections#IDictionary#GetEnumerator">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IDictionary.GetEnumerator" />。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections." /><see cref="IEnumerator" /> 对象。</returns>
    </member>
    <member name="P:System.Windows.Media.LanguageSpecificStringDictionary.System#Collections#IDictionary#IsFixedSize">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IDictionary.IsFixedSize" />。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" /> 具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.LanguageSpecificStringDictionary.System#Collections#IDictionary#Item(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IDictionary.Item(System.Object)" />。</summary>
      <returns>带有指定键的元素。</returns>
      <param name="key">要获取或设置的元素的键。</param>
    </member>
    <member name="P:System.Windows.Media.LanguageSpecificStringDictionary.System#Collections#IDictionary#Keys">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IDictionary.Keys" />。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.IDictionary" /> 对象的键。</returns>
    </member>
    <member name="M:System.Windows.Media.LanguageSpecificStringDictionary.System#Collections#IDictionary#Remove(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IDictionary.Remove(System.Object)" />。</summary>
      <param name="key"></param>
    </member>
    <member name="P:System.Windows.Media.LanguageSpecificStringDictionary.System#Collections#IDictionary#Values">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IDictionary.Values" />。</summary>
      <returns>包含 <see cref="T:System.Collections.IDictionary" /> 对象中的值的 <see cref="T:System.Collections.ICollection" /> 对象。</returns>
    </member>
    <member name="M:System.Windows.Media.LanguageSpecificStringDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections." /><see cref="IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Windows.Media.LanguageSpecificStringDictionary.TryGetValue(System.Windows.Markup.XmlLanguage,System.String@)">
      <summary>针对指定的键或语言检索 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" /> 中的字符串值。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Media.LanguageSpecificStringDictionary" /> 包含 <paramref name="key" /> 的项，则为 true；否则为 false。</returns>
      <param name="key">一个 <see cref="T:System.Windows.Markup.XmlLanguage" /> 类型的值。</param>
      <param name="value">一个 <see cref="T:System.String" /> 类型的值。</param>
    </member>
    <member name="P:System.Windows.Media.LanguageSpecificStringDictionary.Values">
      <summary>获取一个包含字典中的值或字符串的集合。</summary>
      <returns>一个包含字典中的字符串的集合。</returns>
    </member>
    <member name="T:System.Windows.Media.LinearGradientBrush">
      <summary>使用线性渐变绘制区域。</summary>
    </member>
    <member name="M:System.Windows.Media.LinearGradientBrush.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.LinearGradientBrush" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.LinearGradientBrush.#ctor(System.Windows.Media.Color,System.Windows.Media.Color,System.Double)">
      <summary>初始化 <see cref="T:System.Windows.Media.LinearGradientBrush" /> 类的一个新实例，该实例具有指定的起始 <see cref="T:System.Windows.Media.Color" />、结束 <see cref="T:System.Windows.Media.Color" /> 和角度。</summary>
      <param name="startColor">偏移量为 0.0 的 <see cref="T:System.Windows.Media.Color" />。</param>
      <param name="endColor">偏移量为 1.0 的 <see cref="T:System.Windows.Media.Color" />。 </param>
      <param name="angle">一个表示渐变角度的 <see cref="T:System.Double" />，以度为单位。如果值为 0.0，则创建水平渐变，如果值为 90.0，则创建垂直渐变。</param>
    </member>
    <member name="M:System.Windows.Media.LinearGradientBrush.#ctor(System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Point,System.Windows.Point)">
      <summary>初始化 <see cref="T:System.Windows.Media.LinearGradientBrush" /> 类的一个新实例，该实例具有指定的起始 <see cref="T:System.Windows.Media.Color" />、结束 <see cref="T:System.Windows.Media.Color" />、<see cref="P:System.Windows.Media.LinearGradientBrush.StartPoint" /> 和 <see cref="P:System.Windows.Media.LinearGradientBrush.EndPoint" />。</summary>
      <param name="startColor">偏移量为 0.0 的 <see cref="T:System.Windows.Media.Color" />。</param>
      <param name="endColor">偏移量为 1.0 的 <see cref="T:System.Windows.Media.Color" />。</param>
      <param name="startPoint">渐变的 <see cref="P:System.Windows.Media.LinearGradientBrush.StartPoint" />。</param>
      <param name="endPoint">渐变的 <see cref="P:System.Windows.Media.LinearGradientBrush.EndPoint" />。</param>
    </member>
    <member name="M:System.Windows.Media.LinearGradientBrush.#ctor(System.Windows.Media.GradientStopCollection)">
      <summary>初始化 <see cref="T:System.Windows.Media.LinearGradientBrush" /> 类的一个新实例，该实例具有指定的渐变停止点。</summary>
      <param name="gradientStopCollection">要在此画笔上设置的 <see cref="P:System.Windows.Media.GradientBrush.GradientStops" />。</param>
    </member>
    <member name="M:System.Windows.Media.LinearGradientBrush.#ctor(System.Windows.Media.GradientStopCollection,System.Double)">
      <summary>初始化 <see cref="T:System.Windows.Media.LinearGradientBrush" /> 类的一个新实例，该实例具有指定的 <see cref="T:System.Windows.Media.GradientStopCollection" /> 和角度。</summary>
      <param name="gradientStopCollection">要在此画笔上设置的 <see cref="P:System.Windows.Media.GradientBrush.GradientStops" />。</param>
      <param name="angle">一个表示渐变角度的 <see cref="T:System.Double" />，以度为单位。如果值为 0.0，则创建水平渐变，如果值为 90.0，则创建垂直渐变。</param>
    </member>
    <member name="M:System.Windows.Media.LinearGradientBrush.#ctor(System.Windows.Media.GradientStopCollection,System.Windows.Point,System.Windows.Point)">
      <summary>初始化 <see cref="T:System.Windows.Media.LinearGradientBrush" /> 类的一个新实例，该实例具有指定的渐变停止点、<see cref="P:System.Windows.Media.LinearGradientBrush.StartPoint" /> 和 <see cref="P:System.Windows.Media.LinearGradientBrush.EndPoint" />。</summary>
      <param name="gradientStopCollection">要在此画笔上设置的 <see cref="P:System.Windows.Media.GradientBrush.GradientStops" />。</param>
      <param name="startPoint">渐变的 <see cref="P:System.Windows.Media.LinearGradientBrush.StartPoint" />。</param>
      <param name="endPoint">渐变的 <see cref="P:System.Windows.Media.LinearGradientBrush.EndPoint" />。</param>
    </member>
    <member name="M:System.Windows.Media.LinearGradientBrush.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.LinearGradientBrush" /> 的可修改副本，从而制作此对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.LinearGradientBrush.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.LinearGradientBrush" /> 对象的可修改副本，从而制作此对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.LinearGradientBrush.EndPoint">
      <summary>获取或设置线性渐变的二维终止坐标。这是一个依赖项属性。</summary>
      <returns>线性渐变的二维终止坐标。默认值为 (1,1)。 </returns>
    </member>
    <member name="F:System.Windows.Media.LinearGradientBrush.EndPointProperty">
      <summary>标识 <see cref="P:System.Windows.Media.LinearGradientBrush.EndPoint" /> 依赖项属性。 </summary>
      <returns>
        <see cref="P:System.Windows.Media.LinearGradientBrush.EndPoint" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.LinearGradientBrush.StartPoint">
      <summary>获取或设置线性渐变的二维起始坐标。这是一个依赖项属性。</summary>
      <returns>线性渐变的二维起始坐标。默认值为 (0, 0)。这是一个依赖项属性。</returns>
    </member>
    <member name="F:System.Windows.Media.LinearGradientBrush.StartPointProperty">
      <summary>标识 <see cref="P:System.Windows.Media.LinearGradientBrush.StartPoint" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.LinearGradientBrush.StartPoint" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.LineGeometry">
      <summary>表示线条的几何图形。</summary>
    </member>
    <member name="M:System.Windows.Media.LineGeometry.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.LineGeometry" /> 类的一个长度为零的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.LineGeometry.#ctor(System.Windows.Point,System.Windows.Point)">
      <summary>初始化 <see cref="T:System.Windows.Media.LineGeometry" /> 类的一个具有指定起点和终点的新实例。</summary>
      <param name="startPoint">线条的起点。</param>
      <param name="endPoint">线条的终点。</param>
    </member>
    <member name="M:System.Windows.Media.LineGeometry.#ctor(System.Windows.Point,System.Windows.Point,System.Windows.Media.Transform)">
      <summary>初始化 <see cref="T:System.Windows.Media.LineGeometry" /> 类的一个新实例。</summary>
      <param name="startPoint">起点。</param>
      <param name="endPoint">终点。</param>
      <param name="transform">要应用于该线条的变换。</param>
    </member>
    <member name="P:System.Windows.Media.LineGeometry.Bounds">
      <summary>获取此 <see cref="T:System.Windows.Media.LineGeometry" /> 的与轴对齐的边界框。</summary>
      <returns>此 <see cref="T:System.Windows.Media.LineGeometry" /> 的与轴对齐的边界框。</returns>
    </member>
    <member name="M:System.Windows.Media.LineGeometry.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.LineGeometry" /> 的可修改复本，从而制作此对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能无法再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.LineGeometry.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.LineGeometry" /> 对象的可修改复本，从而制作此对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.LineGeometry.EndPoint">
      <summary>获取或设置线条的终点。这是一个依赖项属性。</summary>
      <returns>线条的终点。默认值为 (0,0)。</returns>
    </member>
    <member name="F:System.Windows.Media.LineGeometry.EndPointProperty">
      <summary>标识 <see cref="P:System.Windows.Media.LineGeometry.EndPoint" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.LineGeometry.EndPoint" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.LineGeometry.GetArea(System.Double,System.Windows.Media.ToleranceType)">
      <summary>获取此 <see cref="T:System.Windows.Media.LineGeometry" /> 对象的填充区域的面积。</summary>
      <returns>此 <see cref="T:System.Windows.Media.LineGeometry" /> 对象填充区域的面积，由于直线没有面积，因此返回值始终为 0。</returns>
      <param name="tolerance">计算的容错。</param>
      <param name="type">用于解释容错的指定类型。</param>
    </member>
    <member name="M:System.Windows.Media.LineGeometry.IsEmpty">
      <summary>确定此 <see cref="T:System.Windows.Media.LineGeometry" /> 对象是否为空。</summary>
      <returns>
            如果此 <see cref="T:System.Windows.Media.LineGeometry" /> 为空，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.LineGeometry.MayHaveCurves">
      <summary>确定此 <see cref="T:System.Windows.Media.LineGeometry" /> 对象是否可以具有曲线段。</summary>
      <returns>
            如果此 <see cref="T:System.Windows.Media.LineGeometry" /> 对象可以具有曲线段，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.LineGeometry.StartPoint">
      <summary>获取或设置线条的起点。这是一个依赖项属性。</summary>
      <returns>线条的起点。默认值为 (0,0)。</returns>
    </member>
    <member name="F:System.Windows.Media.LineGeometry.StartPointProperty">
      <summary>标识 <see cref="P:System.Windows.Media.LineGeometry.StartPoint" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.LineGeometry.StartPoint" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.LineSegment">
      <summary>在 <see cref="T:System.Windows.Media.PathFigure" /> 中的两个点之间创建一条直线。</summary>
    </member>
    <member name="M:System.Windows.Media.LineSegment.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.LineSegment" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.LineSegment.#ctor(System.Windows.Point,System.Boolean)">
      <summary>初始化 <see cref="T:System.Windows.Media.LineSegment" /> 类的一个新实例，该类具有指定的终止 <see cref="T:System.Windows.Point" /> 和可确定此 <see cref="T:System.Windows.Media.LineSegment" /> 是否描边的布尔值。</summary>
      <param name="point">此 <see cref="T:System.Windows.Media.LineSegment" /> 的终点。</param>
      <param name="isStroked">
                如果对此 <see cref="T:System.Windows.Media.LineSegment" /> 描边，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Windows.Media.LineSegment.Clone">
      <summary>通过制作此 <see cref="T:System.Windows.Media.LineSegment" /> 的值的深层副本来创建它的可修改副本。</summary>
      <returns>当前对象的可修改的深层副本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也会返回 false。</returns>
    </member>
    <member name="M:System.Windows.Media.LineSegment.CloneCurrentValue">
      <summary>通过制作此 <see cref="T:System.Windows.Media.LineSegment" /> 对象的值的深层副本来创建它的可修改副本。此方法不复制资源引用、数据绑定或动画，但复制其当前值。</summary>
      <returns>当前对象的可修改的深层副本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，<see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.LineSegment.Point">
      <summary>获取或设置线段的终点。这是一个依赖项属性。</summary>
      <returns>线段的终点。</returns>
    </member>
    <member name="F:System.Windows.Media.LineSegment.PointProperty">
      <summary>标识 <see cref="P:System.Windows.Media.LineSegment.Point" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.LineSegment.Point" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.MatrixTransform">
      <summary>
创建一个任意仿射矩阵变换，用于操作二维平面中的对象或坐标系。
                </summary>
    </member>
    <member name="M:System.Windows.Media.MatrixTransform.#ctor">
      <summary>
                    初始化 <see cref="T:System.Windows.Media.MatrixTransform" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.Windows.Media.MatrixTransform.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
                    使用指定的变换矩阵值初始化 <see cref="T:System.Windows.Media.MatrixTransform" /> 类的新实例。
                </summary>
      <param name="m11">
                    该值位于变换矩阵的位置 (1, 1) 处。
                </param>
      <param name="m12">
                    该值位于变换矩阵的位置 (1, 2) 处。
                </param>
      <param name="m21">
                    该值位于变换矩阵的位置 (2, 1) 处。
                </param>
      <param name="m22">
                    该值位于变换矩阵的位置 (2, 2) 处。
                </param>
      <param name="offsetX">
                    X 轴平移因子位于变换矩阵的位置 (3,1) 处。
                </param>
      <param name="offsetY">
                    Y 轴平移因子位于变换矩阵的位置 (3,2) 处。
                </param>
    </member>
    <member name="M:System.Windows.Media.MatrixTransform.#ctor(System.Windows.Media.Matrix)">
      <summary>
                    使用指定的变换矩阵初始化 <see cref="T:System.Windows.Media.MatrixTransform" /> 类的新实例。
                </summary>
      <param name="matrix">
                    新的 <see cref="T:System.Windows.Media.MatrixTransform" /> 的变换矩阵。
                </param>
    </member>
    <member name="M:System.Windows.Media.MatrixTransform.Clone">
      <summary>
                    通过制作此 <see cref="T:System.Windows.Media.MatrixTransform" /> 值的深层副本来创建它的可修改副本。
                </summary>
      <returns>
                    当前对象的可修改的深层副本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.MatrixTransform.CloneCurrentValue">
      <summary>
                    通过制作此 <see cref="T:System.Windows.Media.MatrixTransform" /> 对象值的深层副本来创建它的可修改副本。此方法不复制资源引用、数据绑定或动画，但复制其当前值。
                </summary>
      <returns>
                    当前对象的可修改的深层副本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.MatrixTransform.Matrix">
      <summary>
                    获取或设置定义此变换的 <see cref="T:System.Windows.Media.Matrix" /> 结构。这是一个依赖项属性。
                </summary>
      <returns>
                    定义此变换的 <see cref="T:System.Windows.Media.Matrix" /> 结构。默认值为标识 <see cref="T:System.Windows.Media.Matrix" />。标识矩阵的 [1,1]、[2,2] 和 [3,3] 系数的值为 1；其余系数的值为 0。
                </returns>
    </member>
    <member name="F:System.Windows.Media.MatrixTransform.MatrixProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Media.MatrixTransform.Matrix" /> 依赖项属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Media.MatrixTransform.Matrix" /> 依赖项属性的标识符。
                </returns>
    </member>
    <member name="P:System.Windows.Media.MatrixTransform.Value">
      <summary>
                    获取表示此 <see cref="T:System.Windows.Media.MatrixTransform" /> 的 <see cref="P:System.Windows.Media.MatrixTransform.Matrix" />。
                </summary>
      <returns>
                    表示此 <see cref="T:System.Windows.Media.MatrixTransform" /> 的矩阵。
                </returns>
    </member>
    <member name="T:System.Windows.Media.MediaClock">
      <summary>通过 <see cref="T:System.Windows.Media.MediaTimeline" /> 维护媒体的计时状态。</summary>
    </member>
    <member name="M:System.Windows.Media.MediaClock.#ctor(System.Windows.Media.MediaTimeline)">
      <summary> 初始化 <see cref="T:System.Windows.Media.MediaClock" /> 类的一个新实例。</summary>
      <param name="media">用作媒体时钟模板的时间线。</param>
    </member>
    <member name="M:System.Windows.Media.MediaClock.DiscontinuousTimeMovement">
      <summary>当运动是不连续的运动时调用。</summary>
    </member>
    <member name="M:System.Windows.Media.MediaClock.GetCanSlip">
      <summary>检索一个指示媒体时钟是否可以滑动的值。</summary>
      <returns>
            如果媒体时钟可以滑动，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.MediaClock.GetCurrentTimeCore">
      <summary>检索一个标识实际媒体时间的值。此值可用于滑动同步。</summary>
      <returns>实际媒体时间。</returns>
    </member>
    <member name="M:System.Windows.Media.MediaClock.SpeedChanged">
      <summary>当时钟速度发生变化时调用。</summary>
    </member>
    <member name="M:System.Windows.Media.MediaClock.Stopped">
      <summary>当时钟停止时调用。</summary>
    </member>
    <member name="P:System.Windows.Media.MediaClock.Timeline">
      <summary>获取用于描述时钟控制行为的 <see cref="T:System.Windows.Media.MediaTimeline" />。</summary>
      <returns>用于描述时钟控制行为的 <see cref="T:System.Windows.Media.MediaTimeline" />。</returns>
    </member>
    <member name="T:System.Windows.Media.MediaPlayer">
      <summary>为绘图提供媒体播放功能。</summary>
    </member>
    <member name="M:System.Windows.Media.MediaPlayer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.MediaPlayer" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Media.MediaPlayer.Balance">
      <summary>获取或设置左右扬声器音量之间的平衡。</summary>
      <returns>介于 -1 到 1 范围内的左右扬声器之间的音量比。默认值为 0。</returns>
    </member>
    <member name="E:System.Windows.Media.MediaPlayer.BufferingEnded">
      <summary>当完成缓冲时发生。</summary>
    </member>
    <member name="P:System.Windows.Media.MediaPlayer.BufferingProgress">
      <summary>获取为流内容完成的缓冲百分比。</summary>
      <returns>用 0 与 1 之间的值表示的为流内容完成的缓冲百分比。</returns>
    </member>
    <member name="E:System.Windows.Media.MediaPlayer.BufferingStarted">
      <summary>当开始缓冲时发生。</summary>
    </member>
    <member name="P:System.Windows.Media.MediaPlayer.CanPause">
      <summary>获取一个值，该值指示是否可暂停媒体。</summary>
      <returns>如果可以暂停媒体，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.MediaPlayer.Clock">
      <summary>获取或设置与要播放的 <see cref="T:System.Windows.Media.MediaTimeline" /> 关联的 <see cref="T:System.Windows.Media.MediaClock" />。</summary>
      <returns>与要播放的 <see cref="T:System.Windows.Media.MediaTimeline" /> 关联的时钟。默认为 null。</returns>
    </member>
    <member name="M:System.Windows.Media.MediaPlayer.CloneCore(System.Windows.Freezable)">
      <summary>使该实例成为指定的 <see cref="T:System.Windows.Media.MediaPlayer" /> 的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。</summary>
      <param name="sourceFreezable">要克隆的 <see cref="T:System.Windows.Media.MediaPlayer" />。</param>
    </member>
    <member name="M:System.Windows.Media.MediaPlayer.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>使用当前的属性值使该实例成为指定的 <see cref="T:System.Windows.Media.MediaPlayer" /> 的可修改深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <param name="sourceFreezable">要克隆的 <see cref="T:System.Windows.Media.MediaPlayer" />。</param>
    </member>
    <member name="M:System.Windows.Media.MediaPlayer.Close">
      <summary>关闭基础媒体。</summary>
    </member>
    <member name="M:System.Windows.Media.MediaPlayer.CreateInstanceCore">
      <summary>创建一个新的 <see cref="T:System.Windows.Media.MediaPlayer" /> 实例。</summary>
      <returns>新 <see cref="T:System.Windows.Media.MediaPlayer" /> 实例。</returns>
    </member>
    <member name="P:System.Windows.Media.MediaPlayer.DownloadProgress">
      <summary>获取位于远程服务器上的内容的下载进度百分比。</summary>
      <returns>位于远程服务器上的内容的下载进度百分比，由介于 0 与 1 之间的值来表示。默认值为 0。</returns>
    </member>
    <member name="M:System.Windows.Media.MediaPlayer.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>使该实例成为指定的 <see cref="T:System.Windows.Media.MediaPlayer" /> 对象的复本。</summary>
      <param name="sourceFreezable">要克隆和冻结的 <see cref="T:System.Windows.Media.MediaPlayer" /> 对象。</param>
    </member>
    <member name="P:System.Windows.Media.MediaPlayer.HasAudio">
      <summary>获取一个值，该值指示媒体是否具有音频输出。</summary>
      <returns>如果媒体具有音频输出，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.MediaPlayer.HasVideo">
      <summary>获取一个值，该值指示媒体是否具有视频输出。</summary>
      <returns>如果媒体具有视频输出，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.MediaPlayer.IsBuffering">
      <summary>获取一个值，该值指示媒体是否正在缓冲。</summary>
      <returns>如果媒体正在缓冲，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.MediaPlayer.IsMuted">
      <summary>获取一个值，该值指示媒体是否被静音。</summary>
      <returns>如果媒体被静音，则为 true；否则为 false。</returns>
    </member>
    <member name="E:System.Windows.Media.MediaPlayer.MediaEnded">
      <summary>当媒体完成播放时发生。</summary>
    </member>
    <member name="E:System.Windows.Media.MediaPlayer.MediaFailed">
      <summary>当遇到错误时发生 </summary>
    </member>
    <member name="E:System.Windows.Media.MediaPlayer.MediaOpened">
      <summary>当打开媒体时发生。</summary>
    </member>
    <member name="P:System.Windows.Media.MediaPlayer.NaturalDuration">
      <summary>获取媒体的自然持续时间。</summary>
      <returns>媒体的自然持续时间。默认值为 <see cref="P:System.Windows.Duration.Automatic" />。</returns>
    </member>
    <member name="P:System.Windows.Media.MediaPlayer.NaturalVideoHeight">
      <summary>获取视频的像素高度。</summary>
      <returns>视频的像素高度。</returns>
    </member>
    <member name="P:System.Windows.Media.MediaPlayer.NaturalVideoWidth">
      <summary>获取视频的像素宽度。</summary>
      <returns>视频的像素宽度。</returns>
    </member>
    <member name="M:System.Windows.Media.MediaPlayer.Open(System.Uri)">
      <summary>打开给定的 <see cref="T:System.Uri" /> 以进行媒体播放。</summary>
      <param name="source">媒体源 <see cref="T:System.Uri" />。</param>
    </member>
    <member name="M:System.Windows.Media.MediaPlayer.Pause">
      <summary>暂停媒体播放。</summary>
    </member>
    <member name="M:System.Windows.Media.MediaPlayer.Play">
      <summary>从当前 <see cref="P:System.Windows.Media.MediaPlayer.Position" /> 播放媒体。</summary>
    </member>
    <member name="P:System.Windows.Media.MediaPlayer.Position">
      <summary>获取或设置媒体的当前位置。</summary>
      <returns>媒体的当前位置。</returns>
    </member>
    <member name="M:System.Windows.Media.MediaPlayer.ReadPreamble">
      <summary>确保正在从有效线程中访问 MediaPlayer。</summary>
    </member>
    <member name="E:System.Windows.Media.MediaPlayer.ScriptCommand">
      <summary>当在媒体中遇到脚本命令时发生。</summary>
    </member>
    <member name="P:System.Windows.Media.MediaPlayer.ScrubbingEnabled">
      <summary>获取或设置一个值，该值指示是否启用了拖动播放。</summary>
      <returns>
            如果启用了擦除，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.MediaPlayer.Source">
      <summary>获取媒体 <see cref="T:System.Uri" />。</summary>
      <returns>当前媒体 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.Windows.Media.MediaPlayer.SpeedRatio">
      <summary>获取或设置媒体的播放速率。</summary>
      <returns>由 0 与最大双精度数值之间的值所表示的媒体播放速率。默认值为 1.0。</returns>
    </member>
    <member name="M:System.Windows.Media.MediaPlayer.Stop">
      <summary>停止媒体播放。</summary>
    </member>
    <member name="P:System.Windows.Media.MediaPlayer.Volume">
      <summary>获取或设置媒体的音量。</summary>
      <returns>在 0 与 1 之间的线性标尺上所表示的媒体音量。默认值为 0.5。</returns>
    </member>
    <member name="M:System.Windows.Media.MediaPlayer.WritePreamble">
      <summary>验证 MediaPlayer 是否未被冻结，并且是否正在从有效的线程上下文中访问它。</summary>
    </member>
    <member name="T:System.Windows.Media.MediaScriptCommandEventArgs">
      <summary>提供有关 <see cref="E:System.Windows.Controls.MediaElement.ScriptCommand" /> 和 <see cref="E:System.Windows.Media.MediaPlayer.ScriptCommand" /> 事件的数据。</summary>
    </member>
    <member name="P:System.Windows.Media.MediaScriptCommandEventArgs.ParameterType">
      <summary>获取引发的脚本命令的类型。</summary>
    </member>
    <member name="P:System.Windows.Media.MediaScriptCommandEventArgs.ParameterValue">
      <summary>获取与脚本命令类型相关联的参数。</summary>
    </member>
    <member name="T:System.Windows.Media.MediaTimeline">
      <summary>提供媒体内容的 <see cref="T:System.Windows.Media.Animation.Timeline" />。</summary>
    </member>
    <member name="M:System.Windows.Media.MediaTimeline.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.MediaTimeline" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.MediaTimeline.#ctor(System.Nullable{System.TimeSpan})">
      <summary>初始化 <see cref="T:System.Windows.Media.MediaTimeline" /> 的新实例，它从指定的时间开始。</summary>
      <param name="beginTime">时间线的开始时间。</param>
    </member>
    <member name="M:System.Windows.Media.MediaTimeline.#ctor(System.Nullable{System.TimeSpan},System.Windows.Duration)">
      <summary>初始化 <see cref="T:System.Windows.Media.MediaTimeline" /> 的新实例，它从指定的时间开始并持续指定的持续时间。</summary>
      <param name="beginTime">媒体开始播放的时间。</param>
      <param name="duration">媒体播放的时间长度。</param>
    </member>
    <member name="M:System.Windows.Media.MediaTimeline.#ctor(System.Nullable{System.TimeSpan},System.Windows.Duration,System.Windows.Media.Animation.RepeatBehavior)">
      <summary>初始化 <see cref="T:System.Windows.Media.MediaTimeline" /> 类的新实例，它从指定的时间开始并持续指定的时间，并且具有指定的重复行为。</summary>
      <param name="beginTime">媒体开始播放的时间。</param>
      <param name="duration">媒体播放的时间长度。</param>
      <param name="repeatBehavior">到达播放持续时间时要使用的重复行为。</param>
    </member>
    <member name="M:System.Windows.Media.MediaTimeline.#ctor(System.Uri)">
      <summary>使用提供的 Uri 作为媒体源初始化 <see cref="T:System.Windows.Media.MediaTimeline" /> 类的新实例。</summary>
      <param name="source">时间线的媒体源。</param>
    </member>
    <member name="M:System.Windows.Media.MediaTimeline.AllocateClock">
      <summary>创建该时间线的一个 <see cref="T:System.Windows.Media.MediaClock" />。</summary>
      <returns>该时间线的一个新的 <see cref="T:System.Windows.Media.MediaClock" />。</returns>
    </member>
    <member name="M:System.Windows.Media.MediaTimeline.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.MediaTimeline" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.MediaTimeline.CloneCore(System.Windows.Freezable)">
      <summary>使该实例成为指定的 <see cref="T:System.Windows.Media.MediaTimeline" /> 的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <param name="sourceFreezable">要克隆的 <see cref="T:System.Windows.Media.MediaTimeline" />。</param>
    </member>
    <member name="M:System.Windows.Media.MediaTimeline.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.MediaTimeline" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.MediaTimeline.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>使用当前的属性值使该实例成为指定的 <see cref="T:System.Windows.Media.MediaTimeline" /> 的可修改深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <param name="sourceFreezable">要克隆的 <see cref="T:System.Windows.Media.MediaTimeline" />。</param>
    </member>
    <member name="M:System.Windows.Media.MediaTimeline.CreateClock">
      <summary>创建一个与 <see cref="T:System.Windows.Media.MediaTimeline" /> 关联的新的 <see cref="T:System.Windows.Media.MediaClock" />。</summary>
      <returns>新的 <see cref="T:System.Windows.Media.MediaClock" />。</returns>
    </member>
    <member name="M:System.Windows.Media.MediaTimeline.CreateInstanceCore">
      <summary>创建 MediaTimeline 的新实例。</summary>
      <returns>新实例。</returns>
    </member>
    <member name="M:System.Windows.Media.MediaTimeline.FreezeCore(System.Boolean)">
      <summary>使此 MediaTimeline 实例不可修改，或确定是否可使其不可修改。</summary>
      <returns>当 <paramref name="isChecking" /> 为 true 时，如果可以使此 <see cref="T:System.Windows.Media.MediaTimeline" /> 不可修改，则此方法返回 true；如果无法使其不可修改，则返回 false。当 <paramref name="isChecking" /> 为 false 时，如果指定的 <see cref="T:System.Windows.Media.MediaTimeline" /> 现在不可修改，则此方法返回 true；如果无法使其不可修改，并且如果实际更改该对象的冻结状态会产生负面影响，则返回 false。</returns>
      <param name="isChecking">
                如果为 true，则检查是否可以冻结时间线；如果为 false，则冻结时间线。</param>
    </member>
    <member name="M:System.Windows.Media.MediaTimeline.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>使该实例成为指定的 <see cref="T:System.Windows.Media.MediaTimeline" /> 对象的复本。</summary>
      <param name="source">要克隆和冻结的 <see cref="T:System.Windows.Media.MediaTimeline" /> 对象。</param>
    </member>
    <member name="M:System.Windows.Media.MediaTimeline.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>使该实例成为指定的 <see cref="T:System.Windows.Media.MediaTimeline" /> 的冻结复本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <param name="source">要复制和冻结的 <see cref="T:System.Windows.Media.MediaTimeline" />。</param>
    </member>
    <member name="M:System.Windows.Media.MediaTimeline.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
      <summary>从指定的时钟检索 <see cref="T:System.Windows.Duration" />。</summary>
      <param name="clock">具有所需自然持续时间的 <see cref="T:System.Windows.Media.Animation.Clock" />。</param>
    </member>
    <member name="P:System.Windows.Media.MediaTimeline.Source">
      <summary>获取或设置与时间线相关联的媒体源。这是一个依赖项属性。</summary>
      <returns>与时间线关联的媒体源。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Media.MediaTimeline.SourceProperty">
      <summary>标识 <see cref="P:System.Windows.Media.MediaTimeline.Source" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.MediaTimeline.Source" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.MediaTimeline.System#Windows#Markup#IUriContext#BaseUri">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Media.MediaTimeline.ToString">
      <summary>返回表示媒体源的字符串。</summary>
      <returns>表示媒体源的字符串。</returns>
    </member>
    <member name="T:System.Windows.Media.NumberCultureSource">
      <summary>指定如何确定文本运行中的数字区域性。</summary>
    </member>
    <member name="F:System.Windows.Media.NumberCultureSource.Text">
      <summary>默认值。数字区域性派生自 <see cref="P:System.Windows.Media.TextFormatting.TextRunProperties.CultureInfo" /> 属性的值，该值是文本运行的区域性。在标记中，这由 xml:lang 属性来表示。</summary>
    </member>
    <member name="F:System.Windows.Media.NumberCultureSource.User">
      <summary>数字区域性派生自当前线程的区域性值，该值默认情况下是用户的默认区域性。</summary>
    </member>
    <member name="F:System.Windows.Media.NumberCultureSource.Override">
      <summary>数字区域性派生自 <see cref="P:System.Windows.Media.NumberSubstitution.CultureOverride" /> 属性。</summary>
    </member>
    <member name="T:System.Windows.Media.NumberSubstitution">
      <summary>指定如何用不同的区域性显示文本中的数字。</summary>
    </member>
    <member name="M:System.Windows.Media.NumberSubstitution.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.NumberSubstitution" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.NumberSubstitution.#ctor(System.Windows.Media.NumberCultureSource,System.Globalization.CultureInfo,System.Windows.Media.NumberSubstitutionMethod)">
      <summary>使用显式属性值初始化 <see cref="T:System.Windows.Media.NumberSubstitution" /> 类的新实例。</summary>
      <param name="source">标识用于决定数字替换的区域性值的源。</param>
      <param name="cultureOverride">标识在将 <see cref="P:System.Windows.Media.NumberSubstitution.CultureSource" /> 属性的值设置为 <see cref="F:System.Windows.Media.NumberCultureSource.Override" /> 时要使用的区域性。</param>
      <param name="substitution">标识用于决定数字替换的替换方法。</param>
    </member>
    <member name="P:System.Windows.Media.NumberSubstitution.CultureOverride">
      <summary>获取或设置一个值，该值标识在将 <see cref="P:System.Windows.Media.NumberSubstitution.CultureSource" /> 属性的值设置为 <see cref="F:System.Windows.Media.NumberCultureSource.Override" /> 时要使用的区域性。</summary>
      <returns>
        <see cref="T:System.Globalization.CultureInfo" /> 值，该值表示用作重写的区域性。</returns>
    </member>
    <member name="F:System.Windows.Media.NumberSubstitution.CultureOverrideProperty">
      <summary>标识 <see cref="P:System.Windows.Media.NumberSubstitution.CultureOverride" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.NumberSubstitution.CultureOverride" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.NumberSubstitution.CultureSource">
      <summary>获取或设置一个值，该值标识用于决定数字替换的区域性值的源。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.Media.NumberCultureSource" /> 枚举值。</returns>
    </member>
    <member name="F:System.Windows.Media.NumberSubstitution.CultureSourceProperty">
      <summary>标识 <see cref="P:System.Windows.Media.NumberSubstitution.CultureSource" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.NumberSubstitution.CultureSource" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.NumberSubstitution.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前的 <see cref="T:System.Windows.Media.NumberSubstitution" /> 对象。</summary>
      <returns>
            如果 <paramref name="o" /> 与当前的 <see cref="T:System.Windows.Media.NumberSubstitution" /> 对象相同，则为 true；否则为 false。如果 <paramref name="o" /> 不是 <see cref="T:System.Windows.Media.NumberSubstitution" /> 对象，则返回 false。</returns>
      <param name="obj">要与当前的 <see cref="T:System.Windows.Media.NumberSubstitution" /> 对象进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Windows.Media.NumberSubstitution.GetCultureOverride(System.Windows.DependencyObject)">
      <summary>从提供的元素中返回 <see cref="P:System.Windows.Media.NumberSubstitution.CultureOverride" /> 的值。</summary>
      <returns>
        <see cref="T:System.Globalization.CultureInfo" /> 值，该值表示用作重写的区域性。</returns>
      <param name="target">要为其返回 <see cref="P:System.Windows.Media.NumberSubstitution.CultureOverride" /> 值的元素。</param>
    </member>
    <member name="M:System.Windows.Media.NumberSubstitution.GetCultureSource(System.Windows.DependencyObject)">
      <summary>从提供的元素中返回 <see cref="P:System.Windows.Media.NumberSubstitution.CultureSource" /> 的值。</summary>
      <returns>
        <see cref="T:System.Windows.Media.NumberCultureSource" /> 枚举值。</returns>
      <param name="target">要为其返回 <see cref="P:System.Windows.Media.NumberSubstitution.CultureSource" /> 值的元素。</param>
    </member>
    <member name="M:System.Windows.Media.NumberSubstitution.GetHashCode">
      <summary>作为 <see cref="T:System.Windows.Media.NumberSubstitution" /> 的哈希函数。它适用于哈希算法和诸如哈希表之类的数据结构。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 值，表示当前对象的哈希代码。</returns>
    </member>
    <member name="M:System.Windows.Media.NumberSubstitution.GetSubstitution(System.Windows.DependencyObject)">
      <summary>从提供的元素中返回 <see cref="P:System.Windows.Media.NumberSubstitution.Substitution" /> 的值。</summary>
      <returns>
        <see cref="T:System.Windows.Media.NumberSubstitutionMethod" /> 枚举值。</returns>
      <param name="target">要为其返回 <see cref="P:System.Windows.Media.NumberSubstitution.Substitution" /> 值的元素。</param>
    </member>
    <member name="M:System.Windows.Media.NumberSubstitution.SetCultureOverride(System.Windows.DependencyObject,System.Globalization.CultureInfo)">
      <summary>为提供的元素设置 <see cref="P:System.Windows.Media.NumberSubstitution.CultureOverride" /> 的值。</summary>
      <param name="target">指定区域性重写的元素。</param>
      <param name="value">
        <see cref="T:System.Globalization.CultureInfo" /> 类型的区域性重写值。</param>
    </member>
    <member name="M:System.Windows.Media.NumberSubstitution.SetCultureSource(System.Windows.DependencyObject,System.Windows.Media.NumberCultureSource)">
      <summary>为提供的元素设置 <see cref="P:System.Windows.Media.NumberSubstitution.CultureSource" /> 的值。</summary>
      <param name="target">指定区域性重写的元素。</param>
      <param name="value">
        <see cref="T:System.Windows.Media.NumberCultureSource" /> 类型的区域性源值。</param>
    </member>
    <member name="M:System.Windows.Media.NumberSubstitution.SetSubstitution(System.Windows.DependencyObject,System.Windows.Media.NumberSubstitutionMethod)">
      <summary>为提供的元素设置 <see cref="P:System.Windows.Media.NumberSubstitution.Substitution" /> 的值。</summary>
      <param name="target">指定替换方法的元素。</param>
      <param name="value">
        <see cref="T:System.Windows.Media.NumberSubstitutionMethod" /> 类型的替换方法值。</param>
    </member>
    <member name="P:System.Windows.Media.NumberSubstitution.Substitution">
      <summary>获取或设置一个值，该值标识用于决定数字替换的替换方法。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.Media.NumberSubstitutionMethod" /> 枚举值。</returns>
    </member>
    <member name="F:System.Windows.Media.NumberSubstitution.SubstitutionProperty">
      <summary>标识 <see cref="P:System.Windows.Media.NumberSubstitution.Substitution" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.NumberSubstitution.Substitution" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.NumberSubstitutionMethod">
      <summary>定义一个枚举类，该枚举类指定对文本运行中的数字执行的数字替换的类型。</summary>
    </member>
    <member name="F:System.Windows.Media.NumberSubstitutionMethod.AsCulture">
      <summary>默认值。指定应该根据数字区域性的 <see cref="P:System.Globalization.NumberFormatInfo.DigitSubstitution" /> 属性值来确定替换方法。</summary>
    </member>
    <member name="F:System.Windows.Media.NumberSubstitutionMethod.Context">
      <summary>如果数字区域性为阿拉伯语或波斯语区域性，则指定数字取决于上下文。根据紧靠在前面的强字符（如果没有，则根据段落的文本方向）来使用传统数字或拉丁数字。</summary>
    </member>
    <member name="F:System.Windows.Media.NumberSubstitutionMethod.European">
      <summary>指定将码位 0x30-0x39 始终呈现为欧洲数字，在这种情况下，不需要执行数字替换。</summary>
    </member>
    <member name="F:System.Windows.Media.NumberSubstitutionMethod.NativeNational">
      <summary>指定使用由区域性的 <see cref="P:System.Globalization.NumberFormatInfo.NativeDigits" /> 属性值所指定的数字区域性民族数字来呈现数字。</summary>
    </member>
    <member name="F:System.Windows.Media.NumberSubstitutionMethod.Traditional">
      <summary>指定使用数字区域性民族数字来呈现数字。对于大多数区域性，这与 <see cref="F:System.Globalization.DigitShapes.NativeNational" /> 枚举值相同。但是，使用 <see cref="F:System.Windows.Media.NumberSubstitutionMethod.NativeNational" /> 可以让某些阿拉伯语区域性产生拉丁数字，而使用 <see cref="F:System.Windows.Media.NumberSubstitutionMethod.Traditional" /> 可让所有阿拉伯语区域性产生阿拉伯数字。</summary>
    </member>
    <member name="T:System.Windows.Media.PathFigure">
      <summary>表示几何图形的一个子部分、一系列单独连接的二维几何线段。</summary>
    </member>
    <member name="M:System.Windows.Media.PathFigure.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Media.PathFigure" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.PathFigure.#ctor(System.Windows.Point,System.Collections.Generic.IEnumerable{System.Windows.Media.PathSegment},System.Boolean)">
      <summary>用指定的 <see cref="P:System.Windows.Media.PathFigure.StartPoint" />、<see cref="P:System.Windows.Media.PathFigure.Segments" /> 和 <see cref="P:System.Windows.Media.PathFigure.IsClosed" /> 值初始化 <see cref="T:System.Windows.Media.PathFigure" /> 类的新实例。</summary>
      <param name="start">
        <see cref="T:System.Windows.Media.PathFigure" /> 的 <see cref="P:System.Windows.Media.PathFigure.StartPoint" />。</param>
      <param name="segments">
        <see cref="T:System.Windows.Media.PathFigure" /> 的 <see cref="P:System.Windows.Media.PathFigure.Segments" />。</param>
      <param name="closed">
        <see cref="T:System.Windows.Media.PathFigure" /> 的 <see cref="P:System.Windows.Media.PathFigure.IsClosed" />。</param>
    </member>
    <member name="M:System.Windows.Media.PathFigure.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.PathFigure" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.PathFigure.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.PathFigure" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.PathFigure.GetFlattenedPathFigure">
      <summary> 获取一个 <see cref="T:System.Windows.Media.PathFigure" /> 对象，它是该 <see cref="T:System.Windows.Media.PathFigure" /> 对象的多边形近似。</summary>
      <returns>该 <see cref="T:System.Windows.Media.PathFigure" /> 对象的多边形近似。</returns>
    </member>
    <member name="M:System.Windows.Media.PathFigure.GetFlattenedPathFigure(System.Double,System.Windows.Media.ToleranceType)">
      <summary> 在指定的容错范围内获取一个 <see cref="T:System.Windows.Media.PathFigure" /> 对象，容错是此 <see cref="T:System.Windows.Media.PathFigure" /> 对象的多边形近似。</summary>
      <returns>该 <see cref="T:System.Windows.Media.PathFigure" /> 对象的多边形近似。</returns>
      <param name="tolerance">计算的容错。</param>
      <param name="type">指定解释容错的方式。</param>
    </member>
    <member name="P:System.Windows.Media.PathFigure.IsClosed">
      <summary>获取或设置一个值，该值指定是否连接该图形的第一条线段和最后一条线段。 这是一个依赖项属性。</summary>
      <returns>
            如果连接该图形的第一条线段和最后一条线段，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Media.PathFigure.IsClosedProperty">
      <summary>标识 <see cref="P:System.Windows.Media.PathFigure.IsClosed" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PathFigure.IsClosed" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.PathFigure.IsFilled">
      <summary> 获取或设置该 <see cref="T:System.Windows.Media.PathFigure" /> 的包含区域是否用于命中测试、呈现和剪辑。 这是一个依赖项属性。</summary>
      <returns>确定该 <see cref="T:System.Windows.Media.PathFigure" /> 的包含区域是否用于命中测试、呈现和剪辑。默认值为 true。</returns>
    </member>
    <member name="F:System.Windows.Media.PathFigure.IsFilledProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.PathFigure.IsFilled" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PathFigure.IsFilled" /> 依赖项属性标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.PathFigure.MayHaveCurves">
      <summary> 确定该 <see cref="T:System.Windows.Media.PathFigure" /> 对象是否可以具有曲线段。</summary>
      <returns>
            如果该 <see cref="T:System.Windows.Media.PathFigure" /> 对象可以具有曲线段，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.PathFigure.Segments">
      <summary> 获取或设置线段集合，这些线段定义该 <see cref="T:System.Windows.Media.PathFigure" /> 对象的形状。 这是一个依赖项属性。</summary>
      <returns>定义该 <see cref="T:System.Windows.Media.PathFigure" /> 对象形状的线段集合。默认值是一个空集合。</returns>
    </member>
    <member name="F:System.Windows.Media.PathFigure.SegmentsProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.PathFigure.Segments" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PathFigure.Segments" /> 依赖项属性标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.PathFigure.StartPoint">
      <summary>获取或设置 <see cref="T:System.Windows.Media.PathFigure" /> 开始处的 <see cref="T:System.Windows.Point" />。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.Media.PathFigure" /> 开始处的 <see cref="T:System.Windows.Point" />。默认值为 0,0。</returns>
    </member>
    <member name="F:System.Windows.Media.PathFigure.StartPointProperty">
      <summary>
        <see cref="P:System.Windows.Media.PathFigure.StartPoint" /> 依赖项属性的标识符。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PathFigure.StartPoint" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.PathFigure.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="format"></param>
      <param name="provider"></param>
    </member>
    <member name="M:System.Windows.Media.PathFigure.ToString">
      <summary>创建此对象的字符串表示形式。</summary>
    </member>
    <member name="M:System.Windows.Media.PathFigure.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定的格式设置创建该对象的字符串表示形式。</summary>
      <returns>此方法会生成一系列移动和绘制命令，有关这些命令格式的更多信息，请参见路径标记语法概述。</returns>
      <param name="provider">区域性特定的格式设置信息；如果使用当前区域性和默认格式设置，则为 null。</param>
    </member>
    <member name="T:System.Windows.Media.PathFigureCollection">
      <summary>
                     表示 <see cref="T:System.Windows.Media.PathFigure" /> 对象的集合，这些对象共同构成了 <see cref="T:System.Windows.Media.PathGeometry" /> 的几何图形。
                </summary>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.#ctor">
      <summary>
                    初始化 <see cref="T:System.Windows.Media.PathFigureCollection" /> 类的一个新实例。
                </summary>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.PathFigure})">
      <summary>
                    初始化包含指定 <see cref="T:System.Windows.Media.PathFigure" /> 对象的 <see cref="T:System.Windows.Media.PathFigureCollection" /> 类的新实例。
                </summary>
      <param name="collection">
        <see cref="T:System.Windows.Media.PathFigure" /> 对象的集合，这些对象共同构成了 <see cref="T:System.Windows.Shapes.Path" /> 的几何图形。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.#ctor(System.Int32)">
      <summary>
                    初始化最初可能包含指定数量的 <see cref="T:System.Windows.Media.PathFigure" /> 对象的 <see cref="T:System.Windows.Media.PathFigureCollection" /> 类的新实例。
                </summary>
      <param name="capacity">
                    此 <see cref="T:System.Windows.Media.PathFigureCollection" /> 的初始容量。
                </param>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.Add(System.Windows.Media.PathFigure)">
      <summary>
                     将 <see cref="T:System.Windows.Media.PathFigure" /> 添加到集合的末尾。
                </summary>
      <param name="value">
                    要添加到集合中的 <see cref="T:System.Windows.Media.PathFigure" />。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.PathFigureCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.PathFigureCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.Clear">
      <summary>
                    从 <see cref="T:System.Windows.Media.PathFigureCollection" /> 中移除所有项。
                </summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.PathFigureCollection" /> 是只读的。
                </exception>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.Clone">
      <summary>
                    创建此 <see cref="T:System.Windows.Media.PathFigureCollection" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。
                </summary>
      <returns>
                    当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.CloneCurrentValue">
      <summary>
                    创建此 <see cref="T:System.Windows.Media.PathFigureCollection" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。
                </summary>
      <returns>
                    当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.Contains(System.Windows.Media.PathFigure)">
      <summary>
                     确定集合是否包含指定的 <see cref="T:System.Windows.Media.PathFigure" />。
                </summary>
      <returns>
                    如果 <paramref name="value" /> 在 <see cref="T:System.Windows.Media.PathFigureCollection" /> 中，则为 true；否则为 false。
                </returns>
      <param name="value">
                    所查询的 <see cref="T:System.Windows.Media.PathFigure" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.CopyTo(System.Windows.Media.PathFigure[],System.Int32)">
      <summary>
                     从目标数组的指定索引处开始将整个 <see cref="T:System.Windows.Media.PathFigureCollection" /> 复制到 <see cref="T:System.Windows.Media.PathFigure" /> 类型的一维数组中。
                </summary>
      <param name="array">
                    集合项将复制到其中的数组。
                </param>
      <param name="index">
        <paramref name="array" /> 的索引，将从此处开始复制 <see cref="T:System.Windows.Media.PathFigureCollection" /> 的内容。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的
                
                    - 或 -
                <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                
                    源 <see cref="T:System.Windows.Media.PathFigureCollection" /> 中的项数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。
                </exception>
    </member>
    <member name="P:System.Windows.Media.PathFigureCollection.Count">
      <summary>
                     获取 <see cref="T:System.Windows.Media.PathFigureCollection" /> 中包含的路径图形数。
                </summary>
      <returns>
        <see cref="T:System.Windows.Media.PathFigureCollection" /> 中包含的路径图形数。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.GetEnumerator">
      <summary>
                    返回可循环访问集合的枚举数。
                </summary>
      <returns>
                    一个可以循环访问集合的 <see cref="T:System.Windows.Media.PathFigureCollection.Enumerator" />。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.IndexOf(System.Windows.Media.PathFigure)">
      <summary>
                    搜索指定的 <see cref="T:System.Windows.Media.PathFigure" />，并返回整个集合中第一个匹配项的从零开始的索引。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Media.PathFigureCollection" /> 找到了，则为 <paramref name="value" /> 的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在集合中定位的 <see cref="T:System.Windows.Media.PathFigure" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.Insert(System.Int32,System.Windows.Media.PathFigure)">
      <summary>
                    在集合中的特定位置插入 <see cref="T:System.Windows.Media.PathFigure" />。
                </summary>
      <param name="index">
        <see cref="T:System.Windows.Media.PathFigure" /> 所插入到的索引位置。
                </param>
      <param name="value">
                    要在集合中插入的 <see cref="T:System.Windows.Media.PathFigure" /> 对象。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Windows.Media.PathFigureCollection" /> 中的有效索引。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.PathFigureCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.PathFigureCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="P:System.Windows.Media.PathFigureCollection.Item(System.Int32)">
      <summary>
                    获取或设置指定索引位置处的 <see cref="T:System.Windows.Media.PathFigure" />。
                </summary>
      <returns>
                    指定索引处的 <see cref="T:System.Windows.Media.PathFigure" />。
                </returns>
      <param name="index">
                    要获取或设置的 <see cref="T:System.Windows.Media.PathFigure" /> 的从零开始的索引。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Windows.Media.PathFigureCollection" /> 中的有效索引。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.PathFigureCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.PathFigureCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.Parse(System.String)">
      <summary>
                          返回基于指定字符串创建的 <see cref="T:System.Windows.Media.PathFigureCollection" /> 实例。
                </summary>
      <returns>
                    从 <paramref name="source" /> 中创建的 <see cref="T:System.Windows.Media.PathFigureCollection" /> 的实例。
                </returns>
      <param name="source">
                    转换为 <see cref="T:System.Windows.Media.PathFigureCollection" /> 的字符串。
                </param>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.Remove(System.Windows.Media.PathFigure)">
      <summary>
                    从集合中移除 <see cref="T:System.Windows.Media.PathFigure" /> 对象。
                </summary>
      <returns>
                    如果从 <see cref="T:System.Windows.Media.PathFigureCollection" /> 中移除了 <paramref name="value" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    标识要从集合中移除的 <see cref="T:System.Windows.Media.PathFigure" />。
                </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.PathFigureCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.PathFigureCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.RemoveAt(System.Int32)">
      <summary>
                    从集合中移除指定索引位置处的 <see cref="T:System.Windows.Media.PathFigure" />。
                </summary>
      <param name="index">
                    要移除的 <see cref="T:System.Windows.Media.PathFigure" /> 的索引位置。
                </param>
    </member>
    <member name="P:System.Windows.Media.PathFigureCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.PathFigureCollection" /> 是只读的，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator`1" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />。
                </summary>
      <param name="array">
                    从零开始的 <see cref="T:System.Array" />，它接收从 <see cref="T:System.Windows.Media.PathFigureCollection" /> 复制来的项。
                </param>
      <param name="index">
                    指定的 <see cref="T:System.Array" /> 中接收复制内容的第一个位置。
                </param>
    </member>
    <member name="P:System.Windows.Media.PathFigureCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。
                </summary>
      <returns>
                    如果对 <see cref="T:System.Windows.Media.PathFigureCollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.PathFigureCollection.System#Collections#ICollection#SyncRoot">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。
                </summary>
      <returns>
                    可用于同步对 <see cref="T:System.Windows.Media.PathFigureCollection" /> 的访问的对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.System#Collections#IList#Add(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。
                </summary>
      <returns>
                    新元素的插入位置。
                </returns>
      <param name="value">
                    要添加到 <see cref="T:System.Windows.Media.PathFigureCollection" /> 的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Media.PathFigureCollection" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.PathFigureCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。
                </summary>
      <returns>
                    如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.PathFigureCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。
                </summary>
      <param name="index">
                    从零开始的索引，在该处插入 <see cref="T:System.Object" />。
                </param>
      <param name="value">
                    要插入 <see cref="T:System.Windows.Media.PathFigureCollection" /> 中的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="P:System.Windows.Media.PathFigureCollection.System#Collections#IList#IsFixedSize">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.PathFigureCollection" /> 具有固定大小，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.PathFigureCollection.System#Collections#IList#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.PathFigureCollection" /> 是只读的，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.PathFigureCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.Item(System.Int32)" />。
                </summary>
      <returns>
                    指定索引处的元素。
                </returns>
      <param name="index">
                    要获得或设置的元素从零开始的索引。
                </param>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Remove(System.Object)" />。
                </summary>
      <param name="value">
                    要从 <see cref="T:System.Windows.Media.PathFigureCollection" /> 移除的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" />，包含具有指定格式的当前实例的值。
                </returns>
      <param name="format">
                    指定要使用的格式的 <see cref="T:System." /><see cref="String" />。
                
                    - 或 -
                
                    如果为 null（在 Visual Basic 中为 Nothing），则使用为 <see cref="T:System.IFormattable" /> 实现的类型定义的默认格式。
                </param>
      <param name="provider">
                    用于格式化该值的 <see cref="T:System." /><see cref="IFormatProvider" />。
                
                    - 或 -
                
                    如果为 null（在 Visual Basic 中为 Nothing），则从操作系统的当前区域设置中获取数字信息。
                </param>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.ToString">
      <summary>
将 <see cref="T:System.Windows.Media.PathFigureCollection" /> 的当前值转换为 <see cref="T:System.String" />。
                </summary>
      <returns>
        <see cref="T:System.Windows.Media.PathFigureCollection" /> 的字符串表示形式。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.ToString(System.IFormatProvider)">
      <summary>
                    通过使用指定的特定于区域性的格式设置信息，将 <see cref="T:System.Windows.Media.PathFigureCollection" /> 的当前值转换为 <see cref="T:System.String" />。
                </summary>
      <returns>
        <see cref="T:System.Windows.Media.PathFigureCollection" /> 的字符串表示形式。
                </returns>
      <param name="provider">
                    特定于区域性的格式设置信息。
                </param>
    </member>
    <member name="T:System.Windows.Media.PathFigureCollection.Enumerator">
      <summary>枚举 <see cref="T:System.Windows.Media.PathFigureCollection" /> 中的 <see cref="T:System.Windows.Media.PathFigure" /> 项。 </summary>
    </member>
    <member name="P:System.Windows.Media.PathFigureCollection.Enumerator.Current">
      <summary>获取集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.Enumerator.MoveNext">
      <summary>将枚举数前移到集合中的下一个元素。</summary>
      <returns>
            如果枚举数成功前移到了下一个元素，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.Enumerator.Reset">
      <summary>将枚举数重置至其初始位置，即位于集合中第一个元素之前。</summary>
    </member>
    <member name="P:System.Windows.Media.PathFigureCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollection.Enumerator.System#IDisposable#Dispose">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="T:System.Windows.Media.PathFigureCollectionConverter">
      <summary>在 <see cref="T:System.Windows.Media.PathFigureCollection" /> 实例与其他类型的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollectionConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.PathFigureCollection" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指示是否可将一个对象从给定类型转换成 <see cref="T:System.Windows.Media.PathFigureCollection" /> 实例。</summary>
      <returns>
            如果可以将指定类型的对象转换为 <see cref="T:System.Windows.Media.PathFigureCollection" />，则为 true；否则为 false。</returns>
      <param name="context">描述类型的上下文信息。</param>
      <param name="sourceType">将对其查询转换支持的源 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将 <see cref="T:System.Windows.Media.PathFigureCollection" /> 实例转换成指定类型。</summary>
      <returns>
            如果可以将 <see cref="T:System.Windows.Media.PathFigureCollection" /> 的实例转换为 <paramref name="destinationType" />，则为 true；否则为 false。</returns>
      <param name="context">描述类型的上下文信息。</param>
      <param name="destinationType">所计算的此 <see cref="T:System.Windows.Media.PathFigureCollection" /> 要转换为的期望类型。</param>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定对象转换为 <see cref="T:System.Windows.Media.PathFigureCollection" />。</summary>
      <returns>通过转换 <paramref name="value" /> 创建的 <see cref="T:System.Windows.Media.PathFigureCollection" />。</returns>
      <param name="context">描述类型的上下文信息。</param>
      <param name="culture">描述正在转换的类型的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">正在转换的对象。</param>
    </member>
    <member name="M:System.Windows.Media.PathFigureCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将指定的 <see cref="T:System.Windows.Media.PathFigureCollection" /> 转换为指定类型。</summary>
      <param name="context">描述类型的上下文信息。</param>
      <param name="culture">描述正在转换的类型的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的 <see cref="T:System.Windows.Media.PathFigureCollection" />。</param>
      <param name="destinationType">
        <see cref="T:System.Windows.Media.PathFigureCollection" /> 所要转换成的类型。</param>
    </member>
    <member name="T:System.Windows.Media.PathGeometry">
      <summary>表示一个可能由弧、曲线、椭圆、直线和矩形组成的复杂形状。</summary>
    </member>
    <member name="M:System.Windows.Media.PathGeometry.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Media.PathGeometry" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.PathGeometry.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.PathFigure})">
      <summary>用指定的 <see cref="P:System.Windows.Media.PathGeometry.Figures" /> 初始化 <see cref="T:System.Windows.Media.PathGeometry" /> 类的新实例。</summary>
      <param name="figures">
        <see cref="T:System.Windows.Media.PathGeometry" /> 的 <see cref="P:System.Windows.Media.PathGeometry.Figures" />，描述 <see cref="T:System.Windows.Shapes.Path" /> 的内容。</param>
    </member>
    <member name="M:System.Windows.Media.PathGeometry.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.PathFigure},System.Windows.Media.FillRule,System.Windows.Media.Transform)">
      <summary>使用指定的 <see cref="P:System.Windows.Media.PathGeometry.Figures" />、<see cref="P:System.Windows.Media.PathGeometry.FillRule" /> 和 <see cref="P:System.Windows.Media.Geometry.Transform" /> 初始化 <see cref="T:System.Windows.Media.PathGeometry" /> 类的新实例。</summary>
      <param name="figures">
        <see cref="T:System.Windows.Media.PathGeometry" /> 的 <see cref="P:System.Windows.Media.PathGeometry.Figures" />，描述 <see cref="T:System.Windows.Shapes.Path" /> 的内容。</param>
      <param name="fillRule">
        <see cref="T:System.Windows.Media.PathGeometry" /> 的 <see cref="P:System.Windows.Media.PathGeometry.FillRule" />。</param>
      <param name="transform">指定已应用转换的 <see cref="P:System.Windows.Media.Geometry.Transform" />。</param>
    </member>
    <member name="M:System.Windows.Media.PathGeometry.AddGeometry(System.Windows.Media.Geometry)">
      <summary> 将指定的 <see cref="T:System.Windows.Media.Geometry" /> 转换为 <see cref="T:System.Windows.Media.PathFigure" /> 对象集合，并将该集合添加到路径中。 注意：如果已对指定的 <see cref="T:System.Windows.Media.Geometry" /> 进行了动画处理，则从 <see cref="T:System.Windows.Media.Geometry" /> 到 <see cref="T:System.Windows.Media.PathFigure" /> 的转换可能会导致丢失一些信息。</summary>
      <param name="geometry">要添加到路径的几何图形。</param>
    </member>
    <member name="P:System.Windows.Media.PathGeometry.Bounds">
      <summary> 获取一个 <see cref="T:System.Windows.Rect" />，它指定此 <see cref="T:System.Windows.Media.PathGeometry" /> 对象的边界框。 注意：此方法不考虑任何钢笔。</summary>
      <returns>此 <see cref="T:System.Windows.Media.PathGeometry" /> 的边界框。</returns>
    </member>
    <member name="M:System.Windows.Media.PathGeometry.Clear">
      <summary> 从此 <see cref="T:System.Windows.Media.PathGeometry" /> 中移除所有 <see cref="T:System.Windows.Media.PathFigure" /> 对象。</summary>
    </member>
    <member name="M:System.Windows.Media.PathGeometry.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.PathGeometry" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.PathGeometry.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.PathGeometry" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.PathGeometry.CreateFromGeometry(System.Windows.Media.Geometry)">
      <summary>创建指定 <see cref="T:System.Windows.Media.Geometry" /> 的 <see cref="T:System.Windows.Media.PathGeometry" /> 版本。</summary>
      <returns>一个从指定 <see cref="T:System.Windows.Media.Geometry" /> 的当前值创建的 <see cref="T:System.Windows.Media.PathGeometry" />。</returns>
      <param name="geometry">要从中创建 <see cref="T:System.Windows.Media.PathGeometry" /> 的几何图形。</param>
    </member>
    <member name="P:System.Windows.Media.PathGeometry.Figures">
      <summary> 获取或设置 <see cref="T:System.Windows.Media.PathFigure" /> 对象的集合，这些对象描述路径的内容。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.PathFigure" /> 对象的集合，这些对象描述路径的内容。每个单独的 <see cref="T:System.Windows.Media.PathFigure" /> 描述一个形状。</returns>
    </member>
    <member name="F:System.Windows.Media.PathGeometry.FiguresProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.PathGeometry.Figures" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PathGeometry.Figures" /> 依赖项属性标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.PathGeometry.FillRule">
      <summary> 获取或设置一个值，该值确定如何组合此 <see cref="T:System.Windows.Media.PathGeometry" /> 中包含的相交区域。这是一个依赖项属性。</summary>
      <returns>指示如何组合此 <see cref="T:System.Windows.Media.PathGeometry" /> 的相交区域。默认值为 EvenOdd。</returns>
    </member>
    <member name="F:System.Windows.Media.PathGeometry.FillRuleProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.PathGeometry.FillRule" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PathGeometry.FillRule" /> 依赖项属性标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.PathGeometry.GetPointAtFractionLength(System.Double,System.Windows.Point@,System.Windows.Point@)">
      <summary> 在此 <see cref="T:System.Windows.Media.PathGeometry" /> 的一段指定长度上获取 <see cref="T:System.Windows.Point" /> 和正切向量。</summary>
      <param name="progress">此 <see cref="T:System.Windows.Media.PathGeometry" /> 上的一段长度。</param>
      <param name="point">当此方法返回时，方法中包含此 <see cref="T:System.Windows.Media.PathGeometry" /> 上指定的一段长度的位置。该参数未经初始化即被传递。</param>
      <param name="tangent">此方法返回时，方法中包含正切向量。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Windows.Media.PathGeometry.IsEmpty">
      <summary> 确定此 <see cref="T:System.Windows.Media.PathGeometry" /> 对象是否为空。</summary>
      <returns>
            如果此 <see cref="T:System.Windows.Media.PathGeometry" /> 为空，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.PathGeometry.MayHaveCurves">
      <summary> 确定此 <see cref="T:System.Windows.Media.PathGeometry" /> 对象是否可以具有曲线段。</summary>
      <returns>
            如果此 <see cref="T:System.Windows.Media.PathGeometry" /> 对象可以具有曲线段，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Windows.Media.PathSegment">
      <summary>表示 <see cref="T:System.Windows.Media.PathFigure" /> 对象的一段。</summary>
    </member>
    <member name="M:System.Windows.Media.PathSegment.Clone">
      <summary>通过制作此 <see cref="T:System.Windows.Media.PathSegment" /> 的值的深层副本来创建它的可修改副本。</summary>
      <returns>当前对象的可修改的深层副本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也会返回 false。</returns>
    </member>
    <member name="M:System.Windows.Media.PathSegment.CloneCurrentValue">
      <summary>通过制作此 <see cref="T:System.Windows.Media.PathSegment" /> 对象的值的深层副本来创建它的可修改副本。此方法不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改的深层副本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，<see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.PathSegment.IsSmoothJoin">
      <summary>获取或设置一个值，该值指示在用 <see cref="T:System.Windows.Media.Pen" /> 为此 <see cref="T:System.Windows.Media.PathSegment" /> 和上一个 <see cref="T:System.Windows.Media.PathSegment" /> 描边时是否将它们之间的联接视为角。这是一个依赖项属性。</summary>
      <returns>
            如果此 <see cref="T:System.Windows.Media.PathSegment" /> 和上一个 <see cref="T:System.Windows.Media.PathSegment" /> 之间的联接不被视为角，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Media.PathSegment.IsSmoothJoinProperty">
      <summary>标识 <see cref="P:System.Windows.Media.PathSegment.IsSmoothJoin" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PathSegment.IsSmoothJoin" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.PathSegment.IsStroked">
      <summary>获取或设置一个值，该值指示是否为该段描边。这是一个依赖项属性。</summary>
      <returns>
            如果在使用 <see cref="T:System.Windows.Media.Pen" /> 呈现该段时为该段描边，则为 true；否则将不为该段描边。默认值为 true。</returns>
    </member>
    <member name="F:System.Windows.Media.PathSegment.IsStrokedProperty">
      <summary>标识 <see cref="P:System.Windows.Media.PathSegment.IsStroked" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PathSegment.IsStroked" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.PathSegmentCollection">
      <summary>
                    表示可按照索引单独访问的 <see cref="T:System.Windows.Media.PathSegment" /> 对象的集合。
                </summary>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.#ctor">
      <summary>
初始化 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 的新实例。
                </summary>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.PathSegment})">
      <summary>
                    用指定的 <see cref="T:System.Windows.Media.PathSegment" /> 对象的集合来初始化 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 类的新实例。
                </summary>
      <param name="collection">
                    构成 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 的 <see cref="T:System.Windows.Media.PathSegment" /> 对象的集合。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.#ctor(System.Int32)">
      <summary>
                    使用指定的容量或集合最初可存储的 <see cref="T:System.Windows.Media.PathSegment" /> 对象数来初始化 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 类的一个新实例。
                </summary>
      <param name="capacity">
                    集合最初可存储的 <see cref="T:System.Windows.Media.PathSegment" /> 对象数。
                </param>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.Add(System.Windows.Media.PathSegment)">
      <summary>
                    将 <see cref="T:System.Windows.Media.PathSegment" /> 添加到集合的末尾。
                </summary>
      <param name="value">
                    要添加到集合的段。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.PathSegmentCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.PathSegmentCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.Clear">
      <summary>
                     清除集合中的所有段，并将 <see cref="P:System.Windows.Media.PathSegmentCollection.Count" /> 重置为零。
                </summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.PathSegmentCollection" /> 是只读的。
                </exception>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.Clone">
      <summary>
                    创建此 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。
                </summary>
      <returns>
                    当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.CloneCurrentValue">
      <summary>
                    创建此 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。
                </summary>
      <returns>
                    当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.Contains(System.Windows.Media.PathSegment)">
      <summary>
                     返回一个 <see cref="T:System.Boolean" />，它指示集合中是否包含指定的 <see cref="T:System.Windows.Media.PathSegment" />。
                </summary>
      <returns>
                    如果指定的 <see cref="T:System.Windows.Media.PathSegment" /> 包含在集合中，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要搜索的 <see cref="T:System.Windows.Media.PathSegment" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.CopyTo(System.Windows.Media.PathSegment[],System.Int32)">
      <summary>
                     从目标数组的指定索引处开始将整个 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 复制到一维 <see cref="T:System.Windows.Media.PathSegment" /> 数组。
                </summary>
      <param name="array">
                    集合项将复制到其中的数组。
                </param>
      <param name="index">
        <paramref name="array" /> 的索引，将从此处开始复制 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 的内容。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的
                
                    - 或 -
                <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                
                    源 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 中的项数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。
                </exception>
    </member>
    <member name="P:System.Windows.Media.PathSegmentCollection.Count">
      <summary>
                     获取 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 中包含的路径段数。
                </summary>
      <returns>
        <see cref="T:System.Windows.Media.PathSegmentCollection" /> 中包含的路径段数。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.GetEnumerator">
      <summary>
                    返回可循环访问集合的枚举数。
                </summary>
      <returns>
                    一个可以循环访问集合的 <see cref="T:System.Windows.Media.PathSegmentCollection.Enumerator" />。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.IndexOf(System.Windows.Media.PathSegment)">
      <summary>
                    返回指定的 <see cref="T:System.Windows.Media.PathSegment" /> 的第一个匹配项的索引。
                </summary>
      <returns>
                    指定 <see cref="T:System.Windows.Media.PathSegment" /> 的索引。
                </returns>
      <param name="value">
                    要搜索的项。
                </param>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.Insert(System.Int32,System.Windows.Media.PathSegment)">
      <summary>
                    将 <see cref="T:System.Windows.Media.PathSegment" /> 插入到此 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 的指定索引位置。
                </summary>
      <param name="index">
                    要在其中插入 <paramref name="value" />（指定的 <see cref="T:System.Windows.Media.PathSegment" />）的索引位置。
                </param>
      <param name="value">
                    要插入的项。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 中的有效索引。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.PathSegmentCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.PathSegmentCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="P:System.Windows.Media.PathSegmentCollection.Item(System.Int32)">
      <summary>
                    获取或设置位于指定的从零开始的索引处的 <see cref="T:System.Windows.Media.PathSegment" />。
                </summary>
      <returns>
                    指定索引处的项。
                </returns>
      <param name="index">
                    要获取或设置的 <see cref="T:System.Windows.Media.PathSegment" /> 对象的从零开始的索引。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 中的有效索引。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.PathSegmentCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.PathSegmentCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.Remove(System.Windows.Media.PathSegment)">
      <summary>
                    从此 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 中移除指定的 <see cref="T:System.Windows.Media.PathSegment" /> 的第一个匹配项。
                </summary>
      <returns>
                    如果要从集合中移除指定的 <see cref="T:System.Windows.Media.PathSegment" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要从此集合中移除的项。
                </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.PathSegmentCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.PathSegmentCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.RemoveAt(System.Int32)">
      <summary>
                    从此 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 中移除指定索引处的 <see cref="T:System.Windows.Media.PathSegment" />。
                </summary>
      <param name="index">
                    要移除的项的索引。
                </param>
    </member>
    <member name="P:System.Windows.Media.PathSegmentCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 是只读的，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator`1" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />。
                </summary>
      <param name="array">
                    从零开始的 <see cref="T:System.Array" />，它接收从 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 复制来的项。
                </param>
      <param name="index">
                    指定的 <see cref="T:System.Array" /> 中接收复制内容的第一个位置。
                </param>
    </member>
    <member name="P:System.Windows.Media.PathSegmentCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。
                </summary>
      <returns>
                    如果对 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.PathSegmentCollection.System#Collections#ICollection#SyncRoot">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。
                </summary>
      <returns>
                    可用于同步对 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 的访问的对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections." /><see cref="IEnumerator" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.System#Collections#IList#Add(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。
                </summary>
      <returns>
                    新元素的插入位置。
                </returns>
      <param name="value">
                    要添加到 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。
                </summary>
      <returns>
                    如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。
                </summary>
      <param name="index">
                    从零开始的索引，在该处插入 <see cref="T:System.Object" />。
                </param>
      <param name="value">
                    要插入 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 中的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="P:System.Windows.Media.PathSegmentCollection.System#Collections#IList#IsFixedSize">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 具有固定大小，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.PathSegmentCollection.System#Collections#IList#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 是只读的，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.PathSegmentCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.Item(System.Int32)" />。
                </summary>
      <returns>
                    指定索引处的元素。
                </returns>
      <param name="index">
                    要获得或设置的元素从零开始的索引。
                </param>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Remove(System.Object)" />。
                </summary>
      <param name="value">
                    要从 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 移除的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="T:System.Windows.Media.PathSegmentCollection.Enumerator">
      <summary>
                    支持在 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 上进行简单迭代。
                </summary>
    </member>
    <member name="P:System.Windows.Media.PathSegmentCollection.Enumerator.Current">
      <summary>
获取 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 中的当前项。
                </summary>
      <returns>
        <see cref="T:System.Windows.Media.PathSegmentCollection" /> 中的当前项。
                </returns>
      <exception cref="T:System.InvalidOperationException">
创建枚举数后修改了 <see cref="T:System.Windows.Media.PathSegmentCollection" />。
                </exception>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.Enumerator.MoveNext">
      <summary>
                    将枚举数前移到集合中的下一个元素。
                </summary>
      <returns>
                    如果枚举数成功前移到了下一个元素，则为 true；如果枚举数已传递至集合的结尾，则为 false。
                </returns>
      <exception cref="T:System.InvalidOperationException">
创建枚举数后修改了 <see cref="T:System.Windows.Media.PathSegmentCollection" />。
                </exception>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.Enumerator.Reset">
      <summary>
将枚举数重置到其初始位置，该位置位于 <see cref="T:System.Windows.Media.PathSegmentCollection" /> 中第一项之前。
                </summary>
      <exception cref="T:System.InvalidOperationException">
创建枚举数后修改了 <see cref="T:System.Windows.Media.PathSegmentCollection" />。
                </exception>
    </member>
    <member name="P:System.Windows.Media.PathSegmentCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。
                </summary>
    </member>
    <member name="M:System.Windows.Media.PathSegmentCollection.Enumerator.System#IDisposable#Dispose">
      <summary>
此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。
                </summary>
    </member>
    <member name="T:System.Windows.Media.Pen">
      <summary> 描述如何绘制形状的轮廓。</summary>
    </member>
    <member name="M:System.Windows.Media.Pen.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Media.Pen" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.Pen.#ctor(System.Windows.Media.Brush,System.Double)">
      <summary> 使用指定的 <see cref="T:System.Windows.Media.Brush" /> 和粗细初始化 <see cref="T:System.Windows.Media.Pen" /> 类的新实例。</summary>
      <param name="brush">此钢笔的画笔。</param>
      <param name="thickness">此钢笔的粗细。</param>
    </member>
    <member name="P:System.Windows.Media.Pen.Brush">
      <summary> 获取或设置由此 <see cref="T:System.Windows.Media.Pen" /> 生成的轮廓的填充。这是一个依赖项属性。</summary>
      <returns>由此 <see cref="T:System.Windows.Media.Pen" /> 生成的轮廓的填充。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Media.Pen.BrushProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.Pen.Brush" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.Pen.Brush" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.Pen.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.Pen" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.Pen.CloneCurrentValue">
      <summary>创建该 <see cref="T:System.Windows.Media.Pen" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.Pen.DashCap">
      <summary> 获取或设置一个值，该值指定如何绘制每条虚线的末端。这是一个依赖项属性。</summary>
      <returns>指定如何绘制每条虚线的末端。此设置将应用于每条虚线的两端。默认值为 <see cref="F:System.Windows.Media.PenLineCap.Flat" />。</returns>
    </member>
    <member name="F:System.Windows.Media.Pen.DashCapProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.Pen.DashCap" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.Pen.DashCap" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.Pen.DashStyle">
      <summary>获取或设置一个值，该值描述由此 <see cref="T:System.Windows.Media.Pen" /> 生成的虚线的样式。这是一个依赖项属性。</summary>
      <returns>一个值，描述由此 <see cref="T:System.Windows.Media.Pen" /> 生成的虚线的样式。默认值为 <see cref="P:System.Windows.Media.DashStyles.Solid" />，指示应该不存在任何虚线。</returns>
    </member>
    <member name="F:System.Windows.Media.Pen.DashStyleProperty">
      <summary>标识 <see cref="P:System.Windows.Media.Pen.DashStyle" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.Pen.DashStyle" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.Pen.EndLineCap">
      <summary> 获取或设置要在笔画末端使用的形状的类型。这是一个依赖项属性。</summary>
      <returns>笔画末端的形状类型。默认值为 <see cref="F:System.Windows.Media.PenLineCap.Flat" />。</returns>
    </member>
    <member name="F:System.Windows.Media.Pen.EndLineCapProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.Pen.EndLineCap" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.Pen.EndLineCap" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.Pen.LineJoin">
      <summary> 获取或设置在形状轮廓的顶点处使用的接合类型。这是一个依赖项属性。</summary>
      <returns>在形状轮廓的顶点处使用的接合类型。默认值为 <see cref="F:System.Windows.Media.PenLineJoin.Miter" />。</returns>
    </member>
    <member name="F:System.Windows.Media.Pen.LineJoinProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.Pen.LineJoin" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.Pen.LineJoin" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.Pen.MiterLimit">
      <summary> 获取或设置要将此钢笔的 <see cref="P:System.Windows.Media.Pen.Thickness" /> 减为一半的斜接长度的比率限制。这是一个依赖项属性。</summary>
      <returns>要将钢笔的 <see cref="P:System.Windows.Media.Pen.Thickness" /> 减为一半的斜接长度的比率限制。该值始终为大于或等于 1 的正数。默认值为 10.0。</returns>
    </member>
    <member name="F:System.Windows.Media.Pen.MiterLimitProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.Pen.MiterLimit" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.Pen.MiterLimit" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.Pen.StartLineCap">
      <summary> 获取或设置要在笔画起点使用的形状的类型。这是一个依赖项属性。</summary>
      <returns>笔画起点的形状的类型。默认值为 <see cref="F:System.Windows.Media.PenLineCap.Flat" />。</returns>
    </member>
    <member name="F:System.Windows.Media.Pen.StartLineCapProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.Pen.StartLineCap" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.Pen.StartLineCap" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.Pen.Thickness">
      <summary> 获取或设置由此 <see cref="T:System.Windows.Media.Pen" /> 生成的笔画的粗细。这是一个依赖项属性。</summary>
      <returns>由此 <see cref="T:System.Windows.Media.Pen" /> 生成的笔画的粗细。默认值为 1。</returns>
    </member>
    <member name="F:System.Windows.Media.Pen.ThicknessProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.Pen.Thickness" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.Pen.Thickness" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.PenLineCap">
      <summary>描述直线或线段末端的形状。</summary>
    </member>
    <member name="F:System.Windows.Media.PenLineCap.Flat">
      <summary>一个未超出直线上最后一点的线帽。等同于无线帽。</summary>
    </member>
    <member name="F:System.Windows.Media.PenLineCap.Square">
      <summary>一个高度等于直线粗细、长度等于直线粗细一半的矩形。</summary>
    </member>
    <member name="F:System.Windows.Media.PenLineCap.Round">
      <summary>一个直径等于直线粗细的半圆形。</summary>
    </member>
    <member name="F:System.Windows.Media.PenLineCap.Triangle">
      <summary>一个底边长度等于直线粗细的等腰直角三角形。    </summary>
    </member>
    <member name="T:System.Windows.Media.PenLineJoin">
      <summary>描述联接两条线或线段的形状。 </summary>
    </member>
    <member name="F:System.Windows.Media.PenLineJoin.Miter">
      <summary>常规角顶点。 </summary>
    </member>
    <member name="F:System.Windows.Media.PenLineJoin.Bevel">
      <summary>斜角顶点。 </summary>
    </member>
    <member name="F:System.Windows.Media.PenLineJoin.Round">
      <summary>圆角顶点。 </summary>
    </member>
    <member name="T:System.Windows.Media.PixelFormat">
      <summary>定义图像的像素格式和基于像素的图面。</summary>
    </member>
    <member name="P:System.Windows.Media.PixelFormat.BitsPerPixel">
      <summary> 获取此 <see cref="T:System.Windows.Media.PixelFormat" /> 的每像素位数 (bpp)。 </summary>
      <returns>此 <see cref="T:System.Windows.Media.PixelFormat" /> 的每像素位数 (bpp)。  </returns>
    </member>
    <member name="M:System.Windows.Media.PixelFormat.Equals(System.Object)">
      <summary> 确定指定的对象是否等于当前对象。 </summary>
      <returns>
            如果 <see cref="T:System.Windows.Media.PixelFormat" /> 等于 <paramref name="obj" />，则为 true；否则为 false。</returns>
      <param name="obj">要与当前对象进行比较的对象。</param>
    </member>
    <member name="M:System.Windows.Media.PixelFormat.Equals(System.Windows.Media.PixelFormat)">
      <summary>确定像素格式是否与给定的 <see cref="T:System.Windows.Media.PixelFormat" /> 相等。</summary>
      <returns>
            如果像素格式相等，则为 true；否则为 false。</returns>
      <param name="pixelFormat">要比较的像素格式。</param>
    </member>
    <member name="M:System.Windows.Media.PixelFormat.Equals(System.Windows.Media.PixelFormat,System.Windows.Media.PixelFormat)">
      <summary> 确定指定的 <see cref="T:System.Windows.Media.PixelFormat" /> 实例是否被视为相等。</summary>
      <returns>
            如果两个参数相等，则为 true；否则为 false。</returns>
      <param name="left">要比较是否相等的第一个 <see cref="T:System.Windows.Media.PixelFormat" /> 对象。</param>
      <param name="right">要比较是否相等的第二个 <see cref="T:System.Windows.Media.PixelFormat" /> 对象。</param>
    </member>
    <member name="M:System.Windows.Media.PixelFormat.GetHashCode">
      <summary>根据此像素格式的 <see cref="P:System.Windows.Media.PixelFormat.Masks" /> 值创建哈希代码。</summary>
      <returns>像素格式的哈希代码。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormat.Masks">
      <summary>获取与 <see cref="T:System.Windows.Media.PixelFormat" /> 关联的位掩码的集合。</summary>
      <returns>与 <see cref="T:System.Windows.Media.PixelFormat" /> 关联的位掩码和移位的集合。</returns>
    </member>
    <member name="M:System.Windows.Media.PixelFormat.op_Equality(System.Windows.Media.PixelFormat,System.Windows.Media.PixelFormat)">
      <summary> 比较两个 <see cref="T:System.Windows.Media.PixelFormat" /> 实例是否相等。 </summary>
      <returns>
            如果两个 <see cref="T:System.Windows.Media.PixelFormat" /> 对象相等，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个 <see cref="T:System.Windows.Media.PixelFormat" />。</param>
      <param name="right">要比较的第二个 <see cref="T:System.Windows.Media.PixelFormat" />。</param>
    </member>
    <member name="M:System.Windows.Media.PixelFormat.op_Inequality(System.Windows.Media.PixelFormat,System.Windows.Media.PixelFormat)">
      <summary> 比较两个 <see cref="T:System.Windows.Media.PixelFormat" /> 实例是否不相等。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Media.PixelFormat" /> 对象不相等，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个 <see cref="T:System.Windows.Media.PixelFormat" />。</param>
      <param name="right">要比较的第二个 <see cref="T:System.Windows.Media.PixelFormat" />。</param>
    </member>
    <member name="M:System.Windows.Media.PixelFormat.ToString">
      <summary> 创建此 <see cref="T:System.Windows.Media.PixelFormat" /> 的字符串表示形式。</summary>
      <returns>一个 <see cref="T:System.String" />，包含 <see cref="T:System.Windows.Media.PixelFormat" /> 的表示形式。</returns>
    </member>
    <member name="T:System.Windows.Media.PixelFormatChannelMask">
      <summary>为特定像素格式定义位掩码和移位 </summary>
    </member>
    <member name="M:System.Windows.Media.PixelFormatChannelMask.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Media.PixelFormatChannelMask" /> 等于 <paramref name="obj" />，则为 true；否则为 false。</returns>
      <param name="obj">要与当前的掩码进行比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Windows.Media.PixelFormatChannelMask.Equals(System.Windows.Media.PixelFormatChannelMask,System.Windows.Media.PixelFormatChannelMask)">
      <summary>确定两个像素格式通道掩码是否相等。</summary>
      <returns>
            如果掩码相等，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个掩码。</param>
      <param name="right">要比较的第二个掩码。</param>
    </member>
    <member name="M:System.Windows.Media.PixelFormatChannelMask.GetHashCode">
      <summary>检索掩码的哈希代码。</summary>
      <returns>掩码的哈希代码。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormatChannelMask.Mask">
      <summary>获取颜色通道的位掩码。值绝对不能大于 0xffffffff </summary>
      <returns>颜色通道的位掩码。</returns>
    </member>
    <member name="M:System.Windows.Media.PixelFormatChannelMask.op_Equality(System.Windows.Media.PixelFormatChannelMask,System.Windows.Media.PixelFormatChannelMask)">
      <summary> 比较两个 <see cref="T:System.Windows.Media.PixelFormatChannelMask" /> 实例是否相等。</summary>
      <returns>
            如果两个掩码相等，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个掩码。</param>
      <param name="right">要比较的第二个掩码。</param>
    </member>
    <member name="M:System.Windows.Media.PixelFormatChannelMask.op_Inequality(System.Windows.Media.PixelFormatChannelMask,System.Windows.Media.PixelFormatChannelMask)">
      <summary>比较两个 <see cref="T:System.Windows.Media.PixelFormatChannelMask" /> 实例是否不相等。</summary>
      <returns>
            如果两个 <see cref="T:System.Windows.Media.PixelFormatChannelMask" /> 对象不相等，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个掩码。</param>
      <param name="right">要比较的第二个掩码。</param>
    </member>
    <member name="T:System.Windows.Media.PixelFormatConverter">
      <summary>在 <see cref="T:System.Windows.Media.PixelFormat" /> 与其他数据类型之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Media.PixelFormatConverter.#ctor">
      <summary>创建 <see cref="T:System.Windows.Media.PixelFormatConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.PixelFormatConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定转换器是否能将给定类型的对象转换为 <see cref="T:System.Windows.Media.PixelFormat" /> 实例。</summary>
      <returns>
            如果转换器可以将提供的类型转换为 <see cref="T:System.Windows.Media.PixelFormat" /> 实例，则为 true；否则为 false。</returns>
      <param name="td">键入用于计算转换的上下文信息。</param>
      <param name="t">正被计算用于转换的源类型。</param>
    </member>
    <member name="M:System.Windows.Media.PixelFormatConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将 <see cref="T:System.Windows.Media.PixelFormat" /> 实例转换成不同类型。</summary>
      <returns>
            如果转换器可以转换 <see cref="T:System.Windows.Media.PixelFormat" /> 的此实例，则为 true；否则为 false。</returns>
      <param name="context">键入用于计算转换的上下文信息。</param>
      <param name="destinationType">要将转换计算为的所需类型。</param>
    </member>
    <member name="M:System.Windows.Media.PixelFormatConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>试图将指定对象转换为 <see cref="T:System.Windows.Media.PixelFormat" /> 的实例。</summary>
      <param name="td">键入用于转换的上下文信息。</param>
      <param name="ci">转换过程中考虑的区域性信息。</param>
      <param name="o">正在转换的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="o" /> 为 null 或是无效类型。</exception>
    </member>
    <member name="M:System.Windows.Media.PixelFormatConverter.ConvertFromString(System.String)">
      <summary>试图将字符串转换为 <see cref="T:System.Windows.Media.PixelFormat" />。</summary>
      <returns>
        <see cref="T:System.Windows.Media.PixelFormat" /> 的新实例。</returns>
      <param name="value">要转换为 <see cref="T:System.Windows.Media.PixelFormat" /> 的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 未能转换为已知的 <see cref="T:System.Windows.Media.PixelFormat" />。</exception>
    </member>
    <member name="M:System.Windows.Media.PixelFormatConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>试图将 <see cref="T:System.Windows.Media.PixelFormat" /> 的实例转换为指定类型。</summary>
      <returns>
        <paramref name="destinationType" /> 的新实例。</returns>
      <param name="context">用于转换的上下文信息。</param>
      <param name="culture">转换过程中考虑的区域性信息。</param>
      <param name="value">
                要转换的 <see cref="T:System.Windows.Media.PixelFormat" />。</param>
      <param name="destinationType">要进行计算以供转换的类型。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> 为 null 或不是有效类型。</exception>
    </member>
    <member name="T:System.Windows.Media.PixelFormats">
      <summary>表示受支持像素格式的集合。</summary>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Bgr101010">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Bgr101010" /> 像素格式。<see cref="P:System.Windows.Media.PixelFormats.Bgr101010" /> 是具有 32 每像素位数 (BPP) 的 sRGB 格式。每个颜色通道（蓝色、绿色和红色通道）都分配了 10 每像素位数 (BPP)。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PixelFormats.Bgr101010" /> 像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Bgr24">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Bgr24" /> 像素格式。<see cref="P:System.Windows.Media.PixelFormats.Bgr24" /> 是具有 24 每像素位数 (BPP) 的 sRGB 格式。每个颜色通道（蓝色、绿色和红色通道）都分配了 8 每像素位数 (BPP)。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PixelFormats.Bgr24" /> 像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Bgr32">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Bgr32" /> 像素格式。<see cref="P:System.Windows.Media.PixelFormats.Bgr32" /> 是具有 32 每像素位数 (BPP) 的 sRGB 格式。每个颜色通道（蓝色、绿色和红色通道）都分配了 8 每像素位数 (BPP)。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PixelFormats.Bgr32" /> 像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Bgr555">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Bgr555" /> 像素格式。<see cref="P:System.Windows.Media.PixelFormats.Bgr555" /> 是具有 16 每像素位数 (BPP) 的 sRGB 格式。每个颜色通道（蓝色、绿色和红色通道）都分配了 5 每像素位数 (BPP)。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PixelFormats.Bgr555" /> 像素格式 </returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Bgr565">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Bgr565" /> 像素格式。<see cref="P:System.Windows.Media.PixelFormats.Bgr565" /> 是具有 16 每像素位数 (BPP) 的 sRGB 格式。每个颜色通道（蓝色、绿色和红色通道）都分别分配了 5、6 和 5 每像素位数 (BPP)。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PixelFormats.Bgr565" /> 像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Bgra32">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Bgra32" /> 像素格式。<see cref="P:System.Windows.Media.PixelFormats.Bgra32" /> 是具有 32 每像素位数 (BPP) 的 sRGB 格式。每个通道（蓝色、绿色、红色和 alpha 通道）都分配了 8 每像素位数 (BPP)。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PixelFormats.Bgra32" /> 像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.BlackWhite">
      <summary>获取黑白像素格式，该格式将每像素的一位数据显示为黑色或白色。</summary>
      <returns>黑白像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Cmyk32">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Cmyk32" /> 像素格式，它可显示 32 每像素位数 (BPP)，每个颜色通道（青色、洋红色、黄色和黑色通道）分配 8 每像素位数 (BPP)。</summary>
      <returns>CMYK32 像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Default">
      <summary>获取最适合于特定操作的像素格式。</summary>
      <returns>最适合特定操作的 <see cref="T:System.Windows.Media.PixelFormat" />。</returns>
      <exception cref="T:System.NotSupportedException">访问 <see cref="T:System.Windows.Media.PixelFormat" /> 属性。</exception>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Gray16">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Gray16" /> 像素格式，它可显示每像素 16 位的灰度通道，允许使用 65536 种灰色底纹。此像素格式的 gamma 值为 1.0。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PixelFormats.Gray16" /> 像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Gray2">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Gray2" /> 像素格式，它可显示每像素 2 位的灰度通道，允许使用 4 种灰色底纹。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PixelFormats.Gray2" /> 像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Gray32Float">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Gray32Float" /> 像素格式。<see cref="P:System.Windows.Media.PixelFormats.Gray32Float" /> 可显示允许 40 亿种以上灰色底纹的 32 每像素位数 (BPP) 灰度通道。此像素格式的 gamma 值为 1.0。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PixelFormats.Gray32Float" /> 像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Gray4">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Gray4" /> 像素格式，它可显示每像素 4 位的灰度通道，允许使用 16 种灰色底纹。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PixelFormats.Gray4" /> 像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Gray8">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Gray8" /> 像素格式，它可显示每像素 8 位的灰度通道，允许使用 256 种灰色底纹。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PixelFormats.Gray8" /> 像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Indexed1">
      <summary>获取指定具有 2 种颜色的调色板位图的像素格式。</summary>
      <returns>指定具有 2 种颜色的调色板位图的像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Indexed2">
      <summary>获取指定具有 4 种颜色的调色板位图的像素格式。</summary>
      <returns>指定具有 4 种颜色的调色板位图的像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Indexed4">
      <summary>获取指定具有 16 种颜色的调色板位图的像素格式。</summary>
      <returns>指定具有 16 种颜色的调色板位图的像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Indexed8">
      <summary>获取指定具有 256 种颜色的调色板位图的像素格式。</summary>
      <returns>指定具有 256 种颜色的调色板位图的像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Pbgra32">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Pbgra32" /> 像素格式。<see cref="P:System.Windows.Media.PixelFormats.Pbgra32" /> 是具有 32 每像素位数 (BPP) 的 sRGB 格式。每个通道（蓝色、绿色、红色和 alpha 通道）都分配了 8 每像素位数 (BPP)。每个颜色通道都预先乘以 alpha 值。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PixelFormats.Pbgra32" /> 像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Prgba128Float">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Prgba128Float" /> 像素格式。<see cref="P:System.Windows.Media.PixelFormats.Prgba128Float" /> 是具有 128 每像素位数 (BPP) 的 ScRGB 格式。每个通道（红色、绿色、蓝色和 alpha 通道）都分配了 32 每像素位数 (BPP)。每个颜色通道都预先乘以 alpha 值。此像素格式的 gamma 值为 1.0。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PixelFormats.Prgba128Float" /> 像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Prgba64">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Prgba64" /> 像素格式。<see cref="P:System.Windows.Media.PixelFormats.Prgba64" /> 是具有 64 每像素位数 (BPP) 的 sRGB 格式。每个通道（蓝色、绿色、红色和 alpha 通道）都分配了 32 每像素位数 (BPP)。每个颜色通道都预先乘以 alpha 值。此像素格式的 gamma 值为 1.0。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PixelFormats.Prgba64" /> 像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Rgb128Float">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Rgb128Float" /> 像素格式。<see cref="P:System.Windows.Media.PixelFormats.Rgb128Float" /> 是具有 128 每像素位数 (BPP) 的 ScRGB 格式。每个颜色通道都分配了 32 BPP。此像素格式的 gamma 值为 1.0。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PixelFormats.Rgb128Float" /> 像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Rgb24">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Rgb24" /> 像素格式。<see cref="P:System.Windows.Media.PixelFormats.Rgb24" /> 是具有 24 每像素位数 (BPP) 的 sRGB 格式。每个颜色通道（红色、绿色和蓝色通道）都分配了 8 每像素位数 (BPP)。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PixelFormats.Rgb24" /> 像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Rgb48">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Rgb48" /> 像素格式。<see cref="P:System.Windows.Media.PixelFormats.Rgb48" /> 是具有 48 每像素位数 (BPP) 的 sRGB 格式。每个颜色通道（红色、绿色和蓝色通道）都分配了 16 每像素位数 (BPP)。此像素格式的 gamma 值为 1.0。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PixelFormats.Rgb48" /> 像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Rgba128Float">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Rgba128Float" /> 像素格式。<see cref="P:System.Windows.Media.PixelFormats.Rgba128Float" /> 是具有 128 每像素位数 (BPP) 的 ScRGB 格式。每个颜色通道都分配了 32 每像素位数 (BPP)。此像素格式的 gamma 值为 1.0。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PixelFormats.Rgba128Float" /> 像素格式。</returns>
    </member>
    <member name="P:System.Windows.Media.PixelFormats.Rgba64">
      <summary>获取 <see cref="P:System.Windows.Media.PixelFormats.Rgba64" /> 像素格式。<see cref="P:System.Windows.Media.PixelFormats.Rgba64" /> 是具有 64 每像素位数 (BPP) 的 sRGB 格式。每个通道（红色、绿色、蓝色和 alpha 通道）都分配了 16 每像素位数 (BPP)。此像素格式的 gamma 值为 1.0。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PixelFormats.Rgba64" /> 像素格式。</returns>
    </member>
    <member name="T:System.Windows.Media.PointCollection">
      <summary>
                     表示可按照索引单独访问的 <see cref="T:System.Windows.Point" /> 值的集合。
                </summary>
    </member>
    <member name="M:System.Windows.Media.PointCollection.#ctor">
      <summary>
                     初始化 <see cref="T:System.Windows.Media.PointCollection" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.Windows.Media.PointCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <summary>
                    初始化 <see cref="T:System.Windows.Media.PointCollection" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Windows.Point" /> 值集合复制的项并且具有与所复制的项数相同的初始容量。
                </summary>
      <param name="collection">
                    其项被复制到新的 <see cref="T:System.Windows.Media.PointCollection" /> 中的集合。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Windows.Media.PointCollection.#ctor(System.Int32)">
      <summary>
                    使用指定的容量初始化 <see cref="T:System.Windows.Media.PointCollection" /> 类的新实例。
                </summary>
      <param name="capacity">
                    集合最初可存储的 <see cref="T:System.Windows.Point" /> 值数。
                </param>
    </member>
    <member name="M:System.Windows.Media.PointCollection.Add(System.Windows.Point)">
      <summary>
                    将 <see cref="T:System.Windows.Point" /> 添加到 <see cref="T:System.Windows.Media.PointCollection" /> 的末尾。
                </summary>
      <param name="value">
                    要添加到 <see cref="T:System.Windows.Media.PointCollection" /> 的末尾的 <see cref="T:System.Windows.Point" />。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.PointCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.PointCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.PointCollection.Clear">
      <summary>
                    从 <see cref="T:System.Windows.Media.PointCollection" /> 中移除所有项。
                </summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.PointCollection" /> 是只读的。
                </exception>
    </member>
    <member name="M:System.Windows.Media.PointCollection.Clone">
      <summary>
                    创建此 <see cref="T:System.Windows.Media.PointCollection" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。
                </summary>
      <returns>
                    当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PointCollection.CloneCurrentValue">
      <summary>
                    创建此 <see cref="T:System.Windows.Media.PointCollection" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。
                </summary>
      <returns>
                    当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PointCollection.Contains(System.Windows.Point)">
      <summary>
                    确定 <see cref="T:System.Windows.Media.PointCollection" /> 是否包含指定的 <see cref="T:System.Windows.Point" />。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Media.PointCollection" /> 中找到 <see cref="T:System.Windows.Point" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.PointCollection" /> 中定位的 <see cref="T:System.Windows.Point" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.PointCollection.CopyTo(System.Windows.Point[],System.Int32)">
      <summary>
                    将 <see cref="T:System.Windows.Media.PointCollection" /> 的项复制到数组，从指定的数组索引处开始。
                </summary>
      <param name="array">
                    作为从 <see cref="T:System.Windows.Media.PointCollection" /> 复制的项的目标的一维数组。该数组必须具有从零开始的索引。
                </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的
                
                    - 或 -
                <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。
                
                    - 或 -
                
                    源 <see cref="T:System.Windows.Media.PointCollection" /> 中的项数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。
                </exception>
    </member>
    <member name="P:System.Windows.Media.PointCollection.Count">
      <summary>
                     获取 <see cref="T:System.Windows.Media.PointCollection" /> 中包含的项数。
                </summary>
      <returns>
        <see cref="T:System.Windows.Media.PointCollection" /> 中项的数目。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PointCollection.GetEnumerator">
      <summary>
                    返回可循环访问 <see cref="T:System.Windows.Media.PointCollection" /> 的枚举器。
                </summary>
      <returns>
                    一个 <see cref="T:System.Windows.Media.PointCollection.Enumerator" />，可用于循环访问 <see cref="T:System.Windows.Media.PointCollection" />。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PointCollection.IndexOf(System.Windows.Point)">
      <summary>
                    确定 <see cref="T:System.Windows.Media.PointCollection" /> 中指定项的索引。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Media.PointCollection" /> 找到了，则为 <paramref name="value" /> 的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.PointCollection" /> 中定位的 <see cref="T:System.Windows.Point" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.PointCollection.Insert(System.Int32,System.Windows.Point)">
      <summary>
                     将 <see cref="T:System.Windows.Point" /> 插入 <see cref="T:System.Windows.Media.PointCollection" /> 中的指定索引处。
                </summary>
      <param name="index">
                    从零开始的索引，应在该位置插入 <paramref name="value" />。
                </param>
      <param name="value">
                    要插入 <see cref="T:System.Windows.Media.PointCollection" /> 中的 <see cref="T:System.Windows.Point" />。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Windows.Media.PointCollection" /> 中的有效索引。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.PointCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.PointCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="P:System.Windows.Media.PointCollection.Item(System.Int32)">
      <summary>
                     获取或设置指定索引处的 <see cref="T:System.Windows.Point" />。
                </summary>
      <returns>
                    指定索引处的 <see cref="T:System.Windows.Point" />。
                </returns>
      <param name="index">
                    要获取或设置的 <see cref="T:System.Windows.Point" /> 的从零开始的索引。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Windows.Media.PointCollection" /> 中的有效索引。
                </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.PointCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.PointCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.PointCollection.Parse(System.String)">
      <summary>
                    将点集合的 <see cref="T:System.String" /> 表示形式转换为等效的 <see cref="T:System.Windows.Media.PointCollection" />。
                </summary>
      <returns>
                    等效的 <see cref="T:System.Windows.Media.PointCollection" />。
                </returns>
      <param name="source">
                    点集合的 <see cref="T:System.String" /> 表示形式。
                </param>
    </member>
    <member name="M:System.Windows.Media.PointCollection.Remove(System.Windows.Point)">
      <summary>
                    从 <see cref="T:System.Windows.Media.PointCollection" /> 中移除指定的 <see cref="T:System.Windows.Point" /> 的第一个匹配项。
                </summary>
      <returns>
                    如果从 <see cref="T:System.Windows.Media.PointCollection" /> 中移除了 <paramref name="value" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要从 <see cref="T:System.Windows.Media.PointCollection" /> 移除的 <see cref="T:System.Windows.Point" />。
                </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Windows.Media.PointCollection" /> 是只读的。
                
                    - 或 -
                <see cref="T:System.Windows.Media.PointCollection" /> 具有固定大小。
                </exception>
    </member>
    <member name="M:System.Windows.Media.PointCollection.RemoveAt(System.Int32)">
      <summary>
                     移除指定索引处的 <see cref="T:System.Windows.Point" />。
                </summary>
      <param name="index">
                    要移除的 <see cref="T:System.Windows.Point" /> 的从零开始的索引。
                </param>
    </member>
    <member name="P:System.Windows.Media.PointCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.PointCollection" /> 是只读的，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PointCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator`1" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PointCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />。
                </summary>
      <param name="array">
                    从零开始的 <see cref="T:System.Array" />，它接收从 <see cref="T:System.Windows.Media.PointCollection" /> 复制来的项。
                </param>
      <param name="index">
                    指定的 <see cref="T:System.Array" /> 中接收复制内容的第一个位置。
                </param>
    </member>
    <member name="P:System.Windows.Media.PointCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。
                </summary>
      <returns>
                    如果对 <see cref="T:System.Windows.Media.PointCollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.PointCollection.System#Collections#ICollection#SyncRoot">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。
                </summary>
      <returns>
                    可用于同步对 <see cref="T:System.Windows.Media.PointCollection" /> 的访问的对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PointCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections." /><see cref="IEnumerator" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PointCollection.System#Collections#IList#Add(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。
                </summary>
      <returns>
                    新元素的插入位置。
                </returns>
      <param name="value">
                    要添加到 <see cref="T:System.Windows.Media.PointCollection" /> 的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.PointCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Media.PointCollection" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.PointCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.PointCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。
                </summary>
      <returns>
                    如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Media.PointCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.PointCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。
                </summary>
      <param name="index">
                    从零开始的索引，在该处插入 <see cref="T:System.Object" />。
                </param>
      <param name="value">
                    要插入 <see cref="T:System.Windows.Media.PointCollection" /> 中的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="P:System.Windows.Media.PointCollection.System#Collections#IList#IsFixedSize">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.PointCollection" /> 具有固定大小，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.PointCollection.System#Collections#IList#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Media.PointCollection" /> 是只读的，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Media.PointCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.Item(System.Int32)" />。
                </summary>
      <returns>
                    指定索引处的元素。
                </returns>
      <param name="index">
                    要获得或设置的元素从零开始的索引。
                </param>
    </member>
    <member name="M:System.Windows.Media.PointCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Remove(System.Object)" />。
                </summary>
      <param name="value">
                    要从 <see cref="T:System.Windows.Media.PointCollection" /> 移除的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.PointCollection.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />。
                </summary>
      <returns>
                    一个 <see cref="T:System.String" />，包含具有指定格式的当前实例的值。
                </returns>
      <param name="format">
                    指定要使用的格式的 <see cref="T:System." /><see cref="String" />。
                
                    - 或 -
                
                    如果为 null（在 Visual Basic 中为 Nothing），则使用为 <see cref="T:System.IFormattable" /> 实现的类型定义的默认格式。
                </param>
      <param name="provider">
                    用于格式化该值的 <see cref="T:System." /><see cref="IFormatProvider" />。
                
                    - 或 -
                
                    如果为 null（在 Visual Basic 中为 Nothing），则从操作系统的当前区域设置中获取数字信息。
                </param>
    </member>
    <member name="M:System.Windows.Media.PointCollection.ToString">
      <summary>
创建此 <see cref="T:System.Windows.Media.PointCollection" /> 的 <see cref="T:System.String" /> 表示形式。
                </summary>
      <returns>
返回一个 <see cref="T:System.String" />，它包含此 <see cref="T:System.Windows.Media.PointCollection" /> 中的 <see cref="T:System.Windows.Point" /> 结构的 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 值。
                </returns>
    </member>
    <member name="M:System.Windows.Media.PointCollection.ToString(System.IFormatProvider)">
      <summary>
创建此 <see cref="T:System.Windows.Media.PointCollection" /> 的 <see cref="T:System.String" /> 表示形式。
                </summary>
      <returns>
返回一个 <see cref="T:System.String" />，它包含此 <see cref="T:System.Windows.Media.PointCollection" /> 中的 <see cref="T:System.Windows.Point" /> 结构的 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 值。
                </returns>
      <param name="provider">
                    特定于区域性的格式设置信息。
                </param>
    </member>
    <member name="T:System.Windows.Media.PointCollection.Enumerator">
      <summary>枚举 <see cref="T:System.Windows.Media.PointCollection" /> 中的 <see cref="T:System.Windows.Point" /> 项。 </summary>
    </member>
    <member name="P:System.Windows.Media.PointCollection.Enumerator.Current">
      <summary>获取集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
      <exception cref="T:System.InvalidOperationException">创建枚举数后修改了 <see cref="T:System.Windows.Media.PointCollection" />。</exception>
    </member>
    <member name="M:System.Windows.Media.PointCollection.Enumerator.MoveNext">
      <summary>将枚举数前移到集合中的下一个元素。</summary>
      <returns>
            如果枚举数成功前移到了下一个元素，则为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">创建枚举数后修改了 <see cref="T:System.Windows.Media.PointCollection" />。</exception>
    </member>
    <member name="M:System.Windows.Media.PointCollection.Enumerator.Reset">
      <summary>将枚举数重置至其初始位置，即位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">创建枚举数后修改了 <see cref="T:System.Windows.Media.PointCollection" />。</exception>
    </member>
    <member name="P:System.Windows.Media.PointCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Media.PointCollection.Enumerator.System#IDisposable#Dispose">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="T:System.Windows.Media.PointCollectionConverter">
      <summary>在 <see cref="T:System.Windows.Media.PointCollection" /> 实例与其他类型的实例之间进行转换。 </summary>
    </member>
    <member name="M:System.Windows.Media.PointCollectionConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.PointCollectionConverter" /> 类的一个新实例。 </summary>
    </member>
    <member name="M:System.Windows.Media.PointCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可将一个对象从指定类型转换为 <see cref="T:System.Windows.Media.PointCollection" /> 的实例。  </summary>
      <returns>
如果该类型可以转换为 <see cref="T:System.Windows.Media.PointCollection" />，则为 true；否则为 false。</returns>
      <param name="context">类型的上下文信息。</param>
      <param name="sourceType">正在为了进行转换而计算的源的类型。</param>
    </member>
    <member name="M:System.Windows.Media.PointCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可以将 <see cref="T:System.Windows.Media.PointCollection" /> 的实例转换为其他类型。 </summary>
      <returns>
如果此 <see cref="T:System.Windows.Media.PointCollection" /> 可以转换为 <paramref name="destinationType" />，则为 true；否则为 false。</returns>
      <param name="context">类型的上下文信息。</param>
      <param name="destinationType">在计算此 <see cref="T:System.Windows.Media.PointCollection" /> 以进行转换时所需的类型。</param>
    </member>
    <member name="M:System.Windows.Media.PointCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>试图将指定对象转换为 <see cref="T:System.Windows.Media.PointCollection" />。 </summary>
      <returns>由转换 <paramref name="value" /> 创建的 <see cref="T:System.Windows.Media.PointCollection" />。</returns>
      <param name="context">类型的上下文信息。</param>
      <param name="culture">正在转换的类型的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">正在转换的对象。</param>
      <exception cref="T:System.NotSupportedException">指定的对象为 Null 或者为无法转换为 <see cref="T:System.Windows.Media.PointCollection" /> 的类型。</exception>
    </member>
    <member name="M:System.Windows.Media.PointCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>试图将 <see cref="T:System.Windows.Media.PointCollection" /> 转换为指定类型。 </summary>
      <returns>由转换此 <see cref="T:System.Windows.Media.PointCollection" /> 创建的对象。</returns>
      <param name="context">类型的上下文信息。</param>
      <param name="culture">要转换的类型的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的 <see cref="T:System.Windows.Media.PointCollection" />。</param>
      <param name="destinationType">要将此 <see cref="T:System.Windows.Media.PointCollection" /> 转换为的类型。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> 为 Null 或不是 <see cref="T:System.Windows.Media.PointCollection" />；或 <paramref name="destinationType" /> 不是一种有效的转换类型。</exception>
    </member>
    <member name="T:System.Windows.Media.PointHitTestParameters">
      <summary>将 <see cref="T:System.Windows.Point" /> 指定为将用于可视对象的命中测试的参数。</summary>
    </member>
    <member name="M:System.Windows.Media.PointHitTestParameters.#ctor(System.Windows.Point)">
      <summary>使用 <see cref="T:System.Windows.Point" /> 初始化 <see cref="T:System.Windows.Media.PointHitTestParameters" /> 类的一个新实例。</summary>
      <param name="point">指定为 <see cref="T:System.Windows.Point" /> 值的参数。</param>
    </member>
    <member name="P:System.Windows.Media.PointHitTestParameters.HitPoint">
      <summary>获取要对其进行命中测试的 <see cref="T:System.Windows.Point" />。</summary>
      <returns>要对其进行命中测试的 <see cref="T:System.Windows.Point" />。</returns>
    </member>
    <member name="T:System.Windows.Media.PointHitTestResult">
      <summary>表示将 <see cref="T:System.Windows.Point" /> 用作命中测试参数的命中测试的结果。</summary>
    </member>
    <member name="M:System.Windows.Media.PointHitTestResult.#ctor(System.Windows.Media.Visual,System.Windows.Point)">
      <summary>初始化 <see cref="T:System.Windows.Media.PointHitTestResult" /> 类的一个新实例。</summary>
      <param name="visualHit">表示命中测试结果的 <see cref="T:System.Windows.Media.Visual" /> 对象。</param>
      <param name="pointHit">表示命中测试结果的 <see cref="T:System.Windows.Point" /> 对象。</param>
    </member>
    <member name="P:System.Windows.Media.PointHitTestResult.PointHit">
      <summary>获取从命中测试结果中返回的点值。</summary>
      <returns>一个表示命中测试结果的 <see cref="T:System.Windows.Point" /> 对象。</returns>
    </member>
    <member name="P:System.Windows.Media.PointHitTestResult.VisualHit">
      <summary>获取从命中测试结果中返回的可视对象。</summary>
      <returns>一个表示命中测试结果的 <see cref="T:System.Windows.Media.Visual" /> 对象。</returns>
    </member>
    <member name="T:System.Windows.Media.PolyBezierSegment">
      <summary>表示一条或多条三次方贝塞尔曲线。</summary>
    </member>
    <member name="M:System.Windows.Media.PolyBezierSegment.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Media.PolyBezierSegment" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.PolyBezierSegment.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Boolean)">
      <summary>使用指定的 <see cref="T:System.Windows.Point" /> 对象集合和一个指定是否绘制线段的值初始化 <see cref="T:System.Windows.Media.PolyBezierSegment" /> 类的新实例。</summary>
      <param name="points">指定三次方贝塞尔曲线段几何图形的点的集合。</param>
      <param name="isStroked">指定是否绘制线段的值。</param>
    </member>
    <member name="M:System.Windows.Media.PolyBezierSegment.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.PolyBezierSegment" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.PolyBezierSegment.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.PolyBezierSegment" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.PolyBezierSegment.Points">
      <summary> 获取或设置定义此 <see cref="T:System.Windows.Media.PolyBezierSegment" /> 对象的 <see cref="T:System.Windows.Media.PointCollection" />。 这是一个依赖项属性。</summary>
      <returns>定义此 <see cref="T:System.Windows.Media.PolyBezierSegment" /> 对象的集合。</returns>
    </member>
    <member name="F:System.Windows.Media.PolyBezierSegment.PointsProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.PolyBezierSegment.Points" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PolyBezierSegment.Points" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.PolyLineSegment">
      <summary> 表示由 <see cref="T:System.Windows.Media.PointCollection" /> 定义的线段集合，每个 <see cref="T:System.Windows.Point" /> 指定线段的终点。</summary>
    </member>
    <member name="M:System.Windows.Media.PolyLineSegment.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Media.PolyLineSegment" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.PolyLineSegment.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Boolean)">
      <summary>使用确定线段的点的指定列表和指示是否绘制线段的值初始化 <see cref="T:System.Windows.Media.PolyLineSegment" /> 类的新实例。</summary>
      <param name="points">一个点的集合，这些点确定 <see cref="T:System.Windows.Media.PolyLineSegment" /> 的线段。</param>
      <param name="isStroked">true 表示绘制线段；false 表示不绘制线段。</param>
    </member>
    <member name="M:System.Windows.Media.PolyLineSegment.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.PolyLineSegment" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.PolyLineSegment.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.PolyLineSegment" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.PolyLineSegment.Points">
      <summary> 获取或设置 <see cref="T:System.Windows.Point" /> 结构的集合，这些结构定义了此 <see cref="T:System.Windows.Media.PolyLineSegment" /> 对象。这是一个依赖项属性。</summary>
      <returns>此 <see cref="T:System.Windows.Media.PolyLineSegment" /> 对象的形状。</returns>
    </member>
    <member name="F:System.Windows.Media.PolyLineSegment.PointsProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.PolyLineSegment.Points" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PolyLineSegment.Points" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.PolyQuadraticBezierSegment">
      <summary> 表示一系列二次贝塞尔线段。</summary>
    </member>
    <member name="M:System.Windows.Media.PolyQuadraticBezierSegment.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Media.PolyQuadraticBezierSegment" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.PolyQuadraticBezierSegment.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Boolean)">
      <summary>使用指定的 <see cref="T:System.Windows.Point" /> 对象集合和一个指定是否为线段描边的值，来初始化 <see cref="T:System.Windows.Media.PolyQuadraticBezierSegment" /> 类的一个新实例。</summary>
      <param name="points">指定贝塞尔曲线线段几何图形的点的集合。</param>
      <param name="isStroked">
                如果为线段描边，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Windows.Media.PolyQuadraticBezierSegment.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.PolyQuadraticBezierSegment" /> 的一个可修改复本，从而制作此对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.PolyQuadraticBezierSegment.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.PolyQuadraticBezierSegment" /> 对象的一个可修改复本，从而制作此对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.PolyQuadraticBezierSegment.Points">
      <summary> 获取或设置定义此 <see cref="T:System.Windows.Media.PolyQuadraticBezierSegment" /> 对象的 <see cref="T:System.Windows.Media.PointCollection" />。这是一个依赖项属性。</summary>
      <returns>一个集合，定义此 <see cref="T:System.Windows.Media.PolyQuadraticBezierSegment" /> 对象的形状。默认值是一个空集合。</returns>
    </member>
    <member name="F:System.Windows.Media.PolyQuadraticBezierSegment.PointsProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.PolyQuadraticBezierSegment.Points" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.PolyQuadraticBezierSegment.Points" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.QuadraticBezierSegment">
      <summary>在 <see cref="T:System.Windows.Media.PathFigure" /> 的两点之间创建一条二次贝塞尔曲线。</summary>
    </member>
    <member name="M:System.Windows.Media.QuadraticBezierSegment.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.QuadraticBezierSegment" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.QuadraticBezierSegment.#ctor(System.Windows.Point,System.Windows.Point,System.Boolean)">
      <summary>使用指定的控制点、终点和指示是否绘制该 <see cref="T:System.Windows.Media.QuadraticBezierSegment" /> 的布尔值来初始化 <see cref="T:System.Windows.Media.QuadraticBezierSegment" /> 类的新实例。 </summary>
      <param name="point1">此 <see cref="T:System.Windows.Media.QuadraticBezierSegment" /> 的控制点。</param>
      <param name="point2">此 <see cref="T:System.Windows.Media.QuadraticBezierSegment" /> 的终点。</param>
      <param name="isStroked">
                如果要绘制该 <see cref="T:System.Windows.Media.QuadraticBezierSegment" />，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Windows.Media.QuadraticBezierSegment.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.QuadraticBezierSegment" /> 的可修改复本，从而制作该对象的值的深层副本。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.QuadraticBezierSegment.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.QuadraticBezierSegment" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.QuadraticBezierSegment.Point1">
      <summary>获取或设置曲线的控制 <see cref="T:System.Windows.Point" />。这是一个依赖项属性。</summary>
      <returns>此 <see cref="T:System.Windows.Media.QuadraticBezierSegment" /> 的控制点。</returns>
    </member>
    <member name="F:System.Windows.Media.QuadraticBezierSegment.Point1Property">
      <summary>标识 <see cref="P:System.Windows.Media.QuadraticBezierSegment.Point1" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.QuadraticBezierSegment.Point1" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.QuadraticBezierSegment.Point2">
      <summary>获取或设置此 <see cref="T:System.Windows.Media.QuadraticBezierSegment" /> 的终 <see cref="T:System.Windows.Point" />。这是一个依赖项属性。</summary>
      <returns>此 <see cref="T:System.Windows.Media.QuadraticBezierSegment" /> 的终点。</returns>
    </member>
    <member name="F:System.Windows.Media.QuadraticBezierSegment.Point2Property">
      <summary>标识 <see cref="P:System.Windows.Media.QuadraticBezierSegment.Point2" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.QuadraticBezierSegment.Point2" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.RadialGradientBrush">
      <summary>使用径向渐变绘制区域。焦点定义渐变的开始，而圆定义渐变的终点。</summary>
    </member>
    <member name="M:System.Windows.Media.RadialGradientBrush.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Media.RadialGradientBrush" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.RadialGradientBrush.#ctor(System.Windows.Media.Color,System.Windows.Media.Color)">
      <summary> 使用指定的起点和终点颜色初始化 <see cref="T:System.Windows.Media.RadialGradientBrush" /> 类的新实例。</summary>
      <param name="startColor">径向渐变的焦点 (<see cref="P:System.Windows.Media.RadialGradientBrush.GradientOrigin" />) 处的颜色值。</param>
      <param name="endColor">径向渐变的外边缘处的颜色值。</param>
    </member>
    <member name="M:System.Windows.Media.RadialGradientBrush.#ctor(System.Windows.Media.GradientStopCollection)">
      <summary> 初始化 <see cref="T:System.Windows.Media.RadialGradientBrush" /> 类的新实例，该实例具有指定的渐变停止点。</summary>
      <param name="gradientStopCollection">要在此画笔上设置的渐变停止点。</param>
    </member>
    <member name="P:System.Windows.Media.RadialGradientBrush.Center">
      <summary> 获取或设置径向渐变最外面的圆的圆心。</summary>
      <returns>位于径向渐变中心处的二维点。</returns>
    </member>
    <member name="F:System.Windows.Media.RadialGradientBrush.CenterProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.RadialGradientBrush.Center" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.RadialGradientBrush.Center" /> 依赖项属性标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.RadialGradientBrush.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.RadialGradientBrush" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.RadialGradientBrush.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.RadialGradientBrush" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.RadialGradientBrush.GradientOrigin">
      <summary> 获取或设置定义渐变开始的二维焦点的位置。</summary>
      <returns>渐变的二维焦点的位置。默认值为 (0.5, 0.5)。</returns>
    </member>
    <member name="F:System.Windows.Media.RadialGradientBrush.GradientOriginProperty">
      <summary>标识 <see cref="P:System.Windows.Media.RadialGradientBrush.GradientOrigin" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.RadialGradientBrush.GradientOrigin" /> 依赖项属性标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.RadialGradientBrush.RadiusX">
      <summary> 获取或设置径向渐变最外面的圆的水平半径。</summary>
      <returns>径向渐变最外面的圆的水平半径。默认值为 0.5。</returns>
    </member>
    <member name="F:System.Windows.Media.RadialGradientBrush.RadiusXProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.RadialGradientBrush.RadiusX" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.RadialGradientBrush.RadiusX" /> 依赖项属性标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.RadialGradientBrush.RadiusY">
      <summary> 获取或设置径向渐变最外面的圆的垂直半径。</summary>
      <returns>径向渐变最外面的圆的垂直半径。默认值为 0.5。</returns>
    </member>
    <member name="F:System.Windows.Media.RadialGradientBrush.RadiusYProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.RadialGradientBrush.RadiusY" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.RadialGradientBrush.RadiusY" /> 依赖项属性标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.RectangleGeometry">
      <summary> 描述二维矩形。</summary>
    </member>
    <member name="M:System.Windows.Media.RectangleGeometry.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Media.RectangleGeometry" /> 类的新实例，并创建零区域的矩形。</summary>
    </member>
    <member name="M:System.Windows.Media.RectangleGeometry.#ctor(System.Windows.Rect)">
      <summary> 初始化 <see cref="T:System.Windows.Media.RectangleGeometry" /> 类的新实例，并指定它的尺寸。</summary>
      <param name="rect">一个具有矩形尺寸的 <see cref="T:System.Windows.Rect" /> 结构。</param>
    </member>
    <member name="M:System.Windows.Media.RectangleGeometry.#ctor(System.Windows.Rect,System.Double,System.Double)">
      <summary> 初始化 <see cref="T:System.Windows.Media.RectangleGeometry" /> 类的新实例。</summary>
      <param name="rect">一个具有矩形尺寸的 <see cref="T:System.Windows.Rect" /> 结构。</param>
      <param name="radiusX">圆角半径，矩形的上边缘和下边缘在此处连接。</param>
      <param name="radiusY">圆角半径，矩形的左边缘和右边缘在此处连接。</param>
    </member>
    <member name="M:System.Windows.Media.RectangleGeometry.#ctor(System.Windows.Rect,System.Double,System.Double,System.Windows.Media.Transform)">
      <summary> 初始化 <see cref="T:System.Windows.Media.RectangleGeometry" /> 类的新实例。</summary>
      <param name="rect">一个具有矩形尺寸的 <see cref="T:System.Windows.Rect" /> 结构。</param>
      <param name="radiusX">圆角半径，矩形的上边缘和下边缘在此处连接。</param>
      <param name="radiusY">圆角半径，矩形的左边缘和右边缘在此处连接。</param>
      <param name="transform">要应用于几何图形的转换。</param>
    </member>
    <member name="P:System.Windows.Media.RectangleGeometry.Bounds">
      <summary> 获取一个 <see cref="T:System.Windows.Rect" />，它指定 <see cref="T:System.Windows.Media.RectangleGeometry" /> 的边界框。此方法不考虑任何钢笔。</summary>
      <returns>
        <see cref="T:System.Windows.Media.RectangleGeometry" /> 的边界框。</returns>
    </member>
    <member name="M:System.Windows.Media.RectangleGeometry.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.RectangleGeometry" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.RectangleGeometry.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.RectangleGeometry" /> 对象的可修改复本，从而制作该对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.RectangleGeometry.GetArea(System.Double,System.Windows.Media.ToleranceType)">
      <summary> 获取此 <see cref="T:System.Windows.Media.RectangleGeometry" /> 对象填充区域的面积。</summary>
      <returns>此 <see cref="T:System.Windows.Media.RectangleGeometry" /> 对象填充区域的面积。</returns>
      <param name="tolerance">计算的容错。</param>
      <param name="type">指定解释容错的方式。</param>
    </member>
    <member name="M:System.Windows.Media.RectangleGeometry.IsEmpty">
      <summary> 确定此 <see cref="T:System.Windows.Media.RectangleGeometry" /> 对象是否为空。</summary>
      <returns>
            如果此 <see cref="T:System.Windows.Media.RectangleGeometry" /> 为空，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.RectangleGeometry.MayHaveCurves">
      <summary> 确定此 <see cref="T:System.Windows.Media.RectangleGeometry" /> 对象是否可以具有曲线段。</summary>
      <returns>
            如果此 <see cref="T:System.Windows.Media.RectangleGeometry" /> 对象可以具有曲线段，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.RectangleGeometry.RadiusX">
      <summary>获取或设置椭圆的 X 轴半径，用于圆角化矩形的角。 这是一个依赖项属性。</summary>
      <returns>一个大于或等于零且小于或等于矩形宽度一半的值，描述用于圆角化矩形角的椭圆 X 轴半径。将大于矩形宽度一半的值视为与矩形宽度的一半相等。将负值视为正值。默认值为 0.0。</returns>
    </member>
    <member name="F:System.Windows.Media.RectangleGeometry.RadiusXProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.RectangleGeometry.RadiusX" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.RectangleGeometry.RadiusX" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.RectangleGeometry.RadiusY">
      <summary>获取或设置椭圆的 Y 轴半径，用于圆角化矩形的角。 这是一个依赖项属性。</summary>
      <returns>一个大于或等于零且小于或等于矩形宽度一半的值，描述用于圆角化矩形角的椭圆 Y 轴半径。将大于矩形宽度一半的值视为与矩形宽度的一半相等。将负值视为正值。默认值为 0.0。</returns>
    </member>
    <member name="F:System.Windows.Media.RectangleGeometry.RadiusYProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.RectangleGeometry.RadiusY" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.RectangleGeometry.RadiusY" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.RectangleGeometry.Rect">
      <summary>获取或设置矩形的尺寸。 这是一个依赖项属性。</summary>
      <returns>矩形的位置和大小。默认值为 <see cref="P:System.Windows.Rect.Empty" />。</returns>
    </member>
    <member name="F:System.Windows.Media.RectangleGeometry.RectProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.RectangleGeometry.Rect" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.RectangleGeometry.Rect" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.RenderCapability">
      <summary>
                    使 WPF 应用程序可为其关联的 <see cref="T:System.Windows.Threading.Dispatcher" /> 对象查询当前的呈现层并注册更改通知。
                </summary>
    </member>
    <member name="P:System.Windows.Media.RenderCapability.Tier">
      <summary>
                    获取一个值，该值指示当前线程的呈现层。
                </summary>
      <returns>
                    一个 <see cref="T:System.Int32" /> 值，该值的高序位字与当前线程的呈现层对应。
                </returns>
    </member>
    <member name="E:System.Windows.Media.RenderCapability.TierChanged">
      <summary>
                    在呈现层已为当前线程的 <see cref="T:System.Windows.Threading.Dispatcher" /> 对象而更改时发生。
                </summary>
    </member>
    <member name="T:System.Windows.Media.RenderingEventArgs">
      <summary>
        <see cref="E:System.Windows.Media.CompositionTarget.Rendering" /> 事件的必需的参数。</summary>
    </member>
    <member name="P:System.Windows.Media.RenderingEventArgs.RenderingTime">
      <summary>获取一个值，该值表示呈现动画的下一个帧所需的估计时间。</summary>
      <returns>呈现下一个帧所需的估计时间。</returns>
    </member>
    <member name="T:System.Windows.Media.RenderOptions">
      <summary>提供用于控制对象的呈现行为的选项。</summary>
    </member>
    <member name="P:System.Windows.Media.RenderOptions.BitmapScalingMode">
      <summary>获取或设置给定 <see cref="T:System.Windows.DependencyObject" /> 的 <see cref="T:System.Windows.Media.BitmapScalingMode" />。</summary>
      <returns>与此 <see cref="T:System.Windows.DependencyObject" /> 相关联的 <see cref="T:System.Windows.Media.BitmapScalingMode" /> 值。</returns>
    </member>
    <member name="F:System.Windows.Media.RenderOptions.BitmapScalingModeProperty">
      <summary>标识 <see cref="P:System.Windows.Media.RenderOptions.BitmapScalingMode" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.RenderOptions.BitmapScalingMode" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMaximum">
      <summary>获取或设置给定 <see cref="T:System.Windows.DependencyObject" /> 的缓存失效阈值最大值。</summary>
      <returns>一个表示缓存失效阈值最大值的 <see cref="T:System.Double" /> 值。</returns>
    </member>
    <member name="F:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMaximumProperty">
      <summary>标识 <see cref="P:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMaximum" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMaximum" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMinimum">
      <summary>获取或设置给定 <see cref="T:System.Windows.DependencyObject" /> 的缓存失效阈值最小值。</summary>
      <returns>一个表示缓存失效阈值最小值的 <see cref="T:System.Double" /> 值。</returns>
    </member>
    <member name="F:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMinimumProperty">
      <summary>标识 <see cref="P:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMinimum" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMinimum" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.RenderOptions.CachingHint">
      <summary>获取或设置一个值，该值指示应尽量缓存已呈现内容。</summary>
      <returns>用于关联的 <see cref="T:System.Windows.DependencyObject" /> 的 <see cref="T:System.Windows.Media.CachingHint" /> 值。</returns>
    </member>
    <member name="F:System.Windows.Media.RenderOptions.CachingHintProperty">
      <summary>标识 <see cref="P:System.Windows.Media.RenderOptions.CachingHint" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.RenderOptions.CachingHint" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.RenderOptions.EdgeMode">
      <summary>为非文本基元获取或设置可确定其边缘呈现方式的 <see cref="T:System.Windows.Media.EdgeMode" /> 枚举值。</summary>
      <returns>用于关联的 <see cref="T:System.Windows.DependencyObject" /> 的 <see cref="T:System.Windows.Media.EdgeMode" /> 值。</returns>
    </member>
    <member name="F:System.Windows.Media.RenderOptions.EdgeModeProperty">
      <summary>标识 <see cref="P:System.Windows.Media.RenderOptions.EdgeMode" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.RenderOptions.EdgeMode" /> 附加属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.RenderOptions.GetBitmapScalingMode(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Media.RenderOptions.BitmapScalingMode" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Media.RenderOptions.BitmapScalingMode" /> 附加属性的当前值。</returns>
      <param name="target">从中检索 <see cref="P:System.Windows.Media.RenderOptions.BitmapScalingMode" /> 附加属性的值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Media.RenderOptions.GetCacheInvalidationThresholdMaximum(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMaximum" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象的 <see cref="P:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMaximum" /> 附加属性的当前值。</returns>
      <param name="target">从中检索 <see cref="P:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMaximum" /> 附加属性的值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Media.RenderOptions.GetCacheInvalidationThresholdMinimum(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMinimum" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象的 <see cref="P:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMinimum" /> 附加属性的当前值。</returns>
      <param name="target">从中检索 <see cref="P:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMinimum" /> 附加属性的值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Media.RenderOptions.GetCachingHint(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Media.RenderOptions.CachingHint" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象的 <see cref="P:System.Windows.Media.RenderOptions.CachingHint" /> 附加属性的当前值。</returns>
      <param name="target">从中检索 <see cref="P:System.Windows.Media.RenderOptions.CachingHint" /> 附加属性的值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Media.RenderOptions.GetEdgeMode(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Media.RenderOptions.EdgeMode" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象的 <see cref="P:System.Windows.Media.RenderOptions.EdgeMode" /> 附加属性的当前值。</returns>
      <param name="target">从中检索 <see cref="P:System.Windows.Media.RenderOptions.EdgeMode" /> 附加属性的值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Media.RenderOptions.SetBitmapScalingMode(System.Windows.DependencyObject,System.Windows.Media.BitmapScalingMode)">
      <summary>设置指定依赖项对象的 <see cref="P:System.Windows.Media.RenderOptions.BitmapScalingMode" /> 附加属性的值。</summary>
      <param name="target">要设置其 <see cref="P:System.Windows.Media.RenderOptions.BitmapScalingMode" /> 属性的值的依赖项对象。</param>
      <param name="bitmapScalingMode">为属性设置的新值。</param>
    </member>
    <member name="M:System.Windows.Media.RenderOptions.SetCacheInvalidationThresholdMaximum(System.Windows.DependencyObject,System.Double)">
      <summary>设置指定依赖项对象的 <see cref="P:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMaximum" /> 附加属性的值。</summary>
      <param name="target">要设置其 <see cref="P:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMaximum" /> 属性的值的依赖项对象。</param>
      <param name="cacheInvalidationThresholdMaximum">为属性设置的新值。</param>
    </member>
    <member name="M:System.Windows.Media.RenderOptions.SetCacheInvalidationThresholdMinimum(System.Windows.DependencyObject,System.Double)">
      <summary>设置指定依赖项对象的 <see cref="P:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMinimum" /> 附加属性的值。</summary>
      <param name="target">要设置其 <see cref="P:System.Windows.Media.RenderOptions.CacheInvalidationThresholdMinimum" /> 属性的值的依赖项对象。</param>
      <param name="cacheInvalidationThresholdMinimum">为属性设置的新值。</param>
    </member>
    <member name="M:System.Windows.Media.RenderOptions.SetCachingHint(System.Windows.DependencyObject,System.Windows.Media.CachingHint)">
      <summary>设置指定依赖项对象的 <see cref="P:System.Windows.Media.RenderOptions.CachingHint" /> 附加属性的值。</summary>
      <param name="target">要设置其 <see cref="P:System.Windows.Media.RenderOptions.CachingHint" /> 属性的值的依赖项对象。</param>
      <param name="cachingHint">为属性设置的新值。</param>
    </member>
    <member name="M:System.Windows.Media.RenderOptions.SetEdgeMode(System.Windows.DependencyObject,System.Windows.Media.EdgeMode)">
      <summary>设置指定依赖项对象的 <see cref="P:System.Windows.Media.RenderOptions.EdgeMode" /> 附加属性的值。</summary>
      <param name="target">要设置其 <see cref="P:System.Windows.Media.RenderOptions.EdgeMode" /> 属性的值的依赖项对象。</param>
      <param name="edgeMode">为属性设置的新值。</param>
    </member>
    <member name="T:System.Windows.Media.RotateTransform">
      <summary>在 二维 x-y 坐标系内围绕指定点按照顺时针方向旋转对象。</summary>
    </member>
    <member name="M:System.Windows.Media.RotateTransform.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.RotateTransform" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.RotateTransform.#ctor(System.Double)">
      <summary>初始化 <see cref="T:System.Windows.Media.RotateTransform" /> 类的一个新实例，该实例具有指定的顺时针旋转角度（以度为单位）。旋转中心位于原点 (0,0)。</summary>
      <param name="angle">顺时针旋转角度，以度为单位。</param>
    </member>
    <member name="M:System.Windows.Media.RotateTransform.#ctor(System.Double,System.Double,System.Double)">
      <summary>初始化 <see cref="T:System.Windows.Media.RotateTransform" /> 类的一个新实例，该实例具有指定的角度和中心点。</summary>
      <param name="angle">顺时针旋转角度，以度为单位。有关更多信息，请参见 <see cref="P:System.Windows.Media.RotateTransform.Angle" /> 属性。</param>
      <param name="centerX">
        <see cref="T:System.Windows.Media.RotateTransform" /> 中心点的 x 坐标。有关更多信息，请参见 <see cref="P:System.Windows.Media.RotateTransform.CenterX" /> 属性。</param>
      <param name="centerY">
        <see cref="T:System.Windows.Media.RotateTransform" /> 中心点的 y 坐标。有关更多信息，请参见 <see cref="P:System.Windows.Media.RotateTransform.CenterY" /> 属性。</param>
    </member>
    <member name="P:System.Windows.Media.RotateTransform.Angle">
      <summary>获取或设置顺时针旋转角度（以度为单位）。这是一个依赖项属性。</summary>
      <returns>顺时针旋转角度，以度为单位。默认值为 0。</returns>
    </member>
    <member name="F:System.Windows.Media.RotateTransform.AngleProperty">
      <summary>标识 <see cref="P:System.Windows.Media.RotateTransform.Angle" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.RotateTransform.Angle" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.RotateTransform.CenterX">
      <summary>获取或设置旋转中心点的 x 坐标。这是一个依赖项属性。</summary>
      <returns>旋转中心的 x 坐标。默认值为 0。</returns>
    </member>
    <member name="F:System.Windows.Media.RotateTransform.CenterXProperty">
      <summary>标识 <see cref="P:System.Windows.Media.RotateTransform.CenterX" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.RotateTransform.CenterX" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.RotateTransform.CenterY">
      <summary>获取或设置旋转中心点的 y 坐标。这是一个依赖项属性。</summary>
      <returns>旋转中心的 y 坐标。默认值为 0。</returns>
    </member>
    <member name="F:System.Windows.Media.RotateTransform.CenterYProperty">
      <summary>标识 <see cref="P:System.Windows.Media.RotateTransform.CenterY" /> 依赖项属性。</summary>
    </member>
    <member name="M:System.Windows.Media.RotateTransform.Clone">
      <summary>通过制作此 <see cref="T:System.Windows.Media.RotateTransform" /> 的值的深层副本来创建它的可修改副本。</summary>
      <returns>当前对象的可修改的深层副本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true.，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性仍返回 false。</returns>
    </member>
    <member name="M:System.Windows.Media.RotateTransform.CloneCurrentValue">
      <summary>通过制作此 <see cref="T:System.Windows.Media.RotateTransform" /> 对象的值的深层副本来创建它的可修改副本。此方法不复制资源引用、数据绑定或动画，但复制其当前值。</summary>
      <returns>当前对象的可修改的深层副本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，已克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性仍为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.RotateTransform.Value">
      <summary>以 <see cref="T:System.Windows.Media.Matrix" /> 对象的形式获取当前的旋转变换。</summary>
      <returns>作为 <see cref="T:System.Windows.Media.Matrix" /> 的当前旋转变换。<构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:System.String" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt32.Value">
      <summary>获取此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的值。此属性为只读。</summary>
      <returns>表示此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的值的整数。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">此属性包含 <see cref="F:System.Data.SqlTypes.SqlInt32.Null" />。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Xor(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构执行按位“异或”运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含按位“异或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt64">
      <summary>表示要在数据库中存储或检索的 64 位有符号整数。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.#ctor(System.Int64)">
      <summary>使用提供的长整型初始化 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的新实例。</summary>
      <param name="value">长整型。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Add(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的和。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位 AND 运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“与”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位“或”计算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Data.SqlTypes.SqlInt64)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值 条件 小于零 此实例小于该对象。零 此实例等于该对象。大于零 此实例大于该对象 - 或 - 该对象是 null 引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值 条件 小于零 此实例小于该对象。零 此实例等于该对象。大于零 此实例大于该对象 - 或 - 该对象是 null 引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Divide(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数除以第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Equals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>
如果两个值相等，则为 true。否则为 false。如果任一实例为 null，则 SqlInt64 将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性进行比较。</summary>
      <returns>
            如果对象是 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的实例并且两者相等，则为 true；否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>一个指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 string。</returns>
      <param name="schemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否大于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt64.IsNull">
      <summary>指示 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 是否为 Null。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 为 Null，则此属性为 true。否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.MaxValue">
      <summary>一个常数，表示 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的可能的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.MinValue">
      <summary>一个常数，表示 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的可能的最小值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Mod(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数除以第二个参数后所得的余数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含该余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>将两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值相除，并返回余数。</summary>
      <returns>对 <paramref name="x" /> 和 <paramref name="y" /> 执行除法运算后得到的余数。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.NotEquals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 SqlInt64 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.Null">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性的 null 值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.OnesComplement(System.Data.SqlTypes.SqlInt64)">
      <summary>对它的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位二进制反码运算。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的二进制反码。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Addition(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的和。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位 AND 运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“与”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位“或”计算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Division(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数除以第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Equality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_ExclusiveOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“异或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的整数部分。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的整数部分。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Int64">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为长值。</summary>
      <returns>一个新长值，它等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的整数部分。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的整数部分。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" />，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否大于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlInt64">
      <summary>将长参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于长参数的值。</returns>
      <param name="x">长整型值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Inequality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 SqlInt64 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数除以第二个参数后所得的余数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含该余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_OnesComplement(System.Data.SqlTypes.SqlInt64)">
      <summary>对它的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位二进制反码运算。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的二进制反码。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Subtraction(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数中减去第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_UnaryNegation(System.Data.SqlTypes.SqlInt64)">
      <summary>一元负运算符对 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 求反。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的求反 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为它的等效 64 位有符号整数。</summary>
      <returns>一个 64 位有符号整数，它等效于指定的 <see cref="T:System.String" /> 中包含的值。</returns>
      <param name="s">要分析的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Subtract(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数中减去第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="reader">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>
            如果 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 不是零，则为 true；如果为零，则为 false；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的 Value。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，表示此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的此实例转换为 <see cref="T:System.String" />。</summary>
      <returns>一个 <see cref="T:System.String" />，表示此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt64.Value">
      <summary>获取此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的值。此属性为只读。</summary>
      <returns>一个长整型，表示此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Xor(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“异或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlMoney">
      <summary>表示要存储在数据库中或要从数据库中检索的货币值，范围介于 -2 63（或 -922,337,203,685,477.5808）到 2 63 -1（或 +922,337,203,685,477.5807）之间，精度为千分之十货币单位。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Decimal)">
      <summary>使用指定的 <see cref="T:System.Decimal" /> 值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的新实例。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Double)">
      <summary>使用指定的双精度型值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的新实例。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int32)">
      <summary>用指定的整数值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的新实例。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int64)">
      <summary>使用指定的长整型值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的新实例。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Add(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的和。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Data.SqlTypes.SqlMoney)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值 条件 小于零 此实例小于该对象。零 此实例等于该对象。大于零 此实例大于该对象 - 或 - 对象是 null 引用（在 Visual Basic 中为 Nothing） </returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值 条件 小于零 此实例小于该对象。零 此实例等于该对象。大于零 此实例大于该对象 - 或 - 对象是 null 引用（在 Visual Basic 中为 Nothing） </returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Divide(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数除以第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Equals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>
如果两个值相等，则为 true。否则为 false。如果任一实例为 null，则 SqlMoney 将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的实例并且两者相等，则相等比较将返回 true；否则返回 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>一个指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 string。</returns>
      <param name="schemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否大于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlMoney.IsNull">
      <summary>返回一个值，该值指示 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性是否包含 null。</summary>
      <returns>
            如果将 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 赋值为 Null，则为 true。否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.MaxValue">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类实例的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.MinValue">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类实例的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性的最小值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含该乘法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.NotEquals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.Null">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类实例的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性的 null 值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Addition(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的和。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Division(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数除以第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Equality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Decimal">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Decimal" />。</summary>
      <returns>一个新 <see cref="T:System.Decimal" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Double)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否大于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Decimal)~System.Data.SqlTypes.SqlMoney">
      <summary>将 <see cref="T:System.Decimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 等于 <see cref="T:System.Decimal" /> 参数的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Decimal" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供的 <see cref="T:System.Int64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Int64" /> 参数的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Int64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Inequality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含该乘法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Subtraction(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>该减法运算符从第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数中减去第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_UnaryNegation(System.Data.SqlTypes.SqlMoney)">
      <summary>一元负运算符对 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数求反。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含求反的结果。</returns>
      <param name="x">需求反的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为其等效的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 形式。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />，它与指定的 <see cref="T:System.String" /> 中包含的值等效。</returns>
      <param name="s">要分析的 String。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Subtract(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>该减法运算符从第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数中减去第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="reader">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToDecimal">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的此实例的值转换为 <see cref="T:System.Decimal" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Decimal" /> 结构，它的值等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Double" />。</summary>
      <returns>一个双精度型，它的值等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Int32" />。</summary>
      <returns>一个 32 位整数，其值等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的值转换为 <see cref="T:System.Int64" />。</summary>
      <returns>一个 64 位整数，其值等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的值为零，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，它的值是一个表示此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值的字符串。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的此实例转换为字符串。</summary>
      <returns>一个字符串，它的值是此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值的字符串表示形式。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlMoney.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的实例的货币值。此属性为只读。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的实例的货币值。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">该属性设置为 null。</exception>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类实例的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlNotFilledException">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类的新实例。</summary>
      <param name="message">当引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类的新实例。</summary>
      <param name="message">当引发异常时显示的字符串。</param>
      <param name="e">对内部异常的引用。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlNullValueException">
      <summary>
                    当 <see cref="N:System.Data.SqlTypes" /> 结构的 Value 属性设置为 null 时引发的异常。
                </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor">
      <summary>
                    使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String)">
      <summary>
                    使用描述错误的指定消息初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 类的新实例。
                </summary>
      <param name="message">
描述该异常的消息。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
                </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String,System.Exception)">
      <summary>
                    使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 类的新实例。
                </summary>
      <param name="message">
描述该异常的消息。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
                </param>
      <param name="e">
                    导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。
                </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlSingle">
      <summary>表示要存储在数据库中或从数据库中检索的浮点数，范围在 -3.40E+38 到 3.40E+38 之间。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.#ctor(System.Double)">
      <summary>使用提供的 double 类型的参数初始化 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的新实例。</summary>
      <param name="value">一个双精度型值，它将用作新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.#ctor(System.Single)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的新实例。</summary>
      <param name="value">一个浮点数，它将用作新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Add(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的和。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含两个指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Data.SqlTypes.SqlSingle)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值 条件 小于零 此实例小于该对象。零 此实例等于该对象。大于零 此实例大于该对象 - 或 - 对象是 null 引用（在 Visual Basic 中为 Nothing） </returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值 条件 小于零 此实例小于该对象。零 此实例等于该对象。大于零 此实例大于该对象 - 或 - 该对象是 null 引用（在 Visual Basic 中为 Nothing） </returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Divide(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构除以第二个结构。</summary>
      <returns>一个 SqlInt64 结构，包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Equals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>
如果两个值相等，则为 true。否则为 false。如果任一实例为 null，则 SqlSingle 将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性进行比较。</summary>
      <returns>
            如果对象是 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的实例并且两者相等，则为 true。否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 string 值。</returns>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 操作数执行逻辑比较，以确定第一个操作数是否大于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构执行逻辑比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlSingle.IsNull">
      <summary>返回一个值，该值指示是否将 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性赋值为 Null。</summary>
      <returns>
            如果将 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 赋值为 Null，则为 true。否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.MaxValue">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 类实例的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.MinValue">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 类实例的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性的最小值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的乘积。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该乘法运算的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.NotEquals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.Null">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性的 null 值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Addition(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的和。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含两个指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Division(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构除以第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Equality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 SqlSingle 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlSingle">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Single">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为浮点型。</summary>
      <returns>一个 float 类型值，包含 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值。</returns>
      <param name="x">要转换为浮点型的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 操作数执行逻辑比较，以确定第一个操作数是否大于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构执行逻辑比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlSingle">
      <summary>此隐式运算符将 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Single)~System.Data.SqlTypes.SqlSingle">
      <summary>将指定的浮点值转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含指定浮点型的值。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的浮点值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Inequality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的乘积。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该乘法运算的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Subtraction(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构中减去第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_UnaryNegation(System.Data.SqlTypes.SqlSingle)">
      <summary>对指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 求反。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含求反的值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Parse(System.String)">
      <summary>将指定 <see cref="T:System.String" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />，它与指定的 <see cref="T:System.String" /> 中包含的值等效。</returns>
      <param name="s">要分析的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Subtract(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构中减去第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="reader">XmlReader </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>
            如果 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 不是零，则为 true；如果为零，则为 false；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的 Value。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的 Value 为 true，则 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 Value 将为 1；否则 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 Value 将为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新 SqlDecimal 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 SqlDouble 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 SqlInt16 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，表示此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>一个表示此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值的 String 对象。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlSingle.Value">
      <summary>获取此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值。此属性为只读。</summary>
      <returns>一个浮点值，介于 -3.40E+38 到 3.40E+38 的范围内。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 类实例的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlString">
      <summary>表示要存储到数据库中或要从数据库中检索的字符的可变长度流。<see cref="T:System.Data.SqlTypes.SqlString" /> 具有与其相应的 .NET Framework <see cref="T:System.String" /> 数据类型不同的基础数据结构。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[])">
      <summary>使用指定的区域设置 ID、比较选项和数据，初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的新实例。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <param name="data">要存储的数据数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 类的一个新实例。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <param name="data">要存储的数据数组。</param>
      <param name="fUnicode">
                如果是 Unicode 编码，则为 true。否则为 false。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 类的一个新实例。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <param name="data">要存储的数据数组。</param>
      <param name="index">数组中的起始索引。</param>
      <param name="count">要从索引复制的字符数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 类的一个新实例。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <param name="data">要存储的数据数组。</param>
      <param name="index">数组中的起始索引。</param>
      <param name="count">要从索引复制的字符数。</param>
      <param name="fUnicode">
                如果是 Unicode 编码，则为 true。否则为 false。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的新实例。</summary>
      <param name="data">要存储的字符串。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32)">
      <summary>使用指定的字符串和区域设置 ID 值，初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的新实例。</summary>
      <param name="data">要存储的字符串。</param>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32,System.Data.SqlTypes.SqlCompareOptions)">
      <summary>使用指定字符串、区域设置 ID 和比较选项值，初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的新实例。</summary>
      <param name="data">要存储的字符串。</param>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Add(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>串联两个指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 值以创建一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，它是 <paramref name="x" /> 与 <paramref name="y" /> 的串联值。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.BinarySort">
      <summary>指定排序应基于字符数值（而非其字母值）。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.BinarySort2">
      <summary>指定排序应基于字符数值（而非其字母值）。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Clone">
      <summary>创建此 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象的一个副本。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，其中所有的属性值都与原始值相同。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.CompareInfo">
      <summary>获取 <see cref="T:System.Globalization.CompareInfo" /> 对象，该对象定义如何对此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构执行字符串比较。</summary>
      <returns>一个 CompareInfo 对象，该对象定义此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的字符串比较。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareOptionsFromSqlCompareOptions(System.Data.SqlTypes.SqlCompareOptions)">
      <summary>获取与指定 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 值等效的 <see cref="T:System.Globalization.CompareOptions" /> 枚举。</summary>
      <returns>一个 CompareOptions 值，该值对应于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的 SqlCompareOptions。</returns>
      <param name="compareOptions">一个 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 值，该值描述此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareTo(System.Data.SqlTypes.SqlString)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值 条件 小于零 此实例小于该对象。零 此实例等于该对象。大于零 此实例大于该对象 - 或 - 该对象是空引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象与所提供的 <see cref="T:System.Object" /> 进行比较，并返回其相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值 条件 小于零 此实例小于该对象。零 此实例等于该对象。大于零 此实例大于该对象 - 或 - 该对象是空引用（在 Visual Basic 中为 Nothing） </returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Concat(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>串联两个指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，它包含表示两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数内容的新串联的值。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.CultureInfo">
      <summary>获取 <see cref="T:System.Globalization.CultureInfo" /> 结构，它表示有关此 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象的区域性信息。</summary>
      <returns>一个 <see cref="T:System.Globalization.CultureInfo" /> 结构，描述有关此 SqlString 结构的区域性的信息，包括区域性的名称、书写体系和使用的日历，还包括对特定于区域性对象的访问，这些对象提供常规运算的方法，例如格式化日期和排序字符串。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Equals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>
            如果两个值相等，则为 true。否则为 false。如果任一实例为 null，则 SqlString 将为 null。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlString" /> 的实例并且两者相等，则相等比较将返回 true；否则返回 false。</returns>
      <param name="value">要比较的对象。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetNonUnicodeBytes">
      <summary>获取字节的数组，其中包含 <see cref="T:System.Data.SqlTypes.SqlString" /> ANSI 格式的内容。</summary>
      <returns>一个字节数组，包含 <see cref="T:System.Data.SqlTypes.SqlString" /> ANSI 格式的内容。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetUnicodeBytes">
      <summary>获取字节的数组，其中包含 <see cref="T:System.Data.SqlTypes.SqlString" /> Unicode 格式的内容。</summary>
      <returns>一个字节数组，包含 <see cref="T:System.Data.SqlTypes.SqlString" /> Unicode 格式的内容。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。</summary>
      <returns>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的 string 值。</returns>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否大于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否大于或等于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreCase">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较应忽略大小写。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreKanaType">
      <summary>指定字符串比较必须忽略假名类型。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreNonSpace">
      <summary>指定字符串比较必须忽略非空格组合字符，比如音调符号。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreWidth">
      <summary>指定字符串比较必须忽略字符宽度。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.IsNull">
      <summary>指示 <see cref="T:System.Data.SqlTypes.SqlString" /> 的 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 是否为 <see cref="F:System.Data.SqlTypes.SqlString.Null" />。</summary>
      <returns>
            如果 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 为 <see cref="F:System.Data.SqlTypes.SqlString.Null" />，则返回 true。否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.LCID">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</summary>
      <returns>存储在 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 属性中的字符串的区域设置 ID。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否小于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否小于或等于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.NotEquals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.Null">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 属性的空值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Addition(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>串联两个指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，它包含表示两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数内容的新串联的值。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Equality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，包含 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 SqlDecimal 参数的字符串表示形式。</returns>
      <param name="x">要转换的 SqlDecimal 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，它的值是指定的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，包含 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，包含 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 SqlInt32 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，包含 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlString)~System.String">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlString" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>String，它的内容与 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 属性相同。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否大于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否大于或等于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Implicit(System.String)~System.Data.SqlTypes.SqlString">
      <summary>将 <see cref="T:System.String" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，包含指定的 String 的值。</returns>
      <param name="x">要转换的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Inequality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否小于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否小于或等于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.SqlCompareOptions">
      <summary>一个或多个 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 枚举值的组合，它们表示此 <see cref="T:System.Data.SqlTypes.SqlString" /> 与其他 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较方式。</summary>
      <returns>一个值，它指定如何将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 与其他 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构进行比较。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="reader">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>该成员支持 .NET Framework 结构，不应从代码直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>
            如果 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 不是零，则为 true；如果为零，则为 false；否则为 Null。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个新的 SqlByte 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构所表示的数字。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDateTime">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</summary>
      <returns>一个新的 SqlDateTime 结构，其中包含此 <see cref="T:System.Data.SqlTypes.SqlString" /> 所表示的日期值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />，其中包含此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlGuid">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 是此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构所表示的 Guid。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象转换为 <see cref="T:System.String" />。</summary>
      <returns>与此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构具有相同值的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.Value">
      <summary>获取存储在此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构中的字符串。此属性为只读。</summary>
      <returns>存储的字符串。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">字符串的值是 <see cref="F:System.Data.SqlTypes.SqlString.Null" />。</exception>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTruncateException">
      <summary>
                    在将值设置到 <see cref="N:System.Data.SqlTypes" /> 结构中会截断该值时引发的异常。
                </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor">
      <summary>
                    初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String)">
      <summary>
                    用指定的错误消息初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 类的新实例。
                </summary>
      <param name="message">
                    解释异常原因的错误消息。
                </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String,System.Exception)">
      <summary>
                    使用指定的错误消息和对 <see cref="T:System.Exception" /> 的引用来初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 类的新实例。
                </summary>
      <param name="message">
                    解释异常原因的错误消息。
                </param>
      <param name="e">
                    对内部 <see cref="T:System.Exception" /> 的引用。
                </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTypeException">
      <summary>
        <see cref="N:System.Data.SqlTypes" /> 的基异常类。
                </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor">
      <summary>
                    初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    用序列化数据初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。
                </summary>
      <param name="si">
                    保存序列化对象数据的对象。
                </param>
      <param name="sc">
                    有关源或目标的上下文信息。
                </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String)">
      <summary>
                    用指定的错误消息初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。
                </summary>
      <param name="message">
                    解释异常原因的错误信息。
                </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String,System.Exception)">
      <summary>
                    使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。
                </summary>
      <param name="message">
                    描述该异常的消息。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
                </param>
      <param name="e">
                    导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为null，则当前异常在处理内部异常的 catch 块中引发。
                </param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
      <param name="name">字符串形式的名称。</param>
      <param name="destinationType">字符串形式的目标类型。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper.#ctor(System.String,System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
      <param name="name">字符串形式的名称。</param>
      <param name="destinationType">字符串形式的目标类型。</param>
      <param name="direct">一个布尔值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper.#ctor(System.String,System.String,System.String[],System.CodeDom.CodeNamespaceImport[],System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
      <param name="name">字符串形式的名称。</param>
      <param name="targetNamespace">目标命名空间。</param>
      <param name="references">引用的字符串数组。</param>
      <param name="namespaceImports">CodeNamespaceImport 对象数组。</param>
      <param name="destinationType">字符串形式的目标类型。</param>
      <param name="direct">表示定向的布尔值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper.ImportSchemaType(System.String,System.String,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</returns>
      <param name="name">
        <paramref name="name" />
      </param>
      <param name="xmlNamespace">
        <paramref name="xmlNamespace" />
      </param>
      <param name="context">
        <paramref name="context" />
      </param>
      <param name="schemas">
        <paramref name="schemas" />
      </param>
      <param name="importer">
        <paramref name="importer" />
      </param>
      <param name="compileUnit">
        <paramref name="compileUnit" />
      </param>
      <param name="mainNamespace">
        <paramref name="mainNamespace" />
      </param>
      <param name="options">
        <paramref name="options" />
      </param>
      <param name="codeProvider">
        <paramref name="codeProvider" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper.ImportSchemaType(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</returns>
      <param name="type">
        <paramref name="type" />
      </param>
      <param name="context">
        <paramref name="context" />
      </param>
      <param name="schemas">
        <paramref name="schemas" />
      </param>
      <param name="importer">
        <paramref name="importer" />
      </param>
      <param name="compileUnit">
        <paramref name="compileUnit" />
      </param>
      <param name="mainNamespace">
        <paramref name="mainNamespace" />
      </param>
      <param name="options">
        <paramref name="options" />
      </param>
      <param name="codeProvider">
        <paramref name="codeProvider" />
      </param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper.SqlTypesNamespace">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlXml">
      <summary>
                    表示存储在服务器中的或从服务器中检索的 XML 数据。
                </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor">
      <summary>
                    创建一个新的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例。
                </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor(System.IO.Stream)">
      <summary>
                    创建一个新的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例，以提供来自所提供的 <see cref="T:System.IO.Stream" /> 派生实例中的 XML 值。
                </summary>
      <param name="value">
                    一个 <see cref="T:System.IO.Stream" /> 派生实例（如 <see cref="T:System.IO.FileStream" />），要从该实例加载 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例的 XML 内容。
                </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor(System.Xml.XmlReader)">
      <summary>
                    创建一个新的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例，并将其与提供的 <see cref="T:System.Xml.XmlReader" /> 的内容关联起来。
                </summary>
      <param name="value">
                    一个要用作新 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例的值的 <see cref="T:System.Xml.XmlReader" /> 派生类实例。
                </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.CreateReader">
      <summary>
                    作为 <see cref="T:System.Xml.XmlReader" /> 来获取此 <see cref="T:System.Data.SqlTypes.SqlXml" /> 的 XML 内容的值。
                </summary>
      <returns>
                    一个包含 XML 内容的 <see cref="T:System.Xml.XmlReader" /> 派生实例。根据信息的内部表示方式，服务器上的实际类型会有所不同（例如，返回值可能为 <see cref="T:System.Xml.XmlTextReader" />）。
                </returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
                    曾试图访问 <see cref="T:System.Data.SqlTypes.SqlXml" /> 的 null 实例上的此属性。
                </exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>
                    返回指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 架构定义语言 (XSD)。
                </summary>
      <returns>
                    一个指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XSD 的字符串。
                </returns>
      <param name="schemaSet">
                    一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。
                </param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.IsNull">
      <summary>
                    指示此实例是否表示一个 null <see cref="T:System.Data.SqlTypes.SqlXml" /> 值。
                </summary>
      <returns>
                    如果 Value 为 null，则为 true。否则为 false。
                </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.Null">
      <summary>
                    表示 <see cref="T:System.Data.SqlTypes.SqlXml" /> 类型的 null 实例。
                </summary>
      <returns>
                    一个 <see cref="T:System.Data.SqlTypes.SqlXml" /> 类型的 null 实例。
                </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#GetSchema"></member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)"></member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)"></member>
    <member name="P:System.Data.SqlTypes.SqlXml.Value">
      <summary>
                    获取此 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例的 XML 内容的字符串表示形式。
                </summary>
      <returns>
                    XML 内容的字符串表示形式。
                </returns>
    </member>
    <member name="T:System.Data.SqlTypes.StorageState">
      <summary>
        <see cref="T:System.Data.SqlTypes.StorageState" /> 枚举不用作独立组件，而是用作其他类从中派生标准功能的枚举。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.Buffer">
      <summary>缓冲区大小。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.Stream">
      <summary>流。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.UnmanagedBuffer">
      <summary>非托管缓冲区。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeBigIntSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeBigIntSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeBigIntSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeBigIntSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeBinarySchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeBinarySchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeBinarySchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeBinarySchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeBitSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeBitSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeBitSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeBitSchemaImporterExtension" /> 类的新实例。 </summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeCharSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeCharSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeCharSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeCharSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeDecimalSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeDecimalSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeDecimalSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeDecimalSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeFloatSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeFloatSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeFloatSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeFloatSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeIntSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeIntSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeIntSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeIntSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeMoneySchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeMoneySchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeMoneySchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeMoneySchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeNCharSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeNCharSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeNCharSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeNCharSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeNTextSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeNTextSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeNTextSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeNTextSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeNumericSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeNumericSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeNumericSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeNumericSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeRealSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeRealSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeRealSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeRealSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeSmallDateTimeSchemaImporterExtension">
      <summary>TypeSmallDateTimeSchemaImporterExtension 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeSmallDateTimeSchemaImporterExtension.#ctor">
      <summary>初始化 TypeSmallDateTimeSchemaImporterExtension  类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeTextSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeTextSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeTextSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeTextSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeVarCharSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeVarCharSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeVarCharSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeVarCharSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeVarImageSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeVarImageSchemaImporterExtension" /> 类不用作独立组件，而是用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeVarImageSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeVarImageSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlFileStream">
      <summary>
                    公开使用 FILESTREAM 列属性作为字节序列存储的 SQL Server 数据。
                </summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.#ctor(System.String,System.Byte[],System.IO.FileAccess)">
      <summary>
                    初始化 <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 类的新实例。
                </summary>
      <param name="path">
                    文件的逻辑路径。可通过对表中的基础 FILESTREAM 列使用 Transact-SQL Pathname 函数来检索该路径。
                </param>
      <param name="transactionContext">SqlFileStream 对象的事务上下文。应用程序应返回通过调用 GET_FILESTREAM_TRANSACTION_CONTEXT 方法而返回的字节数组。
                </param>
      <param name="access">
                    打开该文件时要使用的访问模式。受支持的 <see cref="T:System.IO.FileAccess" /> 枚举值包括 <see cref="F:System.IO.FileAccess.Read" />、<see cref="F:System.IO.FileAccess.Write" /> 和 <see cref="F:System.IO.FileAccess.ReadWrite" />。
                
                    使用 FileAccess.Read 时，SqlFileStream 对象可用于读取所有现有数据。
                
                    使用 FileAccess.Write 时，SqlFileStream 指向零字节文件。在关闭该对象并提交该事务时，将覆盖现有数据。
                
                    使用 FileAccess.ReadWrite 时，SqlFileStream 指向其中包含所有现有数据的文件。句柄会定位到该文件开头。您可以使用 System.IOSeek 方法之一移动该文件中的句柄位置来写入或追加新数据。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null 引用，或者 <paramref name="transactionContext" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串 ("")，只包含空格，或者包含一个或多个无效字符。
                <paramref name="path" /> 以“\\.\”开头，例如“\\.\PHYSICALDRIVE0”。
                
                    对 NTCreateFile 的调用返回的句柄不是 FILE_TYPE_DISK 类型。
                <paramref name="options" /> 包含不受支持的值。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
无法找到该文件。
                </exception>
      <exception cref="T:System.IO.IOException">
                    出现 I/O 错误。
                </exception>
      <exception cref="T:System.Security.SecurityException">
调用方没有所要求的权限。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                    指定的 <paramref name="path" /> 无效，例如在未映射的驱动器上。
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                    操作系统不允许对指定的路径进行请求的访问。当指定“写”或 ReadWrite 访问权限，并且文件或目录设置为只读访问时，会发生这种情况。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    NtCreateFile 失败，并返回设置为 ERROR_SHARING_VIOLATION 的错误代码。
                </exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.#ctor(System.String,System.Byte[],System.IO.FileAccess,System.IO.FileOptions,System.Int64)">
      <summary>
                    初始化 <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 类的新实例。
                </summary>
      <param name="path">
                    文件的逻辑路径。可通过对表中的基础 FILESTREAM 列使用 Transact-SQL Pathname 函数来检索该路径。
                </param>
      <param name="transactionContext">SqlFileStream 对象的事务上下文。当设置为 null 时，隐式事务将用于 SqlFileStream 对象。应用程序应返回通过调用 GET_FILESTREAM_TRANSACTION_CONTEXT 方法而返回的字节数组。
                </param>
      <param name="access">
                    打开该文件时要使用的访问模式。受支持的 <see cref="T:System.IO.FileAccess" /> 枚举值包括 <see cref="F:System.IO.FileAccess.Read" />、<see cref="F:System.IO.FileAccess.Write" /> 和 <see cref="F:System.IO.FileAccess.ReadWrite" />。
                
                    使用 FileAccess.Read 时，SqlFileStream 对象可用于读取所有现有数据。
                
                    使用 FileAccess.Write 时，SqlFileStream 指向一个零字节文件。在关闭该对象并执行该事务时，将覆盖现有数据。
                
                    使用 FileAccess.ReadWrite 时，SqlFileStream 指向一个包含所有现有数据的文件。句柄会定位到该文件开头。您可以使用某个 System.IOSeek 方法在该文件中移动句柄的位置以写入或追加新数据。
                </param>
      <param name="options">
                    指定打开该文件时要使用的选项。受支持的 <see cref="T:System.IO.FileOptions" /> 值包括 <see cref="F:System.IO.FileOptions.Asynchronous" />、<see cref="F:System.IO.FileOptions.WriteThrough" />、<see cref="F:System.IO.FileOptions.SequentialScan" /> 和 <see cref="F:System.IO.FileOptions.RandomAccess" />。
                </param>
      <param name="allocationSize">
                    创建文件时要使用的分配大小。如果设置为 0，则将使用默认值。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null 引用，或者 <paramref name="transactionContext" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串 ("")，只包含空格，或者包含一个或多个无效字符。
                <paramref name="path" /> 以“\\.\”开头，例如“\\.\PHYSICALDRIVE0”。
                
                    对 NTCreateFile 的调用返回的句柄不是 FILE_TYPE_DISK 类型。
                <paramref name="options" /> 包含不受支持的值。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
无法找到该文件。
                </exception>
      <exception cref="T:System.IO.IOException">
                    出现 I/O 错误。
                </exception>
      <exception cref="T:System.Security.SecurityException">
调用方没有所要求的权限。
                </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                    指定的 <paramref name="path" /> 无效，例如在未映射的驱动器上。
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                    操作系统不允许对指定的路径进行请求的访问。当指定 Write 或 ReadWrite 访问权限，并且文件或目录设置为只读访问时，会发生这种情况。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    NtCreateFile 失败，并返回设置为 ERROR_SHARING_VIOLATION 的错误代码。
                </exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
                    开始异步读取操作。
                </summary>
      <returns>
                    表示异步读取的 <see cref="T:System.IAsyncResult" />（可能仍处于挂起状态）。
                </returns>
      <param name="buffer">
数据读入的缓冲区。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。
                </param>
      <param name="count">
                    最多读取的字节数。
                </param>
      <param name="callback">
可选的异步回调，在完成读取时调用。
                </param>
      <param name="state">
                    一个用户提供的对象，该对象将此特定的异步读取请求与其他请求区分开来。
                </param>
      <exception cref="T:System.NotSupportedException">
                    流不支持数据读取。
                </exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
                    开始异步写入操作。
                </summary>
      <returns>
                    表示异步写入的 <see cref="T:System.IAsyncResult" />（可能仍处于挂起状态）。
                </returns>
      <param name="buffer">
从中写入数据的缓冲区。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从此处开始写入。
                </param>
      <param name="count">
                    最多写入的字节数。
                </param>
      <param name="callback">
可选的异步回调，在完成写入时调用。
                </param>
      <param name="state">
                    一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。
                </param>
      <exception cref="T:System.NotSupportedException">
                    流不支持写入数据。
                </exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.CanRead">
      <summary>
获取一个值，该值指示当前流是否支持读取。
                </summary>
      <returns>
                    如果当前流支持读取，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.CanSeek">
      <summary>
获取一个值，该值指示当前流是否支持查找。
                </summary>
      <returns>
                    如果当前流支持查找，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.CanTimeout">
      <summary>
                    获取一个值，该值指示当前流是否能超时。
                </summary>
      <returns>
                    如果当前流可以超时，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.CanWrite">
      <summary>
获取一个值，该值指示当前流是否支持写入。
                </summary>
      <returns>
                    如果当前流支持写入，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.EndRead(System.IAsyncResult)">
      <summary>
等待挂起的异步读取完成。
                </summary>
      <returns>
从流中读取的字节数，介于零 (0) 和所请求的字节数之间。流仅在流的末尾返回零 (0)，否则应一直阻止到至少有 1 个字节可用为止。
                </returns>
      <param name="asyncResult">
对要完成的挂起异步请求的引用。
                </param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.IAsyncResult" /> 对象并不来自于相应的 BeginRead 方法。
                </exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.EndWrite(System.IAsyncResult)">
      <summary>
结束异步写操作。
                </summary>
      <param name="asyncResult">
对未完成的异步 I/O 请求的引用。
                </param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.IAsyncResult" /> 对象并不来自于相应的 BeginWrite 方法。
                </exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.Flush">
      <summary>
                    清除该流的所有缓冲区，并使所有缓冲的数据都写入基础设备。
                </summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.Length">
      <summary>
                    获取一个值，该值指示当前流的长度（以字节为单位）。
                </summary>
      <returns>
                    一个 <see cref="T:System.Int64" />，指示当前流的长度（以字节为单位）。
                </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.Name">
      <summary>
                    获取传递给构造函数的 <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 的逻辑路径。
                </summary>
      <returns>
                    一个指示 <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 名称的字符串值。
                </returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.Position">
      <summary>
获取或设置当前流中的位置。
                </summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 中的当前位置。
                </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    从当前流读取字节序列，并将流中的位置向前移动读取的字节数。
                </summary>
      <returns>
                    读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多，则总字节数可能小于请求的字节数，或者如果已到达流的末尾，则为零 (0)。
                </returns>
      <param name="buffer">
字节数组。此方法返回时，缓冲区包含指定的字节数组，该数组的偏移量和 (偏移量 + 计数 – 1) 之间的值由从当前源中读取的字节替换。
                </param>
      <param name="offset">
                    缓冲区中从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。
                </param>
      <param name="count">
要从当前流中最多读取的字节数。
                </param>
      <exception cref="T:System.NotSupportedException">
                    该对象不支持读取数据。
                </exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.ReadByte">
      <summary>
从流中读取一个字节，并将流内的位置向前推进一个字节，或者如果已到达流的末尾，则返回 -1。
                </summary>
      <returns>
                    转换为 <see cref="T:System.Int32" /> 的无符号字节，或者如果到达流的末尾，则为 -1。
                </returns>
      <exception cref="T:System.NotSupportedException">
                    该对象不支持读取数据。
                </exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.ReadTimeout">
      <summary>
                    获取或设置一个值（以毫秒为单位），该值确定流在超时前尝试读取多长时间。
                </summary>
      <returns>
                    一个确定流在超时前尝试读取多长时间的值（以毫秒为单位）。
                </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
设置当前流中的位置。
                </summary>
      <returns>
当前流中的新位置。
                </returns>
      <param name="offset">
                    相对于 <paramref name="origin" /> 参数的字节偏移量
                </param>
      <param name="origin">
                    一个 <see cref="T:System.IO.SeekOrigin" /> 类型的值，指示用于获取新位置的参考点
                </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.SetLength(System.Int64)">
      <summary>
设置当前流的长度。
                </summary>
      <param name="value">
所需的当前流的长度（以字节表示）。
                </param>
      <exception cref="T:System.NotSupportedException">
                    该对象不支持读取数据。
                </exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.TransactionContext">
      <summary>
                    获取或设置此 <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 对象的事务上下文。
                </summary>
      <returns>
                    传递给此 <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 对象的构造函数的 <paramref name="transactionContext" /> 数组。
                </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    将字节序列写入当前流，并将流中的当前位置向前移动写入的字节数。
                </summary>
      <param name="buffer">
字节数组。此方法将 <paramref name="count" /> 个字节从 <paramref name="buffer" /> 复制到当前流。
                </param>
      <param name="offset">
        <paramref name="buffer" /> 中从零开始的字节偏移量，从此处开始将字节复制到当前流。
                </param>
      <param name="count">
要写入当前流的字节数。
                </param>
      <exception cref="T:System.NotSupportedException">
                    该对象不支持写入数据。
                </exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.WriteByte(System.Byte)">
      <summary>
将一个字节写入流内的当前位置，并将流内的位置向前推进一个字节。
                </summary>
      <param name="value">
要写入流的字节。
                </param>
      <exception cref="T:System.NotSupportedException">
                    该对象不支持写入数据。
                </exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.WriteTimeout">
      <summary>
                    获取或设置一个值（以毫秒为单位），该值确定流在超时前尝试写入多长时间。
                </summary>
      <returns>
                    一个确定流在超时前尝试写入多长时间的值（以毫秒为单位）。
                </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="T:System.Xml.XmlDataDocument">
      <summary>
                    允许通过相关的 <see cref="T:System.Data.DataSet" /> 存储、检索和操作结构化数据。
                </summary>
    </member>
    <member name="M:System.Xml.XmlDataDocument.#ctor">
      <summary>
                    初始化 XmlDataDocument 类的新实例。
                </summary>
    </member>
    <member name="M:System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)">
      <summary>
                    用指定的 <see cref="T:System.Data.DataSet" /> 初始化 XmlDataDocument 类的新实例。
                </summary>
      <param name="dataset">
                    要加载到 XmlDataDocument 的 DataSet。
                </param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CloneNode(System.Boolean)">
      <summary>
                    创建当前节点的副本。
                </summary>
      <returns>
                    克隆的节点。
                </returns>
      <param name="deep">
                    如果为 true，则递归地克隆指定节点下的子树；如果为 false，则只克隆该节点本身。
                </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)">
      <summary>
                    创建具有指定 <see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的元素。
                </summary>
      <returns>
                    新的 <see cref="T:System.Xml.XmlElement" />。
                </returns>
      <param name="prefix">
                    新元素的前缀，如果为 String.Empty 或 null，则没有前缀。
                </param>
      <param name="localName">
                    新元素的本地名称。
                </param>
      <param name="namespaceURI">
                    新元素的命名空间统一资源标识符 (URI)。如果为 String.Empty 或 null，则没有 namespaceURI。
                </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateEntityReference(System.String)">
      <summary>
                    使用指定名称创建 <see cref="T:System.Xml.XmlEntityReference" />。不能为 <see cref="T:System.Xml.XmlDataDocument" /> 对象创建 <see cref="T:System.Xml.XmlEntityReference" /> 节点。调用此方法将引发异常。
                </summary>
      <returns>
                    具有指定名称的 <see cref="T:System.Xml.XmlEntityReference" />。
                </returns>
      <param name="name">
                    实体引用的名称。
                </param>
      <exception cref="T:System.NotSupportedException">
调用此方法。
                </exception>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)">
      <summary>
                    创建一个用于导航此文档的新 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。XPathNavigator 定位在 <paramref name="node" /> 参数中指定的节点上。
                </summary>
      <returns>
                    一个 XPathNavigator。
                </returns>
      <param name="node">
                    希望导航器最初定位在的 <see cref="T:System.Xml.XmlNode" />。
                </param>
    </member>
    <member name="P:System.Xml.XmlDataDocument.DataSet">
      <summary>
                    获取 <see cref="T:System.Data.DataSet" />，该数据集提供 XmlDataDocument 中数据的关系表示形式。
                </summary>
      <returns>DataSet，该数据集可用于访问使用关系模型的 XmlDataDocument 中的数据。
                </returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementById(System.String)">
      <summary>
                    使用指定 ID 获取 <see cref="T:System.Xml.XmlElement" />。<see cref="T:System.Xml.XmlDataDocument" /> 类不支持该方法。调用此方法将引发异常。
                </summary>
      <returns>
                    具有指定 ID 的 <see cref="T:System.Xml.XmlElement" />。
                </returns>
      <param name="elemId">
                    要匹配的属性 ID。
                </param>
      <exception cref="T:System.NotSupportedException">
调用此方法。
                </exception>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)">
      <summary>
                    检索与指定 <see cref="T:System.Data.DataRow" /> 关联的 <see cref="T:System.Xml.XmlElement" />。
                </summary>
      <returns>
                    包含指定 DataRow 的表示形式的 XmlElement。
                </returns>
      <param name="r">
                    希望检索其关联 XmlElement 的 DataRow。
                </param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementsByTagName(System.String)">
      <summary>
                    返回一个 <see cref="T:System.Xml.XmlNodeList" />，它包含与指定 <see cref="P:System.Xml.XmlDocument.Name" /> 匹配的所有子代元素的列表。
                </summary>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" />，包含所有匹配节点的列表。
                </returns>
      <param name="name">
                    要匹配的限定名。它针对匹配节点的 <see cref="P:System.Xml.XmlDocument.Name" /> 属性进行匹配。特殊值“*”匹配所有标记。
                </param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)">
      <summary>
                    检索与指定 <see cref="T:System.Xml.XmlElement" /> 关联的 <see cref="T:System.Data.DataRow" />。
                </summary>
      <returns>
                    包含 XmlElement 的表示形式的 DataRow；如果没有与 XmlElement 关联的 DataRow，则为 null。
                </returns>
      <param name="e">
                    希望检索其关联 DataRow 的 XmlElement。
                </param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.IO.Stream)">
      <summary>
                    从指定的流加载 XmlDataDocument。
                </summary>
      <param name="inStream">
                    包含要加载的 XML 文档的流。
                </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.IO.TextReader)">
      <summary>
                    从指定的 <see cref="T:System.IO.TextReader" /> 加载 XmlDataDocument。
                </summary>
      <param name="txtReader">
                    用于将 XML 数据输送到文档中的 TextReader。
                </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.String)">
      <summary>
                    使用指定的 URL 加载 XmlDataDocument。
                </summary>
      <param name="filename">
                    文件的 URL，该文件包含要加载的 XML 文档。
                </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)">
      <summary>
                    从指定的 <see cref="T:System.Xml.XmlReader" /> 加载 XmlDataDocument。
                </summary>
      <param name="reader">
                    包含要加载的 XML 文档的 XmlReader。
                </param>
      <exception cref="T:System.NotSupportedException">
                    正在加载的 XML 包含实体引用，而该读取器不能解析实体。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
  </members>
</doc>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Design</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.Design.ActiveDesignSurfaceChangedEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurfaceChanged" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignSurfaceChangedEventArgs.#ctor(System.ComponentModel.Design.DesignSurface,System.ComponentModel.Design.DesignSurface)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ActiveDesignSurfaceChangedEventArgs" /> 类的新实例。</summary>
      <param name="oldSurface">正在失活的设计图面。</param>
      <param name="newSurface">正在激活的设计图面。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignSurfaceChangedEventArgs.NewSurface">
      <summary>获取正在激活的设计图面。</summary>
      <returns>正在获得激活的 <see cref="T:System.ComponentModel.Design.DesignSurface" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignSurfaceChangedEventArgs.OldSurface">
      <summary>获取正在失活的设计图面。</summary>
      <returns>正在失活的 <see cref="T:System.ComponentModel.Design.DesignSurface" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignSurfaceChangedEventHandler">
      <summary>表示将要处理 <see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /> 的 <see cref="E:System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurfaceChanged" /> 事件的方法。无法继承此类。</summary>
      <param name="sender">事件的源，即 <see cref="T:System.ComponentModel.Design.DesignSurfaceManager" />。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.ActiveDesignSurfaceChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ArrayEditor">
      <summary>提供用于在设计时编辑数组的用户界面。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ArrayEditor.#ctor(System.Type)">
      <summary>使用数组的指定数据类型初始化 <see cref="T:System.ComponentModel.Design.ArrayEditor" /> 的新实例。</summary>
      <param name="type">数组项的数据类型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ArrayEditor.CreateCollectionItemType">
      <summary>获取此集合需包含的数据类型。</summary>
      <returns>此 <see cref="T:System.Type" /> 指示集合需包含的数据类型。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ArrayEditor.GetItems(System.Object)">
      <summary>获取数组中的项。</summary>
      <returns>此数组包括指定数组中的项。如果在 <paramref name="editValue" /> 参数中指定的对象不是数组，则将返回新的空对象。</returns>
      <param name="editValue">要从其中检索项的数组。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ArrayEditor.SetItems(System.Object,System.Object[])">
      <summary>设置数组中的项。</summary>
      <returns>新数组的一个实例。如果由 <paramref name="editValue" /> 参数指定的对象不是数组，则将返回由 <paramref name="editValue" /> 参数指定的对象。</returns>
      <param name="editValue">要将项设置到的数组。</param>
      <param name="value">要设置为数组项的对象的数组。</param>
    </member>
    <member name="T:System.ComponentModel.Design.BinaryEditor">
      <summary>提供用于编辑二进制数据的用户界面。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.BinaryEditor.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.BinaryEditor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.BinaryEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>使用指定的服务提供程序和上下文编辑指定对象的值。</summary>
      <returns>新的对象值。如果该对象的值尚未更改，则这应返回与传递给它的对象相同的对象。</returns>
      <param name="context">可用于获取附加上下文信息的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="provider">可通过其获取编辑服务的服务提供程序对象。</param>
      <param name="value">要编辑其值的对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.BinaryEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取由 <see cref="M:System.ComponentModel.Design.BinaryEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> 方法使用的编辑器样式。</summary>
      <returns>一个指示所提供的编辑样式的 enum 值。</returns>
      <param name="context">可用于获取附加上下文信息的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ByteViewer">
      <summary>以十六进制、ANSI 和 Unicode 格式显示字节数组。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ByteViewer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.GetBytes">
      <summary>获取缓冲区中的字节。</summary>
      <returns>无符号的字节数组引用。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.GetDisplayMode">
      <summary>获取控件的显示模式。</summary>
      <returns>此控件使用的显示模式。返回值在 <see cref="T:System.ComponentModel.Design.DisplayMode" /> 中定义。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <param name="e">
                    包含事件数据的 <see cref="T:System.Windows.Forms.KeyEventArgs" />。
                </param>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.OnLayout(System.Windows.Forms.LayoutEventArgs)">
      <summary>引发 <see cref="E:System.Windows.Forms.Control.Layout" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.LayoutEventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <param name="e">
                    包含事件数据的 <see cref="T:System.Windows.Forms.PaintEventArgs" />。
                </param>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.SaveToFile(System.String)">
      <summary>将原始数据从数据缓冲区写入文件。</summary>
      <param name="path">要保存到的文件路径。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串 ("")，只包含空格，或者包含一个或多个无效字符。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。</exception>
      <exception cref="T:System.IO.IOException">文件写入失败。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对于指定的 <paramref name="path" /> 操作系统不允许所请求的访问，比如当访问是 Write 或 ReadWrite 而文件或目录设置为只读访问时。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.ScrollChanged(System.Object,System.EventArgs)">
      <summary>处理 <see cref="T:System.ComponentModel.Design.ByteViewer" /> 控件的 <see cref="T:System.Windows.Forms.ScrollBar" /> 上的 <see cref="E:System.Windows.Forms.ScrollBar.ValueChanged" /> 事件。</summary>
      <param name="source">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.SetBytes(System.Byte[])">
      <summary>设置要在查看器中显示的字节数组。</summary>
      <param name="bytes">要显示的字节数组。</param>
      <exception cref="T:System.ArgumentNullException">指定的字节数组为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.SetDisplayMode(System.ComponentModel.Design.DisplayMode)">
      <summary>设置当前显示模式。</summary>
      <param name="mode">要设置的显示模式。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定的显示数组并非来自 <see cref="T:System.ComponentModel.Design.DisplayMode" /> 枚举。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.SetFile(System.String)">
      <summary>设置要在查看器中显示的文件。</summary>
      <param name="path">要从其中加载的文件路径。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串 ("")，只包含空格，或者包含一个或多个无效字符。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。</exception>
      <exception cref="T:System.IO.IOException">文件加载失败。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对于指定的 <paramref name="path" /> 操作系统不允许所请求的访问，比如当访问是 Write 或 ReadWrite 而文件或目录设置为只读访问时。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.SetStartLine(System.Int32)">
      <summary>设置 <see cref="F:System.ComponentModel.Design.DisplayMode.Hexdump" /> 视图的当前行。</summary>
      <param name="line">开始显示的当前行。</param>
    </member>
    <member name="T:System.ComponentModel.Design.CollectionEditor">
      <summary>提供一个用户界面，该界面可以在设计时编辑大多数类型的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.#ctor(System.Type)">
      <summary>使用指定的集合类型初始化 <see cref="T:System.ComponentModel.Design.CollectionEditor" /> 类的新实例。</summary>
      <param name="type">此编辑器要编辑的集合的类型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CancelChanges">
      <summary>取消对集合的更改。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CanRemoveInstance(System.Object)">
      <summary>指示是否可以移除集合的初始成员。</summary>
      <returns>
            如果允许从集合中移除此值，则为 true；否则，为 false。默认实现始终返回 true。</returns>
      <param name="value">要移除的值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CanSelectMultipleInstances">
      <summary>指示是否可一次选择多个集合项。</summary>
      <returns>
            如果可以同时选择多个集合成员，则为 true；否则，为 false。默认情况下，它将返回 true。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionItemType">
      <summary>获取集合中每项的数据类型。</summary>
      <returns>集合项的数据类型。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionType">
      <summary>获取集合对象的数据类型。</summary>
      <returns>集合对象的数据类型。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.Context">
      <summary>获取指示当前上下文的类型说明符。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，指示当前正在使用的上下文；或者如果没有可用的上下文，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CreateCollectionForm">
      <summary>创建新的窗体，以显示和编辑当前集合。</summary>
      <returns>作为用于编辑集合的用户界面提供的 <see cref="T:System.ComponentModel.Design.CollectionEditor.CollectionForm" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CreateCollectionItemType">
      <summary>获取此集合包含的数据类型。</summary>
      <returns>集合中项的数据类型，如果对于该集合未找到 Item 属性，则为 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CreateInstance(System.Type)">
      <summary>创建指定的集合项类型的新实例。</summary>
      <returns>指定对象的新实例。</returns>
      <param name="itemType">要创建的项类型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CreateNewItemTypes">
      <summary>获取此集合编辑器可包含的数据类型。</summary>
      <returns>此集合可包含的数据类型数组。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.DestroyInstance(System.Object)">
      <summary>销毁对象的指定实例。</summary>
      <param name="instance">要销毁的对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>使用指定的服务提供程序和上下文编辑指定对象的值。</summary>
      <returns>新的对象值。如果对象的值尚未更改，则它返回的对象应与传递给它的对象相同。</returns>
      <param name="context">可用于获取附加上下文信息的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="provider">服务提供程序对象，通过它可获得编辑服务。</param>
      <param name="value">要编辑其值的对象。</param>
      <exception cref="T:System.ComponentModel.Design.CheckoutException">尝试签出已签入源代码管理程序的文件未成功。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.GetDisplayText(System.Object)">
      <summary>检索给定列表项的显示文本。</summary>
      <returns>
        <paramref name="value" /> 的显示文本。</returns>
      <param name="value">要检索其显示文本的列表项。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取 <see cref="M:System.ComponentModel.Design.CollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> 方法使用的编辑样式。</summary>
      <returns>指示所提供的编辑样式的 <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> 枚举值。如果在指定上下文中不支持此方法，此方法将返回 <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" /> 标识符。</returns>
      <param name="context">可用于获取附加上下文信息的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.GetItems(System.Object)">
      <summary>获取包含指定集合的对象数组。</summary>
      <returns>包含集合对象的数组，如果指定集合不从 <see cref="T:System.Collections.ICollection" /> 继承则为空对象数组。</returns>
      <param name="editValue">要编辑的集合。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.GetObjectsFromInstance(System.Object)">
      <summary>返回包含给定对象的列表</summary>
      <returns>包含要创建的各个对象的 <see cref="T:System.Collections.ArrayList" />。</returns>
      <param name="instance">作为对象返回的 <see cref="T:System.Collections.ArrayList" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.GetService(System.Type)">
      <summary>获取请求的服务（如果该服务可用的话）。</summary>
      <returns>该服务的实例；或者如果找不到该服务，则为 null。</returns>
      <param name="serviceType">要检索的服务类型。</param>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.HelpTopic">
      <summary>在用户按下编辑器对话框中的“帮助”按钮或 F1 键时，获取“帮助”关键字以显示“帮助”主题或主题列表。</summary>
      <returns>当从编辑器请求帮助时为其显示帮助主题或主题列表的帮助关键字。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.NewItemTypes">
      <summary>获取可为此集合创建的项的可用类型。</summary>
      <returns>可创建的项的类型。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.SetItems(System.Object,System.Object[])">
      <summary>将指定数组设置为集合项。</summary>
      <returns>新创建的集合对象，否则则为 <paramref name="editValue" /> 参数指示的集合。</returns>
      <param name="editValue">要编辑的集合。</param>
      <param name="value">要设置为集合项的对象数组。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.ShowHelp">
      <summary>显示集合编辑器的默认帮助主题。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.CollectionEditor.CollectionForm">
      <summary>提供一个有模式的对话框，用以通过 <see cref="T:System.Drawing.Design.UITypeEditor" /> 编辑集合的内容。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.#ctor(System.ComponentModel.Design.CollectionEditor)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.CollectionEditor.CollectionForm" /> 类的新实例。</summary>
      <param name="editor">用于编辑集合的 <see cref="T:System.ComponentModel.Design.CollectionEditor" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.CanRemoveInstance(System.Object)">
      <summary>指示是否可以移除集合的初始成员。</summary>
      <returns>
            如果允许从集合中移除此值，则为 true；否则，为 false。默认情况下，此方法返回来自当前窗体 <see cref="T:System.ComponentModel.Design.CollectionEditor" /> 的 <see cref="M:System.ComponentModel.Design.CollectionEditor.CanRemoveInstance(System.Object)" /> 的值。</returns>
      <param name="value">要移除的值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.CanSelectMultipleInstances">
      <summary>指示是否可一次选择多个集合项。</summary>
      <returns>
            如果可以同时选择多个集合成员，则为 true；否则，为 false。默认情况下，此方法返回来自当前窗体 <see cref="T:System.ComponentModel.Design.CollectionEditor" /> 的 <see cref="M:System.ComponentModel.Design.CollectionEditor.CanSelectMultipleInstances" /> 的值。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.CollectionItemType">
      <summary>获取集合中每项的数据类型。</summary>
      <returns>集合项的数据类型。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.CollectionType">
      <summary>获取集合对象的数据类型。</summary>
      <returns>集合对象的数据类型。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.Context">
      <summary>获取指示当前上下文的类型说明符。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，指示当前正在使用的上下文；或者如果没有可用的上下文，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.CreateInstance(System.Type)">
      <summary>创建指定的集合项类型的新实例。</summary>
      <returns>指定对象的新实例，或者在用户选择取消创建此实例的情况下为 null。</returns>
      <param name="itemType">要创建的项类型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.DestroyInstance(System.Object)">
      <summary>销毁对象的指定实例。</summary>
      <param name="instance">要销毁的对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.DisplayError(System.Exception)">
      <summary>向用户显示指定的异常。</summary>
      <param name="e">要显示的异常。</param>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.EditValue">
      <summary>获取或设置要编辑的集合对象。</summary>
      <returns>要编辑的集合对象。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.GetService(System.Type)">
      <summary>获取请求的服务（如果该服务可用的话）。</summary>
      <returns>该服务的实例；或者如果找不到该服务，则为 null。</returns>
      <param name="serviceType">要检索的服务类型。</param>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.Items">
      <summary>获取或设置此窗体要显示的项数组。</summary>
      <returns>此窗体要显示的对象数组。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.NewItemTypes">
      <summary>获取可为此集合创建的可用项类型。</summary>
      <returns>可创建的项的类型。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.OnEditValueChanged">
      <summary>提供在集合值已更改的情况下执行处理的机会。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.ShowEditorDialog(System.Windows.Forms.Design.IWindowsFormsEditorService)">
      <summary>为使用指定 <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService" /> 对象的集合编辑器显示对话框。</summary>
      <returns>此 <see cref="T:System.Windows.Forms.DialogResult" /> 指示从对话框中返回的结果代码。</returns>
      <param name="edSvc">此 <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService" /> 可用于显示对话框。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentActionsType">
      <summary>根据对象绑定智能标记与组件的关联方式，指定其类型。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ComponentActionsType.All">
      <summary>两种智能标记类型。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ComponentActionsType.Component">
      <summary>仅拉模型智能标记。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ComponentActionsType.Service">
      <summary>仅推模型智能标记。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentDesigner">
      <summary>扩展组件的设计模式行为。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ComponentDesigner" /> 类的新实例。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.ActionLists">
      <summary>获取与设计器相关联的组件所支持的设计时操作列表。</summary>
      <returns>与设计器相关联的组件所支持的设计时操作列表。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.AssociatedComponents">
      <summary>获取与设计器所管理的组件关联的组件集合。</summary>
      <returns>与设计器所管理的组件关联的组件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.Component">
      <summary>获取此设计器正在设计的组件。</summary>
      <returns>由该设计器管理的组件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Design.ComponentDesigner" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Design.ComponentDesigner" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
                如为 true，则释放托管资源和非托管资源；如为 false，则仅释放非托管资源。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.DoDefaultAction">
      <summary>在源代码文件中为组件的默认事件创建方法签名，并将用户的光标定位到该位置。</summary>
      <exception cref="T:System.ComponentModel.Design.CheckoutException">签出已签入源代码管理程序的文件的尝试失败。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.Finalize">
      <summary>在垃圾回收将对象回收之前，尝试通过调用 Dispose(false) 来释放资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.GetService(System.Type)">
      <summary>尝试从设计器组件的设计模式站点检索指定类型的服务。</summary>
      <returns>实现所请求服务的对象，在无法解析服务时则为 null。</returns>
      <param name="serviceType">要请求的服务的类型。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.InheritanceAttribute">
      <summary>获取一个属性，该属性指示关联组件的继承类型。</summary>
      <returns>关联组件的 <see cref="T:System.ComponentModel.InheritanceAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.Inherited">
      <summary>获取一个值，该值指示是否继承此组件。</summary>
      <returns>
            如果继承此组件，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>使设计器准备查看、编辑和设计指定的组件。</summary>
      <param name="component">此设计器的组件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary>重新初始化现有组件。</summary>
      <param name="defaultValues">要应用于属性的默认值的名称/值字典。如果未指定默认值，则可能为 null。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>初始化新创建的组件。</summary>
      <param name="defaultValues">要应用于属性的默认值的名称/值字典。如果未指定默认值，则可能为 null。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.InitializeNonDefault">
      <summary>对已初始化为非默认设置的导入组件的设置进行初始化。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.InvokeGetInheritanceAttribute(System.ComponentModel.Design.ComponentDesigner)">
      <summary>获取指定 <see cref="T:System.ComponentModel.Design.ComponentDesigner" /> 的 <see cref="T:System.ComponentModel.InheritanceAttribute" />。</summary>
      <returns>指定设计器的 <see cref="T:System.ComponentModel.InheritanceAttribute" />。</returns>
      <param name="toInvoke">要检索其继承属性的 <see cref="T:System.ComponentModel.Design.ComponentDesigner" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.OnSetComponentDefaults">
      <summary>设置组件的默认属性。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.ParentComponent">
      <summary>获取此设计器的父组件。</summary>
      <returns>此设计器的父组件，或者如果此设计器为根组件，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>允许设计器从通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性集中更改或移除项。</summary>
      <param name="attributes">组件的类的属性。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PostFilterEvents(System.Collections.IDictionary)">
      <summary>允许设计器从通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的事件集中更改或移除项。</summary>
      <param name="events">组件的类的事件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PostFilterProperties(System.Collections.IDictionary)">
      <summary>允许设计器从通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性集中更改或移除项。</summary>
      <param name="properties">组件的类的属性。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PreFilterAttributes(System.Collections.IDictionary)">
      <summary>允许设计器在通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性集中添加项。</summary>
      <param name="attributes">组件的类的属性。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PreFilterEvents(System.Collections.IDictionary)">
      <summary>允许设计器在通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的事件集中添加项。</summary>
      <param name="events">组件的类的事件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>允许设计器在通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性集中添加项。</summary>
      <param name="p   <summary>创建 <see cref="T:System.Windows.Data.CompositeCollection" /> 类的新实例，该实例为空并且具有默认初始容量。</summary>
    </member>
    <member name="M:System.Windows.Data.CompositeCollection.#ctor(System.Int32)">
      <summary>创建 <see cref="T:System.Windows.Data.CompositeCollection" /> 类的新实例，该实例为空并且具有指定的初始容量。</summary>
      <param name="capacity">新列表最初可存储的项数。</param>
    </member>
    <member name="M:System.Windows.Data.CompositeCollection.Add(System.Object)">
      <summary>将指定项添加到此集合。</summary>
      <returns>从零开始的索引，在此处添加新项。</returns>
      <param name="newItem">要添加到集合的新项。</param>
    </member>
    <member name="M:System.Windows.Data.CompositeCollection.Clear">
      <summary>清除集合。</summary>
    </member>
    <member name="E:System.Windows.Data.CompositeCollection.CollectionChanged">
      <summary>在由于添加或移除项而使集合更改时发生。</summary>
    </member>
    <member name="M:System.Windows.Data.CompositeCollection.Contains(System.Object)">
      <summary>检查给定项是否在此集合中。</summary>
      <returns>
            如果集合包含给定项，则为 true；否则为 false。</returns>
      <param name="containItem">要检查的项。</param>
    </member>
    <member name="M:System.Windows.Data.CompositeCollection.CopyTo(System.Array,System.Int32)">
      <summary>将对象引用从此集合浅表复制到给定数组。</summary>
      <param name="array">复制操作的目标位置的数组。</param>
      <param name="index">目标数组中从零开始的索引，在此处开始复制。</param>
    </member>
    <member name="P:System.Windows.Data.CompositeCollection.Count">
      <summary>获取此集合中存储的项数。</summary>
      <returns>此集合中存储的项数。</returns>
    </member>
    <member name="M:System.Windows.Data.CompositeCollection.IndexOf(System.Object)">
      <summary>返回此集合中可找到给定项的索引。</summary>
      <returns>如果项出现在集合中，则返回在集合中可找到给定项的从零开始的索引；否则返回 -1。</returns>
      <param name="indexItem">要检索其索引的项。</param>
    </member>
    <member name="M:System.Windows.Data.CompositeCollection.Insert(System.Int32,System.Object)">
      <summary>将项插入集合中的给定索引处。给定位置后的所有项都向下移动一个位置。</summary>
      <param name="insertIndex">要在其位置插入项的索引。</param>
      <param name="insertItem">要添加到集合的项引用。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">如果索引超出范围。</exception>
    </member>
    <member name="P:System.Windows.Data.CompositeCollection.Item(System.Int32)">
      <summary>检索或替换位于集合中给定从零开始的偏移量处的项的索引器属性。</summary>
      <returns>位于从零开始的指定偏移量处的项。</returns>
      <param name="itemIndex">要检索或替换项的从零开始的偏移量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">如果索引超出范围。</exception>
    </member>
    <member name="M:System.Windows.Data.CompositeCollection.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>处理集中事件表中的事件。</summary>
      <returns>
            如果侦听器处理过该事件，则为 true，否则为 false。</returns>
      <param name="managerType">调用此方法的 <see cref="T:System.Windows.WeakEventManager" /> 的类型。这仅识别类型 <see cref="T:System.Collections.Specialized.CollectionChangedEventManager" /> 的管理器对象。</param>
      <param name="sender">发出该事件的对象。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="M:System.Windows.Data.CompositeCollection.Remove(System.Object)">
      <summary>从集合中移除给定项引用。所有其余项向上移动一个位置。</summary>
      <param name="removeItem">要移除的项。</param>
    </member>
    <member name="M:System.Windows.Data.CompositeCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除位于给定索引处的项。所有其余项向上移动一个位置。</summary>
      <param name="removeIndex">要从其位置移除项的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">如果索引超出范围。</exception>
    </member>
    <member name="P:System.Windows.Data.CompositeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
    </member>
    <member name="P:System.Windows.Data.CompositeCollection.System#Collections#ICollection#SyncRoot">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Data.CompositeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回枚举数。</summary>
      <returns>IEnumerator 对象。</returns>
    </member>
    <member name="P:System.Windows.Data.CompositeCollection.System#Collections#IList#IsFixedSize">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
    </member>
    <member name="P:System.Windows.Data.CompositeCollection.System#Collections#IList#IsReadOnly">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
    </member>
    <member name="E:System.Windows.Data.CompositeCollection.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>在集合更改后发生。</summary>
    </member>
    <member name="M:System.Windows.Data.CompositeCollection.System#ComponentModel#ICollectionViewFactory#CreateView">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Data.CompositeCollection.System#Windows#IWeakEventListener#ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="managerType"></param>
      <param name="sender"></param>
      <param name="e"></param>
    </member>
    <member name="T:System.Windows.Data.DataChangedEventManager">
      <summary>提供 <see cref="T:System.Windows.WeakEventManager" /> 实现，以便您可以使用“弱事件侦听器”模式以附加用于 <see cref="E:System.Windows.Data.DataSourceProvider.DataChanged" /> 事件的侦听器。</summary>
    </member>
    <member name="M:System.Windows.Data.DataChangedEventManager.AddListener(System.Windows.Data.DataSourceProvider,System.Windows.IWeakEventListener)">
      <summary>将指定侦听器添加到指定源的 <see cref="E:System.Windows.Data.DataSourceProvider.DataChanged" /> 事件中。</summary>
      <param name="source">包含事件的对象。</param>
      <param name="listener">要作为侦听器添加的对象。</param>
    </member>
    <member name="M:System.Windows.Data.DataChangedEventManager.RemoveListener(System.Windows.Data.DataSourceProvider,System.Windows.IWeakEventListener)">
      <summary>将指定的侦听器从指定源的 <see cref="E:System.Windows.Data.DataSourceProvider.DataChanged" /> 事件中移除。</summary>
      <param name="source">包含事件的对象。</param>
      <param name="listener">要移除的侦听器。</param>
    </member>
    <member name="M:System.Windows.Data.DataChangedEventManager.StartListening(System.Object)">
      <summary>开始对指定源侦听 <see cref="E:System.Windows.Data.DataSourceProvider.DataChanged" /> 事件。</summary>
      <param name="source">包含事件的对象。</param>
    </member>
    <member name="M:System.Windows.Data.DataChangedEventManager.StopListening(System.Object)">
      <summary>停止对指定源侦听 <see cref="E:System.Windows.Data.DataSourceProvider.DataChanged" /> 事件。</summary>
      <param name="source"></param>
    </member>
    <member name="T:System.Windows.Data.DataTransferEventArgs">
      <summary>封装数据传输事件的参数。</summary>
    </member>
    <member name="M:System.Windows.Data.DataTransferEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>对指定对象以特定于类型的方式调用指定的处理程序。</summary>
      <param name="genericHandler">以特定于类型的方式调用的一般处理程序。</param>
      <param name="genericTarget">要对其调用处理程序的对象。</param>
    </member>
    <member name="P:System.Windows.Data.DataTransferEventArgs.Property">
      <summary>获取数据传输事件中涉及的特定绑定目标属性。</summary>
      <returns>已更改的属性。</returns>
    </member>
    <member name="P:System.Windows.Data.DataTransferEventArgs.TargetObject">
      <summary>获取引发事件的绑定的绑定目标对象。</summary>
      <returns>引发事件的绑定的目标对象。</returns>
    </member>
    <member name="T:System.Windows.Data.FilterEventArgs">
      <summary>提供与 <see cref="E:System.Windows.Data.CollectionViewSource.Filter" /> 事件关联的信息和事件数据。</summary>
    </member>
    <member name="P:System.Windows.Data.FilterEventArgs.Accepted">
      <summary>获取或设置一个值，该值指示项是否通过筛选器。</summary>
      <returns>
如果项通过筛选器，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Windows.Data.FilterEventArgs.Item">
      <summary>获取筛选器应当测试的对象。</summary>
      <returns>筛选器应当测试的对象。默认值为 null。</returns>
    </member>
    <member name="T:System.Windows.Data.FilterEventHandler">
      <summary>表示将处理 <see cref="E:System.Windows.Data.CollectionViewSource.Filter" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Data.GroupDescriptionSelectorCallback">
      <summary>表示用于提供自定义逻辑以根据父组及其级别选择 <see cref="T:System.ComponentModel.GroupDescription" /> 的方法。</summary>
      <returns>基于父组及其级别选择的 <see cref="T:System.ComponentModel.GroupDescription" />。</returns>
      <param name="group">父组。</param>
      <param name="level">
        <paramref name="group" /> 的级别。</param>
    </member>
    <member name="T:System.Windows.Data.IMultiValueConverter">
      <summary>提供一种在 <see cref="T:System.Windows.Data.MultiBinding" /> 中应用自定义逻辑的方式。</summary>
    </member>
    <member name="M:System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>将源值转换为绑定源的值。数据绑定引擎在将值从绑定源传播给绑定目标时，调用此方法。</summary>
      <returns>转换后的值。如果该方法返回 null，则使用有效的 null 值。<see cref="T:System.Windows.DependencyProperty" />.<see cref="F:System.Windows.DependencyProperty.UnsetValue" /> 的返回值表示转换器没有生成任何值，且绑定将使用 <see cref="P:System.Windows.Data.BindingBase.FallbackValue" />（如果可用），否则将使用默认值。<see cref="T:System.Windows.Data.Binding" />.<see cref="F:System.Windows.Data.Binding.DoNothing" /> 的返回值表示绑定不传输值，或不使用 <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> 或默认值。</returns>
      <param name="values">
        <see cref="T:System.Windows.Data.MultiBinding" /> 中源绑定生成的值的数组。值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> 表示源绑定没有要提供以进行转换的值。</param>
      <param name="targetType">绑定目标属性的类型。</param>
      <param name="parameter">要使用的转换器参数。</param>
      <param name="culture">要用在转换器中的区域性。</param>
    </member>
    <member name="M:System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>将绑定目标值转换为源绑定值。</summary>
      <returns>从目标值转换回源值的值的数组。</returns>
      <param name="value">绑定目标生成的值。</param>
      <param name="targetTypes">要转换到的类型数组。数组长度指示为要返回的方法所建议的值的数量与类型。</param>
      <param name="parameter">要使用的转换器参数。</param>
      <param name="culture">要用在转换器中的区域性。</param>
    </member>
    <member name="T:System.Windows.Data.IValueConverter">
      <summary>提供一种将自定义逻辑应用于绑定的方式。</summary>
    </member>
    <member name="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>转换值。</summary>
      <returns>转换后的值。如果该方法返回 null，则使用有效的 null 值。</returns>
      <param name="value">绑定源生成的值。</param>
      <param name="targetType">绑定目标属性的类型。</param>
      <param name="parameter">要使用的转换器参数。</param>
      <param name="culture">要用在转换器中的区域性。</param>
    </member>
    <member name="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>转换值。</summary>
      <returns>转换后的值。如果该方法返回 null，则使用有效的 null 值。</returns>
      <param name="value">绑定目标生成的值。</param>
      <param name="targetType">要转换到的类型。</param>
      <param name="parameter">要使用的转换器参数。</param>
      <param name="culture">要用在转换器中的区域性。</param>
    </member>
    <member name="T:System.Windows.Data.ListCollectionView">
      <summary>
                    表示实现 <see cref="T:System.Collections.IList" /> 的集合的集合视图。
                </summary>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.#ctor(System.Collections.IList)">
      <summary>
                    使用所提供的实现 <see cref="T:System.Collections.IList" /> 的集合来初始化 <see cref="T:System.Windows.Data.ListCollectionView" /> 类的新实例。
                </summary>
      <param name="list">
必须实现 <see cref="T:System.Collections.IList" /> 的基础集合。
                </param>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.ActiveComparer">
      <summary>
                    获取或设置在排序时使用的当前活动比较器。
                </summary>
      <returns>
                    属于活动比较器的 <see cref="T:System.Collections.IComparer" /> 对象。
                </returns>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.ActiveFilter">
      <summary>
                    获取或设置当前活动的 <see cref="P:System.Windows.Data.CollectionView.Filter" /> 回调。
                </summary>
      <returns>
                    活动的 <see cref="P:System.Windows.Data.CollectionView.Filter" /> 回调。
                </returns>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.CanFilter">
      <summary>
                    获取一个值，该值指示视图是否支持基于回调的筛选。
                </summary>
      <returns>
对于 <see cref="T:System.Windows.Data.ListCollectionView" /> 的默认实例，此属性始终返回 true。
                </returns>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.CanGroup">
      <summary>
                    获取一个值，该值指示集合视图是否支持分组。
                </summary>
      <returns>
                    如果集合视图支持分组，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.CanSort">
      <summary>
                    获取一个值，该值指示集合视图是否支持排序。
                </summary>
      <returns>
对于 <see cref="T:System.Windows.Data.ListCollectionView" /> 的默认实例，此属性始终返回 true。
                </returns>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.Compare(System.Object,System.Object)">
      <summary>
                    比较两个对象并返回一个值，指示一个对象是小于、等于还是大于另一个对象。
                </summary>
      <returns>
                    如果 <paramref name="o1" /> 小于 <paramref name="o2" />，则小于零；如果 <paramref name="o1" /> 和 <paramref name="o2" /> 相等，则为零；如果 <paramref name="o1" /> 大于 <paramref name="o2" />，则大于零。
                </returns>
      <param name="o1">
                    要比较的第一个对象。
                </param>
      <param name="o2">
                    要比较的第二个对象。
                </param>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.Contains(System.Object)">
      <summary>
                    返回一个值，该值指示给定项是否属于集合视图。
                </summary>
      <returns>
                    如果项属于集合视图，则为 true；否则为 false。
                </returns>
      <param name="item">
                    要检查的对象。
                </param>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.Count">
      <summary>
                    获取记录的估计数量。
                </summary>
      <returns>
                    以下之一：
                
                    值
                
                    含义
                
                    -1
                
                    无法确定集合计数。此值可能由“虚拟化”视图返回，这时视图特意不考虑基础集合中的所有项，因为它试图提高效率，尽量降低整个集合始终都可用这一要求。
                
                    其他任何整数
                
                    集合的计数。
                </returns>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.CustomSort">
      <summary>
                    获取或设置一个实现 <see cref="T:System.Collections.IComparer" /> 的自定义对象，用于在视图中对项进行排序。
                </summary>
      <returns>
                    作为 <see cref="T:System.Collections.IComparer" /> 的实现的排序条件。
                </returns>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.GetEnumerator">
      <summary>
返回可用于枚举视图中的项的对象。
                </summary>
      <returns>
一个可用于枚举视图中的项的 <see cref="T:System.Collections.IEnumerator" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.GetItemAt(System.Int32)">
      <summary>
                    检索位于视图中指定位置的项。
                </summary>
      <returns>
                    位于视图中指定位置的项。
                </returns>
      <param name="index">
                    项所在位置的索引（从零开始）。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    如果 <paramref name="index" /> 超出范围。
                </exception>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.GroupBySelector">
      <summary>
                    获取或设置一个委托，用于将 <see cref="T:System.ComponentModel.GroupDescription" /> 选作父组及其级别的功能。
                </summary>
      <returns>
                    一个方法，此方法提供用于将 <see cref="T:System.ComponentModel.GroupDescription" /> 选作父组及其级别的功能的逻辑。默认值为 null。
                </returns>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.GroupDescriptions">
      <summary>
                    获取 <see cref="T:System.ComponentModel.GroupDescription" /> 对象的集合，这些对象描述集合中的项在视图中的分组方式。
                </summary>
      <returns>
        <see cref="T:System.ComponentModel.GroupDescription" /> 对象的集合，这些对象描述集合中的项在视图中的分组方式。
                </returns>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.Groups">
      <summary>
                    获取顶级组。
                </summary>
      <returns>
一个顶级组的只读集合；如果没有任何组，则返回 null。
                </returns>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.IndexOf(System.Object)">
      <summary>
                    返回给定数据项在集合中所在位置的索引，如果该项的索引未知，则返回 -1。
                </summary>
      <returns>
                    集合中的项的索引，如果集合中不存在此项，则 -1。
                </returns>
      <param name="item">
                    集合中要检查的对象。
                </param>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.InternalContains(System.Object)">
      <summary>
                    返回一个值，该值指示 <see cref="P:System.Windows.Data.ListCollectionView.InternalList" /> 是否包含此项。
                </summary>
      <returns>
                    如果 <see cref="P:System.Windows.Data.ListCollectionView.InternalList" /> 包含该项，则为 true；否则为 false。
                </returns>
      <param name="item">
                    要定位的项。
                </param>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.InternalCount">
      <summary>
                    获取 <see cref="P:System.Windows.Data.ListCollectionView.InternalList" /> 中记录的数量。
                </summary>
      <returns>
        <see cref="P:System.Windows.Data.ListCollectionView.InternalList" /> 中记录的数量。
                </returns>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.InternalGetEnumerator">
      <summary>
                    返回 <see cref="P:System.Windows.Data.ListCollectionView.InternalList" /> 的一个枚举数。
                </summary>
      <returns>
        <see cref="P:System.Windows.Data.ListCollectionView.InternalList" /> 的一个枚举数。
                </returns>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.InternalIndexOf(System.Object)">
      <summary>
                    返回指定项在 <see cref="P:System.Windows.Data.ListCollectionView.InternalList" /> 中的索引。
                </summary>
      <returns>
                    指定项在 <see cref="P:System.Windows.Data.ListCollectionView.InternalList" /> 中的索引。
                </returns>
      <param name="item">
                    要返回其索引的项。
                </param>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.InternalItemAt(System.Int32)">
      <summary>
                    返回 <see cref="P:System.Windows.Data.ListCollectionView.InternalList" /> 中给定索引处的项。
                </summary>
      <returns>
视图中位于从零开始的指定索引处的项。
                </returns>
      <param name="index">
                    项所在位置的索引。
                </param>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.InternalList">
      <summary>
                    获取完整的且未经筛选的基础集合。
                </summary>
      <returns>
必须实现 <see cref="T:System.Collections.IList" /> 的基础集合。
                </returns>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.IsDataInGroupOrder">
      <summary>
                    获取或设置一个值，该值指示项列表在应用排序功能和筛选器（如果有）后是否已处于可以进行分组的正确顺序。
                </summary>
      <returns>
                    如果项列表已处于可以进行分组的正确顺序，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.IsEmpty">
      <summary>
                    返回一个值，该值指示最终的（已筛选）视图是否为空。
                </summary>
      <returns>
                    如果最终的视图为空，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.IsGrouping">
      <summary>
                    获取一个值，该值指示视图中是否有组。
                </summary>
      <returns>
                    如果视图中有组，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.MoveCurrentToPosition(System.Int32)">
      <summary>
                    将位于指定索引位置的项设置为视图中的 <see cref="P:System.Windows.Data.CollectionView.CurrentItem" />。
                </summary>
      <returns>
                    如果最终的 <see cref="P:System.Windows.Data.CollectionView.CurrentItem" /> 是视图中的项，则为 true；否则为 false。
                </returns>
      <param name="position">
                    一个索引位置，位于该位置的项将设置为 <see cref="P:System.Windows.Data.CollectionView.CurrentItem" />。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    在索引超出范围的情况下引发。
                </exception>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.OnBeginChangeLogging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
                    由基类调用，用于通知派生类已将 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件发送到消息队列。
                </summary>
      <param name="args">
                    添加到更改日志的 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 对象。
                </param>
      <exception cref="T:System.ArgumentNullException">
                    如果 <paramref name="args" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.PassesFilter(System.Object)">
      <summary>
返回一个值，该值指示基础集合中的指定项是否属于视图。
                </summary>
      <returns>
如果指定项属于视图或未对集合视图设置筛选器，则为 true；否则为 false。
                </returns>
      <param name="item">
                    要检查的项。
                </param>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.ProcessCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
                    处理 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件。
                </summary>
      <param name="args">
                    要处理的 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 对象。
                </param>
      <exception cref="T:System.ArgumentNullException">
                    如果 <paramref name="args" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.RefreshOverride">
      <summary>
                    重新创建该视图。
                </summary>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.SortDescriptions">
      <summary>
                    获取 <see cref="T:System.ComponentModel.SortDescription" /> 对象的集合，该集合描述集合中的项在视图中的排序方式。
                </summary>
      <returns>
        <see cref="T:System.ComponentModel.SortDescription" /> 对象的集合，这些对象描述集合中的项在视图中的排序方式。
                </returns>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary>
                    此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。
                </summary>
      <param name="o1"></param>
      <param name="o2"></param>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.UsesLocalArray">
      <summary>
                    获取一个值，该值指示排序和筛选是否需要数据的私有副本。
                </summary>
      <returns>
                    如果排序和筛选需要数据的私有副本，则为 true；否则为 false。如果存在 <see cref="P:System.Windows.Data.ListCollectionView.ActiveFilter" /> 或 <see cref="P:System.Windows.Data.ListCollectionView.ActiveComparer" />，或者两者同时存在，则默认实现返回 true。
                </returns>
    </member>
    <member name="T:System.Windows.Data.MultiBinding">
      <summary>描述附加到单个绑定目标属性的 <see cref="T:System.Windows.Data.Binding" /> 对象的集合。</summary>
    </member>
    <member name="M:System.Windows.Data.MultiBinding.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Data.MultiBinding" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Windows.Data.MultiBinding.Bindings">
      <summary>获取此 <see cref="T:System.Windows.Data.MultiBinding" /> 实例中的 <see cref="T:System.Windows.Data.Binding" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.Windows.Data.Binding" /> 对象的集合。<see cref="T:System.Windows.Data.MultiBinding" /> 当前只支持 <see cref="T:System.Windows.Data.Binding" /> 类型的对象，而不支持 <see cref="T:System.Windows.Data.MultiBinding" /> 或 <see cref="T:System.Windows.Data.PriorityBinding" /> 类型的对象。将 <see cref="T:System.Windows.Data.Binding" /> 子级添加到 <see cref="T:System.Windows.Data.MultiBinding" /> 对象会将该子级隐式添加到 <see cref="T:System.Windows.Data.MultiBinding" /> 对象的 <see cref="T:System.Windows.Data.BindingBase" /> 集合。</returns>
    </member>
    <member name="P:System.Windows.Data.MultiBinding.Converter">
      <summary>获取或设置用于将源值转换为目标值、或将目标值转换为源值的转换器。</summary>
      <returns>一个 <see cref="T:System.Windows.Data.IMultiValueConverter" /> 类型的值，该值指示要使用的转换器。默认值为 null。</returns>
    </member>
    <member name="P:System.Windows.Data.MultiBinding.ConverterCulture">
      <summary>获取或设置 <see cref="T:System.Globalization.CultureInfo" /> 对象，该对象应用于任何分配给绑定（由 <see cref="T:System.Windows.Data.MultiBinding" /> 包装或是在 <see cref="T:System.Windows.Data.MultiBinding" /> 自身上）的转换器。</summary>
      <returns>有效的 <see cref="T:System.Globalization.CultureInfo" />。</returns>
    </member>
    <member name="P:System.Windows.Data.MultiBinding.ConverterParameter">
      <summary>获取或设置一个作为附加信息传递到转换器的可选参数。</summary>
      <returns>要传递到转换器的参数。默认值为 null。</returns>
    </member>
    <member name="P:System.Windows.Data.MultiBinding.Mode">
      <summary>获取或设置一个值，该值指示此绑定的数据流的方向。</summary>
      <returns>
        <see cref="T:System.Windows.Data.BindingMode" /> 值之一。默认值为 <see cref="F:System.Windows.Data.BindingMode.Default" />，它返回目标依赖项属性的默认绑定模式值。但是，每个依赖项属性的默认值都不同。一般情况下，用户可编辑的控件属性（例如 <see cref="P:System.Windows.Controls.TextBox.Text" />）默认为双向绑定，而其他大多数属性默认为单向绑定。确定依赖项属性绑定在默认情况下是单向还是双向的编程方法是：使用 <see cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" /> 来获取属性的属性元数据，然后检查 <see cref="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" /> 属性的布尔值。</returns>
    </member>
    <member name="P:System.Windows.Data.MultiBinding.NotifyOnSourceUpdated">
      <summary>获取或设置一个值，该值指示当值从绑定目标传输到绑定源时是否引发 <see cref="E:System.Windows.FrameworkElement.SourceUpdated" /> 事件。</summary>
      <returns>
            如果绑定源值更新时应引发 <see cref="E:System.Windows.FrameworkElement.SourceUpdated" /> 事件，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Windows.Data.MultiBinding.NotifyOnTargetUpdated">
      <summary>获取或设置一个值，该值指示当值从绑定源传输到绑定目标时是否引发 <see cref="E:System.Windows.FrameworkElement.TargetUpdated" /> 事件。</summary>
      <returns>
            如果绑定目标值更新时应引发 <see cref="E:System.Windows.FrameworkElement.TargetUpdated" /> 事件，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Windows.Data.MultiBinding.NotifyOnValidationError">
      <summary>获取或设置一个值，该值指示是否对绑定元素引发 <see cref="E:System.Windows.Controls.Validation.Error" /> 附加事件。</summary>
      <returns>
            如果在源更新过程中出现验证错误时应对绑定元素引发 <see cref="E:System.Windows.Controls.Validation.Error" /> 附加事件，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="M:System.Windows.Data.MultiBinding.ShouldSerializeBindings">
      <summary>指示是否应保持 <see cref="P:System.Windows.Data.MultiBinding.Bindings" /> 属性。</summary>
      <returns>
如果属性值已更改，不再是默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Data.MultiBinding.ShouldSerializeValidationRules">
      <summary>指示是否应保持 <see cref="P:System.Windows.Data.MultiBinding.ValidationRules" /> 属性。</summary>
      <returns>
如果属性值已更改，不再是默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Data.MultiBinding.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Data.MultiBinding.System#Windows#Markup#IAddChild#AddText(System.String)">
      <param name="text"></param>
    </member>
    <member name="P:System.Windows.Data.MultiBinding.UpdateSourceExceptionFilter">
      <summary>获取或设置一个处理程序，您可以使用它提供自定义逻辑，用于处理绑定引擎在绑定源值的更新过程中遇到的异常。这只在您已将 <see cref="T:System.Windows.Controls.ExceptionValidationRule" /> 与 <see cref="T:System.Windows.Data.MultiBinding" /> 对象相关联时适用。</summary>
      <returns>一个方法，此方法提供自定义逻辑，用于处理绑定引擎在绑定源值的更新过程中遇到的异常。</returns>
    </member>
    <member name="P:System.Windows.Data.MultiBinding.UpdateSourceTrigger">
      <summary>获取或设置一个值，该值确定绑定源更新的执行时间。</summary>
      <returns>
        <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> 值之一。默认值为 <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />，它返回目标依赖项属性的默认 <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> 值。但是，多数依赖项属性的默认值为 <see cref="F:System.Windows.Data.UpdateSourceTrigger.PropertyChanged" />，而 <see cref="P:System.Windows.Controls.TextBox.Text" /> 属性的默认值为 <see cref="F:System.Windows.Data.UpdateSourceTrigger.LostFocus" />。确定依赖项属性的默认 <see cref="P:System.Windows.Data.Binding.UpdateSourceTrigger" /> 值的编程方法是：使用 <see cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" /> 获取属性的属性元数据，然后检查 <see cref="P:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" /> 属性的值。</returns>
    </member>
    <member name="P:System.Windows.Data.MultiBinding.ValidationRules">
      <summary>获取 <see cref="T:System.Windows.Data.MultiBinding" /> 的此实例的 <see cref="T:System.Windows.Controls.ValidationRule" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.Windows.Data.MultiBinding" /> 的此实例的 <see cref="T:System.Windows.Controls.ValidationRule" /> 对象的集合。</returns>
    </member>
    <member name="T:System.Windows.Data.MultiBindingExpression">
      <summary>包含有关 <see cref="T:System.Windows.Data.MultiBinding" /> 的单个实例的实例信息。</summary>
    </member>
    <member name="P:System.Windows.Data.MultiBindingExpression.BindingExpressions">
      <summary>获取 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 的此实例中 <see cref="T:System.Windows.Data.BindingExpression" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.Windows.Data.BindingExpression" /> 对象的只读集合。即使返回类型为 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 对象的集合，返回的集合也仅包含 <see cref="T:System.Windows.Data.BindingExpression" /> 对象，这是因为目前 <see cref="T:System.Windows.Data.MultiBinding" /> 类仅支持 <see cref="T:System.Windows.Data.Binding" /> 对象。</returns>
    </member>
    <member name="P:System.Windows.Data.MultiBindingExpression.HasError">
      <summary>返回一个值，该值指示任意内部 <see cref="T:System.Windows.Data.Binding" /> 对象或 <see cref="T:System.Windows.Data.MultiBinding" /> 本身是否具有一个失败的验证规则。</summary>
      <returns>
            如果至少有一个内部 <see cref="T:System.Windows.Data.Binding" /> 对象或 <see cref="T:System.Windows.Data.MultiBinding" /> 本身具有一个失败的验证规则，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Data.MultiBindingExpression.ParentMultiBinding">
      <summary>获取从其中创建此 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 的 <see cref="T:System.Windows.Data.MultiBinding" /> 对象。</summary>
      <returns>从其中创建此 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 的 <see cref="T:System.Windows.Data.MultiBinding" /> 对象。</returns>
    </member>
    <member name="M:System.Windows.Data.MultiBindingExpression.UpdateSource">
      <summary>以 <see cref="F:System.Windows.Data.BindingMode.TwoWay" /> 或 <see cref="F:System.Windows.Data.BindingMode.OneWayToSource" /> 绑定的形式将当前绑定目标值发送到绑定源属性。</summary>
    </member>
    <member name="M:System.Windows.Data.MultiBindingExpression.UpdateTarget">
      <summary>强制将数据从绑定源属性传输到绑定目标属性。</summary>
    </member>
    <member name="P:System.Windows.Data.MultiBindingExpression.ValidationError">
      <summary>获取导致 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 的此实例无效的 <see cref="T:System.Windows.Controls.ValidationError" /> 对象。</summary>
      <returns>导致 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 的此实例无效的 <see cref="T:System.Windows.Controls.ValidationError" /> 对象。</returns>
    </member>
    <member name="T:System.Windows.Data.ObjectDataProvider">
      <summary>包装和创建可以用作绑定源的对象。</summary>
    </member>
    <member name="M:System.Windows.Data.ObjectDataProvider.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Data.ObjectDataProvider" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Data.ObjectDataProvider.BeginQuery">
      <summary>根据 <see cref="P:System.Windows.Data.ObjectDataProvider.IsAsynchronous" /> 属性的值，立即开始创建请求的对象，或在后台线程上开始创建。</summary>
    </member>
    <member name="P:System.Windows.Data.ObjectDataProvider.ConstructorParameters">
      <summary>获取要传递给该构造函数的参数列表。</summary>
      <returns>要传递给该构造函数的参数列表。默认值为 null。</returns>
    </member>
    <member name="P:System.Windows.Data.ObjectDataProvider.IsAsynchronous">
      <summary>获取或设置一个值，该值指示是在辅助线程还是在活动上下文中执行对象创建。</summary>
      <returns>
            如果为 true，则在辅助线程中执行对象创建；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Windows.Data.ObjectDataProvider.MethodName">
      <summary>获取或设置要调用的方法的名称。</summary>
      <returns>要调用的方法的名称。默认值为 null。</returns>
    </member>
    <member name="P:System.Windows.Data.ObjectDataProvider.MethodParameters">
      <summary>获取要传递给该方法的参数列表。</summary>
      <returns>要传递给该方法的参数列表。默认值是空列表。</returns>
    </member>
    <member name="P:System.Windows.Data.ObjectDataProvider.ObjectInstance">
      <summary>获取或设置用作绑定源的对象。</summary>
      <returns>对象的实例是从 <see cref="P:System.Windows.Data.ObjectDataProvider.ObjectType" /> 和 <see cref="P:System.Windows.Data.ObjectDataProvider.ConstructorParameters" />，或 <see cref="T:System.Windows.Data.DataSourceProvider" />（其中的 <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> 用作 <see cref="P:System.Windows.Data.ObjectDataProvider.ObjectInstance" />）构造的。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Data.ObjectDataProvider" /> 同时分配了 <see cref="P:System.Windows.Data.ObjectDataProvider.ObjectType" /> 和 <see cref="P:System.Windows.Data.ObjectDataProvider.ObjectInstance" />，只允许分配一个。</exception>
    </member>
    <member name="P:System.Windows.Data.ObjectDataProvider.ObjectType">
      <summary>获取或设置要创建其实例的对象的类型。</summary>
      <returns>如果 <see cref="T:System.Windows.Data.ObjectDataProvider" /> 未初始化或显式设置为 null，则该属性为 null。如果分配了 <see cref="P:System.Windows.Data.ObjectDataProvider.ObjectInstance" />，则 <see cref="P:System.Windows.Data.ObjectDataProvider.ObjectType" /> 返回对象的类型或 null（如果对象为 null）。默认值为 null。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Data.ObjectDataProvider" /> 同时分配了 <see cref="P:System.Windows.Data.ObjectDataProvider.ObjectType" /> 和 <see cref="P:System.Windows.Data.ObjectDataProvider.ObjectInstance" />，只允许分配一个。</exception>
    </member>
    <member name="M:System.Windows.Data.ObjectDataProvider.ShouldSerializeConstructorParameters">
      <summary>指示是否应保持 <see cref="P:System.Windows.Data.ObjectDataProvider.ConstructorParameters" /> 属性。</summary>
      <returns>
            如果属性值已更改，不再是默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Data.ObjectDataProvider.ShouldSerializeMethodParameters">
      <summary>指示是否应保持 <see cref="P:System.Windows.Data.ObjectDataProvider.MethodParameters" /> 属性。</summary>
      <returns>
            如果属性值已更改，不再是默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Data.ObjectDataProvider.ShouldSerializeObjectInstance">
      <summary>指示是否应保持 <see cref="P:System.Windows.Data.ObjectDataProvider.ObjectInstance" /> 属性。</summary>
      <returns>
            如果属性值已更改，不再是默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Data.ObjectDataProvider.ShouldSerializeObjectType">
      <summary>指示是否应保持 <see cref="P:System.Windows.Data.ObjectDataProvider.ObjectType" /> 属性。</summary>
      <returns>
            如果属性值已更改，不再是默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Windows.Data.PriorityBinding">
      <summary>描述附加到单个绑定目标属性的 <see cref="T:System.Windows.Data.Binding" /> 对象的集合，该属性从成功生成值的集合中的第一个绑定接收其值。</summary>
    </member>
    <member name="M:System.Windows.Data.PriorityBinding.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Data.PriorityBinding" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Data.PriorityBinding.Bindings">
      <summary>获取 <see cref="T:System.Windows.Data.Binding" /> 对象的集合，该集合是为 <see cref="T:System.Windows.Data.PriorityBinding" /> 的此实例建立的。</summary>
      <returns>
        <see cref="T:System.Windows.Data.Binding" /> 对象的集合。<see cref="T:System.Windows.Data.PriorityBinding" /> 当前只支持类型为 <see cref="T:System.Windows.Data.Binding" /> 的对象，不支持类型为 <see cref="T:System.Windows.Data.MultiBinding" /> 或 <see cref="T:System.Windows.Data.PriorityBinding" /> 的对象。将 <see cref="T:System.Windows.Data.Binding" /> 子级添加到 <see cref="T:System.Windows.Data.PriorityBinding" /> 对象会将该子级隐式添加到 <see cref="T:System.Windows.Data.MultiBinding" /> 对象的 <see cref="T:System.Windows.Data.BindingBase" /> 集合。默认为空集合。</returns>
    </member>
    <member name="M:System.Windows.Data.PriorityBinding.ShouldSerializeBindings">
      <summary>返回一个值，该值指示序列化进程是否应当在此类的实例上对 <see cref="P:System.Windows.Data.PriorityBinding.Bindings" /> 属性的有效值进行序列化。</summary>
      <returns>
            如果 <see cref="P:System.Windows.Data.PriorityBinding.Bindings" /> 属性值应当进行序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Data.PriorityBinding.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Data.PriorityBinding.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="text"></param>
    </member>
    <member name="T:System.Windows.Data.PriorityBindingExpression">
      <summary>包含有关 <see cref="T:System.Windows.Data.PriorityBinding" /> 的单个实例的实例信息。</summary>
    </member>
    <member name="P:System.Windows.Data.PriorityBindingExpression.ActiveBindingExpression">
      <summary>获取活动的 <see cref="T:System.Windows.Data.BindingExpression" /> 对象。</summary>
      <returns>活动的 <see cref="T:System.Windows.Data.BindingExpression" /> 对象，或者如果没有活动的对象，则为 null。即使返回类型为 <see cref="T:System.Windows.Data.BindingExpressionBase" />，返回的对象也仅为 <see cref="T:System.Windows.Data.BindingExpression" /> 对象，这是因为目前 <see cref="T:System.Windows.Data.PriorityBinding" /> 类仅支持 <see cref="T:System.Windows.Data.Binding" /> 对象。</returns>
    </member>
    <member name="P:System.Windows.Data.PriorityBindingExpression.BindingExpressions">
      <summary>获取 <see cref="T:System.Windows.Data.PriorityBindingExpression" /> 的此实例内 <see cref="T:System.Windows.Data.BindingExpression" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.Windows.Data.BindingExpression" /> 对象的只读集合。即使返回类型为 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 对象的集合，返回的集合也仅包含 <see cref="T:System.Windows.Data.BindingExpression" /> 对象，这是因为目前 <see cref="T:System.Windows.Data.PriorityBinding" /> 类仅支持 <see cref="T:System.Windows.Data.Binding" /> 对象。</returns>
    </member>
    <member name="P:System.Windows.Data.PriorityBindingExpression.ParentPriorityBinding">
      <summary>获取从其中创建此 <see cref="T:System.Windows.Data.PriorityBindingExpression" /> 的 <see cref="T:System.Windows.Data.PriorityBinding" /> 对象。</summary>
      <returns>从其中创建此 <see cref="T:System.Windows.Data.PriorityBindingExpression" /> 的 <see cref="T:System.Windows.Data.PriorityBinding" /> 对象。</returns>
    </member>
    <member name="T:System.Windows.Data.PropertyGroupDescription">
      <summary>描述使用属性名作为标准对项进行分组。</summary>
    </member>
    <member name="M:System.Windows.Data.PropertyGroupDescription.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Data.PropertyGroupDescription" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Data.PropertyGroupDescription.#ctor(System.String)">
      <summary>用指定的属性名初始化 <see cref="T:System.Windows.Data.PropertyGroupDescription" /> 类的新实例。</summary>
      <param name="propertyName">指定项所属的组的属性名称。</param>
    </member>
    <member name="M:System.Windows.Data.PropertyGroupDescription.#ctor(System.String,System.Windows.Data.IValueConverter)">
      <summary>用指定的属性名和转换器初始化 <see cref="T:System.Windows.Data.PropertyGroupDescription" /> 类的新实例。</summary>
      <param name="propertyName">指定项所属的组的属性名称。如果是 null，则项本身会传递到值转换器。</param>
      <param name="converter">要应用到属性值或项以生成用于确定项所属的组的最终值的 <see cref="T:System.Windows.Data.IValueConverter" /> 对象。转换器可能返回集合，即指示项可能出现在多个组中。</param>
    </member>
    <member name="M:System.Windows.Data.PropertyGroupDescription.#ctor(System.String,System.Windows.Data.IValueConverter,System.StringComparison)">
      <summary>使用指定的参数初始化 <see cref="T:System.Windows.Data.PropertyGroupDescription" /> 类的新实例。</summary>
      <param name="propertyName">指定项所属的组的属性名称。如果是 null，则项本身会传递到值转换器。</param>
      <param name="converter">要应用到属性值或项以生成用于确定项所属的组的最终值的 <see cref="T:System.Windows.Data.IValueConverter" /> 对象。转换器可能返回集合，即指示项可能出现在多个组中。</param>
      <param name="stringComparison">指定项的值与组名称之间的比较的 <see cref="T:System.StringComparison" /> 值。</param>
    </member>
    <member name="P:System.Windows.Data.PropertyGroupDescription.Converter">
      <summary>获取或设置一个要应用到属性值或项以生成用于确定项所属的组的最终值的转换器。</summary>
      <returns>默认值为 null。</returns>
    </member>
    <member name="M:System.Windows.Data.PropertyGroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
      <summary>返回给定项的组名称。</summary>
      <returns>给定项的组名称。</returns>
      <param name="item">要返回其组名称的项。</param>
      <param name="level">分组级别。</param>
      <param name="culture">要提供给转换器的 <see cref="T:System.Globalization.CultureInfo" />。</param>
    </member>
    <member name="M:System.Windows.Data.PropertyGroupDescription.NamesMatch(System.Object,System.Object)">
      <summary>返回一个值，该值指示组名称和项名称是否匹配，从而项属于组。</summary>
      <returns>
            如果名称匹配并且项属于组，则为 true，否则为 false。</returns>
      <param name="groupName">要检查的组名称。</param>
      <param name="itemName">要检查的项名称。</param>
    </member>
    <member name="P:System.Windows.Data.PropertyGroupDescription.PropertyName">
      <summary>获取或设置用于确定项所属的组的属性名称。</summary>
      <returns>默认值为 null。</returns>
    </member>
    <member name="P:System.Windows.Data.PropertyGroupDescription.StringComparison">
      <summary>获取或设置一个 <see cref="T:System.StringComparison" /> 值，该值指定项的值（由 <see cref="P:System.Windows.Data.PropertyGroupDescription.PropertyName" /> 和 <see cref="P:System.Windows.Data.PropertyGroupDescription.Converter" /> 确定）和组名称之间的比较。</summary>
      <returns>默认值为 <see cref="T:System.StringComparison" />。Ordinal。</returns>
    </member>
    <member name="T:System.Windows.Data.RelativeSource">
      <summary>实现标记扩展，以描述绑定源相对于绑定目标的位置。</summary>
    </member>
    <member name="M:System.Windows.Data.RelativeSource.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Data.RelativeSource" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Data.RelativeSource.#ctor(System.Windows.Data.RelativeSourceMode)">
      <summary>用初始模式初始化 <see cref="T:System.Windows.Data.RelativeSource" /> 类的一个新实例。</summary>
      <param name="mode">
        <see cref="T:System.Windows.Data.RelativeSourceMode" /> 值之一。</param>
    </member>
    <member name="M:System.Windows.Data.RelativeSource.#ctor(System.Windows.Data.RelativeSourceMode,System.Type,System.Int32)">
      <summary>用初始模式以及其他用于查找所需相对源的树遍历限定符初始化 <see cref="T:System.Windows.Data.RelativeSource" /> 类的一个新实例。</summary>
      <param name="mode">
        <see cref="T:System.Windows.Data.RelativeSourceMode" /> 值之一。对于这一相关的签名，该值应当为 <see cref="F:System.Windows.Data.RelativeSourceMode.FindAncestor" />。</param>
      <param name="ancestorType">要查找的上级节点的 <see cref="T:System.Type" />。</param>
      <param name="ancestorLevel">所有给定类型的上级节点中所需的上级节点的序号位置。</param>
    </member>
    <member name="P:System.Windows.Data.RelativeSource.AncestorLevel">
      <summary>在 <see cref="F:System.Windows.Data.RelativeSourceMode.FindAncestor" /> 模式中获取或设置要查找的上级节点的级别。使用 1 表示与绑定目标元素最近的一个级别。</summary>
      <returns>上级节点级别。使用 1 表示与绑定目标元素最近的一个级别。</returns>
    </member>
    <member name="P:System.Windows.Data.RelativeSource.AncestorType">
      <summary>获取或设置要查找的上级节点的类型。</summary>
      <returns>上级节点的类型。默认值为 null。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Data.RelativeSource" /> 未处于 <see cref="F:System.Windows.Data.RelativeSourceMode.FindAncestor" /> 模式中。</exception>
    </member>
    <member name="P:System.Windows.Data.RelativeSource.Mode">
      <summary>获取或设置一个 <see cref="T:System.Windows.Data.RelativeSourceMode" /> 值，该值描述绑定源相对于绑定目标的位置。</summary>
      <returns>
        <see cref="T:System.Windows.Data.RelativeSourceMode" /> 值之一。默认值为 null。</returns>
      <exception cref="T:System.InvalidOperationException">此属性在初始化之后是不可变的。不要对此实例更改 <see cref="P:System.Windows.Data.RelativeSource.Mode" />，而应创建一个新的 <see cref="T:System.Windows.Data.RelativeSource" /> 或使用其他静态实例。</exception>
    </member>
    <member name="P:System.Windows.Data.RelativeSource.PreviousData">
      <summary>获取一个静态值，该值用于返回为 <see cref="F:System.Windows.Data.RelativeSourceMode.PreviousData" /> 模式构造的 <see cref="T:System.Windows.Data.RelativeSource" />。</summary>
      <returns>静态 <see cref="T:System.Windows.Data.RelativeSource" />。</returns>
    </member>
    <member name="M:System.Windows.Data.RelativeSource.ProvideValue(System.IServiceProvider)">
      <summary>返回一个应设置为此标记扩展的目标对象属性上的值的对象。对于 <see cref="T:System.Windows.Data.RelativeSource" />，这是另一个 <see cref="T:System.Windows.Data.RelativeSource" />，它使用指定模式的适当的源。</summary>
      <returns>另一个 <see cref="T:System.Windows.Data.RelativeSource" />。</returns>
      <param name="serviceProvider">可以为标记扩展提供服务的对象。在此实现中，此参数可以为 null。</param>
    </member>
    <member name="P:System.Windows.Data.RelativeSource.Self">
      <summary>获取一个静态值，该值用于返回为 <see cref="F:System.Windows.Data.RelativeSourceMode.Self" /> 模式构造的 <see cref="T:System.Windows.Data.RelativeSource" />。</summary>
      <returns>静态 <see cref="T:System.Windows.Data.RelativeSource" />。</returns>
    </member>
    <member name="M:System.Windows.Data.RelativeSource.ShouldSerializeAncestorLevel">
      <summary>指示是否应持久保存 <see cref="P:System.Windows.Data.RelativeSource.AncestorLevel" /> 属性。</summary>
      <returns>
            如果属性值已更改，不再是默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Data.RelativeSource.ShouldSerializeAncestorType">
      <summary>指示是否应持久保存 <see cref="P:System.Windows.Data.RelativeSource.AncestorType" /> 属性。</summary>
      <returns>
            如果属性值已更改，不再是默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Data.RelativeSource.System#ComponentModel#ISupportInitialize#BeginInit">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Data.RelativeSource.System#ComponentModel#ISupportInitialize#EndInit">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
    </member>
    <member name="P:System.Windows.Data.RelativeSource.TemplatedParent">
      <summary>获取一个静态值，该值用于返回为 <see cref="F:System.Windows.Data.RelativeSourceMode.TemplatedParent" /> 模式构造的 <see cref="T:System.Windows.Data.RelativeSource" />。</summary>
      <returns>静态 <see cref="T:System.Windows.Data.RelativeSource" />。</returns>
    </member>
    <member name="T:System.Windows.Data.RelativeSourceMode">
      <summary>描述相对于绑定目标位置的绑定源的位置。</summary>
    </member>
    <member name="F:System.Windows.Data.RelativeSourceMode.PreviousData">
      <summary>允许您绑定所显示数据项列表中以前的数据项（不是包含数据项的控件）。</summary>
    </member>
    <member name="F:System.Windows.Data.RelativeSourceMode.TemplatedParent">
      <summary>引用应用了模板（其中有数据绑定元素）的元素。这类似于设置 <see cref="T:System.Windows.TemplateBindingExtension" />，并仅当 <see cref="T:System.Windows.Data.Binding" /> 在模板中时适用。</summary>
    </member>
    <member name="F:System.Windows.Data.RelativeSourceMode.Self">
      <summary>引用您对其设置绑定的元素，并允许您将该元素的一个属性绑定到同一元素中的其他属性。</summary>
    </member>
    <member name="F:System.Windows.Data.RelativeSourceMode.FindAncestor">
      <summary>引用数据绑定元素父链中的上级。您可以使用它绑定到特定类型或其子类的上级。如果您要指定 <see cref="P:System.Windows.Data.RelativeSource.AncestorType" /> 和/或 <see cref="P:System.Windows.Data.RelativeSource.AncestorLevel" />，可以使用此模式。</summary>
    </member>
    <member name="T:System.Windows.Data.UpdateSourceExceptionFilterCallback">
      <summary>表示处理更新绑定源值过程中引发的异常的方法。它必须与 <see cref="T:System.Windows.Controls.ExceptionValidationRule" /> 一起使用。</summary>
      <returns>通常为下列某项的对象：值说明null忽略任何异常。默认行为（如果没有 <see cref="T:System.Windows.Data.UpdateSourceExceptionFilterCallback" />）是对异常创建 <see cref="T:System.Windows.Controls.ValidationError" /> 并将其添加到绑定元素的 <see cref="P:System.Windows.Controls.Validation.Errors" /> 集合。任何对象创建 <see cref="T:System.Windows.Controls.ValidationError" /> 对象，并将 <see cref="P:System.Windows.Controls.ValidationError.ErrorContent" /> 设置为此对象。将 <see cref="T:System.Windows.Controls.ValidationError" /> 对象添加到绑定元素的 <see cref="P:System.Windows.Controls.Validation.Errors" /> 集合中。一个 <see cref="T:System.Windows.Controls.ValidationError" /> 对象将 <see cref="T:System.Windows.Data.BindingExpression" /> 或 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 对象设置为 <see cref="P:System.Windows.Controls.ValidationError.BindingInError" />。将 <see cref="T:System.Windows.Controls.ValidationError" /> 对象添加到绑定元素的 <see cref="P:System.Windows.Controls.Validation.Errors" /> 集合中。</returns>
      <param name="bindExpression">出现异常的对象。</param>
      <param name="exception">遇到的异常。</param>
    </member>
    <member name="T:System.Windows.Data.UpdateSourceTrigger">
      <summary>描述绑定源更新的执行时间。</summary>
    </member>
    <member name="F:System.Windows.Data.UpdateSourceTrigger.Default">
      <summary>绑定目标属性的默认 <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> 值。多数依赖项属性的默认值为 <see cref="F:System.Windows.Data.UpdateSourceTrigger.PropertyChanged" />，而 <see cref="P:System.Windows.Controls.TextBox.Text" /> 属性的默认值为 <see cref="F:System.Windows.Data.UpdateSourceTrigger.LostFocus" />。</summary>
    </member>
    <member name="F:System.Windows.Data.UpdateSourceTrigger.PropertyChanged">
      <summary>当绑定目标属性更改时，立即更新绑定源。</summary>
    </member>
    <member name="F:System.Windows.Data.UpdateSourceTrigger.LostFocus">
      <summary>当绑定目标元素失去焦点时，更新绑定源。</summary>
    </member>
    <member name="F:System.Windows.Data.UpdateSourceTrigger.Explicit">
      <summary>仅在调用 <see cref="M:System.Windows.Data.BindingExpression.UpdateSource" /> 方法时更新绑定源。</summary>
    </member>
    <member name="T:System.Windows.Data.ValueConversionAttribute">
      <summary>表示允许值转换器的作者指定转换器的实现中涉及的数据类型的属性。</summary>
    </member>
    <member name="M:System.Windows.Data.ValueConversionAttribute.#ctor(System.Type,System.Type)">
      <summary>用指定的源类型和目标类型初始化 <see cref="T:System.Windows.Data.ValueConversionAttribute" /> 类的新实例。</summary>
      <param name="sourceType">此转换器转换的类型。</param>
      <param name="targetType">此转换器转换为的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceType" /> 参数不能为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetType" /> 参数不能为 null。</exception>
    </member>
    <member name="M:System.Windows.Data.ValueConversionAttribute.GetHashCode">
      <summary>返回 <see cref="T:System.Windows.Data.ValueConversionAttribute" /> 实例的哈希代码。</summary>
      <returns>
        <see cref="T:System.Windows.Data.ValueConversionAttribute" /> 实例的哈希代码。</returns>
    </member>
    <member name="P:System.Windows.Data.ValueConversionAttribute.ParameterType">
      <summary>获取和设置可选值转换器参数对象的类型。</summary>
      <returns>可选值转换器参数对象的类型。</returns>
    </member>
    <member name="P:System.Windows.Data.ValueConversionAttribute.SourceType">
      <summary>获取此转换器转换的类型。</summary>
      <returns>此转换器转换的类型。</returns>
    </member>
    <member name="P:System.Windows.Data.ValueConversionAttribute.TargetType">
      <summary>获取此转换器转换为的类型。</summary>
      <returns>此转换器转换为的类型。</returns>
    </member>
    <member name="P:System.Windows.Data.ValueConversionAttribute.TypeId">
      <summary>获取此 <see cref="T:System.Windows.Data.ValueConversionAttribute" /> 实例的唯一标识符。</summary>
    </member>
    <member name="T:System.Windows.Data.XmlDataProvider">
      <summary>允许以声明方式访问数据绑定的 XML 数据。</summary>
    </member>
    <member name="M:System.Windows.Data.XmlDataProvider.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Data.XmlDataProvider" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Data.XmlDataProvider.BaseUri">
      <summary> 此类型或成员支持 WPF 基础结构，不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Data.XmlDataProvider.BeginQuery">
      <summary>准备加载内联 XML 或外部 XML 文件，以生成 XML 节点的集合。</summary>
    </member>
    <member name="P:System.Windows.Data.XmlDataProvider.Document">
      <summary>获取或设置要用作绑定源的 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <returns>要用作绑定源的 <see cref="T:System.Xml.XmlDocument" />。默认值为 null。</returns>
    </member>
    <member name="M:System.Windows.Data.XmlDataProvider.EndInit">
      <summary>表示此元素的初始化已完成。如果没有其他未完成的 <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" />，则这会导致 <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" />。</summary>
    </member>
    <member name="P:System.Windows.Data.XmlDataProvider.IsAsynchronous">
      <summary>获取或设置一个值，该值指示是在辅助线程还是在活动上下文中执行节点集合创建。</summary>
      <returns>
            如果在辅助线程中执行节点集合创建，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="M:System.Windows.Data.XmlDataProvider.ShouldSerializeSource">
      <summary>指示是否应持久保存 <see cref="P:System.Windows.Data.XmlDataProvider.Source" /> 属性。</summary>
      <returns>
            如果属性值已更改，不再是默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Data.XmlDataProvider.ShouldSerializeXmlSerializer">
      <summary>指示是否应持久保存 <see cref="P:System.Windows.Data.XmlDataProvider.XmlSerializer" /> 属性。</summary>
      <returns>
            如果属性值已更改，不再是默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Data.XmlDataProvider.ShouldSerializeXPath">
      <summary>指示是否应持久保存 <see cref="P:System.Windows.Data.XmlDataProvider.XPath" /> 属性。</summary>
      <returns>
            如果属性值已更改，不再是默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Data.XmlDataProvider.Source">
      <summary>获取或设置要用作绑定源的 XML 数据文件的 <see cref="T:System.Uri" />。</summary>
      <returns>要用作绑定源的 XML 数据文件的 <see cref="T:System.Uri" />。默认值为 null。</returns>
    </member>
    <member name="P:System.Windows.Data.XmlDataProvider.System#Windows#Markup#IUriContext#BaseUri">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
    </member>
    <member name="P:System.Windows.Data.XmlDataProvider.XmlNamespaceManager">
      <summary>获取或设置用于运行 <see cref="P:System.Windows.Data.XmlDataProvider.XPath" /> 查询的 <see cref="T:System.Xml.XmlNamespaceManager" />。</summary>
      <returns>用于运行 <see cref="P:System.Windows.Data.XmlDataProvider.XPath" /> 查询的 <see cref="T:System.Xml.XmlNamespaceManager" />。默认值为 null。</returns>
    </member>
    <member name="P:System.Windows.Data.XmlDataProvider.XmlSerializer">
      <summary>获取内联 XML 内容。</summary>
      <returns>内联 XML 内容。</returns>
    </member>
    <member name="P:System.Windows.Data.XmlDataProvider.XPath">
      <summary>获取或设置用于生成数据集合的 XPath 查询。</summary>
      <returns>用于生成数据集合的 XPath 查询。默认值为空字符串。</returns>
    </member>
    <member name="T:System.Windows.Data.XmlNamespaceMapping">
      <summary>声明 统一资源标识符 (URI) 与前缀之间的映射</summary>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMapping.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMapping.#ctor(System.String,System.Uri)">
      <summary>使用指定的前缀和 统一资源标识符 (URI) 初始化 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 类的一个新实例。</summary>
      <param name="prefix">要用在 可扩展应用程序标记语言 (XAML) 中的前缀。</param>
      <param name="uri">要为其创建映射的命名空间的 <see cref="T:System.Uri" />。</param>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMapping.Equals(System.Object)">
      <summary>返回一个值，该值指示此 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 是否与指定实例相等。</summary>
      <returns>
如果两个实例相同，则为 true；否则为 false。</returns>
      <param name="obj">要比较是否相等的实例。</param>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMapping.GetHashCode">
      <summary>返回此 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 的哈希代码。</summary>
      <returns>此 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMapping.op_Equality(System.Windows.Data.XmlNamespaceMapping,System.Windows.Data.XmlNamespaceMapping)">
      <summary>按值执行相等比较。</summary>
      <returns>
如果两个 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象相同，则为 true；否则为 false。</returns>
      <param name="mappingA">要比较的第一个 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象。</param>
      <param name="mappingB">要比较的第二个 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象。</param>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMapping.op_Inequality(System.Windows.Data.XmlNamespaceMapping,System.Windows.Data.XmlNamespaceMapping)">
      <summary>按值执行不相等比较。</summary>
      <returns>
如果两个 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象不相等，则为 true；否则为 false。</returns>
      <param name="mappingA">要比较的第一个 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象。</param>
      <param name="mappingB">要比较的第二个 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象。</param>
    </member>
    <member name="P:System.Windows.Data.XmlNamespaceMapping.Prefix">
      <summary>获取或设置要用在 可扩展应用程序标记语言 (XAML) 中的前缀。</summary>
      <returns>与 URI 关联的前缀。默认值为空字符串 ("")。</returns>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMapping.System#ComponentModel#ISupportInitialize#BeginInit">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMapping.System#ComponentModel#ISupportInitialize#EndInit">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
    </member>
    <member name="P:System.Windows.Data.XmlNamespaceMapping.Uri">
      <summary>获取或设置要为其创建映射的命名空间的 <see cref="T:System.Uri" />。</summary>
      <returns>命名空间的 URI。默认值为 null。</returns>
    </member>
    <member name="T:System.Windows.Data.XmlNamespaceMappingCollection">
      <summary>
                    表示 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象的集合。
                </summary>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMappingCollection.#ctor">
      <summary>
                    初始化 <see cref="T:System.Windows.Data.XmlNamespaceMappingCollection" /> 类的一个新实例。
                </summary>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMappingCollection.Add(System.Windows.Data.XmlNamespaceMapping)">
      <summary>
将 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象添加到此集合中。
                </summary>
      <param name="mapping">
                    要添加的 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象。该类型不能为 null。
                </param>
      <exception cref="T:System.ArgumentNullException">
                    如果 <paramref name="mapping" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
如果 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象的 <see cref="P:System.Windows.Data.XmlNamespaceMapping.Uri" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMappingCollection.AddChild(System.Object)">
      <summary>
将 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象添加到此集合中。
                </summary>
      <param name="value">
                    要添加的 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象。该类型不能为 null。
                </param>
      <exception cref="T:System.ArgumentException">
                    如果 <paramref name="mapping" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMappingCollection.AddText(System.String)">
      <summary>
                    添加文本字符串作为此 <see cref="T:System.Windows.Data.XmlNamespaceMappingCollection" /> 对象的子级。
                </summary>
      <param name="text">
                    要作为子级添加的文本字符串。
                </param>
      <exception cref="T:System.ArgumentNullException">
                    如果 <paramref name="text" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMappingCollection.Clear">
      <summary>
                    移除此集合中的所有 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象。
                </summary>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMappingCollection.Contains(System.Windows.Data.XmlNamespaceMapping)">
      <summary>
                    返回一个值，该值指示此集合是否包含指定的 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象。
                </summary>
      <returns>
                    如果此集合包含指定的 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象，则为 true；否则为 false。
                </returns>
      <param name="mapping">
                    相关的 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象。它不能为 null。
                </param>
      <exception cref="T:System.ArgumentNullException">
                    如果 <paramref name="mapping" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
如果 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象的 <see cref="P:System.Windows.Data.XmlNamespaceMapping.Uri" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMappingCollection.CopyTo(System.Windows.Data.XmlNamespaceMapping[],System.Int32)">
      <summary>
                    从指定索引处开始，将集合中的项复制到指定的数组。
                </summary>
      <param name="array">
                    从集合所复制的项的目标位置的数组。
                </param>
      <param name="arrayIndex">
                    数组中从零开始的索引，在此处开始复制。
                </param>
      <exception cref="T:System.ArgumentNullException">
                    如果 <paramref name="array" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                    如果项的数目超过数组的长度。
                </exception>
    </member>
    <member name="P:System.Windows.Data.XmlNamespaceMappingCollection.Count">
      <summary>
                    获取集合中的 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象数。
                </summary>
      <returns>
                    集合中的 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象数。
                </returns>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMappingCollection.GetEnumerator">
      <summary>
                    返回可用于枚举此集合中的项的 <see cref="T:System.Collections.IEnumerator" /> 对象。
                </summary>
      <returns>
                    可用于枚举此集合中的项的 <see cref="T:System.Collections.IEnumerator" /> 对象。
                </returns>
    </member>
    <member name="P:System.Windows.Data.XmlNamespaceMappingCollection.IsReadOnly">
      <summary>
                    获取一个指示此集合是否为只读的值。
                </summary>
      <returns>
                    该值始终返回 false。
                </returns>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMappingCollection.ProtectedGetEnumerator">
      <summary>
                    返回一般 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象。
                </summary>
      <returns>
                    一般 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMappingCollection.Remove(System.Windows.Data.XmlNamespaceMapping)">
      <summary>
                    从此集合中移除指定的 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象。
                </summary>
      <returns>
                    如果已成功移除指定的 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象，则为 true，否则为 false。
                </returns>
      <param name="mapping">
                    要移除的 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象。它不能为 null。
                </param>
      <exception cref="T:System.ArgumentNullException">
                    如果 <paramref name="mapping" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
如果 <see cref="T:System.Windows.Data.XmlNamespaceMapping" /> 对象的 <see cref="P:System.Windows.Data.XmlNamespaceMapping.Uri" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMappingCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator`1" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMappingCollection.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Windows.Markup.IAddChild.AddChild(System.Object)" />。
                </summary>
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Data.XmlNamespaceMappingCollection.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Windows.Markup.IAddChild.AddText(System.String)" />。
                </summary>
      <param name="text">
                    要添加到 <see cref="T:System.Object" /> 的文本。
                </param>
    </member>
    <member name="P:System.Windows.Data.Binding.ValidatesOnDataErrors">
      <summary>
                    获取或设置一个值，该值指示是否包含 <see cref="T:System.Windows.Controls.DataErrorValidationRule" />。
                </summary>
      <returns>
                    如果包含 <see cref="T:System.Windows.Controls.DataErrorValidationRule" />，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Data.Binding.ValidatesOnExceptions">
      <summary>
                    获取或设置一个值，该值指示是否包含 <see cref="T:System.Windows.Controls.ExceptionValidationRule" />。
                </summary>
      <returns>
                    如果包含 <see cref="T:System.Windows.Controls.ExceptionValidationRule" />，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Data.BindingBase.BindingGroupName">
      <summary>
                    获取或设置此绑定所属的 <see cref="T:System.Windows.Data.BindingGroup" /> 的名称。
                </summary>
      <returns>
                    此绑定所属的 <see cref="T:System.Windows.Data.BindingGroup" /> 的名称。
                </returns>
    </member>
    <member name="M:System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue">
      <summary>
                    返回一个值，该值指示是否应序列化 <see cref="P:System.Windows.Data.BindingBase.TargetNullValue" /> 属性。
                </summary>
      <returns>
                    如果应序列化 <see cref="P:System.Windows.Data.BindingBase.TargetNullValue" /> 属性，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Data.BindingBase.StringFormat">
      <summary>
                    获取或设置一个字符串，该字符串指定如果绑定值显示为字符串，应如何设置该绑定的格式。
                </summary>
      <returns>
                    一个字符串，该字符串指定如果绑定值显示为字符串，应如何设置该绑定的格式。
                </returns>
    </member>
    <member name="P:System.Windows.Data.BindingBase.TargetNullValue">
      <summary>
                    获取或设置当源的值为 null 时在目标中使用的值。
                </summary>
      <returns>
                    当源的值为 null 时在目标中使用的值。
                </returns>
    </member>
    <member name="T:System.Windows.Data.BindingGroup">
      <summary>
                    包含绑定集合和用于验证对象的 <see cref="T:System.Windows.Controls.ValidationRule" /> 对象。
                </summary>
    </member>
    <member name="M:System.Windows.Data.BindingGroup.#ctor">
      <summary>
                    初始化 <see cref="T:System.Windows.Data.BindingGroup" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.Windows.Data.BindingGroup.BeginEdit">
      <summary>
                    开始 <see cref="T:System.Windows.Data.BindingGroup" /> 中源上的编辑事务。
                </summary>
    </member>
    <member name="P:System.Windows.Data.BindingGroup.BindingExpressions">
      <summary>
                    获取 <see cref="T:System.Windows.Data.BindingExpression" /> 对象的集合，其中包含有关 <see cref="T:System.Windows.Data.BindingGroup" /> 中每个绑定的信息。
                </summary>
      <returns>
                    一个 <see cref="T:System.Windows.Data.BindingExpression" /> 对象的集合，其中包含有关 <see cref="T:System.Windows.Data.BindingGroup" /> 中每个绑定的信息。
                </returns>
    </member>
    <member name="M:System.Windows.Data.BindingGroup.CancelEdit">
      <summary>
                    结束编辑事务并放弃挂起的更改。
                </summary>
    </member>
    <member name="P:System.Windows.Data.BindingGroup.CanRestoreValues">
      <summary>
                    获取绑定中的每个源是否都可以放弃挂起的更改并还原原始值。
                </summary>
      <returns>
                    如果绑定中的每个源都可以放弃挂起的更改并还原原始值，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Data.BindingGroup.CommitEdit">
      <summary>
                    运行所有 <see cref="T:System.Windows.Controls.ValidationRule" /> 对象，并且在所有验证规则都成功时，更新绑定源。
                </summary>
      <returns>
                    如果每个 <see cref="T:System.Windows.Controls.ValidationRule" /> 都成功且将值提交到了源，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Data.BindingGroup.GetValue(System.Object,System.String)">
      <summary>
                    返回指定的属性和项的建议值。
                </summary>
      <returns>
                    建议的属性值。
                </returns>
      <param name="item">
                    包含指定属性的对象。
                </param>
      <param name="propertyName">
                    要获取其建议值的属性。
                </param>
      <exception cref="T:System.InvalidOperationException">
                    指定项和属性之间没有绑定。
                </exception>
      <exception cref="T:System.Windows.Data.ValueUnavailableException">
                    由于转换错误或早期验证规则失败，指定的属性值不可用。
                </exception>
    </member>
    <member name="P:System.Windows.Data.BindingGroup.Items">
      <summary>
                    获取 <see cref="T:System.Windows.Data.BindingGroup" /> 中的绑定对象所使用的源。
                </summary>
      <returns>
        <see cref="T:System.Windows.Data.BindingGroup" /> 中的绑定对象所使用的源。
                </returns>
    </member>
    <member name="P:System.Windows.Data.BindingGroup.Name">
      <summary>
                    获取或设置标识 <see cref="T:System.Windows.Data.BindingGroup" /> 的名称，该名称可用于在 <see cref="T:System.Windows.Data.BindingGroup" /> 中包括和排除绑定对象。
                </summary>
      <returns>
                    标识 <see cref="T:System.Windows.Data.BindingGroup" /> 的名称。
                </returns>
    </member>
    <member name="P:System.Windows.Data.BindingGroup.NotifyOnValidationError">
      <summary>
                    获取或设置在 <see cref="T:System.Windows.Controls.ValidationRule" /> 的状态更改时是否发生 <see cref="E:System.Windows.Controls.Validation.Error" /> 事件。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Controls.ValidationRule" /> 的状态更改时发生 <see cref="E:System.Windows.Controls.Validation.Error" /> 事件，则为 true；否则为 false。默认值为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Data.BindingGroup.TryGetValue(System.Object,System.String,System.Object@)">
      <summary>
                    尝试获取指定属性和项的建议值。
                </summary>
      <returns>
                    如果值为指定属性的建议值，则为 true；否则为 false。
                </returns>
      <param name="item">
                    包含指定属性的对象。
                </param>
      <param name="propertyName">
                    要获取其建议值的属性。
                </param>
      <param name="value">
                    此方法在返回时包含一个表示建议的属性值的对象。该参数未经初始化即被传递。
                </param>
    </member>
    <member name="M:System.Windows.Data.BindingGroup.UpdateSources">
      <summary>
                    如果所有验证规则都成功，则对绑定和将 <see cref="P:System.Windows.Controls.ValidationRule.ValidationStep" /> 属性设置为 <see cref="F:System.Windows.Controls.ValidationStep.RawProposedValue" />、<see cref="F:System.Windows.Controls.ValidationStep.ConvertedProposedValue" /> 或 <see cref="F:System.Windows.Controls.ValidationStep.UpdatedValue" /> 的 <see cref="T:System.Windows.Controls.ValidationRule" /> 对象运行转换器，并将目标值保存到源对象。
                </summary>
      <returns>
                    如果所有验证规则都成功，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Data.BindingGroup.ValidateWithoutUpdate">
      <summary>
                    对绑定和将 <see cref="P:System.Windows.Controls.ValidationRule.ValidationStep" /> 属性设置为 <see cref="F:System.Windows.Controls.ValidationStep.RawProposedValue" /> 或 <see cref="F:System.Windows.Controls.ValidationStep.ConvertedProposedValue" /> 的 <see cref="T:System.Windows.Controls.ValidationRule" /> 对象运行转换器。
                </summary>
      <returns>
                    如果验证规则成功，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Data.BindingGroup.ValidationRules">
      <summary>
                    获取 <see cref="T:System.Windows.Controls.ValidationRule" /> 对象的集合，这些对象验证 <see cref="T:System.Windows.Data.BindingGroup" /> 中的源对象。
                </summary>
      <returns>
        <see cref="T:System.Windows.Controls.ValidationRule" /> 对象的集合，这些对象验证 <see cref="T:System.Windows.Data.BindingGroup" /> 中的源对象。
                </returns>
    </member>
    <member name="M:System.Windows.Data.BindingListCollectionView.AddNew">
      <summary>
                    开始添加事务并返回挂起的新项。
                </summary>
      <returns>
                    挂起的新项。
                </returns>
    </member>
    <member name="P:System.Windows.Data.BindingListCollectionView.CanAddNew">
      <summary>
                    获取一个值，该值指示是否可以将新项添加到集合中。
                </summary>
      <returns>
                    如果可以将新项添加到集合中，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Data.BindingListCollectionView.CanCancelEdit">
      <summary>
                    获取一个值，该值指示集合视图是否可以放弃挂起的更改并还原所编辑对象的原始值。
                </summary>
      <returns>
                    如果集合视图可以放弃挂起的更改并还原所编辑对象的原始值，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Data.BindingListCollectionView.CancelEdit">
      <summary>
                    结束编辑事务，并还原项的原始值（如有可能）。
                </summary>
    </member>
    <member name="M:System.Windows.Data.BindingListCollectionView.CancelNew">
      <summary>
                    结束添加事务并放弃挂起的新项。
                </summary>
    </member>
    <member name="P:System.Windows.Data.BindingListCollectionView.CanRemove">
      <summary>
                    获取一个值，该值指示是否可以从集合中移除项。
                </summary>
      <returns>
                    如果可以从集合中移除项，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Data.BindingListCollectionView.CommitEdit">
      <summary>
                    结束编辑事务并保存挂起的更改。
                </summary>
    </member>
    <member name="M:System.Windows.Data.BindingListCollectionView.CommitNew">
      <summary>
                    结束添加事务并保存挂起的新项。
                </summary>
    </member>
    <member name="P:System.Windows.Data.BindingListCollectionView.CurrentAddItem">
      <summary>
                    获取正在当前添加事务过程中添加的项。
                </summary>
      <returns>
                    如果 <see cref="P:System.Windows.Data.BindingListCollectionView.IsAddingNew" /> 为 true，则为正在添加的项；否则为 null。
                </returns>
    </member>
    <member name="P:System.Windows.Data.BindingListCollectionView.CurrentEditItem">
      <summary>
                    获取集合中正在编辑的项。
                </summary>
      <returns>
                    如果 <see cref="P:System.Windows.Data.ListCollectionView.IsEditingItem" /> 为 true，则为集合中正在编辑的项；否则为 null。
                </returns>
    </member>
    <member name="M:System.Windows.Data.BindingListCollectionView.EditItem(System.Object)">
      <summary>
                    开始指定项的编辑事务。
                </summary>
      <param name="item">
                    要编辑的项。
                </param>
    </member>
    <member name="P:System.Windows.Data.BindingListCollectionView.IsAddingNew">
      <summary>
                    获取一个值，该值指示是否正在执行添加事务。
                </summary>
      <returns>
                    如果正在执行添加事务，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Data.BindingListCollectionView.IsEditingItem">
      <summary>
                    获取一个值，该值指示是否正在执行编辑事务。
                </summary>
      <returns>
                    如果正在执行编辑事务，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Data.BindingListCollectionView.ItemProperties">
      <summary>
                    获取一个对象集合，该集合描述集合中项的属性。
                </summary>
      <returns>
                    一个对象集合，该集合描述集合中项的属性。
                </returns>
    </member>
    <member name="P:System.Windows.Data.BindingListCollectionView.NewItemPlaceholderPosition">
      <summary>
                    获取或设置新项占位符在 <see cref="T:System.Windows.Data.BindingListCollectionView" /> 中的位置。
                </summary>
      <returns>
                    用于指定新项占位符在 <see cref="T:System.Windows.Data.BindingListCollectionView" /> 中的位置的枚举值之一。
                </returns>
    </member>
    <member name="M:System.Windows.Data.BindingListCollectionView.Remove(System.Object)">
      <summary>
从集合中移除指定的项。
                </summary>
      <param name="item">
要移除的项。
                </param>
    </member>
    <member name="M:System.Windows.Data.BindingListCollectionView.RemoveAt(System.Int32)">
      <summary>
                    从集合中移除指定位置的项。
                </summary>
      <param name="index">
从零开始的索引（属于要移除的项）。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于集合视图中的项数。
                </exception>
    </member>
    <member name="P:System.Windows.Data.CollectionView.NewItemPlaceholder">
      <summary>
                    获取集合中表示新项的对象。
                </summary>
      <returns>
                    集合中表示新项的对象。
                </returns>
    </member>
    <member name="M:System.Windows.Data.CollectionView.SetCurrent(System.Object,System.Int32,System.Int32)">
      <summary>
                    将指定项和索引设置为 <see cref="P:System.Windows.Data.CollectionView.CurrentItem" /> 和 <see cref="P:System.Windows.Data.CollectionView.CurrentPosition" /> 属性的值。可以从派生类的构造函数中调用此方法。
                </summary>
      <param name="newItem">
要设置为 <see cref="P:System.Windows.Data.CollectionView.CurrentItem" /> 的项。
                </param>
      <param name="newPosition">
要设置为 <see cref="P:System.Windows.Data.CollectionView.CurrentPosition" /> 属性值的值。
                </param>
      <param name="count">
        <see cref="T:System.Windows.Data.CollectionView" /> 中的项数。
                </param>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.AddNew">
      <summary>
                    开始添加事务并返回挂起的新项。
                </summary>
      <returns>
                    挂起的新项。
                </returns>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.CanAddNew">
      <summary>
                    获取一个值，该值指示是否可以将新项添加到集合中。
                </summary>
      <returns>
                    如果可以将新项添加到集合中，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.CanCancelEdit">
      <summary>
                    获取一个值，该值指示集合视图是否可以放弃挂起的更改并还原所编辑对象的原始值。
                </summary>
      <returns>
                    如果集合视图可以放弃挂起的更改并还原所编辑对象的原始值，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.CancelEdit">
      <summary>
                    结束编辑事务，并还原项的原始值（如有可能）。
                </summary>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.CancelNew">
      <summary>
                    结束添加事务并放弃挂起的新项。
                </summary>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.CanRemove">
      <summary>
                    获取一个值，该值指示是否可以从集合中移除项。
                </summary>
      <returns>
                    如果可以从集合中移除项，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.CommitEdit">
      <summary>
                    结束编辑事务并保存挂起的更改。
                </summary>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.CommitNew">
      <summary>
                    结束添加事务并保存挂起的新项。
                </summary>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.CurrentAddItem">
      <summary>
                    获取正在当前添加事务过程中添加的项。
                </summary>
      <returns>
                    如果 <see cref="P:System.Windows.Data.ListCollectionView.IsAddingNew" /> 为 true，则为正在添加的项；否则为 null。
                </returns>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.CurrentEditItem">
      <summary>
                    获取集合中正在编辑的项。
                </summary>
      <returns>
                    如果 <see cref="P:System.Windows.Data.ListCollectionView.IsEditingItem" /> 为 true，则为集合中正在编辑的项；否则为 null。
                </returns>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.EditItem(System.Object)">
      <summary>
                    开始指定项的编辑事务。
                </summary>
      <param name="item">
                    要编辑的项。
                </param>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.Filter">
      <summary>
获取或设置用于确定某个项是否适合包含在视图中的方法。
                </summary>
      <returns>
一个委托，表示用于确定某个项是否适合包含在视图中的方法。
                </returns>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.IsAddingNew">
      <summary>
                    获取一个值，该值指示是否正在执行添加事务。
                </summary>
      <returns>
                    如果正在执行添加事务，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.IsEditingItem">
      <summary>
                    获取一个值，该值指示是否正在执行编辑事务。
                </summary>
      <returns>
                    如果正在执行编辑事务，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.ItemProperties">
      <summary>
                    获取一个对象集合，该集合描述集合中项的属性。
                </summary>
      <returns>
                    一个对象集合，该集合描述集合中项的属性。
                </returns>
    </member>
    <member name="P:System.Windows.Data.ListCollectionView.NewItemPlaceholderPosition">
      <summary>
                    获取或设置新项占位符在 <see cref="T:System.Windows.Data.ListCollectionView" /> 中的位置。
                </summary>
      <returns>
                    用于指定新项占位符在 <see cref="T:System.Windows.Data.ListCollectionView" /> 中的位置的枚举值之一。
                </returns>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.Remove(System.Object)">
      <summary>
从集合中移除指定的项。
                </summary>
      <param name="item">
要移除的项。
                </param>
    </member>
    <member name="M:System.Windows.Data.ListCollectionView.RemoveAt(System.Int32)">
      <summary>
                    从集合中移除指定位置的项。
                </summary>
      <param name="index">
从零开始的索引（属于要移除的项）。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于集合视图中的项数。
                </exception>
    </member>
    <member name="P:System.Windows.Data.MultiBinding.ValidatesOnDataErrors">
      <summary>获取或设置一个值，该值指示是否包含 <see cref="T:System.Windows.Controls.DataErrorValidationRule" />。</summary>
      <returns>
            如果包含 <see cref="T:System.Windows.Controls.DataErrorValidationRule" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Data.MultiBinding.ValidatesOnExceptions">
      <summary>获取或设置一个值，该值指示是否包含 <see cref="T:System.Windows.Controls.ExceptionValidationRule" />。</summary>
      <returns>
            如果包含 <see cref="T:System.Windows.Controls.ExceptionValidationRule" />，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Windows.Data.ValueUnavailableException">
      <summary>
                    当值不可用时由 <see cref="M:System.Windows.Data.BindingGroup.GetValue(System.Object,System.String)" /> 方法引发的异常。
                </summary>
    </member>
    <member name="M:System.Windows.Data.ValueUnavailableException.#ctor">
      <summary>
                    初始化 <see cref="T:System.Windows.Data.ValueUnavailableException" /> 类的新实例。
                </summary>
    </member>
    <member name="M:System.Windows.Data.ValueUnavailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    使用序列化数据初始化 <see cref="T:System.Windows.Data.ValueUnavailableException" /> 类的新实例。
                </summary>
      <param name="info">
保存序列化对象数据的对象。
                </param>
      <param name="context">
                    有关源或目标的上下文信息。
                </param>
    </member>
    <member name="M:System.Windows.Data.ValueUnavailableException.#ctor(System.String)">
      <summary>
                    用指定消息初始化 <see cref="T:System.Windows.Data.ValueUnavailableException" /> 类的新实例。
                </summary>
      <param name="message">
描述错误的消息。
                </param>
    </member>
    <member name="M:System.Windows.Data.ValueUnavailableException.#ctor(System.String,System.Exception)">
      <summary>
                    使用指定的错误消息和对引发此异常的内部异常的引用，初始化 <see cref="T:System.Windows.Data.ValueUnavailableException" /> 类的新实例。
                </summary>
      <param name="message">
                    解释异常原因的错误信息。
                </param>
      <param name="innerException">
导致当前异常的异常。如果 <paramref name="innerException" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。
                </param>
    </member>
    <member name="T:System.Windows.Documents.Adorner">
      <summary>表示用于修饰 <see cref="T:System.Windows.UIElement" /> 的 <see cref="T:System.Windows.FrameworkElement" /> 的抽象类。</summary>
    </member>
    <member name="M:System.Windows.Documents.Adorner.#ctor(System.Windows.UIElement)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Adorner" /> 类的一个新实例。</summary>
      <param name="adornedElement">装饰器所要绑定到的元素。</param>
      <exception cref="T:System.ArgumentNullException">当 adornedElement 为 null 时引发。</exception>
    </member>
    <member name="P:System.Windows.Documents.Adorner.AdornedElement">
      <summary>获取此装饰器绑定到的 <see cref="T:System.Windows.UIElement" />。</summary>
      <returns>此装饰器绑定到的元素。默认值为 null。</returns>
    </member>
    <member name="M:System.Windows.Documents.Adorner.GetDesiredTransform(System.Windows.Media.GeneralTransform)">
      <summary>基于当前应用于装饰元素的转换，返回装饰器的 <see cref="T:System.Windows.Media.Transform" />。</summary>
      <returns>要应用于装饰器的转换。</returns>
      <param name="transform">当前应用于装饰元素的转换。</param>
    </member>
    <member name="M:System.Windows.Documents.Adorner.GetLayoutClip(System.Windows.Size)">
      <summary>不支持；请不要使用。</summary>
      <returns>此方法始终返回 null。</returns>
      <param name="layoutSlotSize"></param>
    </member>
    <member name="P:System.Windows.Documents.Adorner.IsClipEnabled">
      <summary>获取或设置一个指示是否启用装饰器剪辑的值。</summary>
      <returns>一个 Boolean 值，该值指示是否启用装饰器剪辑。如果此属性为 false，则不剪裁装饰器。如果此属性为 true，则使用与装饰元素相同的剪辑几何图形来剪辑装饰器。默认值为 false。</returns>
    </member>
    <member name="M:System.Windows.Documents.Adorner.MeasureOverride(System.Windows.Size)">
      <summary>实现装饰器的任何自定义度量行为。</summary>
      <returns>一个 <see cref="T:System.Windows.Size" /> 对象，表示装饰器所需的布局空间量。</returns>
      <param name="constraint">装饰器所要约束到的大小。</param>
    </member>
    <member name="T:System.Windows.Documents.AdornerDecorator">
      <summary>为可视化树中其下面的元素提供一个装饰器层。</summary>
      <exception cref="T:System.ArgumentException">尝试将多个子级添加到 <see cref="T:System.Windows.Documents.AdornerDecorator" /> 中时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.AdornerDecorator.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.AdornerDecorator" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Documents.AdornerDecorator.AdornerLayer">
      <summary>获取与此 <see cref="T:System.Windows.Documents.AdornerDecorator" /> 关联的 <see cref="T:System.Windows.Documents.AdornerLayer" />。</summary>
      <returns>与此装饰器修饰器关联的 <see cref="T:System.Windows.Documents.AdornerLayer" />。</returns>
    </member>
    <member name="M:System.Windows.Documents.AdornerDecorator.ArrangeOverride(System.Windows.Size)">
      <summary>定位子元素并确定 <see cref="T:System.Windows.Documents.AdornerDecorator" /> 的大小。</summary>
      <returns>元素所需的实际大小。 此返回值通常与传递给 finalSize 的值相同。</returns>
      <param name="finalSize">此元素的父级为其保留的大小。</param>
    </member>
    <member name="P:System.Windows.Documents.AdornerDecorator.Child">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.AdornerDecorator" /> 的单个子元素。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.AdornerDecorator" /> 的单个子元素。此属性无默认值。</returns>
    </member>
    <member name="M:System.Windows.Documents.AdornerDecorator.GetVisualChild(System.Int32)">
      <summary>获取指定 <paramref name="index" /> 位置处的 <see cref="T:System.Windows.Media.Visual" /> 子级。</summary>
      <returns>
        <see cref="T:System.Windows.Controls.Viewbox" /> 父元素的 <see cref="T:System.Windows.Media.Visual" /> 子级。</returns>
      <param name="index">所需 <see cref="T:System.Windows.Media.Visual" /> 子级的索引位置。</param>
    </member>
    <member name="M:System.Windows.Documents.AdornerDecorator.MeasureOverride(System.Windows.Size)">
      <summary>测量子元素所需的大小，并确定 <see cref="T:System.Windows.Documents.AdornerDecorator" /> 的大小。</summary>
      <returns>一个 <see cref="T:System.Windows.Size" /> 对象，表示 <see cref="T:System.Windows.Documents.AdornerDecorator" /> 所需的布局空间量。</returns>
      <param name="constraint">将 <see cref="T:System.Windows.Documents.AdornerDecorator" /> 约束到的大小。</param>
    </member>
    <member name="P:System.Windows.Documents.AdornerDecorator.VisualChildrenCount">
      <summary>获取此 <see cref="T:System.Windows.Documents.AdornerDecorator" /> 实例中 <see cref="T:System.Windows.Media.Visual" /> 的子对象数。</summary>
      <returns>返回 2（一个是 <see cref="T:System.Windows.Documents.AdornerLayer" />，另一个是 <see cref="P:System.Windows.Documents.AdornerDecorator.Child" />），或者，如果 <see cref="T:System.Windows.Documents.AdornerDecorator" /> 无子级，则属性返回 0。</returns>
    </member>
    <member name="T:System.Windows.Documents.AdornerLayer">
      <summary>表示用于呈现装饰器的图面。</summary>
    </member>
    <member name="M:System.Windows.Documents.AdornerLayer.Add(System.Windows.Documents.Adorner)">
      <summary>将装饰器添加到装饰器层。</summary>
      <param name="adorner">要添加的装饰器。</param>
      <exception cref="T:System.ArgumentNullException">当 adorner 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.AdornerLayer.AdornerHitTest(System.Windows.Point)">
      <summary>获取指定点的 <see cref="T:System.Windows.Media.AdornerHitTestResult" />。</summary>
      <returns>指定点的 <see cref="T:System.Windows.Media.AdornerHitTestResult" />。</returns>
      <param name="point">要进行命中测试的点。</param>
    </member>
    <member name="M:System.Windows.Documents.AdornerLayer.ArrangeOverride(System.Windows.Size)">
      <summary>定位子元素并确定 <see cref="T:System.Windows.Documents.AdornerLayer" /> 的大小。</summary>
      <returns>元素所需的实际大小。 此返回值通常与传递给 finalSize 的值相同。</returns>
      <param name="finalSize">此元素的父级为其保留的大小。</param>
    </member>
    <member name="M:System.Windows.Documents.AdornerLayer.GetAdornerLayer(System.Windows.Media.Visual)">
      <summary>在指定 <see cref="T:System.Windows.Media.Visual" /> 的上方的可视化树中返回第一个装饰器层。</summary>
      <returns>指定视觉的装饰器层；如果找不到装饰器层，则为 null。</returns>
      <param name="visual">为其查找装饰器层的视觉元素。</param>
      <exception cref="T:System.ArgumentNullException">当 visual 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.AdornerLayer.GetAdorners(System.Windows.UIElement)">
      <summary>返回绑定到指定 <see cref="T:System.Windows.UIElement" /> 的装饰器数组。</summary>
      <returns>一个装饰器数组，这些装饰器修饰指定的 <see cref="T:System.Windows.UIElement" />；如果没有绑定到指定元素的装饰器，则为 null。</returns>
      <param name="element">要为其检索装饰器数组的 <see cref="T:System.Windows.UIElement" />。</param>
    </member>
    <member name="M:System.Windows.Documents.AdornerLayer.GetVisualChild(System.Int32)">
      <summary>获取指定 <paramref name="index" /> 位置处的 <see cref="T:System.Windows.Media.Visual" /> 子级。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.AdornerLayer" /> 父元素的一个 <see cref="T:System.Windows.Media.Visual" /> 子级。</returns>
      <param name="index">所需 <see cref="T:System.Windows.Media.Visual" /> 子级的索引位置。</param>
    </member>
    <member name="P:System.Windows.Documents.AdornerLayer.LogicalChildren">
      <summary>获取一个可循环访问此 <see cref="T:System.Windows.Documents.AdornerLayer" /> 元素的逻辑子元素的枚举数。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />。此属性无默认值。</returns>
    </member>
    <member name="M:System.Windows.Documents.AdornerLayer.MeasureOverride(System.Windows.Size)">
      <summary>测量子元素所需的大小，并确定 <see cref="T:System.Windows.Documents.AdornerLayer" /> 的大小。</summary>
      <returns>该方法将始终返回 (0,0) 的 <see cref="T:System.Windows.Size" />。</returns>
      <param name="constraint">未使用。</param>
    </member>
    <member name="M:System.Windows.Documents.AdornerLayer.Remove(System.Windows.Documents.Adorner)">
      <summary>从装饰器层中移除指定的 <see cref="T:System.Windows.Documents.Adorner" />。</summary>
      <param name="adorner">要移除的 <see cref="T:System.Windows.Documents.Adorner" />。</param>
      <exception cref="T:System.ArgumentNullException">当 adorner 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.AdornerLayer.Update">
      <summary>更新布局并重绘装饰器层中的所有装饰器。</summary>
    </member>
    <member name="M:System.Windows.Documents.AdornerLayer.Update(System.Windows.UIElement)">
      <summary>更新布局并重绘装饰器层中绑定到指定 <see cref="T:System.Windows.UIElement" /> 的所有装饰器。</summary>
      <param name="element">与要更新的装饰器关联的 <see cref="T:System.Windows.UIElement" />。</param>
      <exception cref="T:System.ArgumentNullException">当 element 为 null 时引发。</exception>
      <exception cref="T:System.InvalidOperationException">当找不到指定的元素时引发。</exception>
    </member>
    <member name="P:System.Windows.Documents.AdornerLayer.VisualChildrenCount">
      <summary>获取此 <see cref="T:System.Windows.Documents.AdornerLayer" /> 实例中的子 <see cref="T:System.Windows.Media.Visual" /> 对象数。</summary>
      <returns>此 <see cref="T:System.Windows.Documents.AdornerLayer" /> 实例中的子 <see cref="T:System.Windows.Media.Visual" /> 对象数。</returns>
    </member>
    <member name="T:System.Windows.Documents.AnchoredBlock">
      <summary>为 <see cref="T:System.Windows.Documents.Inline" /> 元素提供基类的抽象类，这些元素用于将 <see cref="T:System.Windows.Documents.Block" /> 元素锚定到流内容。</summary>
    </member>
    <member name="M:System.Windows.Documents.AnchoredBlock.#ctor(System.Windows.Documents.Block,System.Windows.Documents.TextPointer)">
      <summary>由某个派生类调用时，初始化基类值，将指定的 <see cref="T:System.Windows.Documents.Block" /> 对象作为 <see cref="T:System.Windows.Documents.AnchoredBlock" /> 的新后代的初始内容，并由一个 <see cref="T:System.Windows.Documents.TextPointer" /> 指定新 <see cref="T:System.Windows.Documents.AnchoredBlock" /> 后代的插入位置。</summary>
      <param name="block">一个 <see cref="T:System.Windows.Documents.Block" /> 对象，它指定新元素的初始内容。 此参数可以为 null，在这种情况下，不插入任何 <see cref="T:System.Windows.Documents.Block" />。</param>
      <param name="insertionPosition">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指定插入所创建元素的插入位置，或者为 null 以表示不自动插入。</param>
    </member>
    <member name="P:System.Windows.Documents.AnchoredBlock.Blocks">
      <summary>获取一个 <see cref="T:System.Windows.Documents.BlockCollection" />，其中包含组成元素内容的顶级 <see cref="T:System.Windows.Documents.Block" /> 元素。</summary>
      <returns>一个 <see cref="T:System.Windows.Documents.BlockCollection" />，其中包含组成元素内容的 <see cref="T:System.Windows.Documents.Block" /> 元素。此属性无默认值。</returns>
    </member>
    <member name="P:System.Windows.Documents.AnchoredBlock.BorderBrush">
      <summary>获取或设置绘制元素边框时使用的 <see cref="T:System.Windows.Media.Brush" />。这是一个依赖项属性。</summary>
      <returns>用来应用于元素边框的画笔。默认值为 null 画笔。</returns>
    </member>
    <member name="F:System.Windows.Documents.AnchoredBlock.BorderBrushProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.AnchoredBlock.BorderBrush" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.AnchoredBlock.BorderBrush" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.AnchoredBlock.BorderThickness">
      <summary>获取或设置元素的边框宽度。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Thickness" /> 结构，它指定要应用的边框宽度（以与设备无关的像素为单位）。默认值为统一宽度值零 (0.0)。</returns>
    </member>
    <member name="F:System.Windows.Documents.AnchoredBlock.BorderThicknessProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.AnchoredBlock.BorderThickness" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.AnchoredBlock.BorderThickness" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.AnchoredBlock.LineHeight">
      <summary>获取或设置各行内容的高度。这是一个依赖项属性。</summary>
      <returns>指定行的高度的双精度值（以与设备无关的像素为单位）。<see cref="P:System.Windows.Documents.AnchoredBlock.LineHeight" /> 必须等于或大于 0.0034 且小于或等于 160000。值 <see cref="F:System.Double.NaN" />（等同于属性值“Auto”）使行高由当前字体特征自动确定。默认值为 <see cref="F:System.Double.NaN" />。</returns>
      <exception cref="T:System.ArgumentException">当尝试将 <see cref="P:System.Windows.Controls.TextBlock.LineHeight" /> 设置为一个非正值时引发。</exception>
    </member>
    <member name="F:System.Windows.Documents.AnchoredBlock.LineHeightProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.AnchoredBlock.LineHeight" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.AnchoredBlock.LineHeight" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.AnchoredBlock.LineStackingStrategy">
      <summary>获取或设置一种机制，根据该机制来为文本元素内的每一行文字确定一个行框。这是一个依赖项属性。</summary>
      <returns>一种机制，根据该机制来为文本元素内的每一行文字确定一个行框。默认值为 <see cref="F:System.Windows.LineStackingStrategy.MaxHeight" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.AnchoredBlock.LineStackingStrategyProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.AnchoredBlock.LineStackingStrategy" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.AnchoredBlock.LineStackingStrategy" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.AnchoredBlock.Margin">
      <summary>获取或设置元素的边距宽度。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Thickness" /> 结构，它指定要应用的边距宽度（以与设备无关的像素为单位）。默认值为统一宽度值零 (0.0)。</returns>
    </member>
    <member name="F:System.Windows.Documents.AnchoredBlock.MarginProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.AnchoredBlock.Margin" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.AnchoredBlock.Margin" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.AnchoredBlock.Padding">
      <summary>获取或设置元素的边距宽度。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Thickness" /> 结构，它指定要应用的填充量（以与设备无关的像素为单位）。默认值为统一宽度值零 (0.0)。</returns>
    </member>
    <member name="F:System.Windows.Documents.AnchoredBlock.PaddingProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.AnchoredBlock.Padding" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.AnchoredBlock.Padding" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Documents.AnchoredBlock.ShouldSerializeBlocks(System.Windows.Markup.XamlDesignerSerializationManager)">
      <summary>返回一个值，该值指示在序列化从 <see cref="T:System.Windows.Documents.AnchoredBlock" /> 派生的对象期间，是否应对 <see cref="P:System.Windows.Documents.AnchoredBlock.Blocks" /> 属性的有效值进行序列化。</summary>
      <returns>
            如果应对 <see cref="P:System.Windows.Documents.AnchoredBlock.Blocks" /> 属性进行序列化，则为 true；否则为 false。</returns>
      <param name="manager">此对象的序列化服务管理器对象。</param>
      <exception cref="T:System.NullReferenceException">当 <paramref name="manager" /> 为 null 时引发。</exception>
    </member>
    <member name="P:System.Windows.Documents.AnchoredBlock.TextAlignment">
      <summary>获取或设置一个值，该值指示文本内容的水平对齐方式。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.TextAlignment" /> 枚举的一个成员，它指定所需的对齐方式。默认值为 <see cref="F:System.Windows.TextAlignment.Left" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.AnchoredBlock.TextAlignmentProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.AnchoredBlock.TextAlignment" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.AnchoredBlock.TextAlignment" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Documents.Block">
      <summary>一个抽象类，它为所有块级别流内容元素提供了一个基础。</summary>
    </member>
    <member name="M:System.Windows.Documents.Block.#ctor">
      <summary>由某个派生类调用时，初始化 <see cref="T:System.Windows.Documents.Block" /> 基类的值。</summary>
    </member>
    <member name="P:System.Windows.Documents.Block.BorderBrush">
      <summary>获取或设置绘制元素边框时使用的 <see cref="T:System.Windows.Media.Brush" />。这是一个依赖项属性。</summary>
      <returns>用来应用于元素边框的画笔。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Documents.Block.BorderBrushProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Block.BorderBrush" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Block.BorderBrush" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Block.BorderThickness">
      <summary>获取或设置元素的边框宽度。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Thickness" /> 结构，它指定要应用的边框宽度（以与设备无关的像素为单位）。默认值为等于零 (0.0) 的一个统一宽度。</returns>
    </member>
    <member name="F:System.Windows.Documents.Block.BorderThicknessProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Block.BorderThickness" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Block.BorderThickness" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Block.BreakColumnBefore">
      <summary>获取或设置一个值，该值指示当元素参与使用了分栏的内容呈现时，是否自动在此元素之前插入一个分栏符。这是一个依赖项属性。</summary>
      <returns>
            如果为 true，则在此元素之前自动插入一个分栏符；否则为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Block.BreakColumnBeforeProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Block.BreakColumnBefore" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Block.BreakColumnBefore" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Block.BreakPageBefore">
      <summary>获取或设置一个值，该值指示是否自动在此元素之前插入一个分页符。这是一个依赖项属性。</summary>
      <returns>
            如果为 true，则在此元素之前自动插入一个分页符；否则为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Block.BreakPageBeforeProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Block.BreakPageBefore" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Block.BreakPageBefore" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Block.ClearFloaters">
      <summary>获取或设置某个 <see cref="T:System.Windows.Documents.Block" /> 元素所包含的任何 <see cref="T:System.Windows.Documents.Floater" /> 元素的重新定位方向。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.WrapDirection" /> 值之一，它指定将 <see cref="T:System.Windows.Documents.Block" /> 元素中所包含的任何 <see cref="T:System.Windows.Documents.Floater" /> 元素与其他内容分隔开来的方向。默认值为 <see cref="F:System.Windows.WrapDirection.None" />，它指示浮标应在现有位置上呈现。</returns>
    </member>
    <member name="F:System.Windows.Documents.Block.ClearFloatersProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Block.ClearFloaters" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Block.ClearFloaters" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Block.FlowDirection">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.Block" /> 元素中内容流的相对方向。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.FlowDirection" /> 值之一，指定相对流动方向。默认值为 <see cref="F:System.Windows.FlowDirection.LeftToRight" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.Block.FlowDirectionProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Block.FlowDirection" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Block.FlowDirection" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Documents.Block.GetIsHyphenationEnabled(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Block.IsHyphenationEnabled" /> 附加属性的值。</summary>
      <returns>指定依赖项对象的 <see cref="P:System.Windows.Documents.Block.IsHyphenationEnabled" /> 附加属性的当前值。</returns>
      <param name="element">从中检索 <see cref="P:System.Windows.Documents.Block.IsHyphenationEnabled" /> 属性的值的依赖项对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Documents.Block.GetLineHeight(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Block.LineHeight" /> 附加属性的值。</summary>
      <returns>指定依赖项对象的 <see cref="P:System.Windows.Documents.Block.LineHeight" /> 附加属性的当前值。</returns>
      <param name="element">从中检索 <see cref="P:System.Windows.Documents.Block.LineHeight" /> 属性的值的依赖项对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Documents.Block.GetLineStackingStrategy(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Block.LineStackingStrategy" /> 附加属性的值。</summary>
      <returns>指定依赖项对象的 <see cref="P:System.Windows.Documents.Block.LineStackingStrategy" /> 附加属性的当前值。</returns>
      <param name="element">从中检索 <see cref="P:System.Windows.Documents.Block.LineStackingStrategy" /> 附加属性的值的依赖项对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Documents.Block.GetTextAlignment(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Block.TextAlignment" /> 附加属性的值。</summary>
      <returns>指定依赖项对象的 <see cref="P:System.Windows.Documents.Block.TextAlignment" /> 附加属性的当前值。</returns>
      <param name="element">从中检索 <see cref="P:System.Windows.Documents.Block.TextAlignment" /> 属性的值的依赖项对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Documents.Block.IsHyphenationEnabled">
      <summary>获取或设置一个值，该值指示是否启用文字的自动断字功能。这是一个依赖项属性。</summary>
      <returns>
            如果启用自动对文字进行断字和添加连字符，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Block.IsHyphenationEnabledProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Block.IsHyphenationEnabled" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Block.IsHyphenationEnabled" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Block.LineHeight">
      <summary>获取或设置各行内容的高度。这是一个依赖项属性。</summary>
      <returns>各行的高度以与设备无关的像素为单位表示，范围为 0.0034 到 160000，或者为 <see cref="F:System.Double.NaN" /> 以自动确定高度。默认值为 <see cref="F:System.Double.NaN" />。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Controls.TextBlock.LineHeight" /> 设置为一个非正值。</exception>
    </member>
    <member name="F:System.Windows.Documents.Block.LineHeightProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Block.LineHeight" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Block.LineHeight" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Block.LineStackingStrategy">
      <summary>获取或设置为块级别流内容元素内的每行文本确定行框的方式。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.LineStackingStrategy" /> 值之一，它指定为块级别流内容元素内的每行文本确定行框的方式。默认值为 <see cref="F:System.Windows.LineStackingStrategy.MaxHeight" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.Block.LineStackingStrategyProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Block.LineStackingStrategy" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Block.LineStackingStrategy" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Block.Margin">
      <summary>获取或设置元素的边距宽度。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Thickness" /> 结构，指定要应用的边距宽度（以与设备无关的像素为单位）。默认值为等于零 (0.0) 的一个统一宽度。</returns>
    </member>
    <member name="F:System.Windows.Documents.Block.MarginProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Block.Margin" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Block.Margin" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Block.NextBlock">
      <summary>获取紧随当前 <see cref="T:System.Windows.Documents.Block" /> 元素之后的同级 <see cref="T:System.Windows.Documents.Block" /> 元素。</summary>
      <returns>紧随当前 <see cref="T:System.Windows.Documents.Block" /> 元素之后的同级 <see cref="T:System.Windows.Documents.Block" /> 元素，或者，如果不存在这样的元素，则为 null。</returns>
    </member>
    <member name="P:System.Windows.Documents.Block.Padding">
      <summary>获取或设置元素的边距宽度。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Thickness" /> 结构，指定要应用的填充量（以与设备无关的像素为单位）。默认值为等于零 (0.0) 的一个统一宽度。</returns>
    </member>
    <member name="F:System.Windows.Documents.Block.PaddingProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Block.Padding" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Block.Padding" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Block.PreviousBlock">
      <summary>获取紧邻当前 <see cref="T:System.Windows.Documents.Block" /> 元素之前的同级 <see cref="T:System.Windows.Documents.Block" /> 元素。</summary>
      <returns>紧邻当前 <see cref="T:System.Windows.Documents.Block" /> 元素之前的同级 <see cref="T:System.Windows.Documents.Block" /> 元素，或者，如果不存在这样的元素，则为 null。</returns>
    </member>
    <member name="M:System.Windows.Documents.Block.SetIsHyphenationEnabled(System.Windows.DependencyObject,System.Boolean)">
      <summary>设置指定依赖项对象的 <see cref="P:System.Windows.Documents.Block.IsHyphenationEnabled" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Block.IsHyphenationEnabled" /> 属性的值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Documents.Block.SetLineHeight(System.Windows.DependencyObject,System.Double)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Block.LineHeight" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Block.LineHeight" /> 属性的值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为负。</exception>
    </member>
    <member name="M:System.Windows.Documents.Block.SetLineStackingStrategy(System.Windows.DependencyObject,System.Windows.LineStackingStrategy)">
      <summary>设置指定依赖项对象的 <see cref="P:System.Windows.Documents.Block.LineStackingStrategy" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Block.LineStackingStrategy" /> 属性的值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Documents.Block.SetTextAlignment(System.Windows.DependencyObject,System.Windows.TextAlignment)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Block.TextAlignment" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Block.TextAlignment" /> 属性的值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Documents.Block.SiblingBlocks">
      <summary>获取一个 <see cref="T:System.Windows.Documents.Block" /> 元素的集合，这些元素是当前 <see cref="T:System.Windows.Documents.Block" /> 元素的同级元素。</summary>
      <returns>一个包含子级 <see cref="T:System.Windows.Documents.Block" /> 元素的 <see cref="T:System.Windows.Documents.BlockCollection" />，这些元素直接由当前 <see cref="T:System.Windows.Documents.Block" /> 元素的父级承载；如果当前 <see cref="T:System.Windows.Documents.Block" /> 元素无父级，则为 null。</returns>
    </member>
    <member name="P:System.Windows.Documents.Block.TextAlignment">
      <summary>获取或设置文本内容的水平对齐方式。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.TextAlignment" /> 值之一，指定所需的对齐方式。默认值为 <see cref="F:System.Windows.TextAlignment.Left" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.Block.TextAlignmentProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Block.TextAlignment" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Block.TextAlignment" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Documents.BlockCollection">
      <summary>表示一个 <see cref="T:System.Windows.Documents.Block" /> 元素集合。<see cref="T:System.Windows.Documents.BlockCollection" /> 定义 <see cref="T:System.Windows.Documents.FlowDocument" />、<see cref="T:System.Windows.Documents.Section" />、<see cref="T:System.Windows.Documents.ListItem" />、<see cref="T:System.Windows.Documents.TableCell" />、<see cref="T:System.Windows.Documents.Floater" /> 和 <see cref="T:System.Windows.Documents.Figure" /> 元素的允许子内容。</summary>
    </member>
    <member name="P:System.Windows.Documents.BlockCollection.FirstBlock">
      <summary>获取此 <see cref="T:System.Windows.Documents.BlockCollection" /> 实例中的第一个 <see cref="T:System.Windows.Documents.Block" /> 元素。</summary>
    </member>
    <member name="P:System.Windows.Documents.BlockCollection.LastBlock">
      <summary>获取此 <see cref="T:System.Windows.Documents.BlockCollection" /> 实例中的最后一个 <see cref="T:System.Windows.Documents.Block" /> 元素。</summary>
    </member>
    <member name="T:System.Windows.Documents.BlockUIContainer">
      <summary>块级别流内容元素，它使 <see cref="T:System.Windows.UIElement" /> 元素（即 <see cref="T:System.Windows.Controls.Button" />）能够嵌入（承载）在流内容中。</summary>
    </member>
    <member name="M:System.Windows.Documents.BlockUIContainer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.BlockUIContainer" /> 类的新的空实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.BlockUIContainer.#ctor(System.Windows.UIElement)">
      <summary>初始化 <see cref="T:System.Windows.Documents.BlockUIContainer" /> 类的一个新实例，将指定的 <see cref="T:System.Windows.UIElement" /> 对象作为新的 <see cref="T:System.Windows.Documents.BlockUIContainer" /> 的初始内容。</summary>
      <param name="uiElement">
        <see cref="T:System.Windows.UIElement" /> 对象，它指定新的 <see cref="T:System.Windows.Documents.BlockUIContainer" /> 的初始内容。</param>
    </member>
    <member name="P:System.Windows.Documents.BlockUIContainer.Child">
      <summary>获取或设置由 <see cref="T:System.Windows.Documents.BlockUIContainer" /> 承载的 <see cref="T:System.Windows.UIElement" />。</summary>
      <returns>由 <see cref="T:System.Windows.Documents.BlockUIContainer" /> 承载的 <see cref="T:System.Windows.UIElement" />。</returns>
    </member>
    <member name="T:System.Windows.Documents.Bold">
      <summary>一个内联级别的流内容元素，该元素导致内容以粗体形式呈现。</summary>
    </member>
    <member name="M:System.Windows.Documents.Bold.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.Bold" /> 类的新的空实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.Bold.#ctor(System.Windows.Documents.Inline)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Bold" /> 类的一个新实例，将指定的 <see cref="T:System.Windows.Documents.Inline" /> 对象作为新的 <see cref="T:System.Windows.Documents.Bold" /> 的初始内容。</summary>
      <param name="childInline">
        <see cref="T:System.Windows.Documents.Inline" /> 对象，它指定新的 <see cref="T:System.Windows.Documents.Bold" /> 的初始内容。</param>
    </member>
    <member name="M:System.Windows.Documents.Bold.#ctor(System.Windows.Documents.Inline,System.Windows.Documents.TextPointer)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Bold" /> 类的一个新实例，使用指定 <see cref="T:System.Windows.Documents.Inline" /> 对象作为新 <see cref="T:System.Windows.Documents.Bold" /> 的初始内容，并由一个 <see cref="T:System.Windows.Documents.TextPointer" /> 指定新 <see cref="T:System.Windows.Documents.Inline" /> 元素的插入位置。</summary>
      <param name="childInline">
        <see cref="T:System.Windows.Documents.Inline" /> 对象，它指定新的 <see cref="T:System.Windows.Documents.Bold" /> 的初始内容。 此参数可以为 null，在这种情况下，不插入任何 <see cref="T:System.Windows.Documents.Inline" />。</param>
      <param name="insertionPosition">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指定插入所创建 <see cref="T:System.Windows.Documents.Bold" /> 元素的位置，或者为 null 以表示不自动插入。</param>
    </member>
    <member name="M:System.Windows.Documents.Bold.#ctor(System.Windows.Documents.TextPointer,System.Windows.Documents.TextPointer)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Bold" /> 类的一个新实例，使用两个 <see cref="T:System.Windows.Documents.TextPointer" /> 对象指示该新 <see cref="T:System.Windows.Documents.Bold" /> 将要包含的内容选择的开始和结束位置。</summary>
      <param name="start">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指示该新 <see cref="T:System.Windows.Documents.Bold" /> 将要包含的内容选择的开始位置。</param>
      <param name="end">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指示该新 <see cref="T:System.Windows.Documents.Bold" /> 将要包含的内容选择的结束位置。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="start" /> 或 <paramref name="end" /> 为 null 时引发。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="start" /> 和 <paramref name="end" /> 没有解析为适于由一个 <see cref="T:System.Windows.Documents.Bold" /> 元素包围的范围时引发，例如，当 <paramref name="start" /> 和 <paramref name="end" /> 指示位置位于不同的段落时。</exception>
    </member>
    <member name="T:System.Windows.Documents.DocumentReference">
      <summary>提供访问以引用 <see cref="T:System.Windows.Documents.FixedDocument" />。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentReference.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.DocumentReference" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentReference.GetDocument(System.Boolean)">
      <summary>同步加载和分析由 <see cref="P:System.Windows.Documents.DocumentReference.Source" /> 属性位置指定的文档。</summary>
      <returns>已加载的文档。</returns>
      <param name="forceReload">
                如果为 true，则强制对 <see cref="P:System.Windows.Documents.DocumentReference.Source" /> 文档进行新的加载，即使先前已加载。</param>
    </member>
    <member name="M:System.Windows.Documents.DocumentReference.SetDocument(System.Windows.Documents.FixedDocument)">
      <summary>将 <see cref="T:System.Windows.Documents.FixedDocument" /> 附加到 <see cref="T:System.Windows.Documents.DocumentReference" />。</summary>
      <param name="doc">附加的文档。</param>
    </member>
    <member name="P:System.Windows.Documents.DocumentReference.Source">
      <summary>获取或设置此文档引用的统一资源标识符 (URI)。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Uri" />，表示文档引用。</returns>
    </member>
    <member name="F:System.Windows.Documents.DocumentReference.SourceProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.DocumentReference.Source" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.DocumentReference.Source" />依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.DocumentReference.System#Windows#Markup#IUriContext#BaseUri">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Windows.Markup.IUriContext.BaseUri" />。</summary>
      <returns>当前上下文的基 URI。</returns>
    </member>
    <member name="T:System.Windows.Documents.DocumentReferenceCollection">
      <summary>定义 <see cref="T:System.Windows.Documents.DocumentReference" /> 元素的有序列表。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentReferenceCollection.Add(System.Windows.Documents.DocumentReference)">
      <summary>将一个元素添加到集合末尾。</summary>
      <param name="item">要添加到集合末尾的元素。</param>
    </member>
    <member name="E:System.Windows.Documents.DocumentReferenceCollection.CollectionChanged">
      <summary>在添加或移除元素时发生。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentReferenceCollection.CopyTo(System.Windows.Documents.DocumentReference[],System.Int32)">
      <summary>将整个集合复制到一个从给定数组索引开始的数组。</summary>
      <param name="array">集合中的元素应复制到的目标数组。</param>
      <param name="arrayIndex">集合元素将复制到的数组中从零开始的起始索引。</param>
    </member>
    <member name="P:System.Windows.Documents.DocumentReferenceCollection.Count">
      <summary>获取集合中包含的元素数。</summary>
      <returns>集合中包含的项的数量。</returns>
    </member>
    <member name="M:System.Windows.Documents.DocumentReferenceCollection.GetEnumerator">
      <summary>返回迭代集合的一个枚举数。</summary>
      <returns>可用来迭代集合的枚举数。</returns>
    </member>
    <member name="P:System.Windows.Documents.DocumentReferenceCollection.Item(System.Int32)">
      <summary>获取位于指定索引处的元素。</summary>
      <returns>位于指定 <paramref name="index" /> 处的集合元素。</returns>
      <param name="index">要从集合中获取的元素的从零开始的索引。</param>
    </member>
    <member name="M:System.Windows.Documents.DocumentReferenceCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>此成员支持 Microsoft .NET Framework 基础结构，并且不应直接在代码中使用。请改用类型安全的 <see cref="M:System.Windows.Documents.DocumentReferenceCollection.GetEnumerator" /> 方法。 </summary>
    </member>
    <member name="T:System.Windows.Documents.EditingCommands">
      <summary>提供一组标准的与编辑相关的命令。</summary>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.AlignCenter">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignCenter" /> 命令，该命令请求将当前段落或选中的段落居中。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+E。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.AlignJustify">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignJustify" /> 命令，该命令请求将当前段落或选中的段落两端对齐。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+J。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.AlignLeft">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignLeft" /> 命令，该命令请求将所选内容左对齐。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+L。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.AlignRight">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignRight" /> 命令，该命令请求将所选内容右对齐。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+R。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.Backspace">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.Backspace" /> 命令，该命令请求在当前位置或当前所选内容上输入一个退格。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Backspace。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.CorrectSpellingError">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" /> 命令，该命令请求更正当前位置任何拼写错误的单词。</summary>
      <returns>请求的命令。 此命令无默认键笔势。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.DecreaseFontSize">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" /> 命令，该命令请求将当前所选内容的字号缩小 1 磅。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+OemOpenBrackets。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.DecreaseIndentation">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" /> 命令，该命令请求将当前段落的缩进减少一个制表位。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+Shift+T。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.Delete">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.Delete" /> 命令，该命令请求删除当前所选内容。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Delete。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.DeleteNextWord">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" /> 命令，该命令请求删除下一单词（相对于当前位置而言）。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+Delete。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.DeletePreviousWord">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" /> 命令，该命令请求删除上一单词（相对于当前位置而言）。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+Backspace。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.EnterLineBreak">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" /> 命令，该命令请求在当前位置或当前所选内容上插入一个换行符。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Shift+Enter。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" /> 命令，该命令请求在当前位置或当前所选内容上插入一个分段符。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Enter。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" /> 命令，该命令请求忽略当前位置或当前所选内容中任何拼写错误的单词的实例。</summary>
      <returns>请求的命令。 此命令无默认键笔势。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.IncreaseFontSize">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" /> 命令，该命令请求将当前所选内容的字号增加 1 磅。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+OemCloseBrackets。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.IncreaseIndentation">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" /> 命令，该命令请求将当前段落的缩进增加一个制表位。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+T。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.MoveDownByLine">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" /> 命令，该命令请求将插入符号向下移动一行。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Down。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.MoveDownByPage">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" /> 命令，该命令请求将插入符号向下移动一页。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 PageDown。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" /> 命令，该命令请求将插入符号向下移动一个段落。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+Down。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" /> 命令，该命令请求将插入符号向左移动一个字符。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Left。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.MoveLeftByWord">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" /> 命令，该命令请求将插入符号向左移动一个单词。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+Left。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" /> 命令，该命令请求将插入符号向右移动一个字符。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Right。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.MoveRightByWord">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" /> 命令，该命令请求将插入符号向右移动一个单词。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+Right。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" /> 命令，该命令请求将插入符号移至内容的末尾。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+End。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" /> 命令，该命令请求将插入符号移至内容的开头。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+Home。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.MoveToLineEnd">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" /> 命令，该命令请求将插入符号移至当前行的末尾。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 End。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.MoveToLineStart">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" /> 命令，该命令请求将插入符号移至当前行的开头。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Home。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.MoveUpByLine">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" /> 命令，该命令请求将插入符号向上移动一行。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Up。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.MoveUpByPage">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" /> 命令，该命令请求将插入符号向上移动一页。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 PageUp。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" /> 命令，该命令请求将插入符号向上移动一个段落。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+Up。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.SelectDownByLine">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" /> 命令，该命令请求将当前选择范围向下扩展一行。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Shift+Down。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.SelectDownByPage">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" /> 命令，该命令请求将当前选择范围向下扩展一页。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Shift+PageDown。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" /> 命令，该命令请求将当前选择范围向下扩展一段。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+Shift+Down。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" /> 命令，该命令请求将当前选择范围向左扩展一个字符。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Shift+Left。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.SelectLeftByWord">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" /> 命令，该命令请求将当前选择范围向左扩展一个单词。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+Shift+Left。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" /> 命令，该命令请求将当前选择范围向右扩展一个字符。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Shift+Right。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.SelectRightByWord">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" /> 命令，该命令请求将当前选择范围向右扩展一个单词。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+Shift+Right。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" /> 命令，该命令请求将当前选择范围扩展到内容末尾处。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+Shift+End。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" /> 命令，该命令请求将当前选择范围扩展到内容开头处。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+Shift+Home。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.SelectToLineEnd">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" /> 命令，该命令请求将当前选择范围扩展到当前行的末尾。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Shift+End。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.SelectToLineStart">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" /> 命令，该命令请求将当前选择范围扩展到当前行的开头。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Shift+Home。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.SelectUpByLine">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" /> 命令，该命令请求将当前选择范围向上扩展一行。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Shift+Up。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.SelectUpByPage">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" /> 命令，该命令请求将当前选择范围向上扩展一页。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Shift+PageUp。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" /> 命令，该命令请求将当前选择范围向上扩展一段。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+Shift+Up。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.TabBackward">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.TabBackward" /> 命令。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Shift+Tab。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.TabForward">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.TabForward" /> 命令。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Tab。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.ToggleBold">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleBold" /> 命令，该命令请求对当前所选内容进行 <see cref="T:System.Windows.Documents.Bold" /> 格式切换。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+B。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.ToggleBullets">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleBullets" /> 命令，该命令请求对当前所选内容进行无序列表（也称为项目符号列表）格式切换。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+Shift+L。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.ToggleInsert">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleInsert" /> 命令，该命令用于切换“插入”和“改写”键入模式。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Insert。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.ToggleItalic">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" /> 命令，该命令请求对当前所选内容进行 <see cref="T:System.Windows.Documents.Italic" /> 格式切换。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+I。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.ToggleNumbering">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" /> 命令，该命令请求对当前所选内容进行排序列表（也称为编号列表）格式切换。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+Shift+N。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.ToggleSubscript">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" /> 命令，该命令请求对当前所选内容进行下标格式切换。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+OemPlus。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.ToggleSuperscript">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" /> 命令，该命令请求对当前所选内容进行上标格式切换。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+Shift+OemPlus。</returns>
    </member>
    <member name="P:System.Windows.Documents.EditingCommands.ToggleUnderline">
      <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" /> 命令，该命令请求对当前所选内容进行 <see cref="T:System.Windows.Documents.Underline" /> 格式切换。</summary>
      <returns>请求的命令。 此命令的默认键笔势为 Ctrl+U。</returns>
    </member>
    <member name="T:System.Windows.Documents.Figure">
      <summary>一个内联级别的用于承载图形的流内容元素。 图形是带有位置属性的流内容的一部分，可以独立于 <see cref="T:System.Windows.Documents.FlowDocument" /> 中的主内容流自定义该部分。</summary>
    </member>
    <member name="M:System.Windows.Documents.Figure.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.Figure" /> 类的新的空实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.Figure.#ctor(System.Windows.Documents.Block)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Figure" /> 类的一个新实例，将指定的 <see cref="T:System.Windows.Documents.Block" /> 对象作为新的 <see cref="T:System.Windows.Documents.Figure" /> 的初始内容。</summary>
      <param name="childBlock">一个 <see cref="T:System.Windows.Documents.Block" /> 对象，它指定新的 <see cref="T:System.Windows.Documents.Figure" /> 的初始内容。</param>
    </member>
    <member name="M:System.Windows.Documents.Figure.#ctor(System.Windows.Documents.Block,System.Windows.Documents.TextPointer)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Figure" /> 类的一个新实例，使用指定 <see cref="T:System.Windows.Documents.Block" /> 对象作为新 <see cref="T:System.Windows.Documents.Figure" /> 的初始内容，并由一个 <see cref="T:System.Windows.Documents.TextPointer" /> 指定新 <see cref="T:System.Windows.Documents.Figure" /> 元素的插入位置。</summary>
      <param name="childBlock">一个 <see cref="T:System.Windows.Documents.Block" /> 对象，它指定新的 <see cref="T:System.Windows.Documents.Figure" /> 的初始内容。 此参数可以为 null，在这种情况下，不插入任何 <see cref="T:System.Windows.Documents.Block" />。</param>
      <param name="insertionPosition">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指定插入所创建 <see cref="T:System.Windows.Documents.Figure" /> 元素的位置，或者为 null 以表示不自动插入。</param>
    </member>
    <member name="P:System.Windows.Documents.Figure.CanDelayPlacement">
      <summary>获取或设置一个值，该值指示此图形是否可延迟放入内容流中。这是一个依赖项属性。</summary>
      <returns>
            如果此图形可延迟放入，则为 true；否则为 false。默认值为“True”。</returns>
    </member>
    <member name="F:System.Windows.Documents.Figure.CanDelayPlacementProperty">
      <summary> 标识 <see cref="P:System.Windows.Documents.Figure.CanDelayPlacement" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Figure.CanDelayPlacement" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Figure.Height">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Windows.Documents.Figure" /> 元素的高度。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.FigureLength" /> 结构，它指定 <see cref="T:System.Windows.Documents.Figure" /> 的高度特性。默认值为 <see cref="T:System.Windows.FigureLength" />.<see cref="P:System.Windows.FigureLength.Value" /> = 1.0 和 <see cref="T:System.Windows.FigureLength" />.<see cref="P:System.Windows.FigureLength.FigureUnitType" /> = <see cref="F:System.Windows.FigureUnitType.Auto" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.Figure.HeightProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Figure.Height" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Figure.Height" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Figure.HorizontalAnchor">
      <summary>获取或设置一个值，该值指示内容沿水平方向锚定到的位置。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.FigureHorizontalAnchor" /> 枚举的一个成员，它指定 <see cref="T:System.Windows.Documents.Figure" /> 的水平锚定位置。默认值为 <see cref="F:System.Windows.FigureHorizontalAnchor.ColumnRight" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.Figure.HorizontalAnchorProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Figure.HorizontalAnchor" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Figure.HorizontalAnchor" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Figure.HorizontalOffset">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Windows.Documents.Figure" /> 沿水平方向从其基线偏移的距离。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.Figure" /> 沿水平方向从其基线偏移的距离（以与设备无关的像素为单位）。默认值为 0.0。</returns>
    </member>
    <member name="F:System.Windows.Documents.Figure.HorizontalOffsetProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Figure.HorizontalOffset" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Figure.HorizontalOffset" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Figure.VerticalAnchor">
      <summary>获取或设置一个值，该值指示内容沿垂直方向锚定到的位置。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.FigureVerticalAnchor" /> 枚举的一个成员，它指定 <see cref="T:System.Windows.Documents.Figure" /> 的垂直锚定位置。默认值为 <see cref="F:System.Windows.FigureVerticalAnchor.ParagraphTop" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.Figure.VerticalAnchorProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Figure.VerticalAnchor" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Figure.VerticalAnchor" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Figure.VerticalOffset">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Windows.Documents.Figure" /> 沿垂直方向从其基线偏移的距离。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.Figure" /> 沿垂直方向从其基线偏移的距离（以与设备无关的像素为单位）。默认值为 0.0。</returns>
    </member>
    <member name="F:System.Windows.Documents.Figure.VerticalOffsetProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Figure.VerticalOffset" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Figure.VerticalOffset" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Figure.Width">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Windows.Documents.Figure" /> 元素的宽度。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.FigureLength" /> 结构，它指定 <see cref="T:System.Windows.Documents.Figure" /> 的宽度特性。默认值为 <see cref="T:System.Windows.FigureLength" />.<see cref="P:System.Windows.FigureLength.Value" /> = 1.0 和 <see cref="T:System.Windows.FigureLength" />.<see cref="P:System.Windows.FigureLength.FigureUnitType" /> = <see cref="F:System.Windows.FigureUnitType.Auto" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.Figure.WidthProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Figure.Width" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Figure.Width" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Figure.WrapDirection">
      <summary>获取或设置一个值，该值指示内容可用其环绕 <see cref="T:System.Windows.Documents.Figure" /> 的允许方式。 这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.WrapDirection" /> 枚举的一个成员，它指定内容可用其环绕 <see cref="T:System.Windows.Documents.Figure" /> 的允许方式。默认值为 <see cref="F:System.Windows.WrapDirection.Both" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.Figure.WrapDirectionProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Figure.WrapDirection" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Figure.WrapDirection" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Documents.FixedDocument">
      <summary>承载一个可移植、高保真、格式固定的文档，该文档具有对用户文本选定内容、键盘导航和搜索的读取访问权限。</summary>
    </member>
    <member name="M:System.Windows.Documents.FixedDocument.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.FixedDocument" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Documents.FixedDocument.DocumentPaginator">
      <summary>获取 <see cref="T:System.Windows.Documents.FixedDocument" /> 的分页程序，该分页程序提供面向页的服务（如获取特定页及重标页码以响应更改）。</summary>
      <returns>一个从提供分页服务的 <see cref="T:System.Windows.Documents.DocumentPaginator" /> 派生的类的对象。</returns>
    </member>
    <member name="P:System.Windows.Documents.FixedDocument.LogicalChildren">
      <summary>获取一个枚举数，用于访问文档的 <see cref="T:System.Windows.Documents.PageContent" /> 子元素。</summary>
      <returns>一个枚举数，用于访问文档的 <see cref="T:System.Windows.Documents.PageContent" /> 子元素。</returns>
    </member>
    <member name="M:System.Windows.Documents.FixedDocument.OnCreateAutomationPeer">
      <summary>创建文档的自动化对等方。</summary>
      <returns>一个 <see cref="T:System.Windows.Automation.Peers.DocumentAutomationPeer" />，它向 Microsoft UI 自动化公开 <see cref="T:System.Windows.Documents.FixedDocument" />。</returns>
    </member>
    <member name="P:System.Windows.Documents.FixedDocument.Pages">
      <summary>获取文档的 <see cref="T:System.Windows.Documents.PageContent" /> 元素的集合。</summary>
      <returns>文档的 <see cref="T:System.Windows.Documents.PageContent" /> 元素的集合。</returns>
    </member>
    <member name="P:System.Windows.Documents.FixedDocument.PrintTicket">
      <summary>获取或设置与此文档关联的 <see cref="T:System.Printing.PrintTicket" />。这是一个依赖项属性。</summary>
      <returns>此文档的 <see cref="T:System.Printing.PrintTicket" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.FixedDocument.PrintTicketProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FixedDocument.PrintTicket" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FixedDocument.PrintTicket" />依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Documents.FixedDocument.System#IServiceProvider#GetService(System.Type)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。</summary>
      <param name="serviceType"></param>
    </member>
    <member name="M:System.Windows.Documents.FixedDocument.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。</summary>
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Documents.FixedDocument.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。</summary>
      <param name="text"></param>
    </member>
    <member name="P:System.Windows.Documents.FixedDocument.System#Windows#Markup#IUriContext#BaseUri">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
    </member>
    <member name="T:System.Windows.Documents.FixedDocumentSequence">
      <summary>承载定义固定文档的序列的一个或多个 <see cref="T:System.Windows.Documents.DocumentReference" /> 元素。</summary>
    </member>
    <member name="M:System.Windows.Documents.FixedDocumentSequence.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Documents.FixedDocumentSequence.DocumentPaginator">
      <summary>获取 <see cref="T:System.Windows.Documents.FixedDocument" /> 的分页程序，该分页程序提供面向页的服务（如获取特定页及重标页码以响应更改）。</summary>
      <returns>一个从提供分页服务的 <see cref="T:System.Windows.Documents.DocumentPaginator" /> 派生的类的对象</returns>
    </member>
    <member name="P:System.Windows.Documents.FixedDocumentSequence.LogicalChildren">
      <summary>获取一个枚举数，以用于访问文档序列的 <see cref="T:System.Windows.Documents.DocumentReference" />子元素。</summary>
      <returns>一个枚举数，用于访问文档序列的 <see cref="T:System.Windows.Documents.DocumentReference" /> 子元素。</returns>
    </member>
    <member name="M:System.Windows.Documents.FixedDocumentSequence.OnCreateAutomationPeer">
      <summary>创建序列的自动化对等方。</summary>
      <returns>一个 <see cref="T:System.Windows.Automation.Peers.DocumentAutomationPeer" />，它向 Microsoft UI 自动化公开 <see cref="T:System.Windows.Documents.FixedDocumentSequence" />。</returns>
    </member>
    <member name="P:System.Windows.Documents.FixedDocumentSequence.PrintTicket">
      <summary>获取或设置与此文档序列关联的 <see cref="T:System.Printing.PrintTicket" />。这是一个依赖项属性。</summary>
      <returns>此序列的 <see cref="T:System.Printing.PrintTicket" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.FixedDocumentSequence.PrintTicketProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FixedDocumentSequence.PrintTicket" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FixedDocumentSequence.PrintTicket" />依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FixedDocumentSequence.References">
      <summary>获取文档序列的 <see cref="T:System.Windows.Documents.DocumentReference" />子元素的集合。</summary>
      <returns>文档序列的 <see cref="T:System.Windows.Documents.DocumentReference" /> 子元素的集合。</returns>
    </member>
    <member name="M:System.Windows.Documents.FixedDocumentSequence.System#IServiceProvider#GetService(System.Type)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，并且不应在代码中直接使用。</summary>
      <param name="serviceType"></param>
    </member>
    <member name="M:System.Windows.Documents.FixedDocumentSequence.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，并且不应在代码中直接使用。</summary>
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Documents.FixedDocumentSequence.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，并且不应在代码中直接使用。</summary>
      <param name="text"></param>
    </member>
    <member name="P:System.Windows.Documents.FixedDocumentSequence.System#Windows#Markup#IUriContext#BaseUri">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="T:System.Windows.Documents.FixedPage">
      <summary>
                    为高保真度、固定格式的页面提供内容。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.FixedPage.#ctor">
      <summary>
                    初始化 <see cref="T:System.Windows.Documents.FixedPage" /> 类的新实例。
                </summary>
    </member>
    <member name="P:System.Windows.Documents.FixedPage.Background">
      <summary>
                    获取或设置用于呈现页面背景的 <see cref="T:System.Windows.Media.Brush" />。这是一个依赖项属性。
                </summary>
      <returns>
                    用于呈现页面背景的画笔。
                </returns>
    </member>
    <member name="F:System.Windows.Documents.FixedPage.BackgroundProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Documents.FixedPage.Background" /> 依赖项属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.FixedPage.Background" /> 依赖项属性的标识符。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.FixedPage.BleedBox">
      <summary>
                    获取或设置一个为出血、注册标记和裁切标记定义溢出区域的矩形。这是一个依赖项属性。
                </summary>
      <returns>
                    定义溢出区域的 <see cref="T:System.Windows.Rect" />。
                </returns>
    </member>
    <member name="F:System.Windows.Documents.FixedPage.BleedBoxProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Documents.FixedPage.BleedBox" /> 依赖项属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.DocumentPage.BleedBox" /> 依赖项属性的标识符。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.FixedPage.Bottom">
      <summary>
                    获取或设置页面底部与父 <see cref="T:System.Windows.Controls.Canvas" /> 的底部之间的距离。
                </summary>
      <returns>
                    页面的底部与父画布的底部之间的距离。
                </returns>
    </member>
    <member name="F:System.Windows.Documents.FixedPage.BottomProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Documents.FixedPage.Bottom" /> 附加属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.FixedPage.Bottom" /> 附加属性的标识符。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.FixedPage.Children">
      <summary>
                    获取 <see cref="T:System.Windows.Documents.FixedPage" /> 子元素的集合。
                </summary>
      <returns>
                    子元素的 <see cref="T:System.Windows.Controls.UIElementCollection" />。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.FixedPage.ContentBox">
      <summary>
                    获取或设置内容区域（即，位于边距（如果有）内 的页面区域）的边框。这是一个依赖项属性。
                </summary>
      <returns>
                    用于定义内容区域的 <see cref="T:System.Windows.Rect" />。
                </returns>
    </member>
    <member name="F:System.Windows.Documents.FixedPage.ContentBoxProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Documents.FixedPage.ContentBox" /> 依赖项属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.FixedPage.ContentBox" /> 依赖项属性的标识符。
                </returns>
    </member>
    <member name="M:System.Windows.Documents.FixedPage.GetBottom(System.Windows.UIElement)">
      <summary>
                    返回某元素的底部与其父 <see cref="T:System.Windows.Controls.Canvas" /> 的底部之间的距离。
                </summary>
      <returns>
                    某元素的底部与其父画布的底部之间的距离。
                </returns>
      <param name="element">
                    要从中获取底部偏移量的元素。
                </param>
    </member>
    <member name="M:System.Windows.Documents.FixedPage.GetLeft(System.Windows.UIElement)">
      <summary>
                    返回某元素的左侧与其父 <see cref="T:System.Windows.Controls.Canvas" /> 的左侧之间的距离。
                </summary>
      <returns>
某元素的右侧与其父画布的右侧之间的距离。
                </returns>
      <param name="element">
                    要从中获取左侧偏移量的元素。
                </param>
    </member>
    <member name="M:System.Windows.Documents.FixedPage.GetNavigateUri(System.Windows.UIElement)">
      <summary>
                    返回给定元素的 <see cref="P:System.Windows.Documents.FixedPage.NavigateUri" /> 属性。
                </summary>
      <returns>
        <paramref name="element" /> 的 <see cref="T:System.Uri" />。
                </returns>
      <param name="element">
                    要从中获取属性的元素。
                </param>
    </member>
    <member name="M:System.Windows.Documents.FixedPage.GetRight(System.Windows.UIElement)">
      <summary>
                    返回某元素的右侧与其父 <see cref="T:System.Windows.Controls.Canvas" /> 的右侧之间的距离。
                </summary>
      <returns>
某元素的右侧与其父画布的右侧之间的距离。
                </returns>
      <param name="element">
                    要从中获取右侧偏移量的元素。
                </param>
    </member>
    <member name="M:System.Windows.Documents.FixedPage.GetTop(System.Windows.UIElement)">
      <summary>
                    返回某元素的顶部与其父 <see cref="T:System.Windows.Controls.Canvas" /> 的顶部之间的距离。
                </summary>
      <returns>
                    某元素的顶部与其父画布的顶部之间的距离。
                </returns>
      <param name="element">
                    要从中获取顶部偏移量的元素。
                </param>
    </member>
    <member name="P:System.Windows.Documents.FixedPage.Left">
      <summary>
                    获取或设置页面的左边缘与父 <see cref="T:System.Windows.Controls.Canvas" /> 的左边缘之间的距离。
                </summary>
      <returns>
                    页面的左边缘与父画布的左边缘之间的距离。
                </returns>
    </member>
    <member name="F:System.Windows.Documents.FixedPage.LeftProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Documents.FixedPage.Left" /> 附加属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.FixedPage.Left" /> 附加属性的标识符。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.FixedPage.NavigateUri">
      <summary>
                    获取或设置与页面关联的 URI。
                </summary>
      <returns>
                    与 <see cref="T:System.Windows.Documents.FixedPage" /> 关联的 统一资源标识符 (URI)。
                </returns>
    </member>
    <member name="F:System.Windows.Documents.FixedPage.NavigateUriProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Documents.FixedPage.NavigateUri" /> 附加属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.FixedPage.NavigateUri" /> 附加属性的标识符。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.FixedPage.PrintTicket">
      <summary>
                    获取或设置与页面关联的 <see cref="T:System.Printing.PrintTicket" />。这是一个依赖项属性。
                </summary>
      <returns>
                    页的 <see cref="T:System.Printing.PrintTicket" />。
                </returns>
    </member>
    <member name="F:System.Windows.Documents.FixedPage.PrintTicketProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Documents.FixedPage.PrintTicket" /> 依赖项属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.FixedPage.PrintTicket" /> 依赖项属性的标识符。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.FixedPage.Right">
      <summary>
                    获取或设置页面的右边缘与父 <see cref="T:System.Windows.Controls.Canvas" /> 的右边缘之间的距离。
                </summary>
      <returns>
                    页面的右边缘与父画布的右边缘之间的距离。
                </returns>
    </member>
    <member name="F:System.Windows.Documents.FixedPage.RightProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Documents.FixedPage.Right" /> 附加属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.FixedPage.Right" /> 依赖项属性的标识符。
                </returns>
    </member>
    <member name="M:System.Windows.Documents.FixedPage.SetBottom(System.Windows.UIElement,System.Double)">
      <summary>
                    设置某元素的底部与其父 <see cref="T:System.Windows.Controls.Canvas" /> 的底部之间的距离。
                </summary>
      <param name="element">
                    要在其上设置底部偏移量的元素。
                </param>
      <param name="length">
                    元素的底部与其父画布的底部之间的新距离。
                </param>
    </member>
    <member name="M:System.Windows.Documents.FixedPage.SetLeft(System.Windows.UIElement,System.Double)">
      <summary>
                    设置某元素的左侧与其父 <see cref="T:System.Windows.Controls.Canvas" /> 的左侧之间的距离。
                </summary>
      <param name="element">
                    要在其上设置左侧偏移量的元素。
                </param>
      <param name="length">
                    元素的左侧与其父画布的左侧之间的新距离。
                </param>
    </member>
    <member name="M:System.Windows.Documents.FixedPage.SetNavigateUri(System.Windows.UIElement,System.Uri)">
      <summary>
                    设置在单击超链接时要导航到的统一资源标识符 (URI)。
                </summary>
      <param name="element">
                    要在其上设置 URI 偏移量的元素。
                </param>
      <param name="uri">
                    在单击超链接时要导航到的URI。
                </param>
    </member>
    <member name="M:System.Windows.Documents.FixedPage.SetRight(System.Windows.UIElement,System.Double)">
      <summary>
                    设置某元素的右侧与其父 <see cref="T:System.Windows.Controls.Canvas" /> 的右侧之间的距离。
                </summary>
      <param name="element">
                    要在其上设置右侧偏移量的元素。
                </param>
      <param name="length">
                    元素的右侧与其父画布的右侧之间的新距离。
                </param>
    </member>
    <member name="M:System.Windows.Documents.FixedPage.SetTop(System.Windows.UIElement,System.Double)">
      <summary>
                    设置某元素的顶部与其父 <see cref="T:System.Windows.Controls.Canvas" /> 的顶部之间的距离。
                </summary>
      <param name="element">
                    要在其上设置顶部偏移量的元素。
                </param>
      <param name="length">
                    元素的顶部与其父画布的顶部之间的新距离。
                </param>
    </member>
    <member name="M:System.Windows.Documents.FixedPage.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>
                    此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。
                </summary>
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Documents.FixedPage.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>
                    此成员支持 Microsoft .NET Framework 基础结构，并且不应在代码中直接使用。
                </summary>
      <param name="text"></param>
    </member>
    <member name="P:System.Windows.Documents.FixedPage.System#Windows#Markup#IUriContext#BaseUri">
      <summary>
                    此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。
                </summary>
    </member>
    <member name="P:System.Windows.Documents.FixedPage.Top">
      <summary>
                    获取或设置页面顶部与父 <see cref="T:System.Windows.Controls.Canvas" /> 的顶部之间的距离。
                </summary>
      <returns>
                    页面的顶部与父画布的顶部之间的距离。
                </returns>
    </member>
    <member name="F:System.Windows.Documents.FixedPage.TopProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Documents.FixedPage.Top" /> 附加属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.FixedPage.Top" /> 附加属性的标识符。
                </returns>
    </member>
    <member name="T:System.Windows.Documents.Floater">
      <summary>提供一个内联级别的流内容元素，该元素用于承载一个浮标。“浮标”显示与 <see cref="T:System.Windows.Documents.FlowDocument" /> 中的主内容流平行的图像和其他内容。</summary>
    </member>
    <member name="M:System.Windows.Documents.Floater.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.Floater" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.Floater.#ctor(System.Windows.Documents.Block)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Floater" /> 类的一个新实例，并使用指定的 <see cref="T:System.Windows.Documents.Block" /> 对象作为其初始内容。</summary>
      <param name="childBlock">新 <see cref="T:System.Windows.Documents.Floater" /> 的初始内容。</param>
    </member>
    <member name="M:System.Windows.Documents.Floater.#ctor(System.Windows.Documents.Block,System.Windows.Documents.TextPointer)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Floater" /> 类的一个新实例，其中使用指定 <see cref="T:System.Windows.Documents.Block" /> 对象作为其初始内容，并由一个 <see cref="T:System.Windows.Documents.TextPointer" /> 指定新 <see cref="T:System.Windows.Documents.Floater" /> 的插入位置。</summary>
      <param name="childBlock">新 <see cref="T:System.Windows.Documents.Floater" /> 的初始内容。此参数可以为 null，在这种情况下，不插入任何 <see cref="T:System.Windows.Documents.Block" />。</param>
      <param name="insertionPosition">所创建的 <see cref="T:System.Windows.Documents.Floater" /> 元素的插入位置。</param>
    </member>
    <member name="P:System.Windows.Documents.Floater.HorizontalAlignment">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Windows.Documents.Floater" /> 对象的水平对齐方式。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.HorizontalAlignment" /> 枚举的一个成员，它指定 <see cref="T:System.Windows.Documents.Floater" /> 的水平对齐方式。默认值为 <see cref="F:System.Windows.HorizontalAlignment.Stretch" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.Floater.HorizontalAlignmentProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Floater.HorizontalAlignment" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Floater.HorizontalAlignment" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Floater.Width">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Windows.Documents.Floater" /> 对象的宽度。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.Floater" /> 的宽度，以与设备无关的像素为单位。默认值为 <see cref="F:System.Double.NaN" />（与 Auto 属性值等效），它指示将自动确定行高。</returns>
    </member>
    <member name="F:System.Windows.Documents.Floater.WidthProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Floater.Width" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Floater.Width" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Documents.FlowDocument">
      <summary>用高级文档功能（如分页和列）承载流内容和设置流内容格式。</summary>
    </member>
    <member name="M:System.Windows.Documents.FlowDocument.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.FlowDocument" /> 类的一个新的空实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.FlowDocument.#ctor(System.Windows.Documents.Block)">
      <summary>初始化 <see cref="T:System.Windows.Documents.FlowDocument" /> 类的一个新实例，将指定的 <see cref="T:System.Windows.Documents.Block" /> 元素作为初始内容添加到实例中。</summary>
      <param name="block">要作为初始内容添加的从抽象 <see cref="T:System.Windows.Documents.Block" /> 类派生的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="block" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.Background">
      <summary>获取或设置要用于填充内容区域背景的 <see cref="T:System.Windows.Media.Brush" />。这是一个依赖项属性。</summary>
      <returns>用于填充内容区域背景的画笔，或 null（不使用背景画笔）。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.BackgroundProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.Background" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.Background" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.Blocks">
      <summary>获取 <see cref="T:System.Windows.Documents.FlowDocument" /> 的内容的顶级 <see cref="T:System.Windows.Documents.Block" /> 元素。</summary>
      <returns>一个 <see cref="T:System.Windows.Documents.BlockCollection" />，其中包含组成 <see cref="T:System.Windows.Documents.FlowDocument" /> 的内容的 <see cref="T:System.Windows.Documents.Block" /> 元素。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.ColumnGap">
      <summary>获取或设置列间隔值，该值指示 <see cref="T:System.Windows.Documents.FlowDocument" /> 中各列之间的间距。这是一个依赖项属性。</summary>
      <returns>列间隔，以与设备无关的像素为单位。值为 <see cref="F:System.Double.NaN" />（等效于属性值“Auto”）指示列间隔等于 <see cref="P:System.Windows.Documents.FlowDocument.LineHeight" /> 属性。默认值为 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.ColumnGapProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.ColumnGap" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.ColumnGap" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.ColumnRuleBrush">
      <summary>获取或设置用于绘制列之间标尺的 <see cref="T:System.Windows.Media.Brush" />。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Brush" />（用于绘制列之间的标尺线），或为 null（不使用背景画笔）。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.ColumnRuleBrushProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.ColumnRuleBrush" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.ColumnRuleBrush" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.ColumnRuleWidth">
      <summary>获取或设置列标尺宽度。这是一个依赖项属性。</summary>
      <returns>列标尺宽度，以与设备无关的像素为单位。默认值为 0.0。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.ColumnRuleWidthProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.ColumnRuleWidth" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.ColumnRuleWidth" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.ColumnWidth">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.FlowDocument" /> 中列的所需最小宽度。这是一个依赖项属性。</summary>
      <returns>所需的最小列宽，以与设备无关的像素为单位。值为 <see cref="F:System.Double.NaN" /> 会导致无论页面宽度如何，都只显示一列。默认值为 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.ColumnWidthProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.ColumnWidth" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.ColumnWidth" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.ContentEnd">
      <summary>获取表示 <see cref="T:System.Windows.Documents.FlowDocument" /> 中内容末尾的 <see cref="T:System.Windows.Documents.TextPointer" />。</summary>
      <returns>表示 <see cref="T:System.Windows.Documents.FlowDocument" /> 中内容末尾的 <see cref="T:System.Windows.Documents.TextPointer" />。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.ContentStart">
      <summary>获取表示 <see cref="T:System.Windows.Documents.FlowDocument" /> 中内容起始位置的 <see cref="T:System.Windows.Documents.TextPointer" />。</summary>
      <returns>表示 <see cref="T:System.Windows.Documents.FlowDocument" /> 中内容起始位置的 <see cref="T:System.Windows.Documents.TextPointerContext" />。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.FlowDirection">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.FlowDocument" /> 中内容流的相对方向。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.FlowDirection" /> 值之一，指定相对流动方向。默认值为 <see cref="F:System.Windows.FlowDirection.LeftToRight" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.FlowDirectionProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.FlowDirection" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.FlowDirection" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.FontFamily">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.FlowDocument" /> 的首选顶级字体系列。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.FontFamily" /> 对象，指定首选字体系列，或者指定一个主要首选字体系列并附带一个或多个备用字体系列。默认字体是由 <see cref="P:System.Windows.SystemFonts.MessageFontFamily" /> 值确定的字体。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.FontFamilyProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.FontFamily" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.FontFamily" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.FontSize">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.FlowDocument" /> 的顶级字体大小。这是一个依赖项属性。</summary>
      <returns>希望使用的字号，以与设备无关的像素为单位。默认值由 <see cref="P:System.Windows.SystemFonts.MessageFontSize" /> 值确定。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.FontSizeProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.FontSize" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.FontSize" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.FontStretch">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.FlowDocument" /> 的顶级字体拉伸特征。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.FontStretch" /> 类的一个成员，指定希望使用的字体拉伸特征。默认值为 <see cref="P:System.Windows.FontStretches.Normal" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.FontStretchProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.FontStretch" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.FontStretch" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.FontStyle">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.FlowDocument" /> 的顶级字体样式。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.FontStyles" /> 类的一个成员，指定所需的字形。默认值由 <see cref="P:System.Windows.SystemFonts.MessageFontStyle" /> 值确定。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.FontStyleProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.FontStyle" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.FontStyle" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.FontWeight">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.FlowDocument" /> 的顶级字体粗细。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.FontWeights" /> 类的一个成员，指定所需的字体粗细。默认值由 <see cref="P:System.Windows.SystemFonts.MessageFontWeight" /> 值确定。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.FontWeightProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.FontWeight" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.FontWeight" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.Foreground">
      <summary>获取或设置要应用于 <see cref="T:System.Windows.Documents.FlowDocument" /> 的文本内容的 <see cref="T:System.Windows.Media.Brush" />。这是一个依赖项属性。</summary>
      <returns>要应用于文本内容的画笔。默认值为 <see cref="P:System.Windows.Media.Brushes.Black" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.ForegroundProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.Foreground" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.Foreground" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.IsColumnWidthFlexible">
      <summary>获取或设置一个值，该值指示 <see cref="P:System.Windows.Documents.FlowDocument.ColumnWidth" /> 值是可变的还是固定的。这是一个依赖项属性。</summary>
      <returns>
            如果列宽是可变的，则为 true；如果列宽是固定的，则为 false。默认值为 true。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.IsColumnWidthFlexibleProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.IsColumnWidthFlexible" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.IsColumnWidthFlexible" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.IsEnabledCore">
      <summary>获取 <see cref="T:System.Windows.Documents.FlowDocument" /> 的 <see cref="P:System.Windows.ContentElement.IsEnabled" /> 属性的值。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.FlowDocument" /> 的 <see cref="P:System.Windows.ContentElement.IsEnabled" /> 属性的值。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.IsHyphenationEnabled">
      <summary>获取或设置一个值，该值指示是否启用文字的自动断字功能。这是一个依赖项属性。</summary>
      <returns>
            如果启用自动对文字进行断字和添加连字符，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.IsHyphenationEnabledProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.IsHyphenationEnabled" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.IsHyphenationEnabled" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.IsOptimalParagraphEnabled">
      <summary>获取或设置一个值，该值指示是否启用最佳段落布局功能。这是一个依赖项属性。</summary>
      <returns>
            如果启用最佳段落布局，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.IsOptimalParagraphEnabledProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.IsOptimalParagraphEnabled" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.IsOptimalParagraphEnabled" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.LineHeight">
      <summary>获取或设置各行内容的高度。这是一个依赖项属性。</summary>
      <returns>各行的高度，以与设备无关的像素为单位，值的范围从 0.0034 到 160000。如果值为 <see cref="F:System.Double.NaN" />（与“Auto”属性值等效），则行高由当前字体特征自动确定。默认值为 <see cref="F:System.Double.NaN" />。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Controls.TextBlock.LineHeight" /> 设置为一个非正值。</exception>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.LineHeightProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.LineHeight" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.LineHeight" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.LineStackingStrategy">
      <summary>获取或设置为 <see cref="T:System.Windows.Documents.FlowDocument" /> 内的每行文本确定行框的机制。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.LineStackingStrategy" /> 值之一，指定为 <see cref="T:System.Windows.Documents.FlowDocument" /> 内的每行文本确定行框的机制。默认值为 <see cref="F:System.Windows.LineStackingStrategy.MaxHeight" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.LineStackingStrategyProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.LineStackingStrategy" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.LineStackingStrategy" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.LogicalChildren">
      <summary>获取一个可用于迭代 <see cref="T:System.Windows.Documents.FlowDocument" /> 的逻辑子级的枚举数。</summary>
      <returns>用于逻辑子级的枚举数。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.MaxPageHeight">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.FlowDocument" /> 中的最大页高。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.FlowDocument" /> 中的最大页高，以与设备无关的像素为单位。默认值为 <see cref="F:System.Double.PositiveInfinity" />（无最大页高）。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.MaxPageHeightProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.MaxPageHeight" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.MaxPageHeight" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.MaxPageWidth">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.FlowDocument" /> 中的最大页宽。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.FlowDocument" /> 中的最大页宽，以与设备无关的像素为单位。默认值为 <see cref="F:System.Double.PositiveInfinity" />（无最大页宽）。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.MaxPageWidthProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.MaxPageWidth" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.MaxPageWidth" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.MinPageHeight">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.FlowDocument" /> 中的最小页高。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.FlowDocument" /> 中的最小页高，以与设备无关的像素为单位。默认值为 0.0。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.MinPageHeightProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.MinPageHeight" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.MinPageHeight" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.MinPageWidth">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.FlowDocument" /> 中的最小页宽。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.FlowDocument" /> 中的最小页宽，以与设备无关的像素为单位。默认值为 0.0。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.MinPageWidthProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.MinPageWidth" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.MinPageWidth" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Documents.FlowDocument.OnCreateAutomationPeer">
      <summary>在派生类中重写时，将特定的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 实现提供给 Windows Presentation Foundation (WPF) 基础结构。</summary>
      <returns>特定于类型的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 实现。</returns>
    </member>
    <member name="M:System.Windows.Documents.FlowDocument.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>当元素上存在的一个或多个依赖项属性的有效值更改时调用。</summary>
      <param name="e">关联事件的参数。</param>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.PageHeight">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.FlowDocument" /> 中的首选页高。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.FlowDocument" /> 中的首选页高，以与设备无关的像素为单位。如果值为 <see cref="F:System.Double.NaN" />（等效于属性值“Auto”），则页高自动确定。默认值为 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.PageHeightProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.PageHeight" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.PageHeight" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.PagePadding">
      <summary>获取或设置一个值，该值指示页面边界与页面内容之间的边距的宽度。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Thickness" /> 结构，指定要应用的填充量（以与设备无关的像素为单位）。默认值为等于零 (0.0) 的一个统一宽度。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.PagePaddingProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.PagePadding" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.PagePadding" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.PageWidth">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.FlowDocument" /> 中的首选页宽。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.FlowDocument" /> 中的首选页宽，以与设备无关的像素为单位。如果值为 <see cref="F:System.Double.NaN" />（等效于属性值“Auto”），则页宽自动确定。默认值为 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.PageWidthProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.PageWidth" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.PageWidth" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Documents.FlowDocument.System#IServiceProvider#GetService(System.Type)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
      <returns>null</returns>
      <param name="serviceType"></param>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.System#Windows#Documents#IDocumentPaginatorSource#DocumentPaginator">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Documents.FlowDocument.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Documents.FlowDocument.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
      <param name="text"></param>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.TextAlignment">
      <summary>获取或设置一个值，该值指示文本内容的水平对齐方式。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.TextAlignment" /> 值之一，指定所需的对齐方式。默认值为 <see cref="F:System.Windows.TextAlignment.Left" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.TextAlignmentProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.TextAlignment" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.TextAlignment" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.TextEffects">
      <summary>获取或设置要应用于 <see cref="T:System.Windows.Documents.FlowDocument" /> 的文本的效果。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.TextEffectCollection" />，其中包含一个或多个 <see cref="T:System.Windows.Media.TextEffect" /> 对象，这些对象定义了要应用于 <see cref="T:System.Windows.Documents.FlowDocument" /> 的文本的效果。默认值为 null（不应用任何效果）。</returns>
    </member>
    <member name="F:System.Windows.Documents.FlowDocument.TextEffectsProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.FlowDocument.TextEffects" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.FlowDocument.TextEffects" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.FlowDocument.Typography">
      <summary>获取 <see cref="T:System.Windows.Documents.FlowDocument" /> 的文本内容的当前有效的版式变体。</summary>
      <returns>一个 <see cref="T:System.Windows.Documents.Typography" /> 对象，它指定当前有效的版式变体。有关默认版式值的列表，请参见 <see cref="T:System.Windows.Documents.Typography" />。</returns>
    </member>
    <member name="T:System.Windows.Documents.FrameworkRichTextComposition">
      <summary>  表示与文本输入相关的撰写。可以使用此类来查找撰写或结果字符串的文本位置。</summary>
    </member>
    <member name="P:System.Windows.Documents.FrameworkRichTextComposition.CompositionEnd">
      <summary> 获取当前撰写文本的结束位置。</summary>
      <returns>当前撰写文本的结束位置。</returns>
    </member>
    <member name="P:System.Windows.Documents.FrameworkRichTextComposition.CompositionStart">
      <summary> 获取当前撰写文本的开始位置。</summary>
      <returns>当前撰写文本的开始位置。</returns>
    </member>
    <member name="P:System.Windows.Documents.FrameworkRichTextComposition.ResultEnd">
      <summary> 获取文本输入的结果文本的结束位置。</summary>
      <returns>文本输入的结果文本的结束位置。</returns>
    </member>
    <member name="P:System.Windows.Documents.FrameworkRichTextComposition.ResultStart">
      <summary> 获取文本输入的结果文本的开始位置。</summary>
      <returns>文本输入的结果文本的开始位置。</returns>
    </member>
    <member name="T:System.Windows.Documents.FrameworkTextComposition">
      <summary>表示在 <see cref="T:System.Windows.Controls.TextBox" /> 的文本输入事件期间的撰写。</summary>
    </member>
    <member name="M:System.Windows.Documents.FrameworkTextComposition.Complete">
      <summary>完成撰写。</summary>
    </member>
    <member name="T:System.Windows.Documents.GetPageRootCompletedEventArgs">
      <summary> 为 <see cref="E:System.Windows.Documents.PageContent.GetPageRootCompleted" /> 事件提供数据。 </summary>
    </member>
    <member name="P:System.Windows.Documents.GetPageRootCompletedEventArgs.Result">
      <summary> 获取 <see cref="M:System.Windows.Documents.PageContent.GetPageRootAsync(System.Boolean)" /> 异步请求的 <see cref="T:System.Windows.Documents.FixedPage" /> 内容。 </summary>
      <returns>
        <see cref="M:System.Windows.Documents.PageContent.GetPageRootAsync(System.Boolean)" /> 请求的 <see cref="T:System.Windows.Documents.PageContent" /> 的可视化树的根元素。</returns>
    </member>
    <member name="T:System.Windows.Documents.GetPageRootCompletedEventHandler">
      <summary>表示将处理 <see cref="T:System.Windows.Documents.PageContent" /> 类的 <see cref="E:System.Windows.Documents.PageContent.GetPageRootCompleted" /> 事件的方法。 </summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Documents.Glyphs">
      <summary>表示用于呈现固定文本的标志符号集。</summary>
    </member>
    <member name="M:System.Windows.Documents.Glyphs.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.Glyphs" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.BidiLevel">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.Glyphs" /> 的双向嵌套级别。这是一个依赖项属性。</summary>
      <returns>一个表示双向嵌套级别的 <see cref="T:System.Int32" /> 值。</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.BidiLevelProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Glyphs.BidiLevel" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Glyphs.BidiLevel" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.CaretStops">
      <summary>获取或设置对应于表示 <see cref="T:System.Windows.Documents.Glyphs" /> 的 Unicode 字符串中码位的脱字符。这是一个依赖项属性。</summary>
      <returns>一个表示该码位是否存在脱字符的 <see cref="T:System.String" /> 类型的值。</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.CaretStopsProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Glyphs.CaretStops" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Glyphs.CaretStops" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.DeviceFontName">
      <summary>获取或设置已优化其 <see cref="T:System.Windows.Documents.Glyphs" /> 对象的特定设备字体。这是一个依赖项属性。</summary>
      <returns>一个表示设备字体名称的 <see cref="T:System.String" /> 的值。</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.DeviceFontNameProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Glyphs.DeviceFontName" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Glyphs.DeviceFontName" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.Fill">
      <summary>获取或设置用于填充 <see cref="T:System.Windows.Documents.Glyphs" /> 类的 <see cref="T:System.Windows.Media.Brush" />。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.Brush" /> 类型的值。</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.FillProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Glyphs.Fill" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Glyphs.Fill" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.FontRenderingEmSize">
      <summary>获取或设置用于呈现 <see cref="T:System.Windows.Documents.Glyphs" /> 类的全身大小。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Double" /> 值，表示用于呈现的全身大小。</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.FontRenderingEmSizeProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Glyphs.FontRenderingEmSize" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Glyphs.FontRenderingEmSize" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.FontUri">
      <summary>获取或设置表示用于呈现 <see cref="T:System.Windows.Documents.Glyphs" /> 类的字体位置的 <see cref="T:System.Uri" />。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Uri" /> 类型的值。</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.FontUriProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Glyphs.FontUri" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Glyphs.FontUri" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.Indices">
      <summary>获取或设置表示 <see cref="T:System.Windows.Documents.Glyphs" /> 对象的标志符号索引。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.String" /> 类型的值。</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.IndicesProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Glyphs.Indices" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Glyphs.Indices" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.IsSideways">
      <summary>确定是否旋转此 <see cref="T:System.Windows.Documents.Glyphs" /> 对象。这是一个依赖项属性。</summary>
      <returns>
            如果组成 <see cref="T:System.Windows.Documents.Glyphs" /> 对象的标志符号按逆时针旋转 90°，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.IsSidewaysProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Glyphs.IsSideways" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Glyphs.IsSideways" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.OriginX">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.Glyphs" /> 对象的 X 的原始值。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Double" /> 类型的值。</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.OriginXProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Glyphs.OriginX" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Glyphs.OriginX" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.OriginY">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.Glyphs" /> 对象的 X 的原始值。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Double" /> 类型的值。</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.OriginYProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Glyphs.OriginY" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Glyphs.OriginY" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.StyleSimulations">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.Glyphs" /> 类的 <see cref="T:System.Windows.Media.StyleSimulations" />。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.StyleSimulations" /> 类型的值。</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.StyleSimulationsProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Glyphs.StyleSimulations" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Glyphs.StyleSimulations" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.System#Windows#Markup#IUriContext#BaseUri">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Windows.Markup.IUriContext.BaseUri" />。</summary>
      <returns>当前上下文的基 URI。</returns>
    </member>
    <member name="M:System.Windows.Documents.Glyphs.ToGlyphRun">
      <summary>根据 <see cref="T:System.Windows.Documents.Glyphs" /> 对象的属性创建一个 <see cref="T:System.Windows.Media.GlyphRun" />。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.GlyphRun" /> 类型的值。</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.UnicodeString">
      <summary>获取或设置一个表示 <see cref="T:System.Windows.Documents.Glyphs" /> 对象的 Unicode 字符串的 <see cref="T:System.String" />。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.String" /> 类型的值。</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.UnicodeStringProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Glyphs.UnicodeString" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Glyphs.UnicodeString" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Documents.Hyperlink">
      <summary>
                    提供用于承载流内容中超链接的功能的内联级别的流内容元素。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.Hyperlink.#ctor">
      <summary>
                    初始化 <see cref="T:System.Windows.Documents.Hyperlink" /> 类一个默认的新实例。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.Hyperlink.#ctor(System.Windows.Documents.Inline)">
      <summary>
                    初始化 <see cref="T:System.Windows.Documents.Hyperlink" /> 类的一个新实例，将指定的 <see cref="T:System.Windows.Documents.Inline" /> 对象作为新的 <see cref="T:System.Windows.Documents.Hyperlink" /> 的初始内容。
                </summary>
      <param name="childInline">
        <see cref="T:System.Windows.Documents.Inline" /> 对象，它指定新的 <see cref="T:System.Windows.Documents.Hyperlink" /> 的初始内容。
                </param>
    </member>
    <member name="M:System.Windows.Documents.Hyperlink.#ctor(System.Windows.Documents.Inline,System.Windows.Documents.TextPointer)">
      <summary>
                    初始化 <see cref="T:System.Windows.Documents.Hyperlink" /> 类的一个新实例，使用指定的 <see cref="T:System.Windows.Documents.Inline" /> 对象作为新 <see cref="T:System.Windows.Documents.Hyperlink" /> 的初始内容，并使用一个 <see cref="T:System.Windows.Documents.TextPointer" /> 指定新 <see cref="T:System.Windows.Documents.Hyperlink" /> 的插入位置。
                </summary>
      <param name="childInline">
        <see cref="T:System.Windows.Documents.Inline" /> 对象，它指定新的 <see cref="T:System.Windows.Documents.Hyperlink" /> 的初始内容。此参数可以为 null，在这种情况下，不插入任何 <see cref="T:System.Windows.Documents.Inline" />。
                </param>
      <param name="insertionPosition">
                    一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指定插入所创建的 <see cref="T:System.Windows.Documents.Hyperlink" /> 元素的插入位置，或者为 null 以表示不自动插入。
                </param>
    </member>
    <member name="M:System.Windows.Documents.Hyperlink.#ctor(System.Windows.Documents.TextPointer,System.Windows.Documents.TextPointer)">
      <summary>
                    初始化 <see cref="T:System.Windows.Documents.Hyperlink" /> 类的一个新实例，使用两个 <see cref="T:System.Windows.Documents.TextPointer" /> 对象，以指示该新 <see cref="T:System.Windows.Documents.Hyperlink" /> 所包含的选定内容的开始位置和结束位置。
                </summary>
      <param name="start">
                    一个 <see cref="T:System.Windows.Documents.TextPointer" />，指示该新 <see cref="T:System.Windows.Documents.Hyperlink" /> 所包含的选定内容的开始位置。
                </param>
      <param name="end">
                    一个 <see cref="T:System.Windows.Documents.TextPointer" />，指示该新 <see cref="T:System.Windows.Documents.Hyperlink" /> 所包含的选定内容的结束位置。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> 或 <paramref name="end" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="start" /> 和 <paramref name="end" /> 不能解析为可包含在 <see cref="T:System.Windows.Documents.Span" /> 元素中的内容范围；例如，如果 <paramref name="start" /> 和 <paramref name="end" /> 指示的位置处于不同的段落中。
                </exception>
    </member>
    <member name="P:System.Windows.Documents.Hyperlink.BaseUri">
      <summary>
获取或设置 <see cref="T:System.Windows.Documents.Hyperlink" /> 的基 URI。
                </summary>
      <returns>
        <see cref="T:System.Windows.Documents.Hyperlink" /> 的基 URI。
                </returns>
    </member>
    <member name="E:System.Windows.Documents.Hyperlink.Click">
      <summary>
                    在 <see cref="T:System.Windows.Documents.Hyperlink" /> 上单击鼠标左键时发生。
                </summary>
    </member>
    <member name="F:System.Windows.Documents.Hyperlink.ClickEvent">
      <summary>
                    标识 <see cref="E:System.Windows.Documents.Hyperlink.Click" /> 路由事件。
                </summary>
      <returns>
        <see cref="E:System.Windows.Documents.Hyperlink.Click" /> 路由事件的标识符。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Hyperlink.Command">
      <summary>
                    获取或设置要与 <see cref="T:System.Windows.Documents.Hyperlink" /> 关联的命令。这是一个依赖项属性。
                </summary>
      <returns>
                    要与 <see cref="T:System.Windows.Documents.Hyperlink" /> 关联的命令。默认值为 null。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Hyperlink.CommandParameter">
      <summary>
                    获取或设置与由 <see cref="P:System.Windows.Documents.Hyperlink.Command" /> 属性指定的命令关联的命令参数。这是一个依赖项属性。
                </summary>
      <returns>
                    一个对象，指定由 <see cref="P:System.Windows.Documents.Hyperlink.Command" /> 属性指定的命令的参数。默认值为 null。
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Hyperlink.CommandParameterProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Documents.Hyperlink.CommandParameter" /> 依赖项属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.Hyperlink.CommandParameter" /> 依赖项属性的标识符。
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Hyperlink.CommandProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Documents.Hyperlink.Command" /> 依赖项属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.Hyperlink.Command" /> 依赖项属性的标识符。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Hyperlink.CommandTarget">
      <summary>
                    获取或设置要对其执行由 <see cref="P:System.Windows.Documents.Hyperlink.Command" /> 属性指定的命令的目标元素。这是一个依赖项属性。
                </summary>
      <returns>
                    要对其执行由 <see cref="P:System.Windows.Documents.Hyperlink.Command" /> 属性指定的命令的目标元素。默认值为 null。
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Hyperlink.CommandTargetProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Documents.Hyperlink.CommandTarget" /> 依赖项属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.Hyperlink.CommandTarget" /> 依赖项属性的标识符。
                </returns>
    </member>
    <member name="M:System.Windows.Documents.Hyperlink.DoClick">
      <summary>
                    模拟用户单击 <see cref="T:System.Windows.Documents.Hyperlink" /> 的操作。
                </summary>
    </member>
    <member name="P:System.Windows.Documents.Hyperlink.IsEnabledCore">
      <summary>
                    获取一个值，该值指示是否启用了 <see cref="T:System.Windows.Documents.Hyperlink" />。
                </summary>
      <returns>
                    如果启用 <see cref="T:System.Windows.Documents.Hyperlink" />，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Hyperlink.NavigateUri">
      <summary>
                    获取或设置激活 <see cref="T:System.Windows.Documents.Hyperlink" /> 时要导航到的 URI。这是一个依赖项属性。
                </summary>
      <returns>
                    激活 <see cref="T:System.Windows.Documents.Hyperlink" /> 时要导航到的 <see cref="T:System.Uri" />。默认值为 null。
                说明： 仅在 <see cref="T:System.Windows.Documents.Hyperlink" /> 的直接或间接父项是导航宿主（包括 <see cref="T:System.Windows.Navigation.NavigationWindow" />、<see cref="T:System.Windows.Controls.Frame" />），或为任何可承载 XBAP 的浏览器（其中包括 Internet Explorer 7、Microsoft Internet Explorer 6 和 Firefox 2.0+）时，<see cref="T:System.Windows.Documents.Hyperlink" /> 才可以导航到 <see cref="P:System.Windows.Documents.Hyperlink.NavigateUri" /> 属性的值。有关更多信息，请参见导航概述中的导航宿主部分。</returns>
    </member>
    <member name="F:System.Windows.Documents.Hyperlink.NavigateUriProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Documents.Hyperlink.NavigateUri" /> 依赖项属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.Hyperlink.NavigateUri" /> 依赖项属性的标识符。
                </returns>
    </member>
    <member name="M:System.Windows.Documents.Hyperlink.OnClick">
      <summary>
                    处理 <see cref="E:System.Windows.Documents.Hyperlink.Click" /> 路由事件。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.Hyperlink.OnCreateAutomationPeer">
      <summary>
                    创建并返回此 <see cref="T:System.Windows.Documents.Hyperlink" /> 的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 对象。
                </summary>
      <returns>
                    此 <see cref="T:System.Windows.Documents.Hyperlink" /> 的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Documents.Hyperlink.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
                    处理 <see cref="E:System.Windows.ContentElement.KeyDown" /> 路由事件。
                </summary>
      <param name="e">
                    与 <see cref="E:System.Windows.ContentElement.KeyDown" /> 事件关联的参数。
                </param>
    </member>
    <member name="M:System.Windows.Documents.Hyperlink.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>
                    处理 <see cref="E:System.Windows.ContentElement.MouseEnter" /> 路由事件。
                </summary>
      <param name="e">
                    与 <see cref="E:System.Windows.ContentElement.MouseEnter" /> 事件关联的参数。
                </param>
    </member>
    <member name="M:System.Windows.Documents.Hyperlink.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>
                    处理 <see cref="E:System.Windows.ContentElement.MouseLeave" /> 路由事件。
                </summary>
      <param name="e">
                    与 <see cref="E:System.Windows.ContentElement.MouseLeave" /> 事件关联的参数。
                </param>
    </member>
    <member name="M:System.Windows.Documents.Hyperlink.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
                    处理 <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> 路由事件。
                </summary>
      <param name="e">
                    与 <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> 事件关联的参数。
                </param>
    </member>
    <member name="M:System.Windows.Documents.Hyperlink.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
                    处理 <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> 路由事件。
                </summary>
      <param name="e">
                    与 <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> 事件关联的参数。
                </param>
    </member>
    <member name="E:System.Windows.Documents.Hyperlink.RequestNavigate">
      <summary>
                    在请求导航事件时发生。
                </summary>
    </member>
    <member name="F:System.Windows.Documents.Hyperlink.RequestNavigateEvent">
      <summary>
                    标识 <see cref="E:System.Windows.Documents.Hyperlink.RequestNavigate" /> 路由事件。
                </summary>
      <returns>
        <see cref="E:System.Windows.Documents.Hyperlink.RequestNavigate" /> 路由事件的标识符。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Hyperlink.System#Windows#Markup#IUriContext#BaseUri">
      <summary>
获取或设置 <see cref="T:System.Windows.Documents.Hyperlink" /> 的基 URI。
                </summary>
      <returns>
        <see cref="T:System.Windows.Documents.Hyperlink" /> 的基 URI。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Hyperlink.TargetName">
      <summary>
                    获取或设置 <see cref="T:System.Windows.Documents.Hyperlink" /> 的目标窗口或框架的名称。这是一个依赖项属性。
                </summary>
      <returns>
                    一个字符串，指定 <see cref="T:System.Windows.Documents.Hyperlink" /> 的目标窗口或框架的名称。
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Hyperlink.TargetNameProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Documents.Hyperlink.TargetName" /> 依赖项属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.Hyperlink.TargetName" /> 依赖项属性的标识符。
                </returns>
    </member>
    <member name="T:System.Windows.Documents.Inline">
      <summary>为所有内联流内容元素提供基类的抽象类。</summary>
    </member>
    <member name="M:System.Windows.Documents.Inline.#ctor">
      <summary>由某个派生类调用时，初始化基类值。</summary>
    </member>
    <member name="P:System.Windows.Documents.Inline.BaselineAlignment">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.Inline" /> 元素的基线对齐方式。 这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.BaselineAlignment" /> 枚举的一个成员，它指定 <see cref="T:System.Windows.Documents.Inline" /> 元素的基线对齐方式。默认值为 <see cref="T:System.Windows.BaselineAlignment" />.Baseline。</returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.BaselineAlignmentProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Inline.BaselineAlignment" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Inline.BaselineAlignment" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.FlowDirection">
      <summary>获取或设置一个值，该值指定 <see cref="T:System.Windows.Documents.Inline" /> 元素中内容流的相对方向。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.FlowDirection" /> 枚举的一个成员，它指定相对流动方向。 获取此属性将返回当前有效的流动方向。 设置此属性将导致 <see cref="T:System.Windows.Documents.Inline" /> 元素的内容沿指示的方向重新流动。默认值为 <see cref="F:System.Windows.FlowDirection.LeftToRight" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.FlowDirectionProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Inline.FlowDirection" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Inline.FlowDirection" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.NextInline">
      <summary>获取与此元素对等的下一个 <see cref="T:System.Windows.Documents.Inline" /> 元素。</summary>
      <returns>一个 <see cref="T:System.Windows.Documents.Inline" /> 对象，它表示与此元素对等的下一个 <see cref="T:System.Windows.Documents.Inline" /> 元素；如果没有下一个 <see cref="T:System.Windows.Documents.Inline" /> 元素，则为 null。此属性无默认值。</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.PreviousInline">
      <summary>获取与此元素对等的上一个 <see cref="T:System.Windows.Documents.Inline" /> 元素。</summary>
      <returns>一个 <see cref="T:System.Windows.Documents.Inline" /> 对象，它表示与此元素对等的上一个 <see cref="T:System.Windows.Documents.Inline" /> 元素；如果没有上一个 <see cref="T:System.Windows.Documents.Inline" /> 元素，则为 null。此属性无默认值。</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.SiblingInlines">
      <summary>获取一个 <see cref="T:System.Windows.Documents.InlineCollection" />，它包含与此元素同级（对等）的 <see cref="T:System.Windows.Documents.Inline" /> 元素。</summary>
      <returns>一个 <see cref="T:System.Windows.Documents.InlineCollection" /> 对象，它包含与此元素同级的 <see cref="T:System.Windows.Documents.Inline" /> 元素。此属性无默认值。</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.TextDecorations">
      <summary>获取一个 <see cref="T:System.Windows.TextDecorationCollection" />，它包含要应用于此元素的文本修饰。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.TextDecorationCollection" /> 集合，它包含应用于此元素的文本修饰。默认值为 null（不应用任何文本修饰）。</returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.TextDecorationsProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Inline.TextDecorations" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Inline.TextDecorations" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Documents.InlineCollection">
      <summary>表示一个 <see cref="T:System.Windows.Documents.Inline" /> 元素集合。<see cref="T:System.Windows.Documents.InlineCollection" /> 定义 <see cref="T:System.Windows.Documents.Paragraph" /> 元素、<see cref="T:System.Windows.Documents.Span" /> 元素和 <see cref="T:System.Windows.Controls.TextBlock" /> 元素允许使用的子内容。</summary>
    </member>
    <member name="M:System.Windows.Documents.InlineCollection.Add(System.String)">
      <summary>用作为 <see cref="T:System.String" /> 提供的给定文本添加一个隐式 <see cref="T:System.Windows.Documents.Run" /> 元素。</summary>
      <param name="text">设置为隐式 <see cref="T:System.Windows.Documents.Run" /> 的 <see cref="P:System.Windows.Documents.Run.Text" /> 属性的文本。</param>
    </member>
    <member name="M:System.Windows.Documents.InlineCollection.Add(System.Windows.UIElement)">
      <summary>添加一个隐式 <see cref="T:System.Windows.Documents.InlineUIContainer" />，提供的 <see cref="T:System.Windows.UIElement" /> 已经包含在其中。</summary>
      <param name="uiElement">
                设置为隐式 <see cref="T:System.Windows.Documents.InlineUIContainer" /> 的 <see cref="P:System.Windows.Documents.InlineUIContainer.Child" /> 属性的 <see cref="T:System.Windows.UIElement" />。</param>
    </member>
    <member name="P:System.Windows.Documents.InlineCollection.FirstInline">
      <summary>获取此 <see cref="T:System.Windows.Documents.InlineCollection" /> 实例中的第一个 <see cref="T:System.Windows.Documents.Inline" /> 元素。</summary>
    </member>
    <member name="P:System.Windows.Documents.InlineCollection.LastInline">
      <summary>获取此 <see cref="T:System.Windows.Documents.InlineCollection" /> 实例中的最后一个 <see cref="T:System.Windows.Documents.Inline" /> 元素。</summary>
    </member>
    <member name="T:System.Windows.Documents.InlineUIContainer">
      <summary>内联级别流内容元素，它使 <see cref="T:System.Windows.UIElement" /> 元素（即 <see cref="T:System.Windows.Controls.Button" />）能够嵌入（承载）在流内容中。</summary>
    </member>
    <member name="M:System.Windows.Documents.InlineUIContainer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.InlineUIContainer" /> 类的新的空实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.InlineUIContainer.#ctor(System.Windows.UIElement)">
      <summary>初始化 <see cref="T:System.Windows.Documents.InlineUIContainer" /> 类的一个新实例，将指定的 <see cref="T:System.Windows.UIElement" /> 对象作为新的 <see cref="T:System.Windows.Documents.InlineUIContainer" /> 的初始内容。</summary>
      <param name="childUIElement">
        <see cref="T:System.Windows.UIElement" /> 对象，它指定新的 <see cref="T:System.Windows.Documents.InlineUIContainer" /> 的初始内容。</param>
    </member>
    <member name="M:System.Windows.Documents.InlineUIContainer.#ctor(System.Windows.UIElement,System.Windows.Documents.TextPointer)">
      <summary>初始化 <see cref="T:System.Windows.Documents.InlineUIContainer" /> 类的一个新实例，使用指定 <see cref="T:System.Windows.UIElement" /> 对象作为新 <see cref="T:System.Windows.Documents.InlineUIContainer" /> 的初始内容，并由一个 <see cref="T:System.Windows.Documents.TextPointer" /> 指定新 <see cref="T:System.Windows.Documents.InlineUIContainer" /> 元素的插入位置。</summary>
      <param name="childUIElement">一个 <see cref="T:System.Windows.UIElement" /> 对象，它指定新的 <see cref="T:System.Windows.Documents.InlineUIContainer" /> 的初始内容。 此参数可以为 null，在这种情况下，不插入任何 <see cref="T:System.Windows.UIElement" />。</param>
      <param name="insertionPosition">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指定插入所创建 <see cref="T:System.Windows.Documents.InlineUIContainer" /> 元素的位置，或者为 null 以表示不自动插入。</param>
    </member>
    <member name="P:System.Windows.Documents.InlineUIContainer.Child">
      <summary>获取或设置由 <see cref="T:System.Windows.Documents.InlineUIContainer" /> 承载的 <see cref="T:System.Windows.UIElement" />。</summary>
      <returns>由 <see cref="T:System.Windows.Documents.InlineUIContainer" /> 承载的 <see cref="T:System.Windows.UIElement" />。</returns>
    </member>
    <member name="T:System.Windows.Documents.Italic">
      <summary>提供一个内联级别的流内容元素，该元素导致内容以斜体样式呈现。</summary>
    </member>
    <member name="M:System.Windows.Documents.Italic.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.Italic" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.Italic.#ctor(System.Windows.Documents.Inline)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Italic" /> 类的一个新实例，该类使用指定的 <see cref="T:System.Windows.Documents.Inline" /> 对象作为其初始内容。</summary>
      <param name="childInline">新的 <see cref="T:System.Windows.Documents.Italic" /> 的初始内容。</param>
    </member>
    <member name="M:System.Windows.Documents.Italic.#ctor(System.Windows.Documents.Inline,System.Windows.Documents.TextPointer)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Italic" /> 类的一个新实例，该类使用指定的 <see cref="T:System.Windows.Documents.Inline" /> 对象作为其初始内容，并具有一个用于指定 <see cref="T:System.Windows.Documents.Inline" /> 新元素插入位置的 <see cref="T:System.Windows.Documents.TextPointer" />。</summary>
      <param name="childInline">初始内容。此参数可以为 null，在这种情况下，不插入任何 <see cref="T:System.Windows.Documents.Inline" />。</param>
      <param name="insertionPosition">所创建 <see cref="T:System.Windows.Documents.Italic" /> 元素的插入位置。</param>
    </member>
    <member name="M:System.Windows.Documents.Italic.#ctor(System.Windows.Documents.TextPointer,System.Windows.Documents.TextPointer)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Italic" /> 类的一个新实例，该类具有一些指定的 <see cref="T:System.Windows.Documents.TextPointer" /> 对象，这些对象指示新的 <see cref="T:System.Windows.Documents.Italic" /> 将包含的选定内容的开始和结束位置。</summary>
      <param name="start">新的 <see cref="T:System.Windows.Documents.Italic" /> 将包含的选定内容的开始位置。</param>
      <param name="end">新的 <see cref="T:System.Windows.Documents.Italic" /> 将包含的选定内容的结束位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> 或 <paramref name="end" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="start" /> 和 <paramref name="end" /> 不能解析为可包含在一个 <see cref="T:System.Windows.Documents.Italic" /> 元素中的一个内容范围；例如，如果 <paramref name="start" /> 和 <paramref name="end" /> 指示的位置处于不同的段落中。</exception>
    </member>
    <member name="T:System.Windows.Documents.LineBreak">
      <summary>导致在流内容中发生换行的内联流内容元素。</summary>
    </member>
    <member name="M:System.Windows.Documents.LineBreak.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.LineBreak" /> 类的一个新默认实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.LineBreak.#ctor(System.Windows.Documents.TextPointer)">
      <summary>初始化 <see cref="T:System.Windows.Documents.LineBreak" /> 类的一个新实例，并在指定位置插入新的 <see cref="T:System.Windows.Documents.LineBreak" />。</summary>
      <param name="insertionPosition">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指定插入所创建 <see cref="T:System.Windows.Documents.LineBreak" /> 元素的位置，或者为 null 以表示不自动插入。</param>
    </member>
    <member name="T:System.Windows.Documents.LinkTarget">
      <summary>表示某页上的一个元素，可以从其他文档或同一文档中的其他位置链接到该元素。</summary>
    </member>
    <member name="M:System.Windows.Documents.LinkTarget.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.LinkTarget" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Documents.LinkTarget.Name">
      <summary>获取或设置此 <see cref="T:System.Windows.Documents.LinkTarget" /> 标识为可链接元素的元素名称。</summary>
      <returns>一个 <see cref="T:System.String" />，与对应于此 <see cref="T:System.Windows.Documents.LinkTarget" /> 元素的标记元素的 <see cref="P:System.Windows.FrameworkElement.Name" /> 属性相同。</returns>
    </member>
    <member name="T:System.Windows.Documents.LinkTargetCollection">
      <summary>提供 <see cref="T:System.IO.Packaging.Package" /> 中所有 <see cref="T:System.Windows.Documents.LinkTarget" /> 元素的集合。</summary>
    </member>
    <member name="M:System.Windows.Documents.LinkTargetCollection.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.LinkTargetCollection" /> 类的一个新实例。 </summary>
    </member>
    <member name="M:System.Windows.Documents.LinkTargetCollection.Add(System.Windows.Documents.LinkTarget)">
      <summary>将指定的 <see cref="T:System.Windows.Documents.LinkTarget" /> 添加到集合。</summary>
      <returns>添加的 <paramref name="value" /> 的集合中从零开始的索引。</returns>
      <param name="value">添加的链接目标。</param>
    </member>
    <member name="M:System.Windows.Documents.LinkTargetCollection.Contains(System.Windows.Documents.LinkTarget)">
      <summary>指定一个值，该值指示某个特定 <see cref="T:System.Windows.Documents.LinkTarget" /> 是否位于集合中。</summary>
      <returns>
            如果 <paramref name="value" /> 存在，则为 true；否则为 false。</returns>
      <param name="value">要测试的链接。</param>
    </member>
    <member name="M:System.Windows.Documents.LinkTargetCollection.CopyTo(System.Windows.Documents.LinkTarget[],System.Int32)">
      <summary>从指定索引处开始，将集合中的项复制到指定的数组。</summary>
      <param name="array">目标数组。</param>
      <param name="index">在其中复制第一项所在的数组位置的从零开始的索引。</param>
    </member>
    <member name="M:System.Windows.Documents.LinkTargetCollection.IndexOf(System.Windows.Documents.LinkTarget)">
      <summary>获取指定项的索引。</summary>
      <returns>如果在集合中找到该对象，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <param name="value">要在集合中定位的对象。</param>
    </member>
    <member name="M:System.Windows.Documents.LinkTargetCollection.Insert(System.Int32,System.Windows.Documents.LinkTarget)">
      <summary>将指定的项插入集合中的指定索引处。</summary>
      <param name="index">在其位置插入链接目标的点。</param>
      <param name="value">要插入的目标。</param>
    </member>
    <member name="P:System.Windows.Documents.LinkTargetCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Windows.Documents.LinkTarget" />。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.LinkTarget" />。</returns>
      <param name="index">正在写入或读取的目标的索引。</param>
    </member>
    <member name="M:System.Windows.Documents.LinkTargetCollection.Remove(System.Windows.Documents.LinkTarget)">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要移除的链接目标。</param>
    </member>
    <member name="T:System.Windows.Documents.List">
      <summary>
                    提供用于在有序列表或无序列表中呈现内容的功能的块级别流内容元素。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.List.#ctor">
      <summary>
                    初始化 <see cref="T:System.Windows.Documents.List" /> 类的新的空实例。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.List.#ctor(System.Windows.Documents.ListItem)">
      <summary>
                    初始化 <see cref="T:System.Windows.Documents.List" /> 类的一个新实例，将指定的 <see cref="T:System.Windows.Documents.ListItem" /> 对象作为新的 <see cref="T:System.Windows.Documents.List" /> 的初始内容。
                </summary>
      <param name="listItem">
                    一个 <see cref="T:System.Windows.Documents.ListItem" /> 对象，它指定新的 <see cref="T:System.Windows.Documents.List" /> 的初始内容。
                </param>
    </member>
    <member name="P:System.Windows.Documents.List.ListItems">
      <summary>
                    获取一个 <see cref="T:System.Windows.Documents.ListItemCollection" />，其中包含组成 <see cref="T:System.Windows.Documents.List" /> 的内容的 <see cref="T:System.Windows.Documents.ListItem" /> 元素。
                </summary>
      <returns>
                    一个 <see cref="T:System.Windows.Documents.ListItemCollection" />，其中包含组成 <see cref="T:System.Windows.Documents.List" /> 的内容的 <see cref="T:System.Windows.Documents.ListItem" /> 元素。
                
                    此属性无默认值。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.List.MarkerOffset">
      <summary>
                    获取或设置每个 <see cref="T:System.Windows.Documents.ListItem" /> 元素的内容和列表标记的近边缘之间所需的距离。这是一个依赖项属性。
                </summary>
      <returns>
                    一个双精度值，该值指定列表内容和列表标记的近边缘之间所需的距离（以与设备无关的像素为单位）。
                
                    如果值为 <see cref="F:System.Double.NaN" />（等效于“Auto”属性值），则标记偏移量会自动确定。
                
                    默认值为 <see cref="F:System.Double.NaN" />。
                </returns>
    </member>
    <member name="F:System.Windows.Documents.List.MarkerOffsetProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Documents.List.MarkerOffset" /> 依赖项属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.List.MarkerOffset" /> 依赖项属性的标识符。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.List.MarkerStyle">
      <summary>
                    获取或设置 <see cref="T:System.Windows.Documents.List" /> 的标记样式。这是一个依赖项属性。
                </summary>
      <returns>
        <see cref="T:System.Windows.TextMarkerStyle" /> 枚举的一个成员，指定要使用的标记样式。
                
                    默认值为 <see cref="F:System.Windows.TextMarkerStyle.Disc" />。
                </returns>
    </member>
    <member name="F:System.Windows.Documents.List.MarkerStyleProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Documents.List.MarkerStyle" /> 依赖项属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.List.MarkerStyle" /> 依赖项属性的标识符。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.List.StartIndex">
      <summary>
                    获取或设置用于标记有序列表中的项的起始索引。这是一个依赖项属性。
                </summary>
      <returns>
                    用于标记有序列表中的项的起始索引。
                
                    默认值为 1。
                </returns>
    </member>
    <member name="F:System.Windows.Documents.List.StartIndexProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Documents.List.StartIndex" /> 依赖项属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.List.StartIndex" /> 依赖项属性的标识符。
                </returns>
    </member>
    <member name="T:System.Windows.Documents.ListItem">
      <summary>一个流内容元素，表示有序或无序的 <see cref="T:System.Windows.Documents.List" /> 中的一个特定内容项。</summary>
    </member>
    <member name="M:System.Windows.Documents.ListItem.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.ListItem" /> 类的一个新的空实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.ListItem.#ctor(System.Windows.Documents.Paragraph)">
      <summary>初始化 <see cref="T:System.Windows.Documents.ListItem" /> 类的一个新实例，将指定的 <see cref="T:System.Windows.Documents.Paragraph" /> 对象作为新的 <see cref="T:System.Windows.Documents.ListItem" /> 的初始内容。</summary>
      <param name="paragraph">一个 <see cref="T:System.Windows.Documents.Paragraph" /> 对象，它指定新的 <see cref="T:System.Windows.Documents.ListItem" /> 的初始内容。</param>
    </member>
    <member name="P:System.Windows.Documents.ListItem.Blocks">
      <summary>获取一个块集合，该集合包含 <see cref="T:System.Windows.Documents.ListItem" /> 的顶级 <see cref="T:System.Windows.Documents.Block" /> 元素。</summary>
      <returns>一个块集合，该集合包含 <see cref="T:System.Windows.Documents.ListItem" /> 的顶级 <see cref="T:System.Windows.Documents.Block" /> 元素。</returns>
    </member>
    <member name="P:System.Windows.Documents.ListItem.BorderBrush">
      <summary>获取或设置绘制元素边框时使用的 <see cref="T:System.Windows.Media.Brush" />。这是一个依赖项属性。</summary>
      <returns>用来应用于元素边框的画笔。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Documents.ListItem.BorderBrushProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.ListItem.BorderBrush" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.ListItem.BorderBrush" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.ListItem.BorderThickness">
      <summary>获取或设置元素的边框宽度。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Thickness" /> 结构，指定要应用的边框宽度（以与设备无关的像素为单位）。默认值为等于零 (0.0) 的一个统一宽度。</returns>
    </member>
    <member name="F:System.Windows.Documents.ListItem.BorderThicknessProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.ListItem.BorderThickness" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.ListItem.BorderThickness" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.ListItem.FlowDirection">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.ListItem" /> 元素中内容的相对流动方向。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.FlowDirection" /> 值之一，指定相对流动方向。 默认值为 <see cref="F:System.Windows.FlowDirection.LeftToRight" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.ListItem.FlowDirectionProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.ListItem.FlowDirection" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.ListItem.FlowDirection" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.ListItem.LineHeight">
      <summary>获取或设置各行内容的高度。这是一个依赖项属性。</summary>
      <returns>各行的高度以与设备无关的像素为单位，值的范围在 0.0034 到 160000 之间。如果值为 <see cref="F:System.Double.NaN" />（与“Auto”属性值等效），则行高度将由当前字体的特征自动决定。 默认值为 <see cref="F:System.Double.NaN" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.ListItem.LineHeightProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.ListItem.LineHeight" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.ListItem.LineHeight" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.ListItem.LineStackingStrategy">
      <summary>获取或设置一种机制，根据该机制来为 <see cref="T:System.Windows.Documents.ListItem" /> 内的每一行文字确定一个行框。这是一个依赖项属性。</summary>
      <returns>指定该机制的 <see cref="T:System.Windows.LineStackingStrategy" /> 值之一，根据该机制来为 <see cref="T:System.Windows.Documents.ListItem" /> 内的每一行文字确定一个行框。默认值为 <see cref="F:System.Windows.LineStackingStrategy.MaxHeight" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.ListItem.LineStackingStrategyProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.ListItem.LineStackingStrategy" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.ListItem.LineStackingStrategy" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.ListItem.List">
      <summary>获取包含 <see cref="T:System.Windows.Documents.ListItem" /> 的 <see cref="T:System.Windows.Documents.List" />。</summary>
      <returns>包含 <see cref="T:System.Windows.Documents.ListItem" /> 的列表。</returns>
    </member>
    <member name="P:System.Windows.Documents.ListItem.Margin">
      <summary>获取或设置元素的边距宽度。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Thickness" /> 结构，指定要应用的边距宽度（以与设备无关的像素为单位）。默认值为等于零 (0.0) 的一个统一宽度。</returns>
    </member>
    <member name="F:System.Windows.Documents.ListItem.MarginProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.ListItem.Margin" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.ListItem.Margin" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.ListItem.NextListItem">
      <summary>获取包含 <see cref="T:System.Windows.Documents.List" /> 中的下一个 <see cref="T:System.Windows.Documents.ListItem" />。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.List" /> 中的下一个 <see cref="T:System.Windows.Documents.ListItem" />；如果没有下一个 <see cref="T:System.Windows.Documents.ListItem" />，则为 null。</returns>
    </member>
    <member name="P:System.Windows.Documents.ListItem.Padding">
      <summary>获取或设置元素的边距宽度。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Thickness" /> 结构，指定要应用的填充量（以与设备无关的像素为单位）。默认值为等于零 (0.0) 的一个统一宽度。</returns>
    </member>
    <member name="F:System.Windows.Documents.ListItem.PaddingProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.ListItem.Padding" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.ListItem.Padding" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.ListItem.PreviousListItem">
      <summary>获取包含 <see cref="T:System.Windows.Documents.List" /> 中的上一个 <see cref="T:System.Windows.Documents.ListItem" />。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.List" /> 中的上一个 <see cref="T:System.Windows.Documents.ListItem" />；如果没有上一个 <see cref="T:System.Windows.Documents.ListItem" />，则为 null。</returns>
    </member>
    <member name="M:System.Windows.Documents.ListItem.ShouldSerializeBlocks(System.Windows.Markup.XamlDesignerSerializationManager)">
      <summary>返回一个值，该值指示在序列化 <see cref="T:System.Windows.Documents.ListItem" /> 对象期间，是否应对 <see cref="P:System.Windows.Documents.ListItem.Blocks" /> 属性的有效值进行序列化。</summary>
      <returns>
            如果 <see cref="P:System.Windows.Documents.ListItem.Blocks" /> 属性应被序列化，则为 true；否则为 false。</returns>
      <param name="manager">对象的序列化服务管理器对象。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="manager" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Documents.ListItem.SiblingListItems">
      <summary>获取包含 <see cref="T:System.Windows.Documents.ListItem" /> 元素的 <see cref="T:System.Windows.Documents.ListItemCollection" />，这些元素是当前 <see cref="T:System.Windows.Documents.ListItem" /> 元素的同级元素。</summary>
      <returns>一个包含 <see cref="T:System.Windows.Documents.ListItem" /> 子元素的 <see cref="T:System.Windows.Documents.ListItemCollection" />，这些元素直接由当前 <see cref="T:System.Windows.Documents.ListItem" /> 元素的父级承载；如果当前 <see cref="T:System.Windows.Documents.ListItem" /> 元素无父级，则为 null。</returns>
    </member>
    <member name="P:System.Windows.Documents.ListItem.TextAlignment">
      <summary>获取或设置一个值，该值指示文本内容的水平对齐方式。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.TextAlignment" /> 值之一，它指定所需对齐方式。默认值为 <see cref="F:System.Windows.TextAlignment.Left" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.ListItem.TextAlignmentProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.ListItem.TextAlignment" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.ListItem.TextAlignment" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Documents.ListItemCollection">
      <summary>表示一个 <see cref="T:System.Windows.Documents.ListItem" /> 元素集合。<see cref="T:System.Windows.Documents.ListItemCollection" /> 定义 <see cref="T:System.Windows.Documents.List" /> 元素的允许子内容。</summary>
    </member>
    <member name="P:System.Windows.Documents.ListItemCollection.FirstListItem">
      <summary>获取此 <see cref="T:System.Windows.Documents.ListItemCollection" /> 实例中的第一个 <see cref="T:System.Windows.Documents.ListItem" /> 元素。</summary>
    </member>
    <member name="P:System.Windows.Documents.ListItemCollection.LastListItem">
      <summary>获取此 <see cref="T:System.Windows.Documents.ListItemCollection" /> 实例中的第一个 <see cref="T:System.Windows.Documents.ListItem" /> 元素。</summary>
    </member>
    <member name="T:System.Windows.Documents.LogicalDirection">
      <summary>指定执行某些文本操作所使用的逻辑方向，如在相对于指定位置（一个 <see cref="T:System.Windows.Documents.TextPointer" />）的文本中进行插入、检索或导航等操作。</summary>
    </member>
    <member name="F:System.Windows.Documents.LogicalDirection.Backward">
      <summary>向后或从右到左。</summary>
    </member>
    <member name="F:System.Windows.Documents.LogicalDirection.Forward">
      <summary>向前或从左到右。</summary>
    </member>
    <member name="T:System.Windows.Documents.PageContent">
      <summary>提供有关 <see cref="T:System.Windows.Documents.FixedDocument" /> 中的 <see cref="T:System.Windows.Documents.FixedPage" /> 元素的信息。</summary>
    </member>
    <member name="M:System.Windows.Documents.PageContent.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.PageContent" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Documents.PageContent.Child">
      <summary>获取与此 <see cref="T:System.Windows.Documents.PageContent" /> 关联的 <see cref="T:System.Windows.Documents.FixedPage" />。</summary>
      <returns>与此 <see cref="T:System.Windows.Documents.PageContent" /> 关联的 <see cref="T:System.Windows.Documents.FixedPage" />；如果 <see cref="P:System.Windows.Documents.PageContent.Source" /> 属性设置了 <see cref="T:System.Windows.Documents.FixedPage" />，则为 null。</returns>
    </member>
    <member name="M:System.Windows.Documents.PageContent.GetPageRoot(System.Boolean)">
      <summary>加载并返回 <see cref="T:System.Windows.Documents.FixedPage" /> 内容元素。</summary>
      <returns>此页的可视化树的根元素。</returns>
      <param name="forceReload">
                如果为 true，则始终重新加载 <see cref="T:System.Windows.Documents.FixedPage" />，即使先前以对其进行加载和缓存；如果为 false，则仅在没有缓存的版本的情况下才加载 <see cref="T:System.Windows.Documents.FixedPage" />。</param>
    </member>
    <member name="M:System.Windows.Documents.PageContent.GetPageRootAsync(System.Boolean)">
      <summary>异步加载并返回 <see cref="T:System.Windows.Documents.FixedPage" /> 内容元素。</summary>
      <param name="forceReload">
                如果为 true，则始终重新加载 <see cref="T:System.Windows.Documents.FixedPage" />，即使先前以对其进行加载和缓存；如果为 false，则仅在没有缓存的版本的情况下才加载 <see cref="T:System.Windows.Documents.FixedPage" />。</param>
    </member>
    <member name="M:System.Windows.Documents.PageContent.GetPageRootAsyncCancel">
      <summary>取消当前正在进行的任何 <see cref="M:System.Windows.Documents.PageContent.GetPageRootAsync(System.Boolean)" /> 操作。</summary>
    </member>
    <member name="E:System.Windows.Documents.PageContent.GetPageRootCompleted">
      <summary>在 <see cref="M:System.Windows.Documents.PageContent.GetPageRootAsync(System.Boolean)" /> 完成时发生。</summary>
    </member>
    <member name="P:System.Windows.Documents.PageContent.LinkTargets">
      <summary>获取标识页上超链接可寻址位置的 <see cref="T:System.Windows.Documents.LinkTarget" /> 元素的集合。</summary>
      <returns>标识页上超链接可寻址位置的 <see cref="T:System.Windows.Documents.LinkTarget" /> 元素的 <see cref="T:System.Windows.Documents.LinkTargetCollection" />。</returns>
    </member>
    <member name="M:System.Windows.Documents.PageContent.ShouldSerializeChild(System.Windows.Markup.XamlDesignerSerializationManager)">
      <summary>获取一个值，该值指示当序列化此 <see cref="T:System.Windows.Documents.PageContent" /> 时，是否应该序列化 <see cref="P:System.Windows.Documents.PageContent.Child" /> 属性的值。</summary>
      <returns>
            如果 <paramref name="manager" /> 不为 null 并且它没有 XmlWriter，则为 true；否则为 false。默认为 false。</returns>
      <param name="manager">序列化服务提供程序。</param>
    </member>
    <member name="P:System.Windows.Documents.PageContent.Source">
      <summary>获取统一资源标识符 (URI) 或将其设置到 <see cref="T:System.Windows.Documents.FixedPage" /> 内容数据流。这是一个依赖项属性。 </summary>
      <returns>相应的 <see cref="T:System.Windows.Documents.FixedPage" /> 的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.PageContent.SourceProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.PageContent.Source" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.PageContent.Source" />依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Documents.PageContent.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Windows.Markup.IAddChild.AddChild(System.Object)" />。</summary>
      <param name="value">要添加的子 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Windows.Documents.PageContent.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Windows.Markup.IAddChild.AddText(System.String)" />。</summary>
      <param name="text">要添加到对象的文本。</param>
    </member>
    <member name="P:System.Windows.Documents.PageContent.System#Windows#Markup#IUriContext#BaseUri">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Windows.Markup.IUriContext.BaseUri" />。</summary>
      <returns>当前上下文的基 URI。</returns>
    </member>
    <member name="T:System.Windows.Documents.PageContentCollection">
      <summary>为文档页集合提供集合支持。</summary>
    </member>
    <member name="M:System.Windows.Documents.PageContentCollection.Add(System.Windows.Documents.PageContent)">
      <summary>向页集合中添加新页。</summary>
      <returns>已添加页的集合中从零开始的索引。</returns>
      <param name="newPageContent">要添加到集合中的新页。</param>
      <exception cref="T:System.ArgumentNullException">当 newPageContent 作为 null 传递时引发。</exception>
      <exception cref="T:System.InvalidOperationException">当作为 newPageContent 传递的页已存在于集合中时引发。</exception>
    </member>
    <member name="P:System.Windows.Documents.PageContentCollection.Count">
      <summary>获取页集合中包含的元素数。</summary>
      <returns>集合中的元素数。</returns>
    </member>
    <member name="M:System.Windows.Documents.PageContentCollection.GetEnumerator">
      <summary>返回用于循环访问页集合的一个枚举数。</summary>
      <returns>一个可用于循环访问集合的枚举数。</returns>
    </member>
    <member name="P:System.Windows.Documents.PageContentCollection.Item(System.Int32)">
      <summary>获取集合中位于指定索引处的 <see cref="T:System.Windows.Documents.PageContent" /> 元素。</summary>
      <returns>集合中位于指定索引处的页内容元素。</returns>
      <param name="pageIndex">要获取的页的从零开始的索引。</param>
    </member>
    <member name="M:System.Windows.Documents.PageContentCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。 请改用类型安全的 <see cref="M:System.Windows.Documents.PageContentCollection.GetEnumerator" /> 方法。</summary>
    </member>
    <member name="T:System.Windows.Documents.Paragraph">
      <summary>用于将内容分组到一个段落中的块级别流内容元素。</summary>
    </member>
    <member name="M:System.Windows.Documents.Paragraph.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.Paragraph" /> 类的一个新的空实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.Paragraph.#ctor(System.Windows.Documents.Inline)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Paragraph" /> 类的一个新实例，将指定的 <see cref="T:System.Windows.Documents.Inline" /> 对象作为其初始内容。</summary>
      <param name="inline">
        <see cref="T:System.Windows.Documents.Inline" /> 对象，它指定新的 <see cref="T:System.Windows.Documents.Paragraph" /> 的初始内容。</param>
    </member>
    <member name="P:System.Windows.Documents.Paragraph.Inlines">
      <summary>获取一个 <see cref="T:System.Windows.Documents.InlineCollection" />，其中包含组成 <see cref="T:System.Windows.Documents.Paragraph" /> 的内容的顶级 <see cref="T:System.Windows.Documents.Inline" /> 元素。</summary>
      <returns>一个 <see cref="T:System.Windows.Documents.InlineCollection" />，其中包含组成 <see cref="T:System.Windows.Documents.Paragraph" /> 的内容的 <see cref="T:System.Windows.Documents.Inline" /> 元素。此属性无默认值。</returns>
    </member>
    <member name="P:System.Windows.Documents.Paragraph.KeepTogether">
      <summary>获取或设置一个值，该值指示是否可以用分页符或分栏符来断开段落的文本。这是一个依赖项属性。</summary>
      <returns>
            若要防止段落文本被断开，则设置为 true；否则，设置为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Paragraph.KeepTogetherProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Paragraph.KeepTogether" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Paragraph.KeepTogether" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Paragraph.KeepWithNext">
      <summary>获取或设置一个值，该值指示此段落和下一段落之间是否可以出现一个换行符。这是一个依赖项属性。</summary>
      <returns>
            若要防止在此段落与下一段落之间出现换行符，则应设置为 true；否则，设置为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Paragraph.KeepWithNextProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Paragraph.KeepWithNext" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Paragraph.KeepWithNext" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Paragraph.MinOrphanLines">
      <summary>获取或设置一个值，该值指定了在用分页符或分栏符断开一个 <see cref="T:System.Windows.Documents.Paragraph" /> 时，换行符前保留的最小行数。这是一个依赖项属性。</summary>
      <returns>一个整数，指定了在用分页符或分栏符断开一个 <see cref="T:System.Windows.Documents.Paragraph" /> 时，换行符前保留的最小行数。零值指示无最小行数。默认值为 0。</returns>
    </member>
    <member name="F:System.Windows.Documents.Paragraph.MinOrphanLinesProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Paragraph.MinOrphanLines" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Paragraph.MinOrphanLines" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Paragraph.MinWidowLines">
      <summary>获取或设置一个值，该值指定了在用分页符或分栏符断开一个 <see cref="T:System.Windows.Documents.Paragraph" /> 时，换行符后的最小行数。这是一个依赖项属性。</summary>
      <returns>一个整数，指定了在用分页符或分栏符断开一个 <see cref="T:System.Windows.Documents.Paragraph" /> 时，换行符后的最小行数。 零值指示无最小行数。默认值为 0。</returns>
    </member>
    <member name="F:System.Windows.Documents.Paragraph.MinWidowLinesProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Paragraph.MinWidowLines" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Paragraph.MinWidowLines" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Documents.Paragraph.ShouldSerializeInlines(System.Windows.Markup.XamlDesignerSerializationManager)">
      <summary>指示是否应保持 <see cref="P:System.Windows.Documents.Paragraph.Inlines" /> 属性。</summary>
      <returns>
            如果属性值已更改，不再是默认值，则为 true；否则为 false。</returns>
      <param name="manager">此对象的序列化服务管理器对象。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="manager" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Documents.Paragraph.TextDecorations">
      <summary>获取或设置一个 <see cref="T:System.Windows.TextDecorationCollection" />，它包含应用于此元素的文本修饰。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.TextDecorationCollection" /> 集合，它包含应用于此元素的文本修饰。值为 null 表示不应用任何文本修饰。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Documents.Paragraph.TextDecorationsProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Paragraph.TextDecorations" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Paragraph.TextDecorations" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Paragraph.TextIndent">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Windows.Documents.Paragraph" /> 的第一行的缩进距离。这是一个依赖项属性。</summary>
      <returns>一个双精度值，该值指定段落第一行的缩进量（以与设备无关的像素为单位）。默认值为 0。</returns>
    </member>
    <member name="F:System.Windows.Documents.Paragraph.TextIndentProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Paragraph.TextIndent" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Paragraph.TextIndent" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Documents.Run">
      <summary>应包含一连串格式化或未格式化文本的内联级别的流内容元素。</summary>
    </member>
    <member name="M:System.Windows.Documents.Run.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.Run" /> 类的一个新默认实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.Run.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Run" /> 类的一个新实例，将指定字符串作为文本运行的初始内容。</summary>
      <param name="text">指定 <see cref="T:System.Windows.Documents.Run" /> 对象的初始内容的字符串。</param>
    </member>
    <member name="M:System.Windows.Documents.Run.#ctor(System.String,System.Windows.Documents.TextPointer)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Run" /> 类的一个新实例，将指定字符串作为文本运行的初始内容，并由一个 <see cref="T:System.Windows.Documents.TextPointer" /> 指定文本运行的插入位置。</summary>
      <param name="text">指定 <see cref="T:System.Windows.Documents.Run" /> 对象的初始内容的字符串。</param>
      <param name="insertionPosition">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指定插入所创建文本运行的插入位置，或者为 null 以表示不自动插入。</param>
    </member>
    <member name="M:System.Windows.Documents.Run.ShouldSerializeText(System.Windows.Markup.XamlDesignerSerializationManager)">
      <summary>返回一个值，该值指示在序列化 <see cref="T:System.Windows.Documents.Run" /> 对象期间，是否应对 <see cref="P:System.Windows.Documents.Run.Text" /> 属性的有效值进行序列化。</summary>
      <returns>
            如果 <see cref="P:System.Windows.Documents.Run.Text" /> 属性应被序列化，则为 true；否则为 false。</returns>
      <param name="manager">此对象的序列化服务管理器对象。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="manager" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Documents.Run.Text">
      <summary>获取或设置此文本 <see cref="T:System.Windows.Documents.Run" /> 的未格式化文本内容。</summary>
      <returns>一个字符串，它指定此文本 <see cref="T:System.Windows.Documents.Run" /> 的未格式化文本内容。默认值为 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="T:System.Windows.Documents.Section">
      <summary>用于分组其他 <see cref="T:System.Windows.Documents.Block" /> 元素的块级别流内容元素。</summary>
    </member>
    <member name="M:System.Windows.Documents.Section.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.Section" /> 类的新的空实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.Section.#ctor(System.Windows.Documents.Block)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Section" /> 类的一个新实例，将指定的 <see cref="T:System.Windows.Documents.Block" /> 对象作为新的 <see cref="T:System.Windows.Documents.Section" /> 的初始内容。</summary>
      <param name="block">一个 <see cref="T:System.Windows.Documents.Block" /> 对象，它指定新的 <see cref="T:System.Windows.Documents.Section" /> 的初始内容。</param>
    </member>
    <member name="P:System.Windows.Documents.Section.Blocks">
      <summary>获取一个 <see cref="T:System.Windows.Documents.BlockCollection" />，其中包含组成 <see cref="T:System.Windows.Documents.Section" /> 的内容的顶级 <see cref="T:System.Windows.Documents.Block" /> 元素。</summary>
      <returns>一个 <see cref="T:System.Windows.Documents.BlockCollection" />，其中包含组成 <see cref="T:System.Windows.Documents.Section" /> 的内容的 <see cref="T:System.Windows.Documents.Block" /> 元素此属性无默认值。</returns>
    </member>
    <member name="P:System.Windows.Documents.Section.HasTrailingParagraphBreakOnPaste">
      <summary>获取或设置一个值，该值指示当将 <see cref="T:System.Windows.Documents.Section" /> 根元素的内容置于剪贴板中时，是否应在最后一个段落之后插入尾随分段符。</summary>
      <returns>
            要指示应包含尾随分段符，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Documents.Section.ShouldSerializeBlocks(System.Windows.Markup.XamlDesignerSerializationManager)">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
      <param name="manager">此对象的序列化服务管理器对象。</param>
      <exception cref="T:System.NullReferenceException">当 <paramref name="manager" /> 为 null 时引发。</exception>
    </member>
    <member name="T:System.Windows.Documents.Span">
      <summary>将其他 <see cref="T:System.Windows.Documents.Inline" /> 流内容元素分组。</summary>
    </member>
    <member name="M:System.Windows.Documents.Span.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.Span" /> 类的一个新的空实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.Span.#ctor(System.Windows.Documents.Inline)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Span" /> 类的一个新实例，并使用指定的 <see cref="T:System.Windows.Documents.Inline" /> 对象作为其初始内容。</summary>
      <param name="childInline">新 <see cref="T:System.Windows.Documents.Span" /> 的初始内容。</param>
    </member>
    <member name="M:System.Windows.Documents.Span.#ctor(System.Windows.Documents.Inline,System.Windows.Documents.TextPointer)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Span" /> 类的一个新实例，其中使用指定 <see cref="T:System.Windows.Documents.Inline" /> 对象作为新 <see cref="T:System.Windows.Documents.Span" /> 的初始内容，并由一个 <see cref="T:System.Windows.Documents.TextPointer" /> 指定新 <see cref="T:System.Windows.Documents.Inline" /> 元素的插入位置。</summary>
      <param name="childInline">一个 <see cref="T:System.Windows.Documents.Inline" /> 对象，它指定新 <see cref="T:System.Windows.Documents.Span" /> 的初始内容。此参数可以为 null，在这种情况下，不插入任何 <see cref="T:System.Windows.Documents.Inline" />。</param>
      <param name="insertionPosition">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指定要在创建后插入 <see cref="T:System.Windows.Documents.Span" /> 元素的位置，或者为 null 以表示没有自动插入。</param>
    </member>
    <member name="M:System.Windows.Documents.Span.#ctor(System.Windows.Documents.TextPointer,System.Windows.Documents.TextPointer)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Span" /> 类的一个新实例，其中使用两个 <see cref="T:System.Windows.Documents.TextPointer" /> 对象指示了该新 <see cref="T:System.Windows.Documents.Span" /> 将要包含的内容选择的开始位置和结束位置。</summary>
      <param name="start">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指示该新 <see cref="T:System.Windows.Documents.Span" /> 将要包含的内容选择的开始位置。</param>
      <param name="end">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指示该新 <see cref="T:System.Windows.Documents.Span" /> 将要包含的内容选择的结束位置。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="start" /> 或 <paramref name="end" /> 为 null 时引发。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="start" /> 和 <paramref name="end" /> 没有解析为一个适于由 <see cref="T:System.Windows.Documents.Span" /> 元素包围的范围时引发；例如，当 <paramref name="start" /> 和 <paramref name="end" /> 指示位置位于不同的段落中时。</exception>
    </member>
    <member name="P:System.Windows.Documents.Span.Inlines">
      <summary>获取一个 <see cref="T:System.Windows.Documents.InlineCollection" />，其中包含组成 <see cref="T:System.Windows.Documents.Span" /> 的内容的顶级 <see cref="T:System.Windows.Documents.Inline" /> 元素。</summary>
      <returns>一个 <see cref="T:System.Windows.Documents.InlineCollection" />，其中包含组成 <see cref="T:System.Windows.Documents.Span" /> 的内容的 <see cref="T:System.Windows.Documents.Inline" /> 元素。此属性无默认值。</returns>
    </member>
    <member name="M:System.Windows.Documents.Span.ShouldSerializeInlines(System.Windows.Markup.XamlDesignerSerializationManager)">
      <summary>返回一个值，该值指示在 <see cref="T:System.Windows.Documents.Run" /> 对象的序列化期间，是否应对 <see cref="T:System.Windows.Documents.Span" /> 元素的内容进行序列化。</summary>
      <returns>
如果内容应序列化，则为 true；否则为 false。</returns>
      <param name="manager">此对象的序列化服务管理器对象。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="manager" /> 为 null。</exception>
    </member>
    <member name="T:System.Windows.Documents.Table">
      <summary>
                    提供按行和列组织的基于网格的表示形式的块级别流内容元素。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.Table.#ctor">
      <summary>
                    初始化 <see cref="T:System.Windows.Documents.Table" /> 类的一个新实例。
                </summary>
    </member>
    <member name="P:System.Windows.Documents.Table.CellSpacing">
      <summary>
                    获取或设置表的单元格之间的间距量。这是一个依赖项属性。
                </summary>
      <returns>
                    表的单元格之间的间距量，以与设备无关的像素为单位。
                
                    默认值为 2.0。
                </returns>
    </member>
    <member name="F:System.Windows.Documents.Table.CellSpacingProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Documents.Table.CellSpacing" /> 依赖项属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.Table.CellSpacing" /> 依赖项属性的标识符。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Table.Columns">
      <summary>
                    获取一个 <see cref="T:System.Windows.Documents.TableColumnCollection" /> 对象，它包含由表承载的列。
                </summary>
      <returns>
                    一个 <see cref="T:System.Windows.Documents.TableColumnCollection" /> 对象，它包含由表承载的列（由 <see cref="T:System.Windows.Documents.TableColumn" /> 对象表示）。请注意，该数量可能并非表中呈现的实际列数。确定实际呈现的列数量的是表中的 <see cref="T:System.Windows.Documents.TableCell" /> 对象。
                
此属性无默认值。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Table.LogicalChildren">
      <summary>
                    获取一个可用于迭代 <see cref="T:System.Windows.Documents.Table" /> 的逻辑子级的枚举数。
                </summary>
      <returns>
        <see cref="T:System.Windows.Documents.Table" /> 的逻辑子级的枚举数。
                </returns>
    </member>
    <member name="M:System.Windows.Documents.Table.OnCreateAutomationPeer">
      <summary>
                    创建并返回此 <see cref="T:System.Windows.Documents.Table" /> 的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 对象。
                </summary>
      <returns>
                    此 <see cref="T:System.Windows.Documents.Table" /> 的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 对象。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.Table.RowGroups">
      <summary>
                    获取一个 <see cref="T:System.Windows.Documents.TableRowGroupCollection" /> 集合对象，它包含由表承载的行组。
                </summary>
      <returns>
                    一个 <see cref="T:System.Windows.Documents.TableRowGroupCollection" /> 集合对象，它包含由表承载的行组（由 <see cref="T:System.Windows.Documents.TableRowGroup" /> 对象表示）。
                
此属性无默认值。
                </returns>
    </member>
    <member name="M:System.Windows.Documents.Table.ShouldSerializeColumns">
      <summary>
此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.Table.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>
此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。
                </summary>
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Documents.Table.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>
此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。
                </summary>
      <param name="text"></param>
    </member>
    <member name="T:System.Windows.Documents.TableCell">
      <summary>定义 <see cref="T:System.Windows.Documents.Table" /> 中内容单元格的流内容元素。</summary>
    </member>
    <member name="M:System.Windows.Documents.TableCell.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.TableCell" /> 类的新的空实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.TableCell.#ctor(System.Windows.Documents.Block)">
      <summary>初始化 <see cref="T:System.Windows.Documents.TableCell" /> 类的一个新实例，将指定的 <see cref="T:System.Windows.Documents.Block" /> 对象作为新的 <see cref="T:System.Windows.Documents.TableCell" /> 的初始内容。</summary>
      <param name="blockItem">一个 <see cref="T:System.Windows.Documents.Block" /> 对象，它指定新的 <see cref="T:System.Windows.Documents.TableCell" /> 的初始内容。</param>
    </member>
    <member name="P:System.Windows.Documents.TableCell.Blocks">
      <summary>获取一个 <see cref="T:System.Windows.Documents.BlockCollection" />，其中包含组成 <see cref="T:System.Windows.Documents.TableCell" /> 的内容的顶级 <see cref="T:System.Windows.Documents.Block" /> 元素。</summary>
      <returns>一个 <see cref="T:System.Windows.Documents.BlockCollection" />，其中包含组成 <see cref="T:System.Windows.Documents.TableCell" /> 的内容的 <see cref="T:System.Windows.Documents.Block" /> 元素此属性无默认值。</returns>
    </member>
    <member name="P:System.Windows.Documents.TableCell.BorderBrush">
      <summary>获取或设置绘制元素边框时使用的 <see cref="T:System.Windows.Media.Brush" />。这是一个依赖项属性。</summary>
      <returns>用来应用于元素边框的画笔。默认值为 null 画笔。</returns>
    </member>
    <member name="F:System.Windows.Documents.TableCell.BorderBrushProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.TableCell.BorderBrush" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.TableCell.BorderBrush" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.TableCell.BorderThickness">
      <summary>获取或设置元素的边框宽度。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Thickness" /> 结构，它指定要应用的边框宽度（以与设备无关的像素为单位）。默认值为统一宽度值零 (0.0)。</returns>
    </member>
    <member name="F:System.Windows.Documents.TableCell.BorderThicknessProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.TableCell.BorderThickness" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.TableCell.BorderThickness" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.TableCell.ColumnSpan">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.TableCell" /> 应跨越的列数。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.TableCell" /> 应跨越的列数。默认值为 1（无跨距）。</returns>
    </member>
    <member name="F:System.Windows.Documents.TableCell.ColumnSpanProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.TableCell.ColumnSpan" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.TableCell.ColumnSpan" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.TableCell.FlowDirection">
      <summary>获取或设置一个值，该值指定 <see cref="T:System.Windows.Documents.TableCell" /> 元素中内容流的相对方向。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.FlowDirection" /> 枚举的一个成员，它指定相对流动方向。获取此属性将返回当前有效的流动方向。 设置此属性将导致 <see cref="T:System.Windows.Documents.TableCell" /> 元素的内容重新沿指示的方向流动。默认值为 <see cref="F:System.Windows.FlowDirection.LeftToRight" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.TableCell.FlowDirectionProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.TableCell.FlowDirection" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.TableCell.FlowDirection" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.TableCell.LineHeight">
      <summary>获取或设置各行内容的高度。这是一个依赖项属性。</summary>
      <returns>指定行的高度的双精度值（以与设备无关的像素为单位）。<see cref="P:System.Windows.Documents.TableCell.LineHeight" /> 必须等于或大于 0.0034 且小于或等于 160000。<see cref="F:System.Double.NaN" /> 的值（等同于“Auto”的属性值）使行高由当前字体特征自动确定。默认值为 <see cref="F:System.Double.NaN" />。</returns>
      <exception cref="T:System.ArgumentException">当尝试将 <see cref="P:System.Windows.Controls.TextBlock.LineHeight" /> 设置为一个非正值时引发。</exception>
    </member>
    <member name="F:System.Windows.Documents.TableCell.LineHeightProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.TableCell.LineHeight" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.TableCell.LineHeight" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.TableCell.LineStackingStrategy">
      <summary>获取或设置一种机制，根据该机制来为 <see cref="T:System.Windows.Documents.TableCell" /> 内的每一行文本确定一个行框。这是一个依赖项属性。</summary>
      <returns>一种机制，根据它来为 <see cref="T:System.Windows.Documents.TableCell" /> 内的每行文本确定行框。默认值为 <see cref="F:System.Windows.LineStackingStrategy.MaxHeight" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.TableCell.LineStackingStrategyProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.TableCell.LineStackingStrategy" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.TableCell.LineStackingStrategy" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Documents.TableCell.OnCreateAutomationPeer">
      <summary>创建并返回此 <see cref="T:System.Windows.Documents.TableCell" /> 的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 对象。</summary>
      <returns>此 <see cref="T:System.Windows.Documents.TableCell" /> 的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 对象。</returns>
    </member>
    <member name="P:System.Windows.Documents.TableCell.Padding">
      <summary>获取或设置元素的边距宽度。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Thickness" /> 结构，它指定要应用的填充量（以与设备无关的像素为单位）。默认值为统一宽度值零 (0.0)。</returns>
    </member>
    <member name="F:System.Windows.Documents.TableCell.PaddingProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.TableCell.Padding" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.TableCell.Padding" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.TableCell.RowSpan">
      <summary>获取或设置 <see cref="T:System.Windows.Documents.TableCell" /> 应跨越的行数。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.TableCell" /> 应跨越的行数。默认值为 1（无跨距）。</returns>
    </member>
    <member name="F:System.Windows.Documents.TableCell.RowSpanProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.TableCell.RowSpan" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.TableCell.RowSpan" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.TableCell.TextAlignment">
      <summary>获取或设置一个值，该值指示文本内容的水平对齐方式。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.TextAlignment" /> 枚举的一个成员，它指定所需的对齐方式。默认值为 <see cref="F:System.Windows.TextAlignment.Left" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.TableCell.TextAlignmentProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.TableCell.TextAlignment" />依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.TableCell.TextAlignment" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Documents.TableCellCollection">
      <summary>
                    提供标准功能，用于创建和管理 <see cref="T:System.Windows.Documents.TableCell" /> 对象的类型安全的有序集合。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.Add(System.Windows.Documents.TableCell)">
      <summary>
                    将指定的 <see cref="T:System.Windows.Documents.TableCell" /> 追加到表单元格的集合。
                </summary>
      <param name="item">
                    要追加到表单元格集合的 <see cref="T:System.Windows.Documents.TableCell" />。
                </param>
      <exception cref="T:System.ArgumentException">
                    当 <paramref name="item" /> 已属于集合时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 <paramref name="item" /> 为 null 时引发。
                </exception>
    </member>
    <member name="P:System.Windows.Documents.TableCellCollection.Capacity">
      <summary>
                    获取或设置为此集合预先分配的集合项容量。
                </summary>
      <returns>
                    为此集合预先分配的集合项容量。默认值为 8。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    当试图将 <see cref="P:System.Windows.Documents.TableCellCollection.Capacity" /> 设置为小于 <see cref="P:System.Windows.Documents.TableCellCollection.Count" /> 的当前值的值时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.Clear">
      <summary>
                    清除集合中的所有项。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.Contains(System.Windows.Documents.TableCell)">
      <summary>
                    查询集合中是否存在指定的项。
                </summary>
      <returns>
                    如果指定的 <paramref name="item" /> 存在于集合中，则为 true，否则为 false。
                </returns>
      <param name="item">
                    要查询是否存在于集合中的项。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.CopyTo(System.Array,System.Int32)">
      <summary>
复制集合的内容并插入到指定数组中，从数组中指定的索引位置开始插入。
                </summary>
      <param name="array">
                    集合内容将要复制到的一维数组。此数组必须使用从零开始的索引。
                </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，指定插入复制的集合对象的开始位置。
                </param>
      <exception cref="T:System.ArgumentException">
                    当 <paramref name="array" /> 中包括与 <see cref="T:System.Windows.Documents.TableCell" /> 类型不兼容的项，或 <paramref name="index" /> 指定的位置超出 <paramref name="array" /> 的边界时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 <paramref name="array" /> 为 null 时引发。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
当 <paramref name="index" /> 小于 0 时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.CopyTo(System.Windows.Documents.TableCell[],System.Int32)">
      <summary>
                    复制集合的内容并插入到指定的 <see cref="T:System.Windows.Documents.TableCell" /> 数组中，从数组中指定的索引位置开始插入。
                </summary>
      <param name="array">
                    集合内容将要复制到的一维 <see cref="T:System.Windows.Documents.TableCell" /> 数组。此数组必须使用从零开始的索引。
                </param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，指定插入复制的集合对象的开始位置。
                </param>
      <exception cref="T:System.ArgumentException">
                    当 <paramref name="array" /> 中包括与 <see cref="T:System.Windows.Documents.TableCell" /> 类型不兼容的项，或 <paramref name="index" /> 指定的位置超出 <paramref name="array" /> 的边界时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 <paramref name="array" /> 为 null 时引发。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
当 <paramref name="index" /> 小于 0 时引发。
                </exception>
    </member>
    <member name="P:System.Windows.Documents.TableCellCollection.Count">
      <summary>
                    获取集合中当前包含的项数。
                </summary>
      <returns>
                    集合中当前包含的项数。
                </returns>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.IndexOf(System.Windows.Documents.TableCell)">
      <summary>
                    返回指定集合项从零开始的索引。
                </summary>
      <returns>
                    指定集合项的从零开始的索引，或 -1（如果指定项不是集合成员）。
                </returns>
      <param name="item">
                    要返回其索引的集合项。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.Insert(System.Int32,System.Windows.Documents.TableCell)">
      <summary>
                    将集合中的指定项插入指定的索引位置。
                </summary>
      <param name="index">
                    从零开始的索引，指定集合中要插入 <paramref name="item" /> 的位置。
                </param>
      <param name="item">
                    要插入到集合中的项。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
当 <paramref name="index" /> 小于 0 时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 <paramref name="item" /> 为 null 时引发。
                </exception>
    </member>
    <member name="P:System.Windows.Documents.TableCellCollection.IsReadOnly">
      <summary>
此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。
                </summary>
      <returns>
当前，此属性始终返回 false。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.TableCellCollection.IsSynchronized">
      <summary>
此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。
                </summary>
      <returns>
当前，此属性始终返回 false。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.TableCellCollection.Item(System.Int32)">
      <summary>
                    获取或设置指定索引处的集合项。这是一个索引属性。
                </summary>
      <returns>
                    指定索引处的集合项。
                </returns>
      <param name="index">
                    从零开始的索引，指定集合项的位置。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
当 <paramref name="index" /> 小于零或 <paramref name="index" /> 大于等于 <see cref="P:System.Windows.Documents.TableCellCollection.Count" /> 时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.Remove(System.Windows.Documents.TableCell)">
      <summary>
                    从集合中移除指定的项。
                </summary>
      <returns>
                    如果找到并移除了指定项，则为 true；否则为 false。
                </returns>
      <param name="item">
                    要从集合中移除的项。
                </param>
      <exception cref="T:System.ArgumentException">
                    当集合中不存在 <paramref name="item" /> 时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 <paramref name="item" /> 为 null 时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.RemoveAt(System.Int32)">
      <summary>
                    从集合中移除索引指定的项。
                </summary>
      <param name="index">
                    从零开始的索引，指定要移除的集合项。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
当 <paramref name="index" /> 小于零或 <paramref name="index" /> 大于等于 <see cref="P:System.Windows.Documents.TableCellCollection.Count" /> 时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.RemoveRange(System.Int32,System.Int32)">
      <summary>
                    从集合中移除由起始索引和计数指定的项范围。
                </summary>
      <param name="index">
                    从零开始的索引，指示要移除的一系列项的起始位置。
                </param>
      <param name="count">
                    从 <paramref name="index" /> 所指定位置开始移除的项数。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    当 <paramref name="index" /> 或 <paramref name="count" /> 小于零，或 <paramref name="index" /> 大于等于 <see cref="P:System.Windows.Documents.TableCellCollection.Count" /> 时引发。
                </exception>
      <exception cref="T:System.ArgumentException">
                    当 <paramref name="index" /> 和 <paramref name="count" /> 未指定此集合中的有效范围时引发。
                </exception>
    </member>
    <member name="P:System.Windows.Documents.TableCellCollection.SyncRoot">
      <summary>
此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.System#Collections#IList#Add(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。
                </summary>
      <returns>
                    新元素的插入位置。
                </returns>
      <param name="value">
                    要添加到 <see cref="T:System.Windows.Documents.TableCellCollection" /> 的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.System#Collections#IList#Clear">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Clear" />。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Documents.TableCellCollection" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Documents.TableCellCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。
                </summary>
      <returns>
                    如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Documents.TableCellCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。
                </summary>
      <param name="index">
                    从零开始的索引，在该处插入 <see cref="T:System.Object" />。
                </param>
      <param name="value">
                    要插入 <see cref="T:System.Windows.Documents.TableCellCollection" /> 中的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="P:System.Windows.Documents.TableCellCollection.System#Collections#IList#IsFixedSize">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Documents.TableCellCollection" /> 有固定大小，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.TableCellCollection.System#Collections#IList#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Documents.TableCellCollection" /> 为只读，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.TableCellCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.Item(System.Int32)" />。
                </summary>
      <returns>
                    指定索引处的元素。
                </returns>
      <param name="index">
                    要获得或设置的元素从零开始的索引。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Remove(System.Object)" />。
                </summary>
      <param name="value">
                    要从 <see cref="T:System.Windows.Documents.TableCellCollection" /> 移除的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />。
                </summary>
      <param name="index">
                    从零开始的索引（属于要移除的项）。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableCellCollection.TrimToSize">
      <summary>
                    通过将基础集合 <see cref="P:System.Windows.Documents.TableCellCollection.Capacity" /> 设置为等于集合中当前项的 <see cref="P:System.Windows.Documents.TableCellCollection.Count" /> 来优化集合的内存占用。
                </summary>
    </member>
    <member name="T:System.Windows.Documents.TableColumn">
      <summary>
                    定义 <see cref="T:System.Windows.Documents.Table" /> 中列的流内容元素。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.TableColumn.#ctor">
      <summary>
                     初始化 <see cref="T:System.Windows.Documents.TableColumn" /> 类的一个新实例。
                </summary>
    </member>
    <member name="P:System.Windows.Documents.TableColumn.Background">
      <summary>
                    获取或设置用于填充 <see cref="T:System.Windows.Documents.TableColumn" /> 的内容的背景 <see cref="T:System.Windows.Media.Brush" />。这是一个依赖项属性。
                </summary>
      <returns>
                    用于填充 <see cref="T:System.Windows.Documents.TableColumn" /> 的内容的背景 <see cref="T:System.Windows.Media.Brush" />。
                </returns>
    </member>
    <member name="F:System.Windows.Documents.TableColumn.BackgroundProperty">
      <summary>
                     标识 <see cref="P:System.Windows.Documents.TableColumn.Background" /> 依赖项属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.TableColumn.Background" /> 依赖项属性的标识符。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.TableColumn.Width">
      <summary>
                     获取或设置 <see cref="T:System.Windows.Documents.TableColumn" /> 元素的宽度。<see cref="P:System.Windows.Documents.TableColumn.Width" /> 属性从一端到另一端测量列的内容、边距和边框的和。这是一个依赖项属性。
                </summary>
      <returns>
        <see cref="T:System.Windows.Documents.TableColumn" /> 元素的宽度（作为 <see cref="T:System.Windows.GridLength" />）。
                </returns>
    </member>
    <member name="F:System.Windows.Documents.TableColumn.WidthProperty">
      <summary>
                     标识 <see cref="P:System.Windows.Documents.TableColumn.Width" /> 依赖项属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Documents.TableColumn.Width" /> 依赖项属性的标识符。
                </returns>
    </member>
    <member name="T:System.Windows.Documents.TableColumnCollection">
      <summary>
                    提供标准功能，用于创建和管理 <see cref="T:System.Windows.Documents.TableColumn" /> 对象的类型安全的有序集合。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.Add(System.Windows.Documents.TableColumn)">
      <summary>
                    将指定项追加到集合。
                </summary>
      <param name="item">
                    要追加到列集合的表列。
                </param>
      <exception cref="T:System.ArgumentException">
                    当 item 已属于集合时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 item 为 null 时引发。
                </exception>
    </member>
    <member name="P:System.Windows.Documents.TableColumnCollection.Capacity">
      <summary>
                    获取或设置为此集合预先分配的集合项容量。
                </summary>
      <returns>
                    为此集合预先分配的集合项容量。默认值为 8。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    当试图将 <see cref="P:System.Windows.Documents.TableCellCollection.Capacity" /> 设置为小于 <see cref="P:System.Windows.Documents.TableCellCollection.Count" /> 的当前值的值时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.Clear">
      <summary>
                    清除集合中的所有项。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.Contains(System.Windows.Documents.TableColumn)">
      <summary>
                    查询集合中是否存在指定的项。
                </summary>
      <returns>
                    如果指定的 item 存在于集合中，则为 true；否则为 false。
                </returns>
      <param name="item">
                    要查询是否存在于集合中的项。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.CopyTo(System.Array,System.Int32)">
      <summary>
复制集合的内容并插入到指定数组中，从数组中指定的索引位置开始插入。
                </summary>
      <param name="array">
                    集合内容将要复制到的一维数组。此数组必须使用从零开始的索引。
                </param>
      <param name="index">array 中从零开始的索引，指定插入复制的集合对象的开始位置。
                </param>
      <exception cref="T:System.ArgumentException">
当 array 中包括与 <see cref="T:System.Windows.Documents.TableColumn" /> 类型不兼容的项，或 arrayIndex 指定的位置超出 array 的边界时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 array 为 null 时引发。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
当 arrayIndex 小于 0 时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.CopyTo(System.Windows.Documents.TableColumn[],System.Int32)">
      <summary>
                    复制集合的内容并插入到指定的 <see cref="T:System.Windows.Documents.TableColumn" /> 数组中，从数组中指定的索引位置开始插入。
                </summary>
      <param name="array">
                    集合内容将要复制到的一维 <see cref="T:System.Windows.Documents.TableColumn" /> 数组。此数组必须使用从零开始的索引。
                </param>
      <param name="index">array 中从零开始的索引，指定插入复制的集合对象的开始位置。
                </param>
      <exception cref="T:System.ArgumentException">
当 array 中包括与 <see cref="T:System.Windows.Documents.TableColumn" /> 类型不兼容的项，或 arrayIndex 指定的位置超出 array 的边界时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 array 为 null 时引发。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
当 arrayIndex 小于 0 时引发。
                </exception>
    </member>
    <member name="P:System.Windows.Documents.TableColumnCollection.Count">
      <summary>
                    获取集合中当前包含的项数。
                </summary>
      <returns>
                    集合中当前包含的项数。
                </returns>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.IndexOf(System.Windows.Documents.TableColumn)">
      <summary>
                    返回指定集合项从零开始的索引。
                </summary>
      <returns>
                    指定集合项从零开始的索引，或 -1（如果指定项不是集合成员）。
                </returns>
      <param name="item">
                    要返回其索引的集合项。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.Insert(System.Int32,System.Windows.Documents.TableColumn)">
      <summary>
                    将集合中的指定项插入指定的索引位置。
                </summary>
      <param name="index">
                    从零开始的索引，指定集合中要插入 item 的位置。
                </param>
      <param name="item">
                    要插入到集合中的项。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    当 index 小于 0 时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 item 为 null 时引发。
                </exception>
    </member>
    <member name="P:System.Windows.Documents.TableColumnCollection.IsReadOnly">
      <summary>
此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。
                </summary>
      <returns>
当前，此属性始终返回 false。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.TableColumnCollection.IsSynchronized">
      <summary>
此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。
                </summary>
      <returns>
当前，此属性始终返回 false。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.TableColumnCollection.Item(System.Int32)">
      <summary>
                    获取指定索引处的集合项。这是一个索引属性。
                </summary>
      <returns>
                    指定索引处的集合项。
                </returns>
      <param name="index">
                    从零开始的索引，指定要检索的集合项的位置。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
当 index 小于零，或 index 大于或等于 <see cref="P:System.Windows.Documents.TableColumnCollection.Count" /> 时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.Remove(System.Windows.Documents.TableColumn)">
      <summary>
                    从集合中移除指定的项。
                </summary>
      <returns>
                    如果找到并移除了指定项，则为 true ；否则为 false。
                </returns>
      <param name="item">
                    要从集合中移除的项。
                </param>
      <exception cref="T:System.ArgumentException">
                    当集合中不存在 item 时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 item 为 null 时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.RemoveAt(System.Int32)">
      <summary>
                    从集合中移除索引指定的项。
                </summary>
      <param name="index">
                    从零开始的索引，指定要移除的集合项。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
当 index 小于零，或 index 大于或等于 <see cref="P:System.Windows.Documents.TableColumnCollection.Count" /> 时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.RemoveRange(System.Int32,System.Int32)">
      <summary>
                    从集合中移除由起始索引和计数指定的项范围。
                </summary>
      <param name="index">
                    从零开始的索引，指示要移除的项范围的开始位置。
                </param>
      <param name="count">
                    从 index 所指定位置开始移除的项数。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    当 index 或 count 小于零，或 index 大于或等于 <see cref="P:System.Windows.Documents.TableColumnCollection.Count" /> 时引发。
                </exception>
      <exception cref="T:System.ArgumentException">
                    当 index 和 count 未指定此集合中的有效范围时引发。
                </exception>
    </member>
    <member name="P:System.Windows.Documents.TableColumnCollection.SyncRoot">
      <summary>
此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.System#Collections#IList#Add(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。请改用类型安全的 <see cref="M:System.Windows.Documents.TableColumnCollection.Add(System.Windows.Documents.TableColumn)" /> 方法。
                </summary>
      <returns>
                    新元素的插入位置。
                </returns>
      <param name="value">
                    要添加到 <see cref="T:System.Windows.Documents.TableColumnCollection" /> 的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.System#Collections#IList#Clear">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Clear" />。请改用类型安全的 <see cref="M:System.Windows.Documents.TableColumnCollection.Clear" /> 方法。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。请改用类型安全的 <see cref="M:System.Windows.Documents.TableColumnCollection.Contains(System.Windows.Documents.TableColumn)" /> 方法。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Documents.TableColumnCollection" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Documents.TableColumnCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。请改用类型安全的 <see cref="M:System.Windows.Documents.TableColumnCollection.IndexOf(System.Windows.Documents.TableColumn)" /> 方法。
                </summary>
      <returns>
                    如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Documents.TableColumnCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。请改用类型安全的 <see cref="M:System.Windows.Documents.TableColumnCollection.Insert(System.Int32,System.Windows.Documents.TableColumn)" /> 方法。
                </summary>
      <param name="index">
                    从零开始的索引，在该处插入 <see cref="T:System.Object" />。
                </param>
      <param name="value">
                    要插入 <see cref="T:System.Windows.Documents.TableColumnCollection" /> 中的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="P:System.Windows.Documents.TableColumnCollection.System#Collections#IList#IsFixedSize">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Documents.TableCellCollection" /> 有固定大小，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.TableColumnCollection.System#Collections#IList#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Documents.TableColumnCollection" /> 为只读，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.TableColumnCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.Item(System.Int32)" />。请改用类型安全的 <see cref="P:System.Windows.Documents.TableCellCollection.Item(System.Int32)" /> 属性。
                </summary>
      <returns>
                    指定索引处的元素。
                </returns>
      <param name="index">
                    要获得或设置的元素从零开始的索引。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Remove(System.Object)" />。请改用类型安全的 <see cref="M:System.Windows.Documents.TableColumnCollection.Remove(System.Windows.Documents.TableColumn)" />、<see cref="M:System.Windows.Documents.TableColumnCollection.RemoveAt(System.Int32)" /> 或 <see cref="M:System.Windows.Documents.TableColumnCollection.RemoveRange(System.Int32,System.Int32)" /> 方法。
                </summary>
      <param name="value">
                    要从 <see cref="T:System.Windows.Documents.TableColumnCollection" /> 移除的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />。请改用类型安全的 <see cref="M:System.Windows.Documents.TableColumnCollection.Remove(System.Windows.Documents.TableColumn)" />、<see cref="M:System.Windows.Documents.TableColumnCollection.RemoveAt(System.Int32)" /> 或 <see cref="M:System.Windows.Documents.TableColumnCollection.RemoveRange(System.Int32,System.Int32)" /> 方法。
                </summary>
      <param name="index">
                    从零开始的索引（属于要移除的项）。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableColumnCollection.TrimToSize">
      <summary>
                    通过将基础集合 <see cref="P:System.Windows.Documents.TableColumnCollection.Capacity" /> 设置为等于集合中当前项的 <see cref="P:System.Windows.Documents.TableColumnCollection.Count" /> 来优化集合的内存占用。
                </summary>
    </member>
    <member name="T:System.Windows.Documents.TableRow">
      <summary>定义 <see cref="T:System.Windows.Documents.Table" /> 中行的流内容元素。</summary>
    </member>
    <member name="M:System.Windows.Documents.TableRow.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.TableRow" /> 类的新的空实例。</summary>
    </member>
    <member name="P:System.Windows.Documents.TableRow.Cells">
      <summary>获取包含 <see cref="T:System.Windows.Documents.TableRow" /> 的单元格的 <see cref="T:System.Windows.Documents.TableCellCollection" />。</summary>
      <returns>子单元格集合。</returns>
    </member>
    <member name="M:System.Windows.Documents.TableRow.ShouldSerializeCells">
      <summary>返回一个值，该值指示在序列化 <see cref="T:System.Windows.Documents.TableRow" /> 对象期间，是否应对 <see cref="P:System.Windows.Documents.TableRow.Cells" /> 属性的有效值进行序列化。</summary>
      <returns>
            如果应对 <see cref="P:System.Windows.Documents.TableRow.Cells" /> 属性进行序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Documents.TableRow.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。 使用 <see cref="P:System.Windows.Documents.TableRow.Cells" /> 属性可将子 <see cref="T:System.Windows.Documents.TableCell" /> 元素添加到 <see cref="T:System.Windows.Documents.TableRow" /> 中。</summary>
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Documents.TableRow.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="text"></param>
    </member>
    <member name="T:System.Windows.Documents.TableRowCollection">
      <summary>
                    提供标准功能，用于创建和管理 <see cref="T:System.Windows.Documents.TableRow" /> 对象的类型安全的有序集合。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.Add(System.Windows.Documents.TableRow)">
      <summary>
                    将指定项追加到集合。
                </summary>
      <param name="item">
                    要追加到集合或行的表行。
                </param>
      <exception cref="T:System.ArgumentException">
                    当 item 已属于集合时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 item 为 null 时引发。
                </exception>
    </member>
    <member name="P:System.Windows.Documents.TableRowCollection.Capacity">
      <summary>
                    获取或设置为此集合预先分配的集合项容量。
                </summary>
      <returns>
                    为此集合预先分配的集合项容量。默认值为 8。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    当试图将 <see cref="P:System.Windows.Documents.TableCellCollection.Capacity" /> 设置为小于 <see cref="P:System.Windows.Documents.TableCellCollection.Count" /> 的当前值的值时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.Clear">
      <summary>
                    清除集合中的所有项。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.Contains(System.Windows.Documents.TableRow)">
      <summary>
                    查询集合中是否存在指定的项。
                </summary>
      <returns>
                    如果指定的 item 存在于集合中，则为 true；否则为 false。
                </returns>
      <param name="item">
                    要查询是否存在于集合中的项。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.CopyTo(System.Array,System.Int32)">
      <summary>
复制集合的内容并插入到指定数组中，从数组中指定的索引位置开始插入。
                </summary>
      <param name="array">
                    集合内容将要复制到的一维数组。此数组必须使用从零开始的索引。
                </param>
      <param name="index">array 中从零开始的索引，指定插入复制的集合对象的开始位置。
                </param>
      <exception cref="T:System.ArgumentException">
当 array 中包括与 <see cref="T:System.Windows.Documents.TableRow" /> 类型不兼容的项，或 arrayIndex 指定的位置超出 array 的边界时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 array 为 null 时引发。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
当 arrayIndex 小于 0 时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.CopyTo(System.Windows.Documents.TableRow[],System.Int32)">
      <summary>
                    复制集合的内容并插入到指定的 <see cref="T:System.Windows.Documents.TableRow" /> 数组中，从数组中指定的索引位置开始插入。
                </summary>
      <param name="array">
                    集合内容将要复制到的一维 <see cref="T:System.Windows.Documents.TableRow" /> 数组。此数组必须使用从零开始的索引。
                </param>
      <param name="index">array 中从零开始的索引，指定插入复制的集合对象的开始位置。
                </param>
      <exception cref="T:System.ArgumentException">
当 array 中包括与 <see cref="T:System.Windows.Documents.TableRow" /> 类型不兼容的项，或 arrayIndex 指定的位置超出 array 的边界时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 array 为 null 时引发。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
当 arrayIndex 小于 0 时引发。
                </exception>
    </member>
    <member name="P:System.Windows.Documents.TableRowCollection.Count">
      <summary>
                    获取集合中当前包含的项数。
                </summary>
      <returns>
                    集合中当前包含的项数。
                </returns>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.IndexOf(System.Windows.Documents.TableRow)">
      <summary>
                    返回指定集合项从零开始的索引。
                </summary>
      <returns>
                    指定集合项从零开始的索引，或 -1（如果指定项不是集合成员）。
                </returns>
      <param name="item">
                    要返回其索引的集合项。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.Insert(System.Int32,System.Windows.Documents.TableRow)">
      <summary>
                    将集合中的指定项插入指定的索引位置。
                </summary>
      <param name="index">
                    从零开始的索引，指定集合中要插入 item 的位置。
                </param>
      <param name="item">
                    要插入到集合中的项。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    当 index 小于 0 时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 item 为 null 时引发。
                </exception>
    </member>
    <member name="P:System.Windows.Documents.TableRowCollection.IsReadOnly">
      <summary>
此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。
                </summary>
      <returns>
当前，此属性始终返回 false。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.TableRowCollection.IsSynchronized">
      <summary>
此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。
                </summary>
      <returns>
当前，此属性始终返回 false。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.TableRowCollection.Item(System.Int32)">
      <summary>
                    获取指定索引处的集合项。这是一个索引属性。
                </summary>
      <returns>
                    指定索引处的集合项。
                </returns>
      <param name="index">
                    从零开始的索引，指定要检索的集合项的位置。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
当 index 小于零，或 index 大于或等于 <see cref="P:System.Windows.Documents.TableRowCollection.Count" /> 时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.Remove(System.Windows.Documents.TableRow)">
      <summary>
                    从集合中移除指定的项。
                </summary>
      <returns>
                    如果找到并移除了指定项，则为 true ；否则为 false。
                </returns>
      <param name="item">
                    要从集合中移除的项。
                </param>
      <exception cref="T:System.ArgumentException">
                    当集合中不存在 item 时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 item 为 null 时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.RemoveAt(System.Int32)">
      <summary>
                    从集合中移除索引指定的项。
                </summary>
      <param name="index">
                    从零开始的索引，指定要移除的集合项。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
当 index 小于零，或 index 大于或等于 <see cref="P:System.Windows.Documents.TableRowCollection.Count" /> 时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.RemoveRange(System.Int32,System.Int32)">
      <summary>
                    从集合中移除由起始索引和计数指定的项范围。
                </summary>
      <param name="index">
                    从零开始的索引，指示要移除的项范围的开始位置。
                </param>
      <param name="count">
                    从 index 所指定位置开始移除的项数。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    当 index 或 count 小于零，或 index 大于或等于 <see cref="P:System.Windows.Documents.TableRowCollection.Count" /> 时引发。
                </exception>
      <exception cref="T:System.ArgumentException">
                    当 index 和 count 未指定此集合中的有效范围时引发。
                </exception>
    </member>
    <member name="P:System.Windows.Documents.TableRowCollection.SyncRoot">
      <summary>
此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.System#Collections#IList#Add(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。
                </summary>
      <returns>
                    新元素的插入位置。
                </returns>
      <param name="value">
                    要添加到 <see cref="T:System.Windows.Documents.TableRowCollection" /> 的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.System#Collections#IList#Clear">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Clear" />。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Documents.TableRowCollection" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Documents.TableRowCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。
                </summary>
      <returns>
                    如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Documents.TableRowCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。
                </summary>
      <param name="index">
                    从零开始的索引，在该处插入 <see cref="T:System.Object" />。
                </param>
      <param name="value">
                    要插入 <see cref="T:System.Windows.Documents.TableRowCollection" /> 中的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="P:System.Windows.Documents.TableRowCollection.System#Collections#IList#IsFixedSize">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Documents.TableRowCollection" /> 有固定大小，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.TableRowCollection.System#Collections#IList#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Documents.TableRowCollection" /> 为只读，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.TableRowCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.Item(System.Int32)" />。
                </summary>
      <returns>
                    指定索引处的元素。
                </returns>
      <param name="index">
                    要获得或设置的元素从零开始的索引。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Remove(System.Object)" />。
                </summary>
      <param name="value">
                    要从 <see cref="T:System.Windows.Documents.TableRowCollection" /> 移除的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />。
                </summary>
      <param name="index">
                    从零开始的索引（属于要移除的项）。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableRowCollection.TrimToSize">
      <summary>
                    通过将基础集合 <see cref="P:System.Windows.Documents.TableRowCollection.Capacity" /> 设置为等于集合中当前项的 <see cref="P:System.Windows.Documents.TableRowCollection.Count" /> 来优化集合的内存占用。
                </summary>
    </member>
    <member name="T:System.Windows.Documents.TableRowGroup">
      <summary>表示用于分组 <see cref="T:System.Windows.Documents.Table" /> 中的 <see cref="T:System.Windows.Documents.TableRow" /> 元素的流内容元素。</summary>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroup.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.TableRowGroup" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Documents.TableRowGroup.Rows">
      <summary>获取一个 <see cref="T:System.Windows.Documents.TableRowCollection" />，它包含组成 <see cref="T:System.Windows.Documents.TableRowGroup" /> 的内容的 <see cref="T:System.Windows.Documents.TableRow" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Windows.Documents.TableRowCollection" />，其中包含组成 <see cref="T:System.Windows.Documents.TableRowGroup" /> 的内容的 <see cref="T:System.Windows.Documents.TableRow" /> 元素。此属性无默认值。</returns>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroup.ShouldSerializeRows">
      <summary>指示是否应持久保存 <see cref="P:System.Windows.Documents.TableRowGroup.Rows" /> 属性。</summary>
      <returns>
如果属性值已更改，不再是默认值，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroup.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroup.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
      <param name="text"></param>
    </member>
    <member name="T:System.Windows.Documents.TableRowGroupCollection">
      <summary>
                    提供标准功能，用于创建和管理 <see cref="T:System.Windows.Documents.TableRowGroup" /> 对象的类型安全的有序集合。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.Add(System.Windows.Documents.TableRowGroup)">
      <summary>
                    将指定项追加到集合。
                </summary>
      <param name="item">
                    要追加到集合的项。
                </param>
      <exception cref="T:System.ArgumentException">
                    当 item 已属于集合时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 item 为 null 时引发。
                </exception>
    </member>
    <member name="P:System.Windows.Documents.TableRowGroupCollection.Capacity">
      <summary>
                    获取或设置为此集合预先分配的集合项容量。
                </summary>
      <returns>
                    为此集合预先分配的集合项容量。默认值为 8。
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    当试图将 <see cref="P:System.Windows.Documents.TableCellCollection.Capacity" /> 设置为小于 <see cref="P:System.Windows.Documents.TableCellCollection.Count" /> 的当前值的值时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.Clear">
      <summary>
                    清除集合中的所有项。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.Contains(System.Windows.Documents.TableRowGroup)">
      <summary>
                    查询集合中是否存在指定的项。
                </summary>
      <returns>
                    如果指定的 item 存在于集合中，则为 true；否则为 false。
                </returns>
      <param name="item">
                    要查询是否存在于集合中的项。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.CopyTo(System.Array,System.Int32)">
      <summary>
复制集合的内容并插入到指定数组中，从数组中指定的索引位置开始插入。
                </summary>
      <param name="array">
                    集合内容将要复制到的一维数组。此数组必须使用从零开始的索引。
                </param>
      <param name="index">array 中从零开始的索引，指定插入复制的集合对象的开始位置。
                </param>
      <exception cref="T:System.ArgumentException">
当 array 中包括与 <see cref="T:System.Windows.Documents.TableRowGroup" /> 类型不兼容的项，或 arrayIndex 指定的位置超出 array 的边界时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 array 为 null 时引发。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
当 arrayIndex 小于 0 时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.CopyTo(System.Windows.Documents.TableRowGroup[],System.Int32)">
      <summary>
                    复制集合的内容并插入到指定的 <see cref="T:System.Windows.Documents.TableRowGroup" /> 数组中，从数组中指定的索引位置开始插入。
                </summary>
      <param name="array">
                    集合内容将要复制到的一维 <see cref="T:System.Windows.Documents.TableRowGroup" /> 数组。此数组必须使用从零开始的索引。
                </param>
      <param name="index">array 中从零开始的索引，指定插入复制的集合对象的开始位置。
                </param>
      <exception cref="T:System.ArgumentException">
当 array 中包括与 <see cref="T:System.Windows.Documents.TableRowGroup" /> 类型不兼容的项，或 arrayIndex 指定的位置超出 array 的边界时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 array 为 null 时引发。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
当 arrayIndex 小于 0 时引发。
                </exception>
    </member>
    <member name="P:System.Windows.Documents.TableRowGroupCollection.Count">
      <summary>
                    获取集合中当前包含的项数。
                </summary>
      <returns>
                    集合中当前包含的项数。
                </returns>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.IndexOf(System.Windows.Documents.TableRowGroup)">
      <summary>
                    返回指定集合项从零开始的索引。
                </summary>
      <returns>
                    指定集合项从零开始的索引，或 -1（如果指定项不是集合成员）。
                </returns>
      <param name="item">
                    要返回其索引的集合项。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.Insert(System.Int32,System.Windows.Documents.TableRowGroup)">
      <summary>
                    将集合中的指定项插入指定的索引位置。
                </summary>
      <param name="index">
                    从零开始的索引，指定集合中要插入 item 的位置。
                </param>
      <param name="item">
                    要插入到集合中的项。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    当 index 小于 0 时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 item 为 null 时引发。
                </exception>
    </member>
    <member name="P:System.Windows.Documents.TableRowGroupCollection.IsReadOnly">
      <summary>
此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。
                </summary>
      <returns>
当前，此属性始终返回 false。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.TableRowGroupCollection.IsSynchronized">
      <summary>
此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。
                </summary>
      <returns>
当前，此属性始终返回 false。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.TableRowGroupCollection.Item(System.Int32)">
      <summary>
                    获取指定索引处的集合项。这是一个索引属性。
                </summary>
      <returns>
                    指定索引处的集合项。
                </returns>
      <param name="index">
                    从零开始的索引，指定要检索的集合项的位置。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
当 index 小于零，或 index 大于或等于 <see cref="P:System.Windows.Documents.TableRowGroupCollection.Count" /> 时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.Remove(System.Windows.Documents.TableRowGroup)">
      <summary>
                    从集合中移除指定的项。
                </summary>
      <returns>
                    如果找到并移除了指定项，则为 true ；否则为 false。
                </returns>
      <param name="item">
                    要从集合中移除的项。
                </param>
      <exception cref="T:System.ArgumentException">
                    当集合中不存在 item 时引发。
                </exception>
      <exception cref="T:System.ArgumentNullException">
当 item 为 null 时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.RemoveAt(System.Int32)">
      <summary>
                    从集合中移除索引指定的项。
                </summary>
      <param name="index">
                    从零开始的索引，指定要移除的集合项。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
当 index 小于零，或 index 大于或等于 <see cref="P:System.Windows.Documents.TableRowGroupCollection.Count" /> 时引发。
                </exception>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.RemoveRange(System.Int32,System.Int32)">
      <summary>
                    从集合中移除由起始索引和计数指定的项范围。
                </summary>
      <param name="index">
                    从零开始的索引，指示要移除的项范围的开始位置。
                </param>
      <param name="count">
                    从 index 所指定位置开始移除的项数。
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    当 index 或 count 小于零，或 index 大于或等于 <see cref="P:System.Windows.Documents.TableRowGroupCollection.Count" /> 时引发。
                </exception>
      <exception cref="T:System.ArgumentException">
                    当 index 和 count 未指定此集合中的有效范围时引发。
                </exception>
    </member>
    <member name="P:System.Windows.Documents.TableRowGroupCollection.SyncRoot">
      <summary>
此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。
                </returns>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.System#Collections#IList#Add(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Add(System.Object)" />。
                </summary>
      <returns>
                    新元素的插入位置。
                </returns>
      <param name="value">
                    要添加到 <see cref="T:System.Windows.Documents.TableRowGroupCollection" /> 的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.System#Collections#IList#Clear">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Clear" />。
                </summary>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Contains(System.Object)" />。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Documents.TableRowGroupCollection" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Documents.TableRowGroupCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。
                </summary>
      <returns>
                    如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
                </returns>
      <param name="value">
                    要在 <see cref="T:System.Windows.Documents.TableRowGroupCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。
                </summary>
      <param name="index">
                    从零开始的索引，在该处插入 <see cref="T:System.Object" />。
                </param>
      <param name="value">
                    要插入 <see cref="T:System.Windows.Documents.TableRowGroupCollection" /> 中的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="P:System.Windows.Documents.TableRowGroupCollection.System#Collections#IList#IsFixedSize">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsFixedSize" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Documents.TableRowGroupCollection" /> 有固定大小，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.TableRowGroupCollection.System#Collections#IList#IsReadOnly">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.IsReadOnly" />。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Documents.TableRowGroupCollection" /> 为只读，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Documents.TableRowGroupCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IList.Item(System.Int32)" />。
                </summary>
      <returns>
                    指定索引处的元素。
                </returns>
      <param name="index">
                    要获得或设置的元素从零开始的索引。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.Remove(System.Object)" />。
                </summary>
      <param name="value">
                    要从 <see cref="T:System.Windows.Documents.TableRowGroupCollection" /> 移除的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />。
                </summary>
      <param name="index">
                    从零开始的索引（属于要移除的项）。
                </param>
    </member>
    <member name="M:System.Windows.Documents.TableRowGroupCollection.TrimToSize">
      <summary>
                    通过将基础集合 <see cref="P:System.Windows.Documents.TableRowGroupCollection.Capacity" /> 设置为等于集合中当前项的 <see cref="P:System.Windows.Documents.TableRowGroupCollection.Count" /> 来优化集合的内存占用。
                </summary>
    </member>
    <member name="T:System.Windows.Documents.TextEffectResolver">
      <summary> 用于在文本容器中设置文本效果的帮助器类 </summary>
    </member>
    <member name="M:System.Windows.Documents.TextEffectResolver.Resolve(System.Windows.Documents.TextPointer,System.Windows.Documents.TextPointer,System.Windows.Media.TextEffect)">
      <summary> 将文本范围的文本效果解析为文本效果目标的列表。</summary>
      <returns>与文本范围对应的 <see cref="T:System.Windows.Documents.TextEffectTarget" /> 对象的集合。</returns>
      <param name="startPosition">起始文本指针</param>
      <param name="endPosition">结束文本指针</param>
      <param name="effect">要应用于文本的效果</param>
    </member>
    <member name="T:System.Windows.Documents.TextEffectTarget">
      <summary>使用 <see cref="T:System.Windows.Documents.TextEffectResolver" /> 对文本设置效果所产生的结果。它由创建的 <see cref="T:System.Windows.Media.TextEffect" /> 和 <see cref="T:System.Windows.Media.TextEffect" /> 应设置为的 <see cref="T:System.Windows.DependencyObject" /> 组成。</summary>
    </member>
    <member name="M:System.Windows.Documents.TextEffectTarget.Disable">
      <summary> 对效果目标禁用 <see cref="T:System.Windows.Media.TextEffect" />。</summary>
    </member>
    <member name="P:System.Windows.Documents.TextEffectTarget.Element">
      <summary> 获取 <see cref="T:System.Windows.Media.TextEffect" /> 的目标 <see cref="T:System.Windows.DependencyObject" />。</summary>
      <returns>
        <see cref="T:System.Windows.Media.TextEffect" /> 的目标 <see cref="T:System.Windows.DependencyObject" />。</returns>
    </member>
    <member name="M:System.Windows.Documents.TextEffectTarget.Enable">
      <summary>对目标文本启用 <see cref="T:System.Windows.Media.TextEffect" />。</summary>
    </member>
    <member name="P:System.Windows.Documents.TextEffectTarget.IsEnabled">
      <summary>获取一个值，该值确定是否对目标元素启用文本效果。</summary>
      <returns>
            如果对目标启用 <see cref="T:System.Windows.Media.TextEffect" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Documents.TextEffectTarget.TextEffect">
      <summary> 获取 <see cref="T:System.Windows.Documents.TextEffectTarget" /> 的 <see cref="T:System.Windows.Media.TextEffect" />。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.TextEffectTarget" /> 的 <see cref="T:System.Windows.Media.TextEffect" />。</returns>
    </member>
    <member name="T:System.Windows.Documents.TextElement">
      <summary>用作抽象类 <see cref="T:System.Windows.Documents.Block" /> 和 <see cref="T:System.Windows.Documents.Inline" /> 的基类的抽象类。</summary>
    </member>
    <member name="P:System.Windows.Documents.TextElement.Background">
      <summary>获取或设置用于填充内容区域背景的 <see cref="T:System.Windows.Media.Brush" />。这是一个依赖项属性。</summary>
      <returns>用于填充内容区域背景的画笔，或 null（不使用背景画笔）。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Documents.TextElement.BackgroundProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.TextElement.Background" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.TextElement.Background" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.ContentEnd">
      <summary>获取表示元素中内容末尾的 <see cref="T:System.Windows.Documents.TextPointer" />。</summary>
      <returns>表示 <see cref="T:System.Windows.Documents.TextElement" /> 中内容末尾的 <see cref="T:System.Windows.Documents.TextPointer" />。</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.ContentStart">
      <summary>获取表示元素中内容开头的 <see cref="T:System.Windows.Documents.TextPointer" />。</summary>
      <returns>表示 <see cref="T:System.Windows.Documents.TextElement" /> 中内容开头的 <see cref="T:System.Windows.Documents.TextPointerContext" />。</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.ElementEnd">
      <summary>获取表示紧接元素末尾之后位置的 <see cref="T:System.Windows.Documents.TextPointer" />。</summary>
      <returns>表示紧接 <see cref="T:System.Windows.Documents.TextElement" /> 末尾之后位置的 <see cref="T:System.Windows.Documents.TextPointer" />。</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.ElementStart">
      <summary>获取表示紧邻元素开头之前位置的 <see cref="T:System.Windows.Documents.TextPointer" />。</summary>
      <returns>表示紧邻 <see cref="T:System.Windows.Documents.TextElement" /> 开头之前位置的 <see cref="T:System.Windows.Documents.TextPointerContext" />。</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.FontFamily">
      <summary>获取或设置元素内容的首选顶级字体系列。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.FontFamily" /> 对象，指定首选字体系列，或者指定一个主要首选字体系列并附带一个或多个备用字体系列。默认字体是由 <see cref="P:System.Windows.SystemFonts.MessageFontFamily" /> 值确定的字体。</returns>
    </member>
    <member name="F:System.Windows.Documents.TextElement.FontFamilyProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.TextElement.FontFamily" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.TextElement.FontFamily" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.FontSize">
      <summary>获取或设置元素内容的字号。这是一个依赖项属性。</summary>
      <returns>希望使用的字号，以与设备无关的像素为单位，大于 0.001，小于等于 35791。默认值取决于当前系统设置以及 <see cref="P:System.Windows.SystemFonts.MessageFontSize" /> 值。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Documents.TextElement.FontSize" /> 设置为大于 35791 或小于等于 0.001 的值。</exception>
    </member>
    <member name="F:System.Windows.Documents.TextElement.FontSizeProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.TextElement.FontSize" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.TextElement.FontSize" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.FontStretch">
      <summary>获取或设置元素内容的字体拉伸特征。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.FontStretch" /> 结构，指定希望使用的字体拉伸特征。默认值为 <see cref="P:System.Windows.FontStretches.Normal" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.TextElement.FontStretchProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.TextElement.FontStretch" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.TextElement.FontStretch" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.FontStyle">
      <summary>获取或设置元素内容的字形。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.FontStyles" /> 类的一个成员，指定所需的字形。默认值由 <see cref="P:System.Windows.SystemFonts.MessageFontStyle" /> 值确定。</returns>
    </member>
    <member name="F:System.Windows.Documents.TextElement.FontStyleProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.TextElement.FontStyle" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.TextElement.FontStyle" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.FontWeight">
      <summary>获取或设置元素内容的顶级字体粗细。这是一个依赖项属性。</summary>
      <returns>
        <see cref="T:System.Windows.FontWeights" /> 类的一个成员，指定所需的字体粗细。默认值由 <see cref="P:System.Windows.SystemFonts.MessageFontWeight" /> 值确定。</returns>
    </member>
    <member name="F:System.Windows.Documents.TextElement.FontWeightProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.TextElement.FontWeight" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.TextElement.FontWeight" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.Foreground">
      <summary>获取或设置要应用于元素内容的 <see cref="T:System.Windows.Media.Brush" />。这是一个依赖项属性。</summary>
      <returns>要应用于文本内容的画笔。默认值为 <see cref="P:System.Windows.Media.Brushes.Black" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.TextElement.ForegroundProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.TextElement.Foreground" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.TextElement.Foreground" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Documents.TextElement.GetFontFamily(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.TextElement.FontFamily" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.TextElement.FontFamily" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.TextElement.FontFamily" /> 属性值的依赖项对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextElement.GetFontSize(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.TextElement.FontSize" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.TextElement.FontSize" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.TextElement.FontSize" /> 属性值的依赖项对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextElement.GetFontStretch(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.TextElement.FontStretch" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.TextElement.FontStretch" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.TextElement.FontStretch" /> 属性值的依赖项对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextElement.GetFontStyle(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.TextElement.FontStyle" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.TextElement.FontStyle" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.TextElement.FontStyle" /> 属性值的依赖项对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextElement.GetFontWeight(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.TextElement.FontWeight" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.TextElement.FontWeight" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.TextElement.FontWeight" /> 属性值的依赖项对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextElement.GetForeground(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.TextElement.Foreground" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.TextElement.Foreground" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.TextElement.Foreground" /> 属性值的依赖项对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Documents.TextElement.LogicalChildren">
      <summary>获取一个可用于迭代该元素的逻辑子元素的枚举数。</summary>
      <returns>用于逻辑子级的枚举数。</returns>
    </member>
    <member name="M:System.Windows.Documents.TextElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>处理元素上存在的一个或多个依赖项属性的有效值已更改的通知。</summary>
      <param name="e">与属性值更改关联的参数。 <see cref="P:System.Windows.DependencyPropertyChangedEventArgs.Property" /> 属性指定已更改的属性，<see cref="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue" /> 属性指定之前的属性值，<see cref="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue" /> 属性指定新的属性值。</param>
    </member>
    <member name="M:System.Windows.Documents.TextElement.SetFontFamily(System.Windows.DependencyObject,System.Windows.Media.FontFamily)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.TextElement.FontFamily" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.TextElement.FontFamily" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextElement.SetFontSize(System.Windows.DependencyObject,System.Double)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.TextElement.FontSize" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.TextElement.FontSize" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextElement.SetFontStretch(System.Windows.DependencyObject,System.Windows.FontStretch)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.TextElement.FontStretch" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.TextElement.FontStretch" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextElement.SetFontStyle(System.Windows.DependencyObject,System.Windows.FontStyle)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.TextElement.FontStyle" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.TextElement.FontStyle" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextElement.SetFontWeight(System.Windows.DependencyObject,System.Windows.FontWeight)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.TextElement.FontWeight" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.TextElement.FontWeight" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextElement.SetForeground(System.Windows.DependencyObject,System.Windows.Media.Brush)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.TextElement.Foreground" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.TextElement.Foreground" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextElement.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Documents.TextElement.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="text"></param>
    </member>
    <member name="P:System.Windows.Documents.TextElement.TextEffects">
      <summary>获取或设置应用于元素内容的文本效果集合。这是一个依赖项属性。</summary>
      <returns>一个 <see cref="T:System.Windows.Media.TextEffectCollection" />，其中包含一个或多个 <see cref="T:System.Windows.Media.TextEffect" /> 对象，这些对象定义了要应用于此元素内容的效果。默认值为 null（不是空集合）。</returns>
    </member>
    <member name="F:System.Windows.Documents.TextElement.TextEffectsProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.TextElement.TextEffects" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.TextElement.TextEffects" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.Typography">
      <summary>获取该元素内容的当前有效的版式变体。</summary>
      <returns>一个 <see cref="T:System.Windows.Documents.Typography" /> 对象，它指定当前有效的版式变体。有关默认版式值的列表，请参见 <see cref="T:System.Windows.Documents.Typography" />。</returns>
    </member>
    <member name="T:System.Windows.Documents.TextElementCollection`1">
      <summary>提供标准功能，用于创建和管理 <see cref="T:System.Windows.Documents.TextElement" /> 对象的类型安全的有序集合。 这是一个泛型集合，用于使用从 <see cref="T:System.Windows.Documents.TextElement" /> 派生的指定类型的对象。</summary>
      <typeparam name="TextElementType">泛型集合的类型说明符。 可接受的类型被约束为一种 <see cref="T:System.Windows.Documents.TextElement" /> 或 <see cref="T:System.Windows.Documents.TextElement" /> 的后代。</typeparam>
    </member>
    <member name="M:System.Windows.Documents.TextElementCollection`1.Add(`0)">
      <summary>将指定项追加到集合。</summary>
      <param name="item">要追加到集合的项。</param>
      <exception cref="T:System.ArgumentException">当 item 已属于集合时引发。</exception>
      <exception cref="T:System.ArgumentNullException">当 item 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextElementCollection`1.AddRange(System.Collections.IEnumerable)">
      <summary>将指定范围内的项追加到集合中。</summary>
      <param name="range">实现 <see cref="T:System.Collections.IEnumerable" /> 接口并指定要添加到集合中的项的范围的对象。</param>
      <exception cref="T:System.ArgumentException">当 range 包括任何 null 项时引发。</exception>
      <exception cref="T:System.ArgumentNullException">当 range 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextElementCollection`1.Clear">
      <summary>清除集合中的所有项。</summary>
    </member>
    <member name="M:System.Windows.Documents.TextElementCollection`1.Contains(`0)">
      <summary>查询集合中是否存在指定的项。</summary>
      <returns>
            如果指定的 item 存在于集合中，则为 true；否则为 false。</returns>
      <param name="item">要查询是否存在于集合中的项。</param>
    </member>
    <member name="M:System.Windows.Documents.TextElementCollection`1.CopyTo(`0[],System.Int32)">
      <summary>复制集合的内容并插入到指定数组中，从数组中指定的索引位置开始插入。</summary>
      <param name="array">集合内容将要复制到的一维数组。 此数组必须使用从零开始的索引。</param>
      <param name="arrayIndex">array 中从零开始的索引，指定插入复制的集合对象的开始位置。</param>
      <exception cref="T:System.ArgumentException">当 array 中包括与 <see cref="T:System.Windows.Documents.TextElement" /> 类型不兼容的项，或 arrayIndex 指定的位置超出 array 的边界时引发。</exception>
      <exception cref="T:System.ArgumentNullException">当 array 为 null 时引发。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当 arrayIndex 小于 0 时引发。</exception>
    </member>
    <member name="P:System.Windows.Documents.TextElementCollection`1.Count">
      <summary>获取当前集合中项的数目。</summary>
      <returns>当前集合中项的数目。</returns>
    </member>
    <member name="M:System.Windows.Documents.TextElementCollection`1.GetEnumerator">
      <summary>返回集合内容的一个枚举数。</summary>
      <returns>集合内容的一个枚举数。</returns>
    </member>
    <member name="M:System.Windows.Documents.TextElementCollection`1.InsertAfter(`0,`0)">
      <summary>将集合中的指定项插入到指定集合项之后。</summary>
      <param name="previousSibling">集合中在其后插入新项的项。</param>
      <param name="newItem">要插入到集合中的项。</param>
      <exception cref="T:System.ArgumentException">当 newItem 已属于集合时引发。</exception>
      <exception cref="T:System.ArgumentNullException">当 previousSibling 或 newItem 为 null 时引发。</exception>
      <exception cref="T:System.InvalidOperationException">当 previousSibling 不属于此集合时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextElementCollection`1.InsertBefore(`0,`0)">
      <summary>将集合中的指定项插入到指定集合项之前。</summary>
      <param name="nextSibling">集合中在其前插入新项的项。</param>
      <param name="newItem">要插入到集合中的项。</param>
      <exception cref="T:System.ArgumentException">当 newItem 已属于集合时引发。</exception>
      <exception cref="T:System.ArgumentNullException">当 nextSibling 或 newItem 为 null 时引发。</exception>
      <exception cref="T:System.InvalidOperationException">当 nextSibling 不属于此集合时引发。</exception>
    </member>
    <member name="P:System.Windows.Documents.TextElementCollection`1.IsReadOnly">
      <summary>获取一个值，该值指示该集合是否为只读。</summary>
      <returns>
            如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Documents.TextElementCollection`1.Remove(`0)">
      <summary>从集合中移除指定的项。</summary>
      <returns>
            如果找到并移除了指定项，则为 true ；否则为 false。</returns>
      <param name="item">要从集合中移除的项。</param>
    </member>
    <member name="M:System.Windows.Documents.TextElementCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。 请改用类型安全的 <see cref="M:System.Windows.Documents.TextElementCollection`1.CopyTo(`0[],System.Int32)" /> 方法。</summary>
      <param name="array"></param>
      <param name="arrayIndex"></param>
    </member>
    <member name="P:System.Windows.Documents.TextElementCollection`1.System#Collections#ICollection#Count">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。请改用类型安全的 <see cref="P:System.Windows.Documents.TextElementCollection`1.Count" /> 属性。</summary>
    </member>
    <member name="P:System.Windows.Documents.TextElementCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="P:System.Windows.Documents.TextElementCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。 请改用类型安全的 <see cref="M:System.Windows.Documents.TextElementCollection`1.GetEnumerator" /> 方法。</summary>
    </member>
    <member name="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。 请改用类型安全的 <see cref="M:System.Windows.Documents.TextElementCollection`1.Add(`0)" /> 方法。</summary>
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Clear">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。 请改用类型安全的 <see cref="M:System.Windows.Documents.TextElementCollection`1.Clear" /> 方法。</summary>
    </member>
    <member name="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。 请改用类型安全的 <see cref="M:System.Windows.Documents.TextElementCollection`1.Contains(`0)" /> 方法。</summary>
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。 请改用类型安全的 <see cref="M:System.Windows.Documents.TextElementCollection`1.InsertAfter(`0,`0)" /> 或 <see cref="M:System.Windows.Documents.TextElementCollection`1.InsertBefore(`0,`0)" /> 方法。</summary>
      <param name="index"></param>
      <param name="value"></param>
    </member>
    <member name="P:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#IsFixedSize">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="P:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#IsReadOnly">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="P:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
      <param name="index"></param>
    </member>
    <member name="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。 请改用类型安全的 <see cref="M:System.Windows.Documents.TextElementCollection`1.Remove(`0)" /> 方法。</summary>
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Documents.TextElementCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。 请改用类型安全的 <see cref="M:System.Windows.Documents.TextElementCollection`1.Remove(`0)" /> 方法。</summary>
      <param name="index"></param>
    </member>
    <member name="T:System.Windows.Documents.TextPointer">
      <summary>表示 <see cref="T:System.Windows.Documents.FlowDocument" /> 或 <see cref="T:System.Windows.Controls.TextBlock" /> 中的一个位置。</summary>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)">
      <summary>对当前 <see cref="T:System.Windows.Documents.TextPointer" /> 和第二个指定 <see cref="T:System.Windows.Documents.TextPointer" /> 所表示位置的顺序进行比较。</summary>
      <returns>如果当前 <see cref="T:System.Windows.Documents.TextPointer" /> 位于 <paramref name="position" /> 之前，则为 –1；如果位置相同，则为 0；如果当前 <see cref="T:System.Windows.Documents.TextPointer" /> 位于 <paramref name="position" /> 之后，则为 +1。 </returns>
      <param name="position">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指定要与当前位置进行比较的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 指定位于与当前位置相关联的文本容器之外的某个位置。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)">
      <summary>从当前 <see cref="T:System.Windows.Documents.TextPointer" /> 指示的位置开始删除指定数目的字符。</summary>
      <returns>实际删除的字符数。</returns>
      <param name="count">从当前位置开始要删除的字符数。指定正值将删除当前位置之后的字符；指定负值将删除当前位置之前的字符。</param>
      <exception cref="T:System.InvalidOperationException">在不允许出现文本的位置处调用此方法。</exception>
    </member>
    <member name="P:System.Windows.Documents.TextPointer.DocumentEnd">
      <summary>获取一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向文本容器中与当前位置相关联的内容的结束位置。</summary>
      <returns>一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向文本容器中与当前位置相关联的内容的结束位置。</returns>
    </member>
    <member name="P:System.Windows.Documents.TextPointer.DocumentStart">
      <summary>获取一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向文本容器中与当前位置相关联的内容的开始位置。</summary>
      <returns>一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向文本容器中与当前位置相关联的内容的开始位置。</returns>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)">
      <summary>返回在指定逻辑方向上的边界正好位于当前 <see cref="T:System.Windows.Documents.TextPointer" /> 处的元素（如果有）。</summary>
      <returns>指定 <paramref name="direction" /> 上的相邻元素；或者，如果不存在任何相邻元素，则为 null。</returns>
      <param name="direction">
        <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定搜索相邻元素时的逻辑方向。</param>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)">
      <summary>返回在指定逻辑方向上的边界正好位于当前 <see cref="T:System.Windows.Documents.TextPointer" /> 处的内容的边框 (<see cref="T:System.Windows.Rect" />)。</summary>
      <returns>在指定方向上的边界正好位于当前 <see cref="T:System.Windows.Documents.TextPointer" /> 处的内容的边框；或者，如果当前没有可用的有效布局信息，则为 <see cref="P:System.Windows.Rect.Empty" />。</returns>
      <param name="direction">
        <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定查找内容边框时的逻辑方向。</param>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)">
      <summary>返回一个指向指定逻辑方向上的最近插入位置的 <see cref="T:System.Windows.Documents.TextPointer" />。</summary>
      <returns>一个指向指定方向上的最近插入位置的 <see cref="T:System.Windows.Documents.TextPointer" />。</returns>
      <param name="direction">
        <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定搜索最近插入位置时的逻辑方向。</param>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)">
      <summary>返回一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向相对于当前 <see cref="T:System.Windows.Documents.TextPointer" /> 指定的行的开始位置。</summary>
      <returns>一个指向指定行的开始位置的 <see cref="T:System.Windows.Documents.TextPointer" />（<see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /> 设置为 <see cref="F:System.Windows.Documents.LogicalDirection.Forward" />）；或者，如果指定行超出范围或无法定位，则为 null。</returns>
      <param name="count">在确定要返回其开始位置的行时要跳过的行开始位置标记数。负值指定前面的行，0 指定当前行，正值指定后面的行。</param>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)">
      <summary>返回一个指向相对于当前 <see cref="T:System.Windows.Documents.TextPointer" /> 所指定行的开始位置的 <see cref="T:System.Windows.Documents.TextPointer" />，并报告跳过的行数。</summary>
      <returns>一个指向指定行的开始位置的 <see cref="T:System.Windows.Documents.TextPointer" />（<see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /> 设置为 <see cref="F:System.Windows.Documents.LogicalDirection.Forward" />）；或者，如果指定行超出范围，则指向最靠近指定行的行的开始位置。</returns>
      <param name="count">在确定要返回其开始位置的行时要跳过的行开始位置标记数。负值指定前面的行，0 指定当前行，正值指定后面的行。</param>
      <param name="actualCount">此方法返回时，将包含在确定要返回其开始位置的行时所实际跳过的行开始位置标记数。 如果在跳过指定行数之前遇到内容的开始或结束位置，则此值可能小于 <paramref name="count" />。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)">
      <summary>返回一个指向指定逻辑方向上的下一个符号的指针。</summary>
      <returns>一个指向请求方向上的下一个符号的 <see cref="T:System.Windows.Documents.TextPointer" />；或者，如果当前 <see cref="T:System.Windows.Documents.TextPointer" /> 是内容开始或结束位置的边界，则为 null。</returns>
      <param name="direction">
        <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定搜索下一个符号时的逻辑方向。</param>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)">
      <summary>返回一个指向指定逻辑方向上的下一个插入位置的 <see cref="T:System.Windows.Documents.TextPointer" />。</summary>
      <returns>一个 <see cref="T:System.Windows.Documents.TextPointer" />，它标识所请求方向上的下一个插入位置；或者，如果找不到下一个插入位置，则为 null。</returns>
      <param name="direction">
        <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定搜索下一个插入位置时的逻辑方向。</param>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)">
      <summary>返回当前 <see cref="T:System.Windows.Documents.TextPointer" /> 与第二个指定 <see cref="T:System.Windows.Documents.TextPointer" /> 之间的符号数。</summary>
      <returns>当前 <see cref="T:System.Windows.Documents.TextPointer" /> 与 <paramref name="position" /> 之间的相对符号数。 负值指示当前 <see cref="T:System.Windows.Documents.TextPointer" /> 位于 <paramref name="position" /> 指定的位置之后，0 指示位置相同，正值指示当前 <see cref="T:System.Windows.Documents.TextPointer" /> 位于 <paramref name="position" /> 指定的位置之前。</returns>
      <param name="position">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指定一个位置，将查找该位置与当前位置之间相距的距离（以符号数为单位）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 指定位于与当前位置相关联的文本容器之外的某个位置。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)">
      <summary>返回在指定逻辑方向上与当前 <see cref="T:System.Windows.Documents.TextPointer" /> 相邻的内容的类别指示标志。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.TextPointerContext" /> 值之一，它指示指定逻辑方向上相邻内容的类别。</returns>
      <param name="direction">
        <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定确定相邻内容的类别时的逻辑方向。</param>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)">
      <summary>返回一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向从当前 <see cref="T:System.Windows.Documents.TextPointer" /> 的开始位置计算的由指定偏移量（以符号数为单位）指示的位置。</summary>
      <returns>一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向由指定偏移量指示的位置；或者，如果找不到对应位置，则为 null。</returns>
      <param name="offset">偏移量（以符号数为单位），使用它计算并返回位置。 如果偏移量为负，则在与 <see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /> 属性指示的方向相反的逻辑方向上计算位置。</param>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)">
      <summary>返回一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向从当前 <see cref="T:System.Windows.Documents.TextPointer" /> 的开始位置沿指定方向计算的由指定偏移量（以符号数为单位）指示的位置。</summary>
      <returns>一个指向由指定偏移量指示的位置的 <see cref="T:System.Windows.Documents.TextPointer" />；或者，如果偏移量超过了内容的结束位置，则为 null。</returns>
      <param name="offset">偏移量（以符号数为单位），使用它计算并返回位置。 如果偏移量为负，则返回的 <see cref="T:System.Windows.Documents.TextPointer" /> 位于当前 <see cref="T:System.Windows.Documents.TextPointer" /> 之前；否则，位于它之后。</param>
      <param name="direction">
        <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定返回的 <see cref="T:System.Windows.Documents.TextPointer" /> 的逻辑方向。</param>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)">
      <summary>返回一个字符串，其中包含在指定逻辑方向上与当前 <see cref="T:System.Windows.Documents.TextPointer" /> 相邻的任何文本。</summary>
      <returns>一个包含指定逻辑方向上的任何相邻文本的字符串；或者，如果找不到相邻文本，则为 <see cref="F:System.String.Empty" />。</returns>
      <param name="direction">
        <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定查找并返回任何相邻文本时的逻辑方向。</param>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)">
      <summary>将从指定方向上的任何相邻文本中提取的指定了最大数量的字符复制到由调用方提供的字符数组中。</summary>
      <returns>实际复制到 <paramref name="textBuffer" /> 中的字符数。</returns>
      <param name="direction">
        <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定查找并复制任何相邻文本时的逻辑方向。</param>
      <param name="textBuffer">要向其中复制文本的缓冲区。</param>
      <param name="startIndex">一个索引，从该索引处开始将复制的文本写入 <paramref name="textBuffer" /> 中。</param>
      <param name="count">要复制的最大字符数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 小于 0 或大于 <paramref name="textBuffer" /> 的 <see cref="P:System.Array.Length" /> 属性。- 或 -<paramref name="count" /> 小于 0 或大于 <paramref name="textBuffer" /> 中的剩余空间（<paramref name="textBuffer" />.<see cref="P:System.Array.Length" /> 减去 <paramref name="startIndex" />）。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)">
      <summary>返回当前 <see cref="T:System.Windows.Documents.TextPointer" /> 与指定逻辑方向上的下一个非文本符号之间的 Unicode 字符数。</summary>
      <returns>当前 <see cref="T:System.Windows.Documents.TextPointer" /> 与下一个非文本符号之间的 Unicode 字符数。 如果没有相邻文本，则此数目可以为 0。</returns>
      <param name="direction">
        <see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定计数字符数时的逻辑方向。</param>
    </member>
    <member name="P:System.Windows.Documents.TextPointer.HasValidLayout">
      <summary>获取一个值，该值指示与当前位置相关联的文本容器是否具有有效（最新）的布局。</summary>
      <returns>
如果布局是最新的而且有效，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.InsertLineBreak">
      <summary>在当前位置插入一个换行符。</summary>
      <returns>紧接在由此方法插入的 <see cref="T:System.Windows.Documents.LineBreak" /> 元素之后的 <see cref="T:System.Windows.Documents.TextPointer" />。</returns>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.InsertParagraphBreak">
      <summary>在当前位置插入一个分段符。</summary>
      <returns>一个指向新段落开始位置 (<see cref="P:System.Windows.Documents.TextElement.ContentStart" />) 的 <see cref="T:System.Windows.Documents.TextPointer" />。</returns>
      <exception cref="T:System.InvalidOperationException">应针对无法进行拆分以容纳一个新段落的位置调用此方法，例如在 <see cref="T:System.Windows.Documents.Hyperlink" /> 或 <see cref="T:System.Windows.Documents.InlineUIContainer" /> 的范围内。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)">
      <summary>将指定文本插入到文本 <see cref="T:System.Windows.Documents.Run" /> 中的当前位置。</summary>
      <param name="textData">要插入的文本。</param>
      <exception cref="T:System.InvalidOperationException">当前位置没有位于 <see cref="T:System.Windows.Documents.Run" /> 元素内。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textData" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Documents.TextPointer.IsAtInsertionPosition">
      <summary>获取一个值，该值指示当前位置是否是一个插入位置。</summary>
      <returns>
如果当前位置是插入位置，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Documents.TextPointer.IsAtLineStartPosition">
      <summary>获取一个值，该值指示当前位置是否位于行的开始处。</summary>
      <returns>
            如果当前位置位于行的开始处，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)">
      <summary>指示指定位置与当前位置是否位于相同的文本容器内。</summary>
      <returns>
            如果 <paramref name="textPosition" /> 指示的位置与当前位置位于相同的文本容器内，则为 true；否则为 false。</returns>
      <param name="textPosition">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指定要与当前位置进行比较的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textPosition" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Documents.TextPointer.LogicalDirection">
      <summary>获取与当前位置相关联的逻辑方向，用于消除与当前位置相关联内容的不确定性。</summary>
      <returns>与当前位置相关联的 <see cref="T:System.Windows.Documents.LogicalDirection" /> 值。</returns>
    </member>
    <member name="P:System.Windows.Documents.TextPointer.Paragraph">
      <summary>获取涵盖当前位置的段落（如果有）。</summary>
      <returns>涵盖当前位置的 <see cref="T:System.Windows.Documents.Paragraph" />；或者，如果不存在这样的段落，则为 null。</returns>
    </member>
    <member name="P:System.Windows.Documents.TextPointer.Parent">
      <summary>获取涵盖当前位置的逻辑父项。</summary>
      <returns>涵盖当前位置的逻辑父项。</returns>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.ToString">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
    </member>
    <member name="T:System.Windows.Documents.TextPointerContext">
      <summary>确定与指定 <see cref="T:System.Windows.Documents.LogicalDirection" /> 中的 <see cref="T:System.Windows.Documents.TextPointer" /> 相邻的内容类别。</summary>
    </member>
    <member name="F:System.Windows.Documents.TextPointerContext.None">
      <summary>
        <see cref="T:System.Windows.Documents.TextPointer" /> 与内容的开头或末尾相邻。</summary>
    </member>
    <member name="F:System.Windows.Documents.TextPointerContext.Text">
      <summary>
        <see cref="T:System.Windows.Documents.TextPointer" /> 与文本相邻。</summary>
    </member>
    <member name="F:System.Windows.Documents.TextPointerContext.EmbeddedElement">
      <summary>
        <see cref="T:System.Windows.Documents.TextPointer" /> 与嵌入式 <see cref="T:System.Windows.UIElement" /> 或 <see cref="T:System.Windows.ContentElement" /> 相邻。</summary>
    </member>
    <member name="F:System.Windows.Documents.TextPointerContext.ElementStart">
      <summary>
        <see cref="T:System.Windows.Documents.TextPointer" /> 与 <see cref="T:System.Windows.Documents.TextElement" /> 的开始标记相邻。</summary>
    </member>
    <member name="F:System.Windows.Documents.TextPointerContext.ElementEnd">
      <summary>
        <see cref="T:System.Windows.Documents.TextPointer" /> 与 <see cref="T:System.Windows.Documents.TextElement" /> 的结束标记相邻。</summary>
    </member>
    <member name="T:System.Windows.Documents.TextRange">
      <summary>表示两个 <see cref="T:System.Windows.Documents.TextPointer" /> 位置之间的所选内容。</summary>
    </member>
    <member name="M:System.Windows.Documents.TextRange.#ctor(System.Windows.Documents.TextPointer,System.Windows.Documents.TextPointer)">
      <summary>初始化 <see cref="T:System.Windows.Documents.TextRange" /> 类的新实例，将两个指定的 <see cref="T:System.Windows.Documents.TextPointer" /> 位置作为新范围的开始和结束位置。</summary>
      <param name="position1">标记用于组成新 <see cref="T:System.Windows.Documents.TextRange" /> 的所选内容的一端的固定定位点位置。</param>
      <param name="position2">标记用于组成新 <see cref="T:System.Windows.Documents.TextRange" /> 的所选内容的另一端的可移动位置。</param>
      <exception cref="T:System.ArgumentException">当 <paramref name="position1" /> 和 <paramref name="position2" /> 不在同一文档中时发生。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="position1" /> 或 <paramref name="position2" /> 为 null 时发生。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextRange.ApplyPropertyValue(System.Windows.DependencyProperty,System.Object)">
      <summary>将指定的格式属性和值应用于当前所选内容。</summary>
      <param name="formattingProperty">要应用的格式属性。</param>
      <param name="value">格式属性的值。</param>
      <exception cref="T:System.ArgumentException">当 <paramref name="formattingProperty" /> 未指定有效的格式属性，或 <paramref name="value" /> 为 <paramref name="formattingProperty" /> 指定的值无效时发生。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="formattingProperty" /> 为 null 时发生。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextRange.CanLoad(System.String)">
      <summary>检查当前所选内容是否可以与采用指定数据格式的内容一起加载。</summary>
      <returns>
            如果当前内容可以与采用指定数据格式的内容一起加载，则为 true；否则为 false。</returns>
      <param name="dataFormat">要检查是否与当前所选内容的加载兼容的数据格式。 请参见 <see cref="T:System.Windows.DataFormats" /> 以获得预定义数据格式的列表。</param>
    </member>
    <member name="M:System.Windows.Documents.TextRange.CanSave(System.String)">
      <summary>检查是否可将当前所选内容保存为指定数据格式。</summary>
      <returns>
            如果可将当前所选内容保存为指定数据格式，则为 true；否则为 false。</returns>
      <param name="dataFormat">要检查是否与当前所选内容的保存兼容的数据格式。 请参见 <see cref="T:System.Windows.DataFormats" /> 以获得预定义数据格式的列表。</param>
    </member>
    <member name="E:System.Windows.Documents.TextRange.Changed">
      <summary>在重新定位范围以涵盖新的内容范围时发生。</summary>
    </member>
    <member name="M:System.Windows.Documents.TextRange.ClearAllProperties">
      <summary>从当前所选内容中移除所有格式属性（由 <see cref="T:System.Windows.Documents.Inline" /> 元素表示）。</summary>
    </member>
    <member name="M:System.Windows.Documents.TextRange.Contains(System.Windows.Documents.TextPointer)">
      <summary>检查某个位置（由 <see cref="T:System.Windows.Documents.TextPointer" /> 指定）是否位于当前所选内容中。</summary>
      <returns>
            如果指定位置位于当前所选内容中，则为 true；否则为 false。</returns>
      <param name="textPointer">要测试是否包含在当前所选内容中的位置。</param>
      <exception cref="T:System.ArgumentException">当 textPointer 与当前所选内容不在同一文档中时发生。</exception>
    </member>
    <member name="P:System.Windows.Documents.TextRange.End">
      <summary>获取用于标记当前所选内容的结尾的位置。</summary>
      <returns>一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向当前所选内容的结尾。</returns>
    </member>
    <member name="M:System.Windows.Documents.TextRange.GetPropertyValue(System.Windows.DependencyProperty)">
      <summary>返回对当前所选内容指定的格式属性的有效值。</summary>
      <returns>一个对象，它指定所指定格式属性的值。</returns>
      <param name="formattingProperty">要获取与当前所选内容相关的值的格式属性。</param>
      <exception cref="T:System.ArgumentException">当 <paramref name="formattingProperty" /> 未指定有效的格式属性，或 <paramref name="value" /> 为 <paramref name="formattingProperty" /> 指定的值无效时发生。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="formattingProperty" /> 为 null 时发生。</exception>
    </member>
    <member name="P:System.Windows.Documents.TextRange.IsEmpty">
      <summary>获取一个值，该值指示当前所选内容是否为空。</summary>
      <returns>
            如果当前所选内容为空，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Documents.TextRange.Load(System.IO.Stream,System.String)">
      <summary>从指定流加载采用指定数据格式的当前所选内容。</summary>
      <param name="stream">包含要加载到当前所选内容中的数据的可读流。</param>
      <param name="dataFormat">要将数据加载为的数据格式。 当前支持的数据格式是 <see cref="F:System.Windows.DataFormats.Rtf" />、<see cref="F:System.Windows.DataFormats.Text" />、<see cref="F:System.Windows.DataFormats.Xaml" /> 和 <see cref="F:System.Windows.DataFormats.XamlPackage" />。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="stream" /> 或 <paramref name="dataFormat" /> 为 null 时发生。</exception>
      <exception cref="T:System.ArgumentException">当不支持指定数据格式时发生。 如果从 <paramref name="stream" /> 加载的内容与指定数据格式不匹配，也可能引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextRange.Save(System.IO.Stream,System.String)">
      <summary>将当前所选内容以指定数据格式保存到指定流中。</summary>
      <param name="stream">要将当前所选内容保存到的空可写流。</param>
      <param name="dataFormat">要将当前所选内容保存为的数据格式。 当前支持的数据格式是 <see cref="F:System.Windows.DataFormats.Rtf" />、<see cref="F:System.Windows.DataFormats.Text" />、<see cref="F:System.Windows.DataFormats.Xaml" /> 和 <see cref="F:System.Windows.DataFormats.XamlPackage" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="dataFormat" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不支持指定的数据格式。- 或 -从 <paramref name="stream" /> 加载的内容与指定数据格式不匹配。</exception>
    </member>
    <member name="M:System.Windows.Documents.TextRange.Select(System.Windows.Documents.TextPointer,System.Windows.Documents.TextPointer)">
      <summary>更新当前所选内容，使用两个 <see cref="T:System.Windows.Documents.TextPointer" /> 位置来指示更新的所选内容。</summary>
      <param name="position1">标记更新的所选内容一端的固定定位点位置。</param>
      <param name="position2">标记更新的所选内容另一端的可移动位置。</param>
      <exception cref="T:System.ArgumentException">当 <paramref name="position1" /> 和 <paramref name="position2" /> 不在同一文档中时发生。</exception>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="position1" /> 或 <paramref name="position2" /> 为 null 时发生。</exception>
    </member>
    <member name="P:System.Windows.Documents.TextRange.Start">
      <summary>获取用于标记当前所选内容的开始的位置。</summary>
      <returns>指向当前所选内容的开始位置的 <see cref="T:System.Windows.Documents.TextPointer" />。</returns>
    </member>
    <member name="P:System.Windows.Documents.TextRange.Text">
      <summary>获取或设置当前所选内容的纯文本内容。</summary>
      <returns>一个字符串，其中包含当前所选内容的纯文本内容。</returns>
      <exception cref="T:System.ArgumentNullException">当尝试将此属性设置为 null 时发生。</exception>
    </member>
    <member name="T:System.Windows.Documents.TextSelection">
      <summary>封装 <see cref="T:System.Windows.Controls.RichTextBox" /> 控件的选择状态。</summary>
    </member>
    <member name="T:System.Windows.Documents.Typography">
      <summary>提供对一组丰富的 OpenType 版式属性的访问。</summary>
    </member>
    <member name="P:System.Windows.Documents.Typography.AnnotationAlternates">
      <summary>获取或设置一个值，该值指定备用批注格式的索引。</summary>
      <returns>备用批注格式的索引。默认值为 0（零）。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.AnnotationAlternatesProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.AnnotationAlternates" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.AnnotationAlternates" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.Capitals">
      <summary>获取或设置一个 <see cref="T:System.Windows.FontCapitals" /> 枚举值，该值指示所选字体的大写格式。</summary>
      <returns>一个 <see cref="T:System.Windows.FontCapitals" /> 枚举值。默认值为 <see cref="F:System.Windows.FontCapitals.Normal" />。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.CapitalSpacing">
      <summary>获取或设置一个值，该值确定是否全局调整所有全大写文本的内部标志符号间距以提高可读性。</summary>
      <returns>
            如果调整间距，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.CapitalSpacingProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.CapitalSpacing" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.CapitalSpacing" /> 附加属性的标识符。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.CapitalsProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.Capitals" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.Capitals" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.CaseSensitiveForms">
      <summary>获取或设置一个值，该值确定是否调整标志符号的垂直位置以更好地与大写标志符号对齐。</summary>
      <returns>
            如果调整垂直位置，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.CaseSensitiveFormsProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.CaseSensitiveForms" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.CaseSensitiveForms" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.ContextualAlternates">
      <summary>获取或设置一个值，该值确定是否可以根据所呈现文本的上下文使用自定义标志符号格式。</summary>
      <returns>
            如果可以使用自定义标志符号格式，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.ContextualAlternatesProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.ContextualAlternates" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.ContextualAlternates" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.ContextualLigatures">
      <summary>获取或设置一个值，该值确定是否启用上下文连字。</summary>
      <returns>
            如果启用上下文连字，则为 true，否则为 false。默认值为 true。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.ContextualLigaturesProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.ContextualLigatures" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.ContextualLigatures" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.ContextualSwashes">
      <summary>获取或设置一个值，该值指定上下文花体格式的索引。</summary>
      <returns>标准花体格式的索引。默认值为 0（零）。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.ContextualSwashesProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.ContextualSwashes" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.ContextualSwashes" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.DiscretionaryLigatures">
      <summary>获取或设置一个值，该值确定是否启用自由连字。</summary>
      <returns>
            如果启用自由连字，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.DiscretionaryLigaturesProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.DiscretionaryLigatures" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.DiscretionaryLigatures" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.EastAsianExpertForms">
      <summary>获取或设置一个值，该值确定是否使用相应的首选版式格式替换标准日语字体格式。</summary>
      <returns>
            如果使用相应的首选版式格式替换标准日语字体格式，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.EastAsianExpertFormsProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.EastAsianExpertForms" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.EastAsianExpertForms" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.EastAsianLanguage">
      <summary>获取或设置一个 <see cref="T:System.Windows.FontEastAsianLanguage" /> 枚举值，该值指示为特定书写系统或语言使用的标志符号版本。</summary>
      <returns>一个 <see cref="T:System.Windows.FontEastAsianLanguage" /> 枚举值。默认值为 <see cref="F:System.Windows.FontEastAsianLanguage.Normal" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.EastAsianLanguageProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.EastAsianLanguage" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.EastAsianLanguage" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.EastAsianWidths">
      <summary>获取或设置一个 <see cref="T:System.Windows.FontEastAsianWidths" /> 枚举值，该值指示为东亚字体中的拉丁语字符使用比例宽度。</summary>
      <returns>一个 <see cref="T:System.Windows.FontEastAsianWidths" /> 枚举值。默认值为 <see cref="F:System.Windows.FontEastAsianWidths.Normal" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.EastAsianWidthsProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.EastAsianWidths" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.EastAsianWidths" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.Fraction">
      <summary>获取或设置一个 <see cref="T:System.Windows.FontFraction" /> 枚举值，该值指示分数的样式。</summary>
      <returns>
        <see cref="T:System.Windows.FontFraction" /> 枚举值 默认值为 <see cref="F:System.Windows.FontFraction.Normal" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.FractionProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.Fraction" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.Fraction" /> 附加属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetAnnotationAlternates(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.AnnotationAlternates" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.TextElement.FontFamily" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.AnnotationAlternates" /> 属性值的依赖项对象。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetCapitals(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.Capitals" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.Capitals" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.Capitals" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetCapitalSpacing(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.CapitalSpacing" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.CapitalSpacing" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.CapitalSpacing" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetCaseSensitiveForms(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.CaseSensitiveForms" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.CaseSensitiveForms" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.CaseSensitiveForms" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetContextualAlternates(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.ContextualAlternates" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.ContextualAlternates" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.ContextualAlternates" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetContextualLigatures(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.ContextualLigatures" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.ContextualLigatures" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.ContextualLigatures" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetContextualSwashes(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.ContextualSwashes" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.ContextualSwashes" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.ContextualSwashes" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetDiscretionaryLigatures(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.DiscretionaryLigatures" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.DiscretionaryLigatures" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.DiscretionaryLigatures" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetEastAsianExpertForms(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.EastAsianExpertForms" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.EastAsianExpertForms" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.EastAsianExpertForms" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetEastAsianLanguage(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.EastAsianLanguage" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.EastAsianLanguage" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.EastAsianLanguage" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetEastAsianWidths(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.EastAsianWidths" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.EastAsianWidths" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.EastAsianWidths" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetFraction(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.Fraction" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.Fraction" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.Fraction" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetHistoricalForms(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.HistoricalForms" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.HistoricalForms" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.HistoricalForms" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetHistoricalLigatures(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.HistoricalLigatures" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.HistoricalLigatures" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.HistoricalLigatures" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetKerning(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.Kerning" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.Kerning" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.Kerning" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetMathematicalGreek(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.MathematicalGreek" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.MathematicalGreek" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.MathematicalGreek" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetNumeralAlignment(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.NumeralAlignment" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.NumeralAlignment" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.NumeralAlignment" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetNumeralStyle(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.NumeralStyle" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.NumeralStyle" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.NumeralStyle" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetSlashedZero(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.SlashedZero" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.SlashedZero" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.SlashedZero" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStandardLigatures(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StandardLigatures" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StandardLigatures" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StandardLigatures" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStandardSwashes(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StandardSwashes" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StandardSwashes" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StandardSwashes" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticAlternates(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticAlternates" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticAlternates" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticAlternates" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet1(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet1" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet1" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet1" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet10(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet10" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet10" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet10" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet11(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet11" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet11" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet11" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet12(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet12" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet12" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet12" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet13(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet13" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet13" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet13" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet14(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet14" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet14" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet14" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet15(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet15" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet15" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet15" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet16(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet16" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet16" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet16" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet17(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet17" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet17" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet17" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet18(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet18" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet18" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet18" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet19(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet19" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet19" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet19" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet2(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet2" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet2" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet2" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet20(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet20" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet20" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet20" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet3(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet3" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet3" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet3" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet4(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet4" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet4" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet4" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet5(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet5" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet5" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet5" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet6(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet6" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet6" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet6" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet7(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet7" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet7" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet7" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet8(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet8" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet8" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet8" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetStylisticSet9(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.StylisticSet8" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.StylisticSet8" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.StylisticSet8" /> 属性值的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Typography.GetVariants(System.Windows.DependencyObject)">
      <summary>为指定的依赖项对象返回 <see cref="P:System.Windows.Documents.Typography.Variants" /> 附加属性的值。</summary>
      <returns>指定的依赖项对象上 <see cref="P:System.Windows.Documents.Typography.Variants" /> 附加属性的当前值。</returns>
      <param name="element">要检索其 <see cref="P:System.Windows.Documents.Typography.Variants" /> 属性值的依赖项对象。</param>
    </member>
    <member name="P:System.Windows.Documents.Typography.HistoricalForms">
      <summary>获取或设置一个值，该值确定是否启用历史记录格式。</summary>
      <returns>
            如果启用历史记录格式，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.HistoricalFormsProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.HistoricalForms" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.HistoricalForms" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.HistoricalLigatures">
      <summary>获取或设置一个值，该值指示是否启用历史记录连字。</summary>
      <returns>
            如果启用历史记录连字，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.HistoricalLigaturesProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.HistoricalLigatures" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.HistoricalLigatures" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.Kerning">
      <summary>获取或设置一个值，该值指示是否启用字距调整。</summary>
      <returns>
            如果启用字距调整，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.KerningProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.Kerning" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.Kerning" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.MathematicalGreek">
      <summary>获取或设置一个值，该值指示是否使用在数学符号中常用的相应字体格式，替换希腊语标志符号的标准版式字体格式。</summary>
      <returns>
            如果启用数学希腊语格式，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.MathematicalGreekProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.MathematicalGreek" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.MathematicalGreek" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.NumeralAlignment">
      <summary>获取或设置一个 <see cref="T:System.Windows.FontNumeralAlignment" /> 枚举值，该值指示使用数字时的宽度对齐方式。</summary>
      <returns>一个 <see cref="T:System.Windows.FontNumeralAlignment" /> 枚举值。默认值为 <see cref="F:System.Windows.FontNumeralAlignment.Normal" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.NumeralAlignmentProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.NumeralAlignment" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.NumeralAlignment" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.NumeralStyle">
      <summary>获取或设置一个 <see cref="T:System.Windows.FontNumeralStyle" /> 枚举值，该值确定用于呈现数字备用字体格式的标志符号集。</summary>
      <returns>一个 <see cref="T:System.Windows.FontNumeralStyle" /> 枚举值。默认值为 <see cref="F:System.Windows.FontNumeralStyle.Normal" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.NumeralStyleProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.NumeralStyle" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.NumeralStyle" /> 附加属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetAnnotationAlternates(System.Windows.DependencyObject,System.Int32)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.AnnotationAlternates" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.AnnotationAlternates" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetCapitals(System.Windows.DependencyObject,System.Windows.FontCapitals)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.Capitals" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.Capitals" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetCapitalSpacing(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.CapitalSpacing" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.CapitalSpacing" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetCaseSensitiveForms(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.CaseSensitiveForms" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.CaseSensitiveForms" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetContextualAlternates(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.ContextualAlternates" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.ContextualAlternates" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetContextualLigatures(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.ContextualLigatures" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.ContextualLigatures" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetContextualSwashes(System.Windows.DependencyObject,System.Int32)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.ContextualSwashes" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.ContextualSwashes" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetDiscretionaryLigatures(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.DiscretionaryLigatures" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.DiscretionaryLigatures" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetEastAsianExpertForms(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.EastAsianExpertForms" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.EastAsianExpertForms" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetEastAsianLanguage(System.Windows.DependencyObject,System.Windows.FontEastAsianLanguage)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.EastAsianLanguage" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.EastAsianLanguage" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetEastAsianWidths(System.Windows.DependencyObject,System.Windows.FontEastAsianWidths)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.EastAsianWidths" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.EastAsianWidths" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetFraction(System.Windows.DependencyObject,System.Windows.FontFraction)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.Fraction" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.Fraction" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetHistoricalForms(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.HistoricalForms" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.HistoricalForms" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetHistoricalLigatures(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.HistoricalLigatures" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.HistoricalLigatures" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetKerning(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.Kerning" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.Kerning" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetMathematicalGreek(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.MathematicalGreek" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.MathematicalGreek" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetNumeralAlignment(System.Windows.DependencyObject,System.Windows.FontNumeralAlignment)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.NumeralAlignment" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.NumeralAlignment" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetNumeralStyle(System.Windows.DependencyObject,System.Windows.FontNumeralStyle)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.NumeralStyle" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.NumeralStyle" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetSlashedZero(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.SlashedZero" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.SlashedZero" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStandardLigatures(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StandardLigatures" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StandardLigatures" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStandardSwashes(System.Windows.DependencyObject,System.Int32)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StandardSwashes" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StandardSwashes" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticAlternates(System.Windows.DependencyObject,System.Int32)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticAlternates" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticAlternates" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet1(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet1" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet1" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet10(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet10" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet10" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet11(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet11" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet11" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet12(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet12" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet12" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet13(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet13" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet13" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet14(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet14" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet14" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet15(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet15" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet15" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet16(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet16" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet16" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet17(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet17" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet17" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet18(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet18" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet18" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet19(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet19" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet19" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet2(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet2" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet2" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet20(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet20" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet20" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet3(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet3" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet3" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet4(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet4" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet4" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet5(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet5" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet5" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet6(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet6" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet6" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet7(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet7" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet7" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet8(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet8" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet8" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetStylisticSet9(System.Windows.DependencyObject,System.Boolean)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.StylisticSet9" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.StylisticSet9" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="M:System.Windows.Documents.Typography.SetVariants(System.Windows.DependencyObject,System.Windows.FontVariants)">
      <summary>为指定的依赖项对象设置 <see cref="P:System.Windows.Documents.Typography.Variants" /> 附加属性的值。</summary>
      <param name="element">要设置其 <see cref="P:System.Windows.Documents.Typography.Variants" /> 属性值的依赖项对象。</param>
      <param name="value">要为属性设置的新值。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="element" /> 为 null 时引发。</exception>
    </member>
    <member name="P:System.Windows.Documents.Typography.SlashedZero">
      <summary>获取或设置一个值，该值指示是否使用斜杠零替换标称零字体格式。</summary>
      <returns>
            如果启用斜杠零格式，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.SlashedZeroProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.SlashedZero" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.SlashedZero" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StandardLigatures">
      <summary>获取或设置一个值，该值指示是否启用标准连字。</summary>
      <returns>
            如果启用了标准连字，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StandardLigaturesProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StandardLigatures" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StandardLigatures" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StandardSwashes">
      <summary>获取或设置一个值，该值指定标准花体格式的索引。</summary>
      <returns>标准花体格式的索引。默认值为 0（零）。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StandardSwashesProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StandardSwashes" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StandardSwashes" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticAlternates">
      <summary>获取或设置一个值，该值指定样式备用项格式的索引。</summary>
      <returns>样式备用项格式索引。默认值为 0（零）。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticAlternatesProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticAlternates" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticAlternates" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet1">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet10">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet10Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet10" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet10" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet11">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet11Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet11" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet11" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet12">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet12Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet12" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet12" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet13">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet13Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet13" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet13" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet14">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet14Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet14" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet14" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet15">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet15Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet15" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet15" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet16">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet16Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet16" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet16" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet17">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet17Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet17" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet17" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet18">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet18Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet18" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet18" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet19">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet19Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet19" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet19" /> 附加属性的标识符。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet1Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet1" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet1" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet2">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet20">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet20Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet20" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet20" /> 附加属性的标识符。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet2Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet2" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet2" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet3">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet3Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet3" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet3" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet4">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet4Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet4" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet4" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet5">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet5Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet5" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet4" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet6">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet6Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet6" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet6" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet7">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet7Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet7" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet7" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet8">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet8Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet8" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet8" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.StylisticSet9">
      <summary>获取或设置一个值，该值指示是否启用字体格式的样式集。</summary>
      <returns>
            如果启用字体格式的样式集，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.StylisticSet9Property">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.StylisticSet9" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.StylisticSet9" /> 附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Documents.Typography.Variants">
      <summary>获取或设置一个 <see cref="T:System.Windows.FontVariants" /> 枚举值，该值指示使用的标准版式格式的变体。</summary>
      <returns>一个 <see cref="T:System.Windows.FontVariants" /> 枚举值。默认值为 <see cref="F:System.Windows.FontVariants.Normal" />。</returns>
    </member>
    <member name="F:System.Windows.Documents.Typography.VariantsProperty">
      <summary>标识 <see cref="P:System.Windows.Documents.Typography.Variants" /> 附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Documents.Typography.Variants" /> 附加属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Documents.Underline">
      <summary>一个内联级别的流内容元素，该元素导致内容以带下划线的文本修饰呈现。</summary>
    </member>
    <member name="M:System.Windows.Documents.Underline.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.Underline" /> 类的新的空实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.Underline.#ctor(System.Windows.Documents.Inline)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Underline" /> 类的一个新实例，将指定的 <see cref="T:System.Windows.Documents.Inline" /> 对象作为新的 <see cref="T:System.Windows.Documents.Underline" /> 的初始内容。</summary>
      <param name="childInline">
        <see cref="T:System.Windows.Documents.Inline" /> 对象，它指定新的 <see cref="T:System.Windows.Documents.Underline" /> 的初始内容。</param>
    </member>
    <member name="M:System.Windows.Documents.Underline.#ctor(System.Windows.Documents.Inline,System.Windows.Documents.TextPointer)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Underline" /> 类的一个新实例，使用指定的 <see cref="T:System.Windows.Documents.Inline" /> 对象作为新 <see cref="T:System.Windows.Documents.Underline" /> 的初始内容，并使用一个 <see cref="T:System.Windows.Documents.TextPointer" /> 指定新 <see cref="T:System.Windows.Documents.Inline" /> 元素的插入位置。</summary>
      <param name="childInline">
        <see cref="T:System.Windows.Documents.Inline" /> 对象，它指定新的 <see cref="T:System.Windows.Documents.Underline" /> 的初始内容。 此参数可以为 null，在这种情况下，不插入任何 <see cref="T:System.Windows.Documents.Inline" />。</param>
      <param name="insertionPosition">一个 <see cref="T:System.Windows.Documents.TextPointer" />，指定创建后要插入 <see cref="T:System.Windows.Documents.Underline" /> 元素的位置；或者为 null，表示不自动插入。</param>
    </member>
    <member name="M:System.Windows.Documents.Underline.#ctor(System.Windows.Documents.TextPointer,System.Windows.Documents.TextPointer)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Underline" /> 类的一个新实例，使用两个 <see cref="T:System.Windows.Documents.TextPointer" /> 对象，以指示该新 <see cref="T:System.Windows.Documents.Underline" /> 所包含的选定内容的开始位置和结束位置。</summary>
      <param name="start">一个 <see cref="T:System.Windows.Documents.TextPointer" />，指示该新 <see cref="T:System.Windows.Documents.Underline" /> 所包含的选定内容的开始位置。</param>
      <param name="end">一个 <see cref="T:System.Windows.Documents.TextPointer" />，指示该新 <see cref="T:System.Windows.Documents.Underline" /> 所包含的选定内容的结束位置。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="start" /> 或 <paramref name="end" /> 为 null 时引发。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="start" /> 和 <paramref name="end" /> 没有解析为可包含在 <see cref="T:System.Windows.Documents.Underline" /> 元素的内容范围时引发，例如，当 <paramref name="start" /> 和 <paramref name="end" /> 指示不同段落中的位置时。</exception>
    </member>
    <member name="T:System.Windows.Documents.ZoomPercentageConverter">
      <summary>实现一个类型转换器，该转换器用于将 <see cref="T:System.Double" />（用作 <see cref="P:System.Windows.Controls.DocumentViewer.Zoom" /> 的值）与其他类型相互转换。</summary>
    </member>
    <member name="M:System.Windows.Documents.ZoomPercentageConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.ZoomPercentageConverter" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.ZoomPercentageConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>将 <see cref="T:System.Double" />（用作 <see cref="P:System.Windows.Controls.DocumentViewer.Zoom" /> 的值）转换为指定类型的对象。</summary>
      <returns>
            当转换器无法生成值时，为 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />；例如，当 <paramref name="value" /> 为 null 或当 <paramref name="targetType" /> 不为 <see cref="T:System.Double" /> 或 <see cref="T:System.String" /> 时。- 或 -指定的类型的新 <see cref="T:System.Object" />。在此类中实现时，它必须为 <see cref="T:System.Double" /> 或 <see cref="T:System.String" />。如果它是字符串，则它将为 <paramref name="culture" /> 设置适当的格式。</returns>
      <param name="value">
        <see cref="P:System.Windows.Controls.DocumentViewer.Zoom" /> 的当前值。</param>
      <param name="targetType">
        <paramref name="value" /> 要转换为的类型。它必须为 <see cref="T:System.Double" /> 或 <see cref="T:System.String" />。请参见备注。</param>
      <param name="parameter">null. 请参见备注。</param>
      <param name="culture">转换期间采用的语言和区域。</param>
    </member>
    <member name="M:System.Windows.Documents.ZoomPercentageConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>将 <see cref="P:System.Windows.Controls.DocumentViewer.Zoom" /> 的先前转换的值返回到可指派给 <see cref="P:System.Windows.Controls.DocumentViewer.Zoom" /> 的 <see cref="T:System.Double" />。</summary>
      <returns>
            当转换器无法生成值时，为 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />；例如，当 <paramref name="value" /> 不是有效的百分比，或当 <paramref name="targetType" /> 不是 <see cref="T:System.Double" /> 或 <see cref="T:System.String" /> 时。- 或 -一个 <see cref="T:System.Double" />，表示 <see cref="T:System.Windows.Controls.DocumentViewer" /> 的缩放百分比。</returns>
      <param name="value">要转换回 <see cref="T:System.Double" /> 的对象。</param>
      <param name="targetType">
        <paramref name="value" /> 的类型。它必须为 <see cref="T:System.Double" /> 或 <see cref="T:System.String" />。请参见备注。</param>
      <param name="parameter">null. 请参见备注。</param>
      <param name="culture">转换期间采用的语言和区域。</param>
    </member>
    <member name="P:System.Windows.Documents.FrameworkTextComposition.CompositionLength">
      <summary>获取当前撰写的长度（以 Unicode 符号为单位）。</summary>
      <returns>当前撰写的长度（以 Unicode 符号为单位）。</returns>
    </member>
    <member name="P:System.Windows.Documents.FrameworkTextComposition.CompositionOffset">
      <summary>获取撰写文本在 <see cref="T:System.Windows.Controls.TextBox" /> 中出现的位置。</summary>
      <returns>撰写文本在 <see cref="T:System.Windows.Controls.TextBox" /> 中出现的位置。</returns>
    </member>
    <member name="P:System.Windows.Documents.FrameworkTextComposition.ResultLength">
      <summary>获取发生 <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> 事件时已完成文本的长度（以 Unicode 符号为单位）。</summary>
      <returns>发生 <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> 事件时已完成文本的长度（以 Unicode 符号为单位）。</returns>
    </member>
    <member name="P:System.Windows.Documents.FrameworkTextComposition.ResultOffset">
      <summary>获取发生 <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> 事件时已完成文本的偏移。</summary>
      <returns>发生 <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> 事件时已完成文本的偏移。</returns>
    </member>
    <member name="M:System.Windows.Documents.Table.BeginInit"></member>
    <member name="M:System.Windows.Documents.Table.EndInit"></member>
    <member name="T:System.Windows.Documents.TextElementEditingBehaviorAttribute">
      <summary>指定 <see cref="T:System.Windows.Controls.RichTextBox" /> 应如何处理自定义文本元素。</summary>
    </member>
    <member name="M:System.Windows.Documents.TextElementEditingBehaviorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.TextElementEditingBehaviorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Windows.Documents.TextElementEditingBehaviorAttribute.IsMergeable">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Windows.Controls.RichTextBox" /> 是否可以合并两个相邻的文本元素。</summary>
      <returns>
            如果 <see cref="T:System.Windows.Controls.RichTextBox" /> 可以合并具有相同属性值的相邻自定义文本元素，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElementEditingBehaviorAttribute.IsTypographicOnly">
      <summary>获取或设置一个值，该值指示是由文本元素基于字符提供格式，还是将格式应用到整个元素。</summary>
      <returns>
            如果应将格式应用到单个的字符，则为 true；如果应将格式应用到整个元素，则为 false。</returns>
    </member>
    <member name="M:System.Windows.Documents.TextRange.Save(System.IO.Stream,System.String,System.Boolean)">
      <summary>将当前所选内容以指定数据格式保存到指定流中，同时选择保留自定义 <see cref="T:System.Windows.Documents.TextElement" /> 对象。</summary>
      <param name="stream">要将当前所选内容保存到的空可写流。</param>
      <param name="dataFormat">要将当前所选内容保存为的数据格式。 当前支持的数据格式是 <see cref="F:System.Windows.DataFormats.Rtf" />、<see cref="F:System.Windows.DataFormats.Text" />、<see cref="F:System.Windows.DataFormats.Xaml" /> 和 <see cref="F:System.Windows.DataFormats.XamlPackage" />。</param>
      <param name="preserveTextElements">
                如果要保留自定义 <see cref="T:System.Windows.Documents.TextElement" /> 对象，则为 true ；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="stream" /> 或 <paramref name="dataFormat" /> 为 null 时发生。</exception>
      <exception cref="T:System.ArgumentException">当不支持指定数据格式时发生。 如果从 <paramref name="stream" /> 加载的内容与指定数据格式不匹配，也可能引发。</exception>
    </member>
    <member name="T:System.Windows.Documents.DocumentStructures.BlockElement">
      <summary>不要使用。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.BlockElement.#ctor">
      <summary>不要使用。 </summary>
    </member>
    <member name="T:System.Windows.Documents.DocumentStructures.FigureStructure">
      <summary>表示文档中的绘图、图表或关系图。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.FigureStructure.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.DocumentStructures.FigureStructure" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.FigureStructure.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。</summary>
      <param name="value">要添加的子 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是可作为此类的子级的类型之一。请参见备注。</exception>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.FigureStructure.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。</summary>
      <param name="text"></param>
    </member>
    <member name="T:System.Windows.Documents.DocumentStructures.ListItemStructure">
      <summary>表示列表或大纲中的项。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.ListItemStructure.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.DocumentStructures.ListItemStructure" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Documents.DocumentStructures.ListItemStructure.Marker">
      <summary>获取或设置当文档的格式标记中显示列表项时列表项的数字、字符或项目符号的名称。</summary>
      <returns>标记列表项的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.ListItemStructure.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="value">已添加的子 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是可作为此类的子级的类型之一。请参见备注。</exception>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.ListItemStructure.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="text"></param>
    </member>
    <member name="T:System.Windows.Documents.DocumentStructures.ListStructure">
      <summary>表示文档中项的列表。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.ListStructure.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.DocumentStructures.ListStructure" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.ListStructure.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。</summary>
      <param name="value">已添加的子 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是可作为此类的子级的类型之一。请参见备注。</exception>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.ListStructure.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。</summary>
      <param name="text"></param>
    </member>
    <member name="T:System.Windows.Documents.DocumentStructures.NamedElement">
      <summary>标识 <see cref="T:System.Windows.Documents.FixedPage" /> 下的元素层次结构中的元素。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.NamedElement.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.DocumentStructures.NamedElement" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Documents.DocumentStructures.NamedElement.NameReference">
      <summary>获取或设置为 <see cref="T:System.Windows.Documents.DocumentStructures.NamedElement" /> 父级提供内容的 <see cref="T:System.Windows.Documents.FixedPage" /> 标记层次结构中的元素的名称。</summary>
      <returns>元素的名称。</returns>
    </member>
    <member name="T:System.Windows.Documents.DocumentStructures.ParagraphStructure">
      <summary>表示文档中的段落。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.ParagraphStructure.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.DocumentStructures.ParagraphStructure" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.ParagraphStructure.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。</summary>
      <param name="value">已添加的子 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是可作为此类的子级的类型之一。请参见备注。</exception>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.ParagraphStructure.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。</summary>
      <param name="text"></param>
    </member>
    <member name="T:System.Windows.Documents.DocumentStructures.SectionStructure">
      <summary>表示文档中的一部分内容。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.SectionStructure.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.DocumentStructures.SectionStructure" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.SectionStructure.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.SectionStructure.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="text"></param>
    </member>
    <member name="T:System.Windows.Documents.DocumentStructures.SemanticBasicElement">
      <summary>不要使用。 </summary>
    </member>
    <member name="T:System.Windows.Documents.DocumentStructures.StoryBreak">
      <summary>标识由一个或多个 <see cref="T:System.Windows.Documents.DocumentStructures.StoryFragment" /> 元素组成的文章的开头或结尾。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.StoryBreak.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.DocumentStructures.StoryBreak" /> 类的一个新实例。</summary>
    </member>
    <member name="T:System.Windows.Documents.DocumentStructures.StoryFragment">
      <summary>表示 XPS 文档中的整篇文章或其中一部分。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.StoryFragment.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.DocumentStructures.StoryFragment" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Documents.DocumentStructures.StoryFragment.FragmentName">
      <summary>获取或设置文章段落的名称。</summary>
      <returns>表示此段落名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Windows.Documents.DocumentStructures.StoryFragment.FragmentType">
      <summary>获取或设置段落的类型。</summary>
      <returns>表示段落类型的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Windows.Documents.DocumentStructures.StoryFragment.StoryName">
      <summary>获取或设置文章的名称。</summary>
      <returns>表示文章名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.StoryFragment.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。</summary>
      <param name="value">已添加的子 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是可作为此类的子级的类型之一。请参见备注。</exception>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.StoryFragment.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。</summary>
      <param name="text"></param>
    </member>
    <member name="T:System.Windows.Documents.DocumentStructures.StoryFragments">
      <summary>表示一组元素，其中包含一个或多个 <see cref="T:System.Windows.Documents.DocumentStructures.StoryFragment" /> 元素。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.StoryFragments.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.DocumentStructures.StoryFragments" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.StoryFragments.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="value">已添加的子 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.StoryFragments.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="text"></param>
    </member>
    <member name="T:System.Windows.Documents.DocumentStructures.TableCellStructure">
      <summary>表示表中的单元格。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.TableCellStructure.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.DocumentStructures.TableCellStructure" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Documents.DocumentStructures.TableCellStructure.ColumnSpan">
      <summary>获取或设置单元格跨越的列数。</summary>
      <returns>单元格跨越的列数。默认值为 1。</returns>
    </member>
    <member name="P:System.Windows.Documents.DocumentStructures.TableCellStructure.RowSpan">
      <summary>获取或设置单元格跨越的行数。</summary>
      <returns>单元格跨越的行数。默认值为 1。</returns>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.TableCellStructure.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。</summary>
      <param name="value">已添加的子 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是可作为此类的子级的类型之一。请参见备注。</exception>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.TableCellStructure.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。</summary>
      <param name="text"></param>
    </member>
    <member name="T:System.Windows.Documents.DocumentStructures.TableRowGroupStructure">
      <summary>表示表中的一行或多行的集合。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.TableRowGroupStructure.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.DocumentStructures.TableRowGroupStructure" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.TableRowGroupStructure.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。</summary>
      <param name="value">已添加的子 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是可作为此类的子级的类型之一。请参见备注。</exception>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.TableRowGroupStructure.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。</summary>
      <param name="text"></param>
    </member>
    <member name="T:System.Windows.Documents.DocumentStructures.TableRowStructure">
      <summary>表示表中的一个或多个单元格的行。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.TableRowStructure.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.DocumentStructures.TableRowStructure" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.TableRowStructure.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。</summary>
      <param name="value">已添加的子 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是可作为此类的子级的类型之一。请参见备注。</exception>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.TableRowStructure.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。</summary>
      <param name="text"></param>
    </member>
    <member name="T:System.Windows.Documents.DocumentStructures.TableStructure">
      <summary>表示文档中的表。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.TableStructure.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.DocumentStructures.TableStructure" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.TableStructure.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。</summary>
      <param name="value">已添加的子 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是可作为此类的子级的类型之一。请参见备注。</exception>
    </member>
    <member name="M:System.Windows.Documents.DocumentStructures.TableStructure.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>此成员支持 Microsoft .NET Framework基础结构，不应在代码中直接使用。</summary>
      <param name="text"></param>
    </member>
    <member name="T:System.Windows.Documents.Serialization.ISerializerFactory">
      <summary>提供一种方法，用于创建可将 Windows Presentation Foundation (WPF) 应用程序内容的任何部分序列化为制造商专用格式的软件组件。</summary>
    </member>
    <member name="M:System.Windows.Documents.Serialization.ISerializerFactory.CreateSerializerWriter(System.IO.Stream)">
      <summary>为指定的 <see cref="T:System.IO.Stream" /> 初始化从抽象 <see cref="T:System.Windows.Documents.Serialization.SerializerWriter" /> 类派生的对象。</summary>
      <returns>一个派生自 <see cref="T:System.Windows.Documents.Serialization.SerializerWriter" /> 的类的对象。</returns>
      <param name="stream">返回的对象要写入的 <see cref="T:System.IO.Stream" />。</param>
    </member>
    <member name="P:System.Windows.Documents.Serialization.ISerializerFactory.DefaultFileExtension">
      <summary>获取制造商专用格式的文件的默认扩展名。</summary>
      <returns>表示专用格式的默认文件扩展名的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Windows.Documents.Serialization.ISerializerFactory.DisplayName">
      <summary>获取制造商的序列化组件的公共名称。</summary>
      <returns>表示序列化组件的公共名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Windows.Documents.Serialization.ISerializerFactory.ManufacturerName">
      <summary>获取序列化组件制造商的名称。</summary>
      <returns>表示制造商的名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Windows.Documents.Serialization.ISerializerFactory.ManufacturerWebsite">
      <summary>获取序列化组件制造商的 Web 地址。</summary>
      <returns>表示制造商的网站的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.Windows.Documents.Serialization.SerializerDescriptor">
      <summary>提供有关已安装的插件序列化程序的信息。</summary>
    </member>
    <member name="P:System.Windows.Documents.Serialization.SerializerDescriptor.AssemblyName">
      <summary>获取包含序列化程序的程序集的名称。</summary>
      <returns>包含插件序列化程序的程序集（通常为 DLL）的名称。</returns>
    </member>
    <member name="P:System.Windows.Documents.Serialization.SerializerDescriptor.AssemblyPath">
      <summary>获取包含序列化程序的程序集文件的路径。</summary>
      <returns>包含插件序列化程序的程序集文件的路径。</returns>
    </member>
    <member name="P:System.Windows.Documents.Serialization.SerializerDescriptor.AssemblyVersion">
      <summary>获取包含序列化程序的程序集的版本。</summary>
      <returns>包含插件序列化程序的程序集的版本。</returns>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerDescriptor.CreateFromFactoryInstance(System.Windows.Documents.Serialization.ISerializerFactory)">
      <summary>通过给定的 <see cref="T:System.Windows.Documents.Serialization.ISerializerFactory" /> 实现创建新的 <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" />。</summary>
      <returns>新的 <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" />，其属性使用给定的 <see cref="T:System.Windows.Documents.Serialization.ISerializerFactory" /> 实现中的值进行初始化。</returns>
      <param name="factoryInstance">新的 <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" /> 的数据源。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="factoryInstance" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="factoryInstance" /> 的以下属性中的一个或多个为 Null：<see cref="P:System.Windows.Documents.Serialization.SerializerDescriptor.DisplayName" />、<see cref="P:System.Windows.Documents.Serialization.SerializerDescriptor.ManufacturerName" />、<see cref="P:System.Windows.Documents.Serialization.SerializerDescriptor.ManufacturerWebsite" /> 和 <see cref="P:System.Windows.Documents.Serialization.SerializerDescriptor.DefaultFileExtension" /></exception>
    </member>
    <member name="P:System.Windows.Documents.Serialization.SerializerDescriptor.DefaultFileExtension">
      <summary>获取与序列化程序输出的文件关联的默认扩展名。</summary>
      <returns>与序列化程序输出的文件关联的默认扩展名。</returns>
    </member>
    <member name="P:System.Windows.Documents.Serialization.SerializerDescriptor.DisplayName">
      <summary>获取序列化程序的公共显示名称。</summary>
      <returns>序列化程序的公共显示名称。</returns>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerDescriptor.Equals(System.Object)">
      <summary>测试两个 <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" /> 对象是否相等。</summary>
      <returns>
            如果两个值相等，则为 true；否则为 false。</returns>
      <param name="obj">要与此 <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" /> 进行比较的对象。</param>
    </member>
    <member name="P:System.Windows.Documents.Serialization.SerializerDescriptor.FactoryInterfaceName">
      <summary>获取实现序列化程序的 <see cref="T:System.Windows.Documents.Serialization.ISerializerFactory" /> 派生类的名称。</summary>
      <returns>实现序列化程序的 <see cref="T:System.Windows.Documents.Serialization.ISerializerFactory" /> 派生类的名称。</returns>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerDescriptor.GetHashCode">
      <summary>获取序列化程序的唯一哈希代码值。</summary>
      <returns>序列化程序的唯一哈希代码值。</returns>
    </member>
    <member name="P:System.Windows.Documents.Serialization.SerializerDescriptor.IsLoadable">
      <summary>获取一个值，该值指示是否可以使用当前安装的 Microsoft .NET Framework 的版本加载序列化程序。</summary>
      <returns>
            如果可以加载序列化程序程序集，则为 true；否则为 false。默认为 false。</returns>
    </member>
    <member name="P:System.Windows.Documents.Serialization.SerializerDescriptor.ManufacturerName">
      <summary>获取开发序列化程序的公司的名称。</summary>
      <returns>开发插件序列化程序的公司的名称。</returns>
    </member>
    <member name="P:System.Windows.Documents.Serialization.SerializerDescriptor.ManufacturerWebsite">
      <summary>获取开发序列化程序的公司的 Web 地址。</summary>
      <returns>开发序列化程序的公司的 Web 地址。</returns>
    </member>
    <member name="P:System.Windows.Documents.Serialization.SerializerDescriptor.WinFXVersion">
      <summary>获取序列化程序所需的 Microsoft .NET Framework 的版本。</summary>
      <returns>插件序列化程序所需的 Microsoft .NET Framework 的版本。</returns>
    </member>
    <member name="T:System.Windows.Documents.Serialization.SerializerProvider">
      <summary>使用 <see cref="T:System.Windows.Documents.Serialization.ISerializerFactory" /> 和 <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" /> 管理具有自己的专用序列化格式的制造商创建的序列化插件。</summary>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerProvider.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.Serialization.SerializerProvider" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerProvider.CreateSerializerWriter(System.Windows.Documents.Serialization.SerializerDescriptor,System.IO.Stream)">
      <summary>为将使用指定说明符的指定的 <see cref="T:System.IO.Stream" /> 初始化从抽象 <see cref="T:System.Windows.Documents.Serialization.SerializerWriter" /> 类派生的对象。</summary>
      <returns>一个派生自 <see cref="T:System.Windows.Documents.Serialization.SerializerWriter" /> 的类的对象。</returns>
      <param name="serializerDescriptor">包含 <see cref="T:System.Windows.Documents.Serialization.SerializerWriter" /> 的序列化信息的 <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" />。</param>
      <param name="stream">返回的对象要写入的 <see cref="T:System.IO.Stream" />。</param>
      <exception cref="T:System.ArgumentNullException">其中一个参数为 Null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="serializerDescriptor" /> 指定版本错误。- 或 -它没有注册。- 或 -找不到程序集文件。- 或 -无法加载程序集。</exception>
    </member>
    <member name="P:System.Windows.Documents.Serialization.SerializerProvider.InstalledSerializers">
      <summary>获取安装的插件序列化程序的集合。</summary>
      <returns>
        <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 已注册。</returns>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerProvider.RegisterSerializer(System.Windows.Documents.Serialization.SerializerDescriptor,System.Boolean)">
      <summary>注册序列化程序插件。</summary>
      <param name="serializerDescriptor">用于插件的 <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" />。</param>
      <param name="overwrite">
                如果覆盖同一插件的现有注册，则为 true，否则为 false。请参见备注。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializerDescriptor" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="overwrite" /> 为 false 并且插件已注册。</exception>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerProvider.UnregisterSerializer(System.Windows.Documents.Serialization.SerializerDescriptor)">
      <summary>从注册表中删除序列化插件。</summary>
      <param name="serializerDescriptor">用于插件的 <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializerDescriptor" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">未注册插件。请参见备注。</exception>
    </member>
    <member name="T:System.Windows.Documents.Serialization.SerializerWriter">
      <summary>定义实现插件文档输出序列化程序所需的抽象方法和事件。</summary>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.Serialization.SerializerWriter" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.CancelAsync">
      <summary>当在派生类中重写时，取消异步写操作。</summary>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.CreateVisualsCollator">
      <summary>在派生类中重写时，返回 <see cref="T:System.Windows.Documents.Serialization.SerializerWriterCollator" />，它写入排序的 <see cref="T:System.Windows.Media.Visual" /> 元素。</summary>
      <returns>一个 <see cref="T:System.Windows.Documents.Serialization.SerializerWriterCollator" />，它将排序的 <see cref="T:System.Windows.Media.Visual" /> 元素写入文档输出序列化 <see cref="T:System.IO.Stream" /> 中。</returns>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.CreateVisualsCollator(System.Printing.PrintTicket,System.Printing.PrintTicket)">
      <summary>在派生类中重写时，返回 <see cref="T:System.Windows.Documents.Serialization.SerializerWriterCollator" />，它将排序的 <see cref="T:System.Windows.Media.Visual" /> 元素与给定打印票证写入到一起。</summary>
      <returns>一个 <see cref="T:System.Windows.Documents.Serialization.SerializerWriterCollator" />，它将排序的 <see cref="T:System.Windows.Media.Visual" /> 元素写入文档输出序列化 <see cref="T:System.IO.Stream" /> 中。</returns>
      <param name="documentSequencePT">
        <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> 内容的默认打印首选项。</param>
      <param name="documentPT">
        <see cref="T:System.Windows.Documents.FixedDocument" /> 内容的默认打印首选项。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.Write(System.Windows.Documents.DocumentPaginator)">
      <summary>在派生类中重写时，以同步方式将给定的 <see cref="T:System.Windows.Documents.DocumentPaginator" /> 的内容写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="documentPaginator">定义要写入序列化 <see cref="T:System.IO.Stream" /> 中的内容的文档分页程序。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.Write(System.Windows.Documents.DocumentPaginator,System.Printing.PrintTicket)">
      <summary>在派生类中重写时，以同步方式将已分页的内容与关联的 <see cref="T:System.Printing.PrintTicket" /> 一起写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="documentPaginator">定义要写入序列化<see cref="T:System.IO.Stream" /> 中的内容的文档分页程序。</param>
      <param name="printTicket">
        <paramref name="documentPaginator" /> 内容的默认打印首选项。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.Write(System.Windows.Documents.FixedDocument)">
      <summary>在派生类中重写时，以同步方式将给定的 <see cref="T:System.Windows.Documents.FixedDocument" /> 写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="fixedDocument">要写入序列化 <see cref="T:System.IO.Stream" /> 中的文档。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.Write(System.Windows.Documents.FixedDocument,System.Printing.PrintTicket)">
      <summary>在派生类中重写时，以同步方式将给定的 <see cref="T:System.Windows.Documents.FixedDocument" /> 与关联的 <see cref="T:System.Printing.PrintTicket" /> 一起写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="fixedDocument">要写入序列化 <see cref="T:System.IO.Stream" /> 中的文档。</param>
      <param name="printTicket">
        <paramref name="fixedDocument" /> 内容的默认打印首选项。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.Write(System.Windows.Documents.FixedDocumentSequence)">
      <summary>在派生类中重写时，以同步方式将给定的 <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> 写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="fixedDocumentSequence">定义要写入序列化 <see cref="T:System.IO.Stream" /> 中的内容的文档序列。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.Write(System.Windows.Documents.FixedDocumentSequence,System.Printing.PrintTicket)">
      <summary>在派生类中重写时，以同步方式将给定的 <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> 与关联的 <see cref="T:System.Printing.PrintTicket" /> 一起写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="fixedDocumentSequence">定义要写入序列化 <see cref="T:System.IO.Stream" /> 中的内容的文档序列。</param>
      <param name="printTicket">
        <paramref name="fixedDocumentSequence" /> 内容的默认打印首选项。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.Write(System.Windows.Documents.FixedPage)">
      <summary>在派生类中重写时，以同步方式将给定的 <see cref="T:System.Windows.Documents.FixedPage" /> 写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="fixedPage">要写入序列化 <see cref="T:System.IO.Stream" /> 中的页。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.Write(System.Windows.Documents.FixedPage,System.Printing.PrintTicket)">
      <summary>在派生类中重写时，以同步方式将给定的 <see cref="T:System.Windows.Documents.FixedPage" /> 与关联的 <see cref="T:System.Printing.PrintTicket" /> 一起写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="fixedPage">要写入序列化 <see cref="T:System.IO.Stream" /> 中的页。</param>
      <param name="printTicket">
        <paramref name="fixedPage" /> 内容的默认打印首选项。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.Write(System.Windows.Media.Visual)">
      <summary>在派生类中重写时，以同步方式将给定的 <see cref="T:System.Windows.Media.Visual" /> 元素写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="visual">要写入序列化 <see cref="T:System.IO.Stream" /> 中的 <see cref="T:System.Windows.Media.Visual" /> 元素。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.Write(System.Windows.Media.Visual,System.Printing.PrintTicket)">
      <summary>在派生类中重写时，以同步方式将给定的 <see cref="T:System.Windows.Media.Visual" /> 元素与关联的 <see cref="T:System.Printing.PrintTicket" /> 一起写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="visual">要写入序列化 <see cref="T:System.IO.Stream" /> 中的 <see cref="T:System.Windows.Media.Visual" /> 元素。</param>
      <param name="printTicket">
        <paramref name="visual" /> 元素的默认打印首选项。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Documents.DocumentPaginator)">
      <summary>在派生类中重写时，以异步方式将给定 <see cref="T:System.Windows.Documents.DocumentPaginator" /> 的内容写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="documentPaginator">定义要写入序列化 <see cref="T:System.IO.Stream" /> 中的内容的文档分页程序。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Documents.DocumentPaginator,System.Object)">
      <summary>在派生类中重写时，以异步方式将给定 <see cref="T:System.Windows.Documents.DocumentPaginator" /> 的内容写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="documentPaginator">定义要写入序列化 <see cref="T:System.IO.Stream" /> 中的内容的文档分页程序。</param>
      <param name="userState">用于标识异步写操作的调用方指定的对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Documents.DocumentPaginator,System.Printing.PrintTicket)">
      <summary>在派生类中重写时，以异步方式将给定 <see cref="T:System.Windows.Documents.DocumentPaginator" /> 的内容写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="documentPaginator">定义要写入序列化 <see cref="T:System.IO.Stream" /> 中的内容的文档分页程序。</param>
      <param name="printTicket">
        <paramref name="documentPaginator" /> 内容的默认打印首选项。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Documents.DocumentPaginator,System.Printing.PrintTicket,System.Object)">
      <summary>在派生类中重写时，以异步方式将已分页的内容与关联的 <see cref="T:System.Printing.PrintTicket" /> 一起写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="documentPaginator">定义要写入序列化 <see cref="T:System.IO.Stream" /> 中的内容的文档分页程序。</param>
      <param name="printTicket">
        <paramref name="documentPaginator" /> 内容的默认打印首选项。</param>
      <param name="userState">用于标识异步写操作的调用方指定的对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Documents.FixedDocument)">
      <summary>在派生类中重写时，以异步方式将给定的 <see cref="T:System.Windows.Documents.FixedDocument" /> 写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="fixedDocument">要写入序列化 <see cref="T:System.IO.Stream" /> 中的文档。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Documents.FixedDocument,System.Object)">
      <summary>在派生类中重写时，以异步方式将给定的 <see cref="T:System.Windows.Documents.FixedDocument" /> 写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="fixedDocument">要写入序列化 <see cref="T:System.IO.Stream" /> 中的文档。</param>
      <param name="userState">用于标识异步写操作的调用方指定的对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Documents.FixedDocument,System.Printing.PrintTicket)">
      <summary>在派生类中重写时，以异步方式将给定的 <see cref="T:System.Windows.Documents.FixedDocument" /> 与关联的 <see cref="T:System.Printing.PrintTicket" /> 一起写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="fixedDocument">要写入序列化 <see cref="T:System.IO.Stream" /> 中的文档。</param>
      <param name="printTicket">
        <paramref name="fixedDocument" /> 内容的默认打印首选项。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Documents.FixedDocument,System.Printing.PrintTicket,System.Object)">
      <summary>在派生类中重写时，以异步方式将给定的 <see cref="T:System.Windows.Documents.FixedDocument" /> 与关联的 <see cref="T:System.Printing.PrintTicket" /> 一起写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="fixedDocument">要写入序列化 <see cref="T:System.IO.Stream" /> 中的文档。</param>
      <param name="printTicket">
        <paramref name="fixedDocument" /> 内容的默认打印首选项。</param>
      <param name="userState">用于标识异步写操作的调用方指定的对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Documents.FixedDocumentSequence)">
      <summary>在派生类中重写时，以异步方式将给定的 <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> 写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="fixedDocumentSequence">定义要写入序列化 <see cref="T:System.IO.Stream" /> 中的内容的文档序列。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Documents.FixedDocumentSequence,System.Object)">
      <summary>在派生类中重写时，以异步方式将给定的 <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> 写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="fixedDocumentSequence">定义要写入序列化 <see cref="T:System.IO.Stream" /> 中的内容的文档序列。</param>
      <param name="userState">用于标识异步写操作的调用方指定的对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Documents.FixedDocumentSequence,System.Printing.PrintTicket)">
      <summary>在派生类中重写时，以异步方式将给定的 <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> 与关联的 <see cref="T:System.Printing.PrintTicket" /> 一起写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="fixedDocumentSequence">定义要写入序列化 <see cref="T:System.IO.Stream" /> 中的内容的文档序列。</param>
      <param name="printTicket">
        <paramref name="fixedDocumentSequence" /> 内容的默认打印首选项。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Documents.FixedDocumentSequence,System.Printing.PrintTicket,System.Object)">
      <summary>在派生类中重写时，以异步方式将给定的 <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> 与关联的 <see cref="T:System.Printing.PrintTicket" /> 一起写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="fixedDocumentSequence">定义要写入序列化 <see cref="T:System.IO.Stream" /> 中的内容的文档序列。</param>
      <param name="printTicket">
        <paramref name="fixedDocumentSequence" /> 内容的默认打印首选项。</param>
      <param name="userState">用于标识异步写操作的调用方指定的对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Documents.FixedPage)">
      <summary>在派生类中重写时，以异步方式将给定的 <see cref="T:System.Windows.Documents.FixedPage" /> 写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="fixedPage">要写入序列化 <see cref="T:System.IO.Stream" /> 中的页。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Documents.FixedPage,System.Object)">
      <summary>在派生类中重写时，以异步方式将给定的 <see cref="T:System.Windows.Documents.FixedPage" /> 写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="fixedPage">要写入序列化 <see cref="T:System.IO.Stream" /> 中的页。</param>
      <param name="userState">用于标识异步写操作的调用方指定的对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Documents.FixedPage,System.Printing.PrintTicket)">
      <summary>在派生类中重写时，以异步方式将给定的 <see cref="T:System.Windows.Documents.FixedPage" /> 与关联的 <see cref="T:System.Printing.PrintTicket" /> 一起写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="fixedPage">要写入序列化 <see cref="T:System.IO.Stream" /> 中的页。</param>
      <param name="printTicket">
        <paramref name="fixedPage" /> 内容的默认打印首选项。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Documents.FixedPage,System.Printing.PrintTicket,System.Object)">
      <summary>在派生类中重写时，以异步方式将给定的 <see cref="T:System.Windows.Documents.FixedPage" /> 与关联的 <see cref="T:System.Printing.PrintTicket" /> 一起写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="fixedPage">要写入序列化 <see cref="T:System.IO.Stream" /> 中的页。</param>
      <param name="printTicket">
        <paramref name="fixedPage" /> 内容的默认打印首选项。</param>
      <param name="userState">用于标识异步写操作的调用方指定的对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Media.Visual)">
      <summary>在派生类中重写时，以异步方式将给定的 <see cref="T:System.Windows.Media.Visual" /> 元素写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="visual">要写入序列化 <see cref="T:System.IO.Stream" /> 中的 <see cref="T:System.Windows.Media.Visual" /> 元素。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Media.Visual,System.Object)">
      <summary>在派生类中重写时，以异步方式将给定的 <see cref="T:System.Windows.Media.Visual" /> 元素写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="visual">要写入序列化 <see cref="T:System.IO.Stream" /> 中的 <see cref="T:System.Windows.Media.Visual" /> 元素。</param>
      <param name="userState">用于标识异步写操作的调用方指定的对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Media.Visual,System.Printing.PrintTicket)">
      <summary>在派生类中重写时，以异步方式将给定的 <see cref="T:System.Windows.Media.Visual" /> 元素与关联的 <see cref="T:System.Printing.PrintTicket" /> 一起写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="visual">要写入序列化 <see cref="T:System.IO.Stream" /> 中的 <see cref="T:System.Windows.Media.Visual" /> 元素。</param>
      <param name="printTicket">
        <paramref name="visual" /> 元素的默认打印首选项。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync(System.Windows.Media.Visual,System.Printing.PrintTicket,System.Object)">
      <summary>在派生类中重写时，以异步方式将给定的 <see cref="T:System.Windows.Media.Visual" /> 元素与关联的 <see cref="T:System.Printing.PrintTicket" /> 以及标识符一起写入序列化 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="visual">要写入序列化 <see cref="T:System.IO.Stream" /> 中的 <see cref="T:System.Windows.Media.Visual" /> 元素。</param>
      <param name="printTicket">
        <paramref name="visual" /> 元素的默认打印首选项。</param>
      <param name="userState">用于标识异步写操作的调用方指定的对象。</param>
    </member>
    <member name="E:System.Windows.Documents.Serialization.SerializerWriter.WritingCancelled">
      <summary>在派生类中重写时，当执行 <see cref="M:System.Windows.Documents.Serialization.SerializerWriter.CancelAsync" /> 操作时发生。</summary>
    </member>
    <member name="E:System.Windows.Documents.Serialization.SerializerWriter.WritingCompleted">
      <summary>在派生类中重写时，当写操作完成时发生。</summary>
    </member>
    <member name="E:System.Windows.Documents.Serialization.SerializerWriter.WritingPrintTicketRequired">
      <summary>在派生类中重写时，恰好在通过 <see cref="Overload:System.Windows.Documents.Serialization.SerializerWriter.Write" /> 或 <see cref="Overload:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync" /> 方法将 <see cref="T:System.Printing.PrintTicket" /> 添加到流之前发生。</summary>
    </member>
    <member name="E:System.Windows.Documents.Serialization.SerializerWriter.WritingProgressChanged">
      <summary>在派生类中重写时，当 <see cref="T:System.Windows.Documents.Serialization.SerializerWriter" /> 更新其进度时发生。</summary>
    </member>
    <member name="T:System.Windows.Documents.Serialization.SerializerWriterCollator">
      <summary>定义实现插件文档序列化 <see cref="T:System.Windows.Media.Visual" /> 排序程序所需的抽象方法。</summary>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriterCollator.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Documents.Serialization.SerializerWriterCollator" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriterCollator.BeginBatchWrite">
      <summary>当在派生类中重写时，启动批处理写操作。</summary>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriterCollator.Cancel">
      <summary>在派生类中重写时，取消同步 <see cref="Overload:System.Windows.Documents.Serialization.SerializerWriterCollator.Write" /> 操作。</summary>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriterCollator.CancelAsync">
      <summary>在派生类中重写时，取消异步 <see cref="Overload:System.Windows.Documents.Serialization.SerializerWriterCollator.WriteAsync" /> 操作。</summary>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriterCollator.EndBatchWrite">
      <summary>在派生类中重写时，完成批处理写操作。</summary>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriterCollator.Write(System.Windows.Media.Visual)">
      <summary>在派生类中重写时，将给定的 <see cref="T:System.Windows.Media.Visual" /> 元素同步写入序列化流。</summary>
      <param name="visual">要写入序列化 <see cref="T:System.IO.Stream" /> 的可视元素。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriterCollator.Write(System.Windows.Media.Visual,System.Printing.PrintTicket)">
      <summary>在派生类中重写时，将给定的 <see cref="T:System.Windows.Media.Visual" /> 元素与关联的打印票证一起同步写入序列化流。</summary>
      <param name="visual">写入流的 <see cref="T:System.Windows.Media.Visual" />。</param>
      <param name="printTicket">为打印材料的方式指定首选项的对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriterCollator.WriteAsync(System.Windows.Media.Visual)">
      <summary>在派生类中重写时，将给定的 <see cref="T:System.Windows.Media.Visual" /> 元素异步写入序列化流。</summary>
      <param name="visual">要写入序列化 <see cref="T:System.IO.Stream" /> 的可视元素。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriterCollator.WriteAsync(System.Windows.Media.Visual,System.Object)">
      <summary>在派生类中重写时，将带有指定事件标识符的给定的 <see cref="T:System.Windows.Media.Visual" /> 元素异步写入序列化流。</summary>
      <param name="visual">要写入序列化 <see cref="T:System.IO.Stream" /> 的可视元素。</param>
      <param name="userState">用于标识异步写操作的调用方指定的对象。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriterCollator.WriteAsync(System.Windows.Media.Visual,System.Printing.PrintTicket)">
      <summary>在派生类中重写时，将给定的 <see cref="T:System.Windows.Media.Visual" /> 元素与关联的打印票证一起异步写入序列化流。</summary>
      <param name="visual">要写入序列化 <see cref="T:System.IO.Stream" /> 的可视元素。</param>
      <param name="printTicket">
        <paramref name="visual" /> 元素的默认打印首选项。</param>
    </member>
    <member name="M:System.Windows.Documents.Serialization.SerializerWriterCollator.WriteAsync(System.Windows.Media.Visual,System.Printing.PrintTicket,System.Object)">
      <summary>在派生类中重写时，将给定的 <see cref="T:System.Windows.Media.Visual" /> 元素与关联的打印票证和标识符一起异步写入序列化流。</summary>
      <param name="visual">要写入序列化 <see cref="T:System.IO.Stream" /> 的可视元素。</param>
      <param name="printTicket">
        <paramref name="visual" /> 元素的默认打印首选项。</param>
      <param name="userState">用于标识异步写操作的调用方指定的对象。</param>
    </member>
    <member name="T:System.Windows.Documents.Serialization.WritingCancelledEventArgs">
      <summary>为 <see cref="E:System.Windows.Xps.XpsDocumentWriter.WritingCancelled" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.Windows.Documents.Serialization.WritingCancelledEventArgs.#ctor(System.Exception)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Serialization.WritingCancelledEventArgs" /> 类的一个新实例。</summary>
      <param name="exception">取消写操作的异常。</param>
    </member>
    <member name="P:System.Windows.Documents.Serialization.WritingCancelledEventArgs.Error">
      <summary>获取取消写操作的异常。</summary>
      <returns>取消写操作的异常。</returns>
    </member>
    <member name="T:System.Windows.Documents.Serialization.WritingCancelledEventHandler">
      <summary>表示将处理 <see cref="E:System.Windows.Xps.XpsDocumentWriter.WritingCancelled" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Documents.Serialization.WritingCompletedEventArgs">
      <summary>为 <see cref="E:System.Windows.Documents.Serialization.SerializerWriter.WritingCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.Windows.Documents.Serialization.WritingCompletedEventArgs.#ctor(System.Boolean,System.Object,System.Exception)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Serialization.WritingCompletedEventArgs" /> 类的一个新实例。</summary>
      <param name="cancelled"></param>
      <param name="state">传递给 <see cref="Overload:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync" /> 方法的、用户提供的状态对象。</param>
      <param name="exception">在写操作过程中发生的错误，或如果没有错误，则为 null。</param>
    </member>
    <member name="T:System.Windows.Documents.Serialization.WritingCompletedEventHandler">
      <summary>表示处理 <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> 类的 <see cref="E:System.Windows.Xps.XpsDocumentWriter.WritingCompleted" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs">
      <summary>为 <see cref="E:System.Windows.Documents.Serialization.SerializerWriter.WritingPrintTicketRequired" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs.#ctor(System.Windows.Xps.Serialization.PrintTicketLevel,System.Int32)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs" /> 类的一个新实例。</summary>
      <param name="printTicketLevel">将 <see cref="P:System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs.CurrentPrintTicket" /> 的范围指定为页、文档或文档序列的枚举值。</param>
      <param name="sequence">与 <see cref="P:System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs.CurrentPrintTicket" /> 关联的页数或文档数，取决于 <paramref name="printTicketLevel" /> 定义的范围。</param>
    </member>
    <member name="P:System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs.CurrentPrintTicket">
      <summary>获取或设置打印文档时使用的默认打印机设置。</summary>
      <returns>打印文档时使用的默认打印机设置。</returns>
    </member>
    <member name="P:System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs.CurrentPrintTicketLevel">
      <summary>获取一个值，该值指示 <see cref="E:System.Windows.Documents.Serialization.SerializerWriter.WritingPrintTicketRequired" /> 事件的范围。</summary>
      <returns>指定关于文档序列、单个文档或单页的 <see cref="E:System.Windows.Documents.Serialization.SerializerWriter.WritingPrintTicketRequired" /> 事件的范围的枚举。</returns>
    </member>
    <member name="P:System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs.Sequence">
      <summary>获取使用 <see cref="P:System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs.CurrentPrintTicket" /> 输出的文档数或页数。</summary>
      <returns>使用 <see cref="P:System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs.CurrentPrintTicket" /> 输出的文档数或页数。</returns>
    </member>
    <member name="T:System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventHandler">
      <summary>表示处理 <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> 的 <see cref="E:System.Windows.Xps.XpsDocumentWriter.WritingPrintTicketRequired" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Documents.Serialization.WritingProgressChangedEventArgs">
      <summary>为 <see cref="E:System.Windows.Xps.XpsDocumentWriter.WritingProgressChanged" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.Windows.Documents.Serialization.WritingProgressChangedEventArgs.#ctor(System.Windows.Documents.Serialization.WritingProgressChangeLevel,System.Int32,System.Int32,System.Object)">
      <summary>初始化 <see cref="T:System.Windows.Documents.Serialization.WritingProgressChangedEventArgs" /> 类的一个新实例。</summary>
      <param name="writingLevel">指定更改事件（例如，针对整个多文档序列、单个文档或单页的事件）的进度范围的枚举值。</param>
      <param name="number">已写入的文档数或页数，取决于 <paramref name="writingLevel" /> 定义的范围。</param>
      <param name="progressPercentage">已写入的数据的百分比。</param>
      <param name="state">标识写操作的用户提供的对象。</param>
    </member>
    <member name="P:System.Windows.Documents.Serialization.WritingProgressChangedEventArgs.Number">
      <summary>获取已写入的文档数或页数。</summary>
      <returns>在事件发生时已写入的文档数或页数。</returns>
    </member>
    <member name="P:System.Windows.Documents.Serialization.WritingProgressChangedEventArgs.WritingLevel">
      <summary>获取一个值，该值指示写入进度的范围。</summary>
      <returns>指定写入多文档序列、单个文档或单页的范围的枚举。</returns>
    </member>
    <member name="T:System.Windows.Documents.Serialization.WritingProgressChangedEventHandler">
      <summary>表示将处理 <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> 的 <see cref="E:System.Windows.Xps.XpsDocumentWriter.WritingProgressChanged" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Documents.Serialization.WritingProgressChangeLevel">
      <summary>指定 <see cref="E:System.Windows.Documents.Serialization.SerializerWriter.WritingProgressChanged" /> 事件的范围。</summary>
    </member>
    <member name="F:System.Windows.Documents.Serialization.WritingProgressChangeLevel.None">
      <summary>未指定输出进度。</summary>
    </member>
    <member name="F:System.Windows.Documents.Serialization.WritingProgressChangeLevel.FixedDocumentSequenceWritingProgress">
      <summary>多个文档序列的输出进度。</summary>
    </member>
    <member name="F:System.Windows.Documents.Serialization.WritingProgressChangeLevel.FixedDocumentWritingProgress">
      <summary>单个文档的输出进度。</summary>
    </member>
    <member name="F:System.Windows.Documents.Serialization.WritingProgressChangeLevel.FixedPageWritingProgress">
      <summary>单页的输出进度。</summary>
    </member>
    <member name="T:System.Windows.Input.CommandConverter">
      <summary>在 <see cref="T:System.Windows.Input.ICommand" /> 对象与其他类型之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Input.CommandConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Input.CommandConverter" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Input.CommandConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可使用指定上下文，将指定类型的对象转换为 <see cref="T:System.Windows.Input.ICommand" /> 的实例。</summary>
      <returns>
            如果此转换器能够执行该操作，则为 true；否则为 false。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="sourceType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Windows.Input.CommandConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否可使用指定上下文，将 <see cref="T:System.Windows.Input.ICommand" /> 的实例转换为指定类型。</summary>
      <returns>
            如果此转换器能够执行该操作，则为 true；否则为 false。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="destinationType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Windows.Input.CommandConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>尝试使用指定上下文将指定对象转换为 <see cref="T:System.Windows.Input.ICommand" />。</summary>
      <returns>返回已转换的对象；如果 <paramref name="source" /> 为空字符串，则返回 null。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture">特定于区域性的信息。</param>
      <param name="source">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException">
无法转换 <paramref name="source" />。</exception>
    </member>
    <member name="M:System.Windows.Input.CommandConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>尝试使用指定上下文将 <see cref="T:System.Windows.Input.ICommand" /> 转换为指定类型。</summary>
      <returns>返回已转换的对象；如果 <paramref name="value" /> 为 null，则返回空字符串。</returns>
      <param name="context">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture">特定于区域性的信息。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="T:System.Windows.Input.KeyboardNavigation">
      <summary>在可获得焦点的对象之间提供逻辑和方向导航。</summary>
    </member>
    <member name="P:System.Windows.Input.KeyboardNavigation.AcceptsReturn">
      <summary>获取或设置一个值，该值指示控件是否接受回车符。</summary>
      <returns>
            如果接受回车符，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigation.AcceptsReturnProperty">
      <summary>标识 <see cref="P:System.Windows.Input.KeyboardNavigation.AcceptsReturn" />附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Input.KeyboardNavigation.AcceptsReturn" />附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Input.KeyboardNavigation.ControlTabNavigation">
      <summary>获取设置此属性所在元素的子级的逻辑控件 Tab 键导航行为或对该行为进行设置。</summary>
      <returns>当发生控件 Tab 键导航时，容器移动焦点的方式。默认值为 <see cref="F:System.Windows.Input.KeyboardNavigationMode.Continue" />。</returns>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigation.ControlTabNavigationProperty">
      <summary>标识 <see cref="P:System.Windows.Input.KeyboardNavigation.ControlTabNavigation" />附加属性。</summary>
      <returns>附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Input.KeyboardNavigation.DirectionalNavigation">
      <summary>获取设置此属性所在元素的子级的方向导航行为或对该行为进行设置。</summary>
      <returns>当发生方向导航时，容器移动焦点的方式。默认值为 <see cref="F:System.Windows.Input.KeyboardNavigationMode.Continue" />。</returns>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigation.DirectionalNavigationProperty">
      <summary>标识 <see cref="P:System.Windows.Input.KeyboardNavigation.DirectionalNavigation" />附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Input.KeyboardNavigation.DirectionalNavigation" />附加属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyboardNavigation.GetAcceptsReturn(System.Windows.DependencyObject)">
      <summary>获取指定元素的 <see cref="P:System.Windows.Input.KeyboardNavigation.AcceptsReturn" /> 附加属性的值。</summary>
      <returns>
        <see cref="P:System.Windows.Input.KeyboardNavigation.AcceptsReturn" /> 属性的值。</returns>
      <param name="element">从中读取附加属性的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Input.KeyboardNavigation.GetControlTabNavigation(System.Windows.DependencyObject)">
      <summary>获取指定元素的 <see cref="P:System.Windows.Input.KeyboardNavigation.ControlTabNavigation" /> 附加属性的值。</summary>
      <returns>
        <see cref="P:System.Windows.Input.KeyboardNavigation.ControlTabNavigation" /> 属性的值。</returns>
      <param name="element">从中获取附加属性的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Input.KeyboardNavigation.GetDirectionalNavigation(System.Windows.DependencyObject)">
      <summary>获取指定元素的 <see cref="P:System.Windows.Input.KeyboardNavigation.DirectionalNavigation" /> 附加属性的值。</summary>
      <returns>
        <see cref="P:System.Windows.Input.KeyboardNavigation.DirectionalNavigation" /> 属性的值。</returns>
      <param name="element">从中获取附加属性的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Input.KeyboardNavigation.GetIsTabStop(System.Windows.DependencyObject)">
      <summary>获取指定元素的 <see cref="P:System.Windows.Input.KeyboardNavigation.IsTabStop" /> 附加属性的值。</summary>
      <returns>
        <see cref="P:System.Windows.Input.KeyboardNavigation.IsTabStop" /> 属性的值。</returns>
      <param name="element">从中读取附加属性的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Input.KeyboardNavigation.GetTabIndex(System.Windows.DependencyObject)">
      <summary>获取指定元素的 <see cref="P:System.Windows.Input.KeyboardNavigation.TabIndex" /> 附加属性的值。</summary>
      <returns>
        <see cref="P:System.Windows.Input.KeyboardNavigation.TabIndex" /> 属性的值。</returns>
      <param name="element">从中读取附加属性的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Input.KeyboardNavigation.GetTabNavigation(System.Windows.DependencyObject)">
      <summary>获取指定元素的 <see cref="P:System.Windows.Input.KeyboardNavigation.TabNavigation" /> 附加属性的值。</summary>
      <returns>
        <see cref="P:System.Windows.Input.KeyboardNavigation.TabNavigation" /> 属性的值。</returns>
      <param name="element">从中获取附加属性的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Input.KeyboardNavigation.IsTabStop">
      <summary>获取或设置一个值，该值表示设置该属性所在的元素是否是一个制表位。</summary>
      <returns>
            如果该元素为制表位，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigation.IsTabStopProperty">
      <summary>标识 <see cref="P:System.Windows.Input.KeyboardNavigation.IsTabStop" />附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Input.KeyboardNavigation.IsTabStop" />附加属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyboardNavigation.SetAcceptsReturn(System.Windows.DependencyObject,System.Boolean)">
      <summary>设置指定元素的 <see cref="P:System.Windows.Input.KeyboardNavigation.AcceptsReturn" /> 附加属性的值。</summary>
      <param name="element">要在其中写入附加属性的元素。</param>
      <param name="enabled">要设置的属性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Input.KeyboardNavigation.SetControlTabNavigation(System.Windows.DependencyObject,System.Windows.Input.KeyboardNavigationMode)">
      <summary>设置指定元素的 <see cref="P:System.Windows.Input.KeyboardNavigation.ControlTabNavigation" /> 附加属性的值。</summary>
      <param name="element">对其设置附加属性的元素。</param>
      <param name="mode">要设置的属性值</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Input.KeyboardNavigation.SetDirectionalNavigation(System.Windows.DependencyObject,System.Windows.Input.KeyboardNavigationMode)">
      <summary>设置指定元素的 <see cref="P:System.Windows.Input.KeyboardNavigation.DirectionalNavigation" /> 附加属性的值。</summary>
      <param name="element">对其设置附加属性的元素。</param>
      <param name="mode">要设置的属性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Input.KeyboardNavigation.SetIsTabStop(System.Windows.DependencyObject,System.Boolean)">
      <summary>设置指定元素的 <see cref="P:System.Windows.Input.KeyboardNavigation.IsTabStop" /> 附加属性的值。</summary>
      <param name="element">对其写入附加属性的元素。</param>
      <param name="isTabStop">要设置的属性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Input.KeyboardNavigation.SetTabIndex(System.Windows.DependencyObject,System.Int32)">
      <summary>设置指定元素的 <see cref="P:System.Windows.Input.KeyboardNavigation.TabIndex" /> 附加属性的值。</summary>
      <param name="element">对其设置附加属性的元素。</param>
      <param name="index">要设置的属性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Input.KeyboardNavigation.SetTabNavigation(System.Windows.DependencyObject,System.Windows.Input.KeyboardNavigationMode)">
      <summary>设置指定元素的 <see cref="P:System.Windows.Input.KeyboardNavigation.TabNavigation" /> 附加属性的值。</summary>
      <param name="element">对其设置附加属性的元素。</param>
      <param name="mode">要设置的属性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Input.KeyboardNavigation.TabIndex">
      <summary>获取设置此属性所在元素的 Tab 键索引或对该索引进行设置。</summary>
      <returns>Tab 键索引。</returns>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigation.TabIndexProperty">
      <summary>标识 <see cref="P:System.Windows.Input.KeyboardNavigation.TabIndex" />附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Input.KeyboardNavigation.TabIndex" />附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Input.KeyboardNavigation.TabNavigation">
      <summary>获取设置此属性所在元素的子级的逻辑 Tab 键导航行为或对该行为进行设置。</summary>
      <returns>当发生 Tab 键导航时，容器移动焦点的方式。默认值为 <see cref="F:System.Windows.Input.KeyboardNavigationMode.Continue" />。</returns>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigation.TabNavigationProperty">
      <summary>标识 <see cref="P:System.Windows.Input.KeyboardNavigation.TabNavigation" />附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Input.KeyboardNavigation.TabNavigation" />附加属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Input.KeyboardNavigationMode">
      <summary>指定当发生逻辑和方向导航时，对焦点所做更改的可能值。</summary>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigationMode.Continue">
      <summary>对于每个元素，只要它是导航停止位，就可以接收键盘焦点。 当到达边缘时，导航会离开包含元素。</summary>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigationMode.Once">
      <summary>容器及其所有子元素整个只能接收焦点一次。组中第一个子树或最后一个已设定焦点的元素会接收焦点</summary>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigationMode.Cycle">
      <summary>根据导航方向，当到达容器的末尾或开始位置时，焦点将返回到第一项或最后一项。 焦点无法使用逻辑导航离开该容器。</summary>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigationMode.None">
      <summary>不允许在此容器内进行键盘导航。</summary>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigationMode.Contained">
      <summary>根据导航方向，当到达容器的末尾或开始位置时，焦点将返回到第一项或最后一项，而不会移至超出容器的开始或末尾的位置。</summary>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigationMode.Local">
      <summary>只有 Tab 索引位于此容器内且其行为类似 <see cref="F:System.Windows.Input.KeyboardNavigationMode.Continue" /> 时，才会在本地子树上考虑这些索引。</summary>
    </member>
    <member name="T:System.Windows.Interop.BrowserInteropHelper">
      <summary>提供有关承载 XAML 浏览器应用程序 (XBAP) 应用程序的浏览器环境的信息的帮助器类。</summary>
    </member>
    <member name="P:System.Windows.Interop.BrowserInteropHelper.ClientSite">
      <summary>返回对某个对象的引用，该对象用于通过其 OLE 容器接口（例如，IOleClientSite::GetContainer();）来访问主机浏览器</summary>
      <returns>可强制转换为 IOleClientSite 的对象。</returns>
    </member>
    <member name="P:System.Windows.Interop.BrowserInteropHelper.IsBrowserHosted">
      <summary>获取一个值，该值指定当前 Windows Presentation Foundation (WPF) 应用程序是否由浏览器承载。</summary>
      <returns>如果该应用程序由浏览器承载，则 <see cref="T:System.Boolean" /> 值为 true；否则为false。</returns>
    </member>
    <member name="P:System.Windows.Interop.BrowserInteropHelper.Source">
      <summary>获取从中启动 XAML 浏览器应用程序 (XBAP) 应用程序的位置的统一资源标识符 (URI)。</summary>
      <returns>从中启动 XAML 浏览器应用程序 (XBAP) 应用程序的位置的 <see cref="T:System.Uri" />；否则为 null。</returns>
    </member>
    <member name="T:System.Windows.Interop.DocObjHost">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Interop.DocObjHost.#ctor">
      <summary> 此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Interop.DocObjHost.InitializeLifetimeService">
      <summary> 此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Interop.DocObjHost.System#IServiceProvider#GetService(System.Type)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IServiceProvider.GetService(System.Type)" />。</summary>
      <returns>
        <paramref name="serviceType" /> 类型的服务对象。- 或 -
如果没有 <paramref name="serviceType" /> 类型的服务对象，则为 null。</returns>
      <param name="serviceType">一个对象，它指定要获取的服务对象的类型。</param>
    </member>
    <member name="T:System.Windows.Interop.HwndHost">
      <summary>在 Windows Presentation Foundation (WPF) 内容中将 Win32 窗口作为元素承载。 </summary>
    </member>
    <member name="M:System.Windows.Interop.HwndHost.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Interop.HwndHost" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Interop.HwndHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
      <summary>在派生类中重写时，会创建要承载的窗口。</summary>
      <returns>要创建的子 Win32 窗口的句柄。</returns>
      <param name="hwndParent">父窗口的窗口句柄。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndHost.DestroyWindowCore(System.Runtime.InteropServices.HandleRef)">
      <summary>在派生类中重写时，会损坏所承载的窗口。</summary>
      <param name="hwnd">包含窗口句柄的结构。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndHost.Dispose">
      <summary>立即释放该对象可能持有的任何系统资源。</summary>
    </member>
    <member name="M:System.Windows.Interop.HwndHost.Dispose(System.Boolean)">
      <summary>立即释放该对象可能持有的任何系统资源。</summary>
      <param name="disposing">如果从显式释放器调用，则设置为 true。否则设置为 false。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndHost.Finalize">
      <summary>在垃圾回收器损坏对象之前执行最后的清理工作。</summary>
    </member>
    <member name="P:System.Windows.Interop.HwndHost.Handle">
      <summary>获取所承载的窗口的窗口句柄。</summary>
      <returns>窗口句柄。</returns>
    </member>
    <member name="M:System.Windows.Interop.HwndHost.MeasureOverride(System.Windows.Size)">
      <summary>按照布局引擎操作的要求，返回 <see cref="T:System.Windows.Interop.HwndHost" /> 对象所表示的窗口的大小。</summary>
      <returns>
        <see cref="T:System.Windows.Interop.HwndHost" /> 对象的大小。</returns>
      <param name="constraint">
        <see cref="T:System.Windows.Interop.HwndHost" /> 对象的大小。</param>
    </member>
    <member name="E:System.Windows.Interop.HwndHost.MessageHook">
      <summary>适用于所承载的窗口接收的每条未处理的消息。</summary>
    </member>
    <member name="M:System.Windows.Interop.HwndHost.OnCreateAutomationPeer">
      <summary>为 <see cref="T:System.Windows.Interop.HwndHost" /> 创建一个 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />。</summary>
      <returns>特定于类型的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 实现。</returns>
    </member>
    <member name="M:System.Windows.Interop.HwndHost.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>当承载的窗口收到 WM_KEYDOWN 消息时调用。</summary>
      <param name="e">事件数据。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndHost.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary> 当承载的窗口收到 WM_KEYUP 消息时调用。</summary>
      <param name="e">事件数据。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndHost.OnWindowPositionChanged(System.Windows.Rect)">
      <summary> 当承载的窗口的位置发生更改时调用。</summary>
      <param name="rcBoundingBox">窗口的位置。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndHost.System#Windows#Interop#IKeyboardInputSink#HasFocusWithin">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Windows.Media.FamilyTypefaceCollection.System#Collections#IList#Remove(System.Object)" />。</summary>
      <returns>
            如果接收器或其所包含的组件之一具有焦点，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Interop.HwndHost.System#Windows#Interop#IKeyboardInputSink#KeyboardInputSite">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite" />。</summary>
      <returns>对容器的 <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> 接口的引用。</returns>
    </member>
    <member name="M:System.Windows.Interop.HwndHost.System#Windows#Interop#IKeyboardInputSink#OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />。</summary>
      <returns>
            如果消息已得到处理，则为 true；否则为 false。</returns>
      <param name="msg">助记键和关联数据的消息。请勿修改此消息结构。仅由于性能原因，通过引用来传递此消息。</param>
      <param name="modifiers">修改键。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndHost.System#Windows#Interop#IKeyboardInputSink#RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)" />。</summary>
      <returns>所包含组件的 <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> 站点。</returns>
      <param name="sink">所包含组件的 <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> 接收器。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndHost.System#Windows#Interop#IKeyboardInputSink#TabInto(System.Windows.Input.TraversalRequest)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)" />。</summary>
      <returns>
            如果已按要求对焦点进行了设置，则为 true；如果没有制表位，则为 false。</returns>
      <param name="request">指定是将焦点设置到第一个制表位，还是设置到最后一个制表位。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndHost.System#Windows#Interop#IKeyboardInputSink#TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />。</summary>
      <returns>
            如果方法实现对该消息进行了处理，则为 true；否则为 false。</returns>
      <param name="msg">消息及关联数据。请勿修改此结构。仅由于性能原因，通过引用来传递此消息。</param>
      <param name="modifiers">修改键。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndHost.System#Windows#Interop#IKeyboardInputSink#TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />。</summary>
      <returns>
            如果消息已处理并且不应调用 <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />，则为 true；否则为 false。</returns>
      <param name="msg">消息及关联数据。请勿修改此结构。仅由于性能原因，通过引用来传递此消息。</param>
      <param name="modifiers">修改键。</param>
    </member>
    <member name="M:System.Windows.Interop.HwndHost.UpdateWindowPos">
      <summary> 更新子窗口的大小、可见性和位置以反映元素的当前状态。</summary>
    </member>
    <member name="M:System.Windows.Interop.HwndHost.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
      <summary>在派生类中重写时，访问承载的子窗口的窗口进程（句柄）。</summary>
      <param name="hwnd">所承载的窗口的窗口句柄。</param>
      <param name="msg">引发操作的消息。</param>
      <param name="wParam">可能与处理消息有关的信息。它通常用于存储小段信息，如标志。</param>
      <param name="lParam">可能与处理消息有关的信息。它通常用于引用对象。</param>
      <param name="handled">是否应将所得事件标记为已处理。</param>
    </member>
    <member name="T:System.Windows.Interop.IErrorPage">
      <summary>定义承载互操作内容并由 Windows Presentation Foundation (WPF) 可执行文件解释的 Windows Presentation Foundation (WPF) 应用程序与主机提供的错误页之间的互操作。</summary>
    </member>
    <member name="P:System.Windows.Interop.IErrorPage.DeploymentPath">
      <summary>获取或设置应用程序的部署清单的路径。</summary>
      <returns>应用程序的部署清单的路径。</returns>
    </member>
    <member name="P:System.Windows.Interop.IErrorPage.ErrorFlag">
      <summary>获取或设置一个值，该值指示此项是表示一个错误，还是表示某个其他情况（如警告）。true 表示一个错误。</summary>
      <returns>true 表示一个错误；false 表示其他情况（如警告）。</returns>
    </member>
    <member name="P:System.Windows.Interop.IErrorPage.ErrorText">
      <summary>获取或设置错误的详细说明。</summary>
      <returns>错误的说明。</returns>
    </member>
    <member name="P:System.Windows.Interop.IErrorPage.ErrorTitle">
      <summary>获取或设置错误页的字符串标题。</summary>
      <returns>错误页的字符串标题。</returns>
    </member>
    <member name="P:System.Windows.Interop.IErrorPage.GetWinFxCallback">
      <summary>获取或设置对 <see cref="T:System.Windows.Threading.DispatcherOperationCallback" /> 处理程序的引用，该处理程序可处理 Microsoft .NET Framework运行库下载的请求。</summary>
      <returns>一个 <see cref="T:System.Windows.Threading.DispatcherOperationCallback" /> 处理程序，</returns>
    </member>
    <member name="P:System.Windows.Interop.IErrorPage.LogFilePath">
      <summary>获取或设置错误日志文件（如果有）的字符串路径。</summary>
      <returns>关联错误文件的路径。可能为空字符串。</returns>
    </member>
    <member name="P:System.Windows.Interop.IErrorPage.RefreshCallback">
      <summary>获取或设置对 <see cref="T:System.Windows.Threading.DispatcherOperationCallback" /> 处理程序的引用，该处理程序能处理错误页的刷新。</summary>
      <returns>
        <see cref="T:System.Windows.Threading.DispatcherOperationCallback" /> 处理程序可处理错误页的刷新。</returns>
    </member>
    <member name="P:System.Windows.Interop.IErrorPage.SupportUri">
      <summary>获取或设置与该错误关联的支持信息的统一资源标识符 (URI)。</summary>
      <returns>支持信息的链接。</returns>
    </member>
    <member name="T:System.Windows.Interop.IProgressPage">
      <summary>定义承载互操作内容的 Windows Presentation Foundation (WPF) 应用程序与主机提供的进度页之间的互操作。</summary>
    </member>
    <member name="P:System.Windows.Interop.IProgressPage.ApplicationName">
      <summary>获取或设置应用程序的名称。</summary>
      <returns>生成进度页的应用程序的名称。</returns>
    </member>
    <member name="P:System.Windows.Interop.IProgressPage.DeploymentPath">
      <summary>获取或设置应用程序部署清单的 <see cref="T:System.Uri" /> 路径。</summary>
      <returns>应用程序部署清单的路径。</returns>
    </member>
    <member name="P:System.Windows.Interop.IProgressPage.PublisherName">
      <summary>获取或设置应用程序的发行者。</summary>
      <returns>发行者标识字符串。</returns>
    </member>
    <member name="P:System.Windows.Interop.IProgressPage.RefreshCallback">
      <summary>获取或设置对 <see cref="T:System.Windows.Threading.DispatcherOperationCallback" /> 处理程序的引用，该处理程序能处理用户启动的“刷新”命令。</summary>
      <returns>回调引用。</returns>
    </member>
    <member name="P:System.Windows.Interop.IProgressPage.StopCallback">
      <summary>获取或设置对 <see cref="T:System.Windows.Threading.DispatcherOperationCallback" /> 处理程序的引用，该处理程序能处理用户启动的“停止”命令。</summary>
      <returns>回调引用。</returns>
    </member>
    <member name="M:System.Windows.Interop.IProgressPage.UpdateProgress(System.Int64,System.Int64)">
      <summary>提供可用于更新进度指示器的上载进度数字信息。</summary>
      <param name="bytesDownloaded">到目前为止下载的总字节数。</param>
      <param name="bytesTotal">需要下载的应用程序的总字节数。</param>
    </member>
    <member name="T:System.Windows.Interop.WindowInteropHelper">
      <summary>协助 Windows Presentation Foundation (WPF) 与 Win32 代码之间的互操作。</summary>
    </member>
    <member name="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)">
      <summary>为指定的 Windows Presentation Foundation (WPF) 窗口初始化 <see cref="T:System.Windows.Interop.WindowInteropHelper" /> 类的一个新实例。</summary>
      <param name="window">一个 WPF 窗口对象。</param>
    </member>
    <member name="P:System.Windows.Interop.WindowInteropHelper.Handle">
      <summary>获取用于创建此 <see cref="T:System.Windows.Interop.WindowInteropHelper" /> 的 Windows Presentation Foundation (WPF) 窗口的窗口句柄。</summary>
      <returns>Windows Presentation Foundation (WPF) 窗口句柄 (HWND)。</returns>
    </member>
    <member name="P:System.Windows.Interop.WindowInteropHelper.Owner">
      <summary>获取或设置 Windows Presentation Foundation (WPF) 所有者窗口的句柄。</summary>
      <returns>所有者窗口句柄 (HWND)。</returns>
    </member>
    <member name="T:System.Windows.Interop.ActiveXHost">
      <summary>
                    将 ActiveX 控件作为 Windows Presentation Foundation (WPF) 内容中的元素承载。
                </summary>
    </member>
    <member name="M:System.Windows.Interop.ActiveXHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
      <summary>
                    创建 <see cref="T:System.Windows.Interop.ActiveXHost" /> 窗口并将其分配给父级。
                </summary>
      <returns>
        <see cref="T:System.Windows.Interop.ActiveXHost" /> 窗口的 <see cref="T:System.Runtime.InteropServices.HandleRef" />。
                </returns>
      <param name="hwndParent">
                    父窗口。
                </param>
    </member>
    <member name="M:System.Windows.Interop.ActiveXHost.DestroyWindowCore(System.Runtime.InteropServices.HandleRef)">
      <param name="hwnd"></param>
    </member>
    <member name="M:System.Windows.Interop.ActiveXHost.Dispose(System.Boolean)">
      <summary>
                    释放由 <see cref="T:System.Windows.Interop.ActiveXHost" /> 使用的非托管资源，还可以选择释放托管资源。
                </summary>
      <param name="disposing"></param>
    </member>
    <member name="P:System.Windows.Interop.ActiveXHost.IsDisposed">
      <summary>
                    获取一个值，该值指示是否已对 <see cref="T:System.Windows.Interop.ActiveXHost" /> 实例调用了 <see cref="M:System.Windows.Interop.ActiveXHost.Dispose(System.Boolean)" /> 方法。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Interop.ActiveXHost" /> 实例已释放，则为 true；否则为 false。默认值为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Interop.ActiveXHost.MeasureOverride(System.Windows.Size)">
      <param name="swConstraint"></param>
    </member>
    <member name="M:System.Windows.Interop.ActiveXHost.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
      <param name="args"></param>
    </member>
    <member name="M:System.Windows.Interop.ActiveXHost.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <param name="e"></param>
    </member>
    <member name="M:System.Windows.Interop.ActiveXHost.OnWindowPositionChanged(System.Windows.Rect)">
      <param name="bounds"></param>
    </member>
    <member name="T:System.Windows.Markup.ArrayExtension">
      <summary>为 WPF XAML 处理器实现实现 x:Array 支持。</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.ArrayExtension" /> 类的一个新实例。这样将创建一个空数组。</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Array)">
      <summary>根据提供的原始数组初始化 <see cref="T:System.Windows.Markup.ArrayExtension" /> 类的新实例。</summary>
      <param name="elements">用来填充扩展的数组。</param>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Windows.Markup.ArrayExtension" /> 类的新实例，并初始化数组的类型。</summary>
      <param name="arrayType">新数组的对象类型。</param>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddChild(System.Object)">
      <summary>将提供的对象追加到数组的末尾。</summary>
      <param name="value">要添加到数组末尾的对象。</param>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddText(System.String)">
      <summary>将一个文本节点添加为一个新的数组项。</summary>
      <param name="text">要添加到数组末尾的文本。</param>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Items">
      <summary>获取数组的内容。</summary>
      <returns>数组内容。</returns>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)">
      <summary>返回一个数组，其大小将根据在服务输入内提供的对象数目进行调整 </summary>
      <returns>创建的数组。</returns>
      <param name="serviceProvider">可以为标记扩展提供服务的对象。</param>
      <exception cref="T:System.InvalidOperationException">试图为未提供类型的数组提供值。- 或 -数组的声明类型与其一个或多个成员存在类型不匹配。</exception>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Type">
      <summary>获取和设置调用 <see cref="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)" /> 时要创建的数组的类型。</summary>
      <returns>数组类型。</returns>
    </member>
    <member name="T:System.Windows.Markup.ComponentResourceKeyConverter">
      <summary>在 <see cref="T:System.Windows.ComponentResourceKey" /> 对象与其他类型之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Markup.ComponentResourceKeyConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.ComponentResourceKeyConverter" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.ComponentResourceKeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>使用指定的上下文确定能否将指定类型的对象转换为 <see cref="T:System.Windows.ComponentResourceKey" /> 的实例。</summary>
      <param name="context">一种格式上下文，提供有关要从其中调用此转换器的环境的信息。</param>
      <param name="sourceType">要进行计算以供转换的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceType" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.ComponentResourceKeyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>使用指定的上下文确定能否将 <see cref="T:System.Windows.ComponentResourceKey" /> 的实例转换为指定的类型。</summary>
      <param name="context">一种格式上下文，提供有关要从其中调用此转换器的环境的信息。</param>
      <param name="destinationType">要进行计算以供转换的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.ComponentResourceKeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的上下文尝试将指定对象转换为 <see cref="T:System.Windows.ComponentResourceKey" />。</summary>
      <param name="context">一种格式上下文，提供有关要从其中调用此转换器的环境的信息。</param>
      <param name="culture">特定于区域性的信息。</param>
      <param name="value">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException">
无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ComponentResourceKeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的上下文尝试将 <see cref="T:System.Windows.ComponentResourceKey" /> 转换为指定的类型。</summary>
      <param name="context">一种格式上下文，提供有关要从其中调用此转换器的环境的信息。</param>
      <param name="culture">特定于区域性的信息。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.NotSupportedException">
无法转换 <paramref name="value" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
    </member>
    <member name="T:System.Windows.Markup.DependencyPropertyConverter">
      <summary>在 <see cref="T:System.Windows.DependencyProperty" /> 对象与其他类型之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Markup.DependencyPropertyConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.DependencyPropertyConverter" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.DependencyPropertyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>使用指定的上下文确定能否将指定类型的对象转换为 <see cref="T:System.Windows.DependencyProperty" /> 的实例。</summary>
      <returns>
            如果此转换器能够执行该操作，则为 true；否则为 false。</returns>
      <param name="context">一种格式上下文，提供有关要从其中调用此转换器的环境的信息。</param>
      <param name="sourceType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Windows.Markup.DependencyPropertyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>使用指定的上下文确定能否将 <see cref="T:System.Windows.DependencyProperty" /> 的实例转换为指定的类型。</summary>
      <returns>
            如果此转换器能够执行该操作，则为 true；否则为 false。</returns>
      <param name="context">一种格式上下文，提供有关要从其中调用此转换器的环境的信息。</param>
      <param name="destinationType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Windows.Markup.DependencyPropertyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的上下文尝试将指定对象转换为 <see cref="T:System.Windows.DependencyProperty" />。</summary>
      <returns>被转换的对象。</returns>
      <param name="context">一种格式上下文，提供有关要从其中调用此转换器的环境的信息。</param>
      <param name="culture">特定于区域性的信息。</param>
      <param name="source">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException">
无法转换 <paramref name="source" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.DependencyPropertyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的上下文尝试将 <see cref="T:System.Windows.DependencyProperty" /> 转换为指定的类型。</summary>
      <returns>被转换的对象。</returns>
      <param name="context">一种格式上下文，提供有关要从其中调用此转换器的环境的信息。</param>
      <param name="culture">特定于区域性的信息。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.NotSupportedException">
无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="T:System.Windows.Markup.IProvideValueTarget">
      <summary>为框架功能报告对象属性关系，例如依赖项属性上的绑定。</summary>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
      <summary>获取所报告的目标对象。</summary>
      <returns>所报告的目标对象。</returns>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
      <summary>获取所报告的目标属性。</summary>
      <returns>所报告的目标属性。</returns>
    </member>
    <member name="T:System.Windows.Markup.IStyleConnector">
      <summary>提供标记分析器在内部用来将事件以及事件的 setter 附加到已编译内容的方法。</summary>
    </member>
    <member name="M:System.Windows.Markup.IStyleConnector.Connect(System.Int32,System.Object)">
      <summary>通过派生类实现时，会调用 StyleBamlReader，将 EventSetter 和 Templates 上的事件附加到已编译的内容。</summary>
      <param name="connectionId">ID。</param>
      <param name="target">目标。</param>
    </member>
    <member name="T:System.Windows.Markup.NamespaceMapEntry">
      <summary>提供 <see cref="T:System.Windows.Markup.XamlTypeMapper" /> 在 XML 命名空间 URI 与对应的 CLR 命名空间以及该命名空间所在的程序集之间建立映射时使用的信息。</summary>
    </member>
    <member name="M:System.Windows.Markup.NamespaceMapEntry.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.NamespaceMapEntry" /> 类的一个新实例。 </summary>
    </member>
    <member name="M:System.Windows.Markup.NamespaceMapEntry.#ctor(System.String,System.String,System.String)">
      <summary>使用指定的 XML 命名空间、程序集名称以及该程序集中的 CLR 命名空间初始化 <see cref="T:System.Windows.Markup.NamespaceMapEntry" /> 类的新实例。</summary>
      <param name="xmlNamespace">XML 命名空间。</param>
      <param name="assemblyName">解析标记时使用的程序集。</param>
      <param name="clrNamespace">程序集中的 CLR 命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> 为 null- 或 - <paramref name="assemblyName" /> 为 null- 或 - <paramref name="clrNamespace" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Markup.NamespaceMapEntry.AssemblyName">
      <summary>获取或设置包含 CLR 命名空间中的类型的程序集名称。</summary>
      <returns>程序集名称。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Windows.Markup.NamespaceMapEntry.AssemblyName" /> 值将设置为 null。</exception>
    </member>
    <member name="P:System.Windows.Markup.NamespaceMapEntry.ClrNamespace">
      <summary>获取或设置 公共语言运行时 (CLR) 命名空间，该命名空间包含要映射到 XML 命名空间的类型。</summary>
      <returns>CLR 命名空间。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Windows.Markup.NamespaceMapEntry.ClrNamespace" /> 值将设置为 null。</exception>
    </member>
    <member name="P:System.Windows.Markup.NamespaceMapEntry.XmlNamespace">
      <summary>获取或设置 XML 命名空间。</summary>
      <returns>XML 命名空间。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Windows.Markup.NamespaceMapEntry.XmlNamespace" /> 值将设置为 null。</exception>
    </member>
    <member name="T:System.Windows.Markup.NullExtension">
      <summary>实现 XAML 标记扩展以返回一个 null 对象，您可以使用此对象将值显式设置为 null。</summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.NullExtension" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.ProvideValue(System.IServiceProvider)">
      <summary>在 XAML 中设置属性值时，提供 null 作为一个值。</summary>
      <returns>null 引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="serviceProvider">可以为标记扩展提供服务的对象。</param>
    </member>
    <member name="T:System.Windows.Markup.ParserContext">
      <summary>提供可扩展应用程序标记语言 (XAML) 分析器所需的上下文信息。 </summary>
    </member>
    <member name="M:System.Windows.Markup.ParserContext.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.ParserContext" /> 类的一个新实例。 </summary>
    </member>
    <member name="M:System.Windows.Markup.ParserContext.#ctor(System.Xml.XmlParserContext)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlParserContext" /> 初始化 <see cref="T:System.Windows.Markup.ParserContext" /> 类的一个新实例。</summary>
      <param name="xmlParserContext">新的 <see cref="T:System.Windows.Markup.ParserContext" /> 所基于的上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlParserContext" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Markup.ParserContext.BaseUri">
      <summary>获取或设置此上下文的基统一资源标识符 (URI)。</summary>
      <returns>基 URI。</returns>
    </member>
    <member name="M:System.Windows.Markup.ParserContext.op_Implicit(System.Windows.Markup.ParserContext)~System.Xml.XmlParserContext">
      <summary>将 <see cref="T:System.Windows.Markup.ParserContext" /> 转换为 <see cref="T:System.Xml.XmlParserContext" />。</summary>
      <returns>分析器上下文。</returns>
      <param name="parserContext">要转换为 <see cref="T:System.Xml.XmlParserContext" /> 的上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parserContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.ParserContext.ToXmlParserContext(System.Windows.Markup.ParserContext)">
      <summary>将 <see cref="T:System.Windows.Markup.ParserContext" /> 转换为 <see cref="T:System.Xml.XmlParserContext" />。</summary>
      <returns>分析器上下文。</returns>
      <param name="parserContext">要转换为 <see cref="T:System.Xml.XmlParserContext" /> 的上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parserContext" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Markup.ParserContext.XamlTypeMapper">
      <summary>获取或设置要与此 <see cref="T:System.Windows.Markup.ParserContext" /> 一起使用的 <see cref="T:System.Windows.Markup.XamlTypeMapper" />。</summary>
      <returns>类型映射器。</returns>
    </member>
    <member name="P:System.Windows.Markup.ParserContext.XmlLang">
      <summary>获取或设置此上下文的 XAML 中 xml:lang 的处理。</summary>
      <returns>语言。</returns>
    </member>
    <member name="P:System.Windows.Markup.ParserContext.XmlnsDictionary">
      <summary>获取此上下文的 XML 命名空间字典。</summary>
      <returns>XML 命名空间字典。</returns>
    </member>
    <member name="P:System.Windows.Markup.ParserContext.XmlSpace">
      <summary>获取或设置此上下文的 XAML 中的 xml:space 处理。</summary>
      <returns>XML 空间属性。</returns>
    </member>
    <member name="T:System.Windows.Markup.ResourceReferenceExpressionConverter">
      <summary>不要使用。此类型支持 WPF 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Markup.ResourceReferenceExpressionConverter.#ctor">
      <summary>不要使用。此方法支持 WPF 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Markup.ResourceReferenceExpressionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>不要使用。此方法支持 WPF 基础结构，并且不应在代码中直接使用。</summary>
      <param name="context"> </param>
      <param name="sourceType"> </param>
    </member>
    <member name="M:System.Windows.Markup.ResourceReferenceExpressionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>不要使用。此方法支持 WPF 基础结构，并且不应在代码中直接使用。</summary>
      <param name="context"> </param>
      <param name="destinationType"> </param>
    </member>
    <member name="M:System.Windows.Markup.ResourceReferenceExpressionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>不要使用。此方法支持 WPF 基础结构，并且不应在代码中直接使用。</summary>
      <param name="context"> </param>
      <param name="culture"> </param>
      <param name="value"> </param>
    </member>
    <member name="M:System.Windows.Markup.ResourceReferenceExpressionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>不要使用。此方法支持 WPF 基础结构，并且不应在代码中直接使用。</summary>
      <param name="context"> </param>
      <param name="culture"> </param>
      <param name="value"> </param>
      <param name="destinationType"> </param>
    </member>
    <member name="T:System.Windows.Markup.RoutedEventConverter">
      <summary>在 <see cref="T:System.Windows.RoutedEvent" /> 对象与其他类型之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Markup.RoutedEventConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.RoutedEventConverter" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.RoutedEventConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>使用指定的上下文确定能否将指定类型的对象转换为 <see cref="T:System.Windows.RoutedEvent" /> 的实例。</summary>
      <returns>
            如果此转换器能够执行该操作，则为 true；否则为 false。</returns>
      <param name="typeDescriptorContext">一种格式上下文，提供有关要从其中调用此转换器的环境的信息。</param>
      <param name="sourceType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Windows.Markup.RoutedEventConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>使用指定的上下文确定能否将 <see cref="T:System.Windows.RoutedEvent" /> 的实例转换为指定的类型。</summary>
      <returns>
            如果此转换器能够执行该操作，则为 true；否则为 false。</returns>
      <param name="typeDescriptorContext">一种格式上下文，提供有关要从其中调用此转换器的环境的信息。</param>
      <param name="destinationType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Windows.Markup.RoutedEventConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的上下文尝试将指定对象转换为 <see cref="T:System.Windows.RoutedEvent" />。</summary>
      <returns>被转换的对象。</returns>
      <param name="typeDescriptorContext">一种格式上下文，提供有关要从其中调用此转换器的环境的信息。</param>
      <param name="cultureInfo">特定于区域性的信息。</param>
      <param name="source">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException">
无法转换 <paramref name="source" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.RoutedEventConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的上下文尝试将 <see cref="T:System.Windows.RoutedEvent" /> 转换为指定的类型。</summary>
      <returns>被转换的对象。</returns>
      <param name="typeDescriptorContext">一种格式上下文，提供有关要从其中调用此转换器的环境的信息。</param>
      <param name="cultureInfo">特定于区域性的信息。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.NotSupportedException">
无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="T:System.Windows.Markup.StaticExtension">
      <summary>实现返回静态字段和属性引用的标记扩展。</summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.StaticExtension" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor(System.String)">
      <summary>使用提供的 <paramref name="member" /> 字符串初始化 <see cref="T:System.Windows.Markup.StaticExtension" /> 类的新实例。</summary>
      <param name="member">标识要引用的成员的字符串。此字符串使用的格式为 <paramref name="Prefix" />:<paramref name="ClassName" />.<paramref name="FieldOrPropertyName" />。（<paramref name="Prefix" /> 为可选项，它指的是 XAML 文件中的 XML 命名空间前缀。</param>
      <exception cref="T:System.ArgumentNullException">传递给 <paramref name="member" /> 的值为 null。</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.Member">
      <summary>获取或设置标识静态字段或静态属性的字符串。</summary>
      <returns>采用 <paramref name="Prefix" />:<paramref name="ClassName" />.<paramref name="FieldOrPropertyName" /> 格式的字符串。（<paramref name="Prefix" /> 为可选项，它指的是 XAML 文件中的 XML 命名空间前缀。）</returns>
      <exception cref="T:System.ArgumentNullException">试图将 <see cref="P:System.Windows.Markup.StaticExtension.Member" /> 设置为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.ProvideValue(System.IServiceProvider)">
      <summary>返回一个要在此扩展所应用到的属性上设置的对象值。对于 <see cref="T:System.Windows.Markup.StaticExtension" />，此对象值是为请求的静态成员计算的静态值。</summary>
      <returns>将在扩展应用到的属性上设置的对象值。</returns>
      <param name="serviceProvider">可以为标记扩展提供服务的对象。此服务将为 <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 提供结果。</param>
      <exception cref="T:System.InvalidOperationException">扩展的 <paramref name="member" /> 值为 null。您必须在调用 <see cref="M:System.Windows.Markup.StaticExtension.ProvideValue(System.IServiceProvider)" /> 之前设置此值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 字符串的某部分未进行正确分析。- 或 -<paramref name="serviceProvider" /> 未为 <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 提供服务。- 或 -<paramref name="member" /> 值未解析为静态成员。</exception>
    </member>
    <member name="T:System.Windows.Markup.TemplateKeyConverter">
      <summary>在 <see cref="T:System.Windows.TemplateKey" /> 对象与其他类型之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Markup.TemplateKeyConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.TemplateKeyConverter" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.TemplateKeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>使用指定的上下文确定能否将指定类型的对象转换为 <see cref="T:System.Windows.TemplateKey" /> 的实例。</summary>
      <returns>
            如果此转换器能够执行该操作，则为 true；否则为 false。</returns>
      <param name="context">一种格式上下文，提供有关要从其中调用此转换器的环境的信息。</param>
      <param name="sourceType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Windows.Markup.TemplateKeyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>使用指定的上下文确定能否将 <see cref="T:System.Windows.TemplateKey" /> 的实例转换为指定的类型。</summary>
      <returns>
            如果此转换器能够执行该操作，则为 true；否则为 false。</returns>
      <param name="context">一种格式上下文，提供有关要从其中调用此转换器的环境的信息。</param>
      <param name="destinationType">要进行计算以供转换的类型。</param>
    </member>
    <member name="M:System.Windows.Markup.TemplateKeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的上下文尝试将指定对象转换为 <see cref="T:System.Windows.TemplateKey" />。</summary>
      <returns>被转换的对象。</returns>
      <param name="context">一种格式上下文，提供有关要从其中调用此转换器的环境的信息。</param>
      <param name="culture">特定于区域性的信息。</param>
      <param name="source">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException">
无法转换 <paramref name="source" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.TemplateKeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的上下文尝试将 <see cref="T:System.Windows.TemplateKey" /> 转换为指定的类型。</summary>
      <returns>被转换的对象。</returns>
      <param name="context">一种格式上下文，提供有关要从其中调用此转换器的环境的信息。</param>
      <param name="culture">特定于区域性的信息。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.NotSupportedException">
无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="T:System.Windows.Markup.TypeExtension">
      <summary>实现可根据字符属性输入返回 <see cref="T:System.Type" /> 的标记扩展。</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.TypeExtension" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.TypeExtension" /> 类的新实例，并根据提供的 <paramref name="typeName" /> 字符串初始化 <see cref="P:System.Windows.Markup.TypeExtension.TypeName" /> 值。</summary>
      <param name="typeName">标识类型的字符串，格式为 <paramref name="Prefix" />:<paramref name="Typename" />，其中 Prefix 指的是 XAML 文件中的 XML 命名空间前缀。</param>
      <exception cref="T:System.ArgumentNullException">无法将 <paramref name="typeName" /> 设置为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Windows.Markup.TypeExtension" /> 类的新实例，并直接声明类型。</summary>
      <param name="type">将通过此 <see cref="T:System.Windows.Markup.TypeExtension" /> 表示的类型。</param>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)">
      <summary>返回一个应在此扩展应用的属性上设置的对象。对于 <see cref="T:System.Windows.Markup.TypeExtension" />，这是为请求的类型名称计算的 <see cref="T:System.Type" /> 值。</summary>
      <returns>将在扩展应用到的属性上设置的 <see cref="T:System.Type" /> 对象值。</returns>
      <param name="serviceProvider">可以为标记扩展提供服务的对象。此服务将为 <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 提供结果。</param>
      <exception cref="T:System.InvalidOperationException">
                扩展的 <paramref name="member" /> 值为 null。必须在构造期间或使用 <see cref="M:System.Windows.Markup.StaticExtension.ProvideValue(System.IServiceProvider)" /> 之前设置此值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> 字符串的某部分未进行正确分析。- 或 -<paramref name="serviceProvider" /> 未能为 <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 提供服务。- 或 -<paramref name="typeName" /> 值未解析为类型。</exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.Type">
      <summary>获取此扩展的类型，如果它是通过 <see cref="M:System.Windows.Markup.TypeExtension.#ctor(System.Type)" /> 构造函数设置的。</summary>
      <returns>建立的类型。这可能为 null。</returns>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.TypeName">
      <summary>获取或设置此标记扩展所表示的类型名称。</summary>
      <returns>标识类型的字符串，格式为 <paramref name="Prefix" />:<paramref name="Typename" />，其中 Prefix 指的是 XAML 文件中的 XML 命名空间前缀。</returns>
      <exception cref="T:System.ArgumentNullException">无法将此值设置为 null。</exception>
    </member>
    <member name="T:System.Windows.Markup.XamlDesignerSerializationManager">
      <summary>提供用于序列化的服务。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlDesignerSerializationManager.#ctor(System.Xml.XmlWriter)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XamlDesignerSerializationManager" /> 类的一个新实例。</summary>
      <param name="xmlWriter">初始化新的 <see cref="T:System.Windows.Markup.XamlDesignerSerializationManager" /> 时使用的编写器。 </param>
    </member>
    <member name="P:System.Windows.Markup.XamlDesignerSerializationManager.XamlWriterMode">
      <summary>获取或设置 XAML 编写器模式。</summary>
      <returns>编写器模式。</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">要将 <see cref="P:System.Windows.Markup.XamlDesignerSerializationManager.XamlWriterMode" /> 设置为的值不是 <see cref="T:System.Windows.Markup.XamlWriterMode" /> 枚举的有效值。</exception>
    </member>
    <member name="T:System.Windows.Markup.XamlInstanceCreator">
      <summary>提供用来存储分析器记录（供以后实例化时使用）的方法的抽象类。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlInstanceCreator.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.XamlInstanceCreator" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlInstanceCreator.CreateObject">
      <summary>在派生类中重写时，创建一个用于存储分析器记录的新对象。</summary>
      <returns>创建的对象。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlParseException">
      <summary>表示特定于分析器的异常的异常类。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlParseException.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.XamlParseException" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XamlParseException" /> 类的一个新实例。 </summary>
      <param name="info">包含序列化或反序列化对象所需的全部信息。</param>
      <param name="context">已序列化的流的源和目标。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlParseException.#ctor(System.String)">
      <summary>使用指定的异常消息初始化 <see cref="T:System.Windows.Markup.XamlParseException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Exception)">
      <summary>使用指定的异常消息和内部异常初始化 <see cref="T:System.Windows.Markup.XamlParseException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="innerException">发生的异常。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32)">
      <summary>使用指定的异常消息、指定的行号以及该行中的位置初始化 <see cref="T:System.Windows.Markup.XamlParseException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="lineNumber">发生异常的行号。</param>
      <param name="linePosition">行中发生异常的位置。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32,System.Exception)">
      <summary>使用指定的异常消息、内部异常、行号以及该行中的位置初始化 <see cref="T:System.Windows.Markup.XamlParseException" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
      <param name="lineNumber">发生异常的行号。</param>
      <param name="linePosition">行中发生异常的位置。</param>
      <param name="innerException">发生的异常。</param>
    </member>
    <member name="P:System.Windows.Markup.XamlParseException.BaseUri">
      <summary>获取发生异常时有效的基 URI。</summary>
      <returns>URI。 </returns>
    </member>
    <member name="M:System.Windows.Markup.XamlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>通过填充指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，获取序列化指定对象所需的数据。</summary>
      <param name="info">要在其中添加序列化数据的序列化信息对象。</param>
      <param name="context">此序列化的目标。</param>
    </member>
    <member name="P:System.Windows.Markup.XamlParseException.KeyContext">
      <summary>获取或设置发生异常的字典中项的 XAML 键值。</summary>
      <returns>XAML 键值。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlParseException.LineNumber">
      <summary>获取发生异常的行号。</summary>
      <returns>行号。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlParseException.LinePosition">
      <summary>获取行中发生异常的位置。</summary>
      <returns>行位置。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlParseException.NameContext">
      <summary>获取或设置发生异常的对象的 XAML 名称。</summary>
      <returns>XAML 名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlParseException.UidContext">
      <summary>获取或设置发生异常的对象的 XAML UID。</summary>
      <returns>UID 的值。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlReader">
      <summary>
                    提供将 XAML 标记分析为对象的方法。
                </summary>
    </member>
    <member name="M:System.Windows.Markup.XamlReader.#ctor">
      <summary>
                    初始化 <see cref="T:System.Windows.Markup.XamlReader" /> 类的一个新实例。
                </summary>
    </member>
    <member name="M:System.Windows.Markup.XamlReader.CancelAsync">
      <summary>
                    中止当前的异步加载操作（如果当前正在运行该操作的话）。
                </summary>
    </member>
    <member name="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream)">
      <summary>
                    读取指定的 <see cref="T:System.IO.Stream" /> 中的 XAML 标记，并返回与指定的 XML 的根对应的 <see cref="T:System.Object" />。
                </summary>
      <returns>
反序列化的树的根。
                </returns>
      <param name="stream">
                    要加载的 XAML。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)">
      <summary>
                    读取指定的 <see cref="T:System.IO.Stream" /> 中的 XAML 标记，并返回与指定的 XML 的根对应的 <see cref="T:System.Object" />。
                </summary>
      <returns>
反序列化的树的根。
                </returns>
      <param name="stream">
                    要加载的 XAML。
                </param>
      <param name="parserContext">
由分析器使用的上下文信息。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。
                
                    - 或 -
                <paramref name="parserContext" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)">
      <summary>
                    读取指定的 <see cref="T:System.Xml.XmlReader" /> 中的 XAML 标记，并返回与指定的 XML 的根对应的 <see cref="T:System.Object" />。
                </summary>
      <returns>
反序列化的树的根。
                </returns>
      <param name="reader">
                    要加载的 XAML。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)">
      <summary>
异步读取指定的 <see cref="T:System.IO.Stream" /> 中的 XAML 标记，并返回对应的对象树的根。
                </summary>
      <returns>
反序列化的树的根。
                </returns>
      <param name="stream">
                    要加载的 XAML。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
对同一个 <see cref="T:System.Windows.Markup.XamlReader" /> 同时执行多个加载操作。
                </exception>
    </member>
    <member name="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)">
      <summary>
异步读取指定的 <see cref="T:System.IO.Stream" /> 中的 XAML 标记，并返回对应的对象树的根。
                </summary>
      <returns>
反序列化的树的根。
                </returns>
      <param name="stream">
                    要加载的 XAML。
                </param>
      <param name="parserContext">
由分析器使用的上下文信息。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
对同一个 <see cref="T:System.Windows.Markup.XamlReader" /> 同时执行多个加载操作。
                </exception>
    </member>
    <member name="M:System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)">
      <summary>
                    异步读取指定的 <see cref="T:System.Xml.XmlReader" /> 中的 XAML 标记，并返回对应的对象树的根。
                </summary>
      <returns>
反序列化的树的根。
                </returns>
      <param name="reader">
                    要加载的 XAML。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
对同一个 <see cref="T:System.Windows.Markup.XamlReader" /> 同时执行多个加载操作。
                </exception>
    </member>
    <member name="E:System.Windows.Markup.XamlReader.LoadCompleted">
      <summary>
                    在同步或异步加载操作完成时发生。
                </summary>
    </member>
    <member name="T:System.Windows.Markup.XamlTypeMapper">
      <summary>将 XML 名称映射到合适的类型。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlTypeMapper.#ctor(System.String[])">
      <summary>通过使用 <see cref="T:System.Windows.Markup.XamlTypeMapper" /> 在解析 XAML 标记时应该使用的指定程序集名称，初始化 <see cref="T:System.Windows.Markup.XamlTypeMapper" /> 类的新实例。</summary>
      <param name="assemblyNames">
        <see cref="T:System.Windows.Markup.XamlTypeMapper" /> 在解析 XAML 时应该使用的程序集名称的列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyNames" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XamlTypeMapper.#ctor(System.String[],System.Windows.Markup.NamespaceMapEntry[])">
      <summary>使用指定的程序集名称和命名空间映射初始化 <see cref="T:System.Windows.Markup.XamlTypeMapper" /> 类的新实例。</summary>
      <param name="assemblyNames">
        <see cref="T:System.Windows.Markup.XamlTypeMapper" /> 在解析 XAML 时应该使用的程序集名称的列表。</param>
      <param name="namespaceMaps">
        <see cref="T:System.Windows.Markup.XamlTypeMapper" /> 在解析 XAML 时应该使用的命名空间映射。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyNames" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XamlTypeMapper.AddMappingProcessingInstruction(System.String,System.String,System.String)">
      <summary>定义 XML 命名空间到 CLR 命名空间的映射。</summary>
      <param name="xmlNamespace">XML 命名空间 URI。</param>
      <param name="clrNamespace">包含类型的 CLR 命名空间。</param>
      <param name="assemblyName">包含 CLR 命名空间的程序集。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> 为 null - 或 - <paramref name="clrNamespace" /> 为 null - 或 - <paramref name="assemblyName" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XamlTypeMapper.AllowInternalType(System.Type)">
      <summary>指定在完全信任环境中调用子类 <see cref="T:System.Windows.Markup.XamlTypeMapper" />，以便参与决定是否应访问某个内部类型。</summary>
      <returns>
            如果可以访问内部类型，则为 true；否则为 false。</returns>
      <param name="type"></param>
    </member>
    <member name="P:System.Windows.Markup.XamlTypeMapper.DefaultMapper">
      <summary>获取要使用的 <see cref="T:System.Windows.Markup.XamlTypeMapper" /> 的实例（如果尚未指定）。</summary>
      <returns>默认类型映射器。</returns>
    </member>
    <member name="M:System.Windows.Markup.XamlTypeMapper.GetType(System.String,System.String)">
      <summary>使用指定的 XML 命名空间 URI 和本地名称，获取 XAML 标记所映射到的 CLR 类型。</summary>
      <returns>对象的类型；如果找不到类型，则为 null。</returns>
      <param name="xmlNamespace">XAML 标记的 XML 命名空间 URI。</param>
      <param name="localName">XAML 标记的本地名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> 为 null - 或 - <paramref name="localName" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XamlTypeMapper.SetAssemblyPath(System.String,System.String)">
      <summary>指定要在加载程序集时使用的路径。</summary>
      <param name="assemblyName">程序集的简称，在该名称中未指定扩展名或路径。</param>
      <param name="assemblyPath">程序集的文件路径。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 为 null- 或 -<paramref name="assemblyPath" /> 为 null。</exception>
      <exception cref="T:System.Windows.Markup.XamlParseException">
        <paramref name="assemblyName" /> is <see cref="F:System.String.Empty" />- 或 -为 <paramref name="assemblyPath" /><see cref="F:System.String.Empty" />。</exception>
    </member>
    <member name="T:System.Windows.Markup.XamlWriter">
      <summary>提供一个静态 <see cref="Overload:System.Windows.Markup.XamlWriter.Save" /> 方法（多个签名），该方法可用于以受到限制的可扩展应用程序标记语言 (XAML) 序列化方式，将提供的运行时对象序列化为 XAML。该类不能继承，且只有静态方法。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlWriter.Save(System.Object)">
      <summary>返回序列化提供的对象及其属性的可扩展应用程序标记语言 (XAML) 字符串。</summary>
      <returns>
            可以写入流或文件的可扩展应用程序标记语言 (XAML) 字符串。将序列化位于提供的 <paramref name="obj" /> 元素下面的所有元素的逻辑树。</returns>
      <param name="obj">要序列化的元素。通常，这是页面或应用程序的根元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">应用程序未在完全信任环境中运行。</exception>
    </member>
    <member name="M:System.Windows.Markup.XamlWriter.Save(System.Object,System.IO.Stream)">
      <summary>将可扩展应用程序标记语言 (XAML) 信息保存到提供的流中，以便序列化提供的对象及其属性。</summary>
      <param name="obj">要序列化的元素。通常，这是页面或应用程序的根元素。</param>
      <param name="stream">序列化的 XAML 信息的目标流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 null - 或 - <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">应用程序未在完全信任环境中运行。</exception>
    </member>
    <member name="M:System.Windows.Markup.XamlWriter.Save(System.Object,System.IO.TextWriter)">
      <summary>将可扩展应用程序标记语言 (XAML) 信息另存为提供的文本编写器对象的源。然后，可以使用该文本编写器的输出来序列化提供的对象及其属性。</summary>
      <param name="obj">要序列化的元素。通常，这是页面或应用程序的根元素。</param>
      <param name="writer">用于写入序列化的 XAML 信息的 TextWriter 实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 null - 或 - <paramref name="writer" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">应用程序未在完全信任环境中运行。</exception>
    </member>
    <member name="M:System.Windows.Markup.XamlWriter.Save(System.Object,System.Windows.Markup.XamlDesignerSerializationManager)">
      <summary>将可扩展应用程序标记语言 (XAML) 信息保存到自定义序列化程序中。然后，可以使用该序列化程序的输出来序列化提供的对象及其属性。</summary>
      <param name="obj">要序列化的元素。通常，这是页面或应用程序的根元素。</param>
      <param name="manager">自定义序列化实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 null - 或 - <paramref name="manager" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">应用程序未在完全信任环境中运行。</exception>
    </member>
    <member name="M:System.Windows.Markup.XamlWriter.Save(System.Object,System.Xml.XmlWriter)">
      <summary>将可扩展应用程序标记语言 (XAML) 信息另存为提供的 XML 编写器对象的源。然后，可以使用该 XML 编写器的输出来序列化提供的对象及其属性。</summary>
      <param name="obj">要序列化的元素。通常，这是页面或应用程序的根元素。</param>
      <param name="xmlWriter">用于写入序列化的 XAML 信息的编写器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 null - 或 - <paramref name="manager" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">应用程序未在完全信任环境中运行。</exception>
    </member>
    <member name="T:System.Windows.Markup.XamlWriterMode">
      <summary>为 <see cref="F:System.Windows.Markup.XamlWriterMode.Expression" /> 类型的值指定 XAML 编写器模式。</summary>
    </member>
    <member name="F:System.Windows.Markup.XamlWriterMode.Expression">
      <summary>将序列化 <see cref="T:System.Windows.Expression" />。</summary>
    </member>
    <member name="F:System.Windows.Markup.XamlWriterMode.Value">
      <summary>将序列化 <see cref="T:System.Windows.Expression" /> 的计算结果值。</summary>
    </member>
    <member name="T:System.Windows.Markup.XamlWriterState">
      <summary>此类型支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="F:System.Windows.Markup.XamlWriterState.Starting">
      <summary>
        <see cref="T:System.Windows.Markup.XamlWriter" /> 已启动。</summary>
    </member>
    <member name="F:System.Windows.Markup.XamlWriterState.Finished">
      <summary>
        <see cref="T:System.Windows.Markup.XamlWriter" /> 已完成。</summary>
    </member>
    <member name="T:System.Windows.Markup.XmlAttributeProperties">
      <summary>封装 <see cref="T:System.Windows.DependencyObject" /> 的 XML 特定属性。 </summary>
    </member>
    <member name="M:System.Windows.Markup.XmlAttributeProperties.GetXmlNamespaceMaps(System.Windows.DependencyObject)">
      <summary>获取指定的 <see cref="T:System.Windows.DependencyObject" /> 的 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlNamespaceMaps" />附加属性的值。</summary>
      <returns>指定对象的 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlNamespaceMaps" /> 属性的值。</returns>
      <param name="dependencyObject">要从中获取 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlNamespaceMaps" /> 属性的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XmlAttributeProperties.GetXmlnsDefinition(System.Windows.DependencyObject)">
      <summary>获取指定的 <see cref="T:System.Windows.DependencyObject" /> 的 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlnsDefinition" />附加属性的值。</summary>
      <returns>指定对象的 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlnsDefinition" /> 属性的值。</returns>
      <param name="dependencyObject">要从中获取 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlnsDefinition" /> 属性的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XmlAttributeProperties.GetXmlnsDictionary(System.Windows.DependencyObject)">
      <summary>获取指定的 <see cref="T:System.Windows.DependencyObject" /> 的 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlnsDictionary" />附加属性的值。</summary>
      <returns>指定对象的 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlnsDictionary" /> 属性的值。</returns>
      <param name="dependencyObject">要从中获取 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlnsDictionary" /> 属性的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XmlAttributeProperties.GetXmlSpace(System.Windows.DependencyObject)">
      <summary>获取指定的 <see cref="T:System.Windows.DependencyObject" /> 的 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlSpace" />附加属性的值。</summary>
      <returns>指定对象的 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlSpace" /> 属性的值。</returns>
      <param name="dependencyObject">要从中获取 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlSpace" /> 属性的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XmlAttributeProperties.SetXmlNamespaceMaps(System.Windows.DependencyObject,System.String)">
      <summary>设置指定的 <see cref="T:System.Windows.DependencyObject" /> 的 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlNamespaceMaps" />附加属性的值。</summary>
      <param name="dependencyObject">要设置 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlNamespaceMaps" /> 属性的对象。</param>
      <param name="value">XmlNamespaceMaps。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XmlAttributeProperties.SetXmlnsDefinition(System.Windows.DependencyObject,System.String)">
      <summary>设置指定的 <see cref="T:System.Windows.DependencyObject" /> 的 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlnsDefinition" />附加属性的值。</summary>
      <param name="dependencyObject">要设置 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlnsDefinition" /> 属性的对象。</param>
      <param name="value">XML 命名空间定义。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XmlAttributeProperties.SetXmlnsDictionary(System.Windows.DependencyObject,System.Windows.Markup.XmlnsDictionary)">
      <summary>设置指定的 <see cref="T:System.Windows.DependencyObject" /> 的 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlnsDictionary" />附加属性的值。</summary>
      <param name="dependencyObject">要设置 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlnsDictionary" /> 属性的对象。</param>
      <param name="value">XmlnsDictionary。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XmlAttributeProperties.SetXmlSpace(System.Windows.DependencyObject,System.String)">
      <summary>设置指定的 <see cref="T:System.Windows.DependencyObject" /> 的 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlSpace" />附加属性的值。</summary>
      <param name="dependencyObject">要设置 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlSpace" /> 属性的对象。</param>
      <param name="value">XmlSpace。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> 为 null。</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlAttributeProperties.XmlNamespaceMaps">
      <summary>获取或设置 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlNamespaceMaps" /> 的值。</summary>
      <returns>XmlNamespaceMaps。</returns>
    </member>
    <member name="F:System.Windows.Markup.XmlAttributeProperties.XmlNamespaceMapsProperty">
      <summary>标识 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlNamespaceMaps" />附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlNamespaceMaps" />附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlAttributeProperties.XmlnsDefinition">
      <summary>获取或设置 XmlnsDefinition 的值。</summary>
      <returns>XmlnsDefinition。</returns>
    </member>
    <member name="F:System.Windows.Markup.XmlAttributeProperties.XmlnsDefinitionProperty">
      <summary>标识 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlnsDefinition" />附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlnsDefinition" />附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlAttributeProperties.XmlnsDictionary">
      <summary>获取或设置 XmlnsDictionary 的值。</summary>
      <returns>XmlnsDictionary。</returns>
    </member>
    <member name="F:System.Windows.Markup.XmlAttributeProperties.XmlnsDictionaryProperty">
      <summary>标识 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlnsDictionary" />附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlnsDictionary" />附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlAttributeProperties.XmlSpace">
      <summary>获取或设置 xml:space 属性的值。</summary>
      <returns>XmlSpace。</returns>
    </member>
    <member name="F:System.Windows.Markup.XmlAttributeProperties.XmlSpaceProperty">
      <summary>标识 <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlSpace" />附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Markup.XmlAttributeProperties.XmlSpace" />附加属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsDictionary">
      <summary>表示包含 XML 命名空间映射的字典。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.#ctor(System.Windows.Markup.XmlnsDictionary)">
      <summary>通过将指定字典用作基础，初始化 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 类的新实例。</summary>
      <param name="xmlnsDictionary">新的 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 所基于的字典。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlnsDictionary" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.Add(System.Object,System.Object)">
      <summary>将命名空间添加到此 <see cref="T:System.Windows.Markup.XmlnsDictionary" />。</summary>
      <param name="prefix">此命名空间的 XML 前缀。这应该是一个字符串。</param>
      <param name="xmlNamespace">前缀所映射到的命名空间。这应该是一个字符串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="prefix" /> 或 <paramref name="xmlNamespace" /> 是字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> 或 <paramref name="xmlNamespace" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.Add(System.String,System.String)">
      <summary>将命名空间添加到此 <see cref="T:System.Windows.Markup.XmlnsDictionary" />。</summary>
      <param name="prefix">此命名空间的 XML 前缀。</param>
      <param name="xmlNamespace">前缀所映射到的命名空间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> 或 <paramref name="xmlNamespace" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.Clear">
      <summary>从此 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 中移除所有项。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.Contains(System.Object)">
      <summary>返回一个值，该值确定指定的键是否位于此 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 中。</summary>
      <returns>
            如果该键位于字典中，则为 true；否则为 false。</returns>
      <param name="key">要搜索的前缀。</param>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 中的项复制到指定的数组中。</summary>
      <param name="array">要将表数据复制到的数组。</param>
      <param name="index">目标数组中从零开始的索引，从该索引开始复制。</param>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.CopyTo(System.Collections.DictionaryEntry[],System.Int32)">
      <summary>将 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 中的项复制到指定的 <see cref="T:System.Collections.DictionaryEntry" /> 数组中。</summary>
      <param name="array">要将表数据复制到的数组。</param>
      <param name="index">目标数组中从零开始的索引，从该索引开始复制。</param>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDictionary.Count">
      <summary>获取 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 中的项数。</summary>
      <returns>
        <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 中的项数。</returns>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.DefaultNamespace">
      <summary>查找与空的前缀对应的命名空间。</summary>
      <returns>如果存在与空的前缀对应的命名空间，则为该命名空间；否则为 null。</returns>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.GetDictionaryEnumerator">
      <summary>返回一个循环访问此 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 的字典枚举数。</summary>
      <returns>此字典的字典枚举数。</returns>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.GetEnumerator">
      <summary>返回一个循环访问此 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 的枚举数。</summary>
      <returns>此字典的枚举数。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDictionary.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 的大小是否是固定的。</summary>
      <returns>
            如果大小是固定的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDictionary.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 是否为只读。</summary>
      <returns>
            如果该字典为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDictionary.IsSynchronized">
      <summary>获取一个值，该值指示对此 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 的访问是否是线程安全的。</summary>
      <returns>
            如果对该字典的访问是线程安全的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDictionary.Item(System.Object)">
      <summary>获取或设置与指定的 XML 前缀关联的命名空间。</summary>
      <param name="prefix">获取或设置关联的命名空间时所针对的前缀。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="prefix" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> 不是字符串。</exception>
      <exception cref="T:System.ArgumentNullException">要与 <paramref name="prefix" /> 关联的命名空间是 null。</exception>
      <exception cref="T:System.ArgumentException">要与 <paramref name="prefix" /> 关联的命名空间不是字符串。</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDictionary.Item(System.String)">
      <summary>获取或设置与指定的 XML 前缀关联的命名空间。</summary>
      <param name="prefix">获取或设置关联的命名空间时所针对的前缀。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="prefix" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">要与 <paramref name="prefix" /> 关联的命名空间是 null。</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDictionary.Keys">
      <summary>获取 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 中的所有键的集合。</summary>
      <returns>字典中的所有键的集合。</returns>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.LookupNamespace(System.String)">
      <summary>返回与指定的 XML 命名空间前缀对应的命名空间。</summary>
      <returns>如果存在与指定前缀对应的命名空间，则为该命名空间；否则为 null。</returns>
      <param name="prefix">要查找的 XML 命名空间前缀。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.LookupPrefix(System.String)">
      <summary>返回与指定的命名空间统一资源标识符 (URI) 对应的 XML 前缀。</summary>
      <returns>如果指定的命名空间对应于默认的命名空间，则返回 <see cref="F:System.String.Empty" />，或者返回与给定命名空间相对应的 XML 前缀；否则返回 null。</returns>
      <param name="xmlNamespace">要查找的命名空间 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.PopScope">
      <summary>弹出 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 的范围。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.PushScope">
      <summary>推入 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 的范围。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.Remove(System.Object)">
      <summary>从 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 中移除指定的 XML 前缀。</summary>
      <param name="prefix">要移除的前缀。</param>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.Remove(System.String)">
      <summary>从 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 中移除指定的 XML 前缀。</summary>
      <param name="prefix">要移除的前缀。</param>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.Seal">
      <summary>锁定字典，使其无法进行更改。</summary>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDictionary.Sealed">
      <summary>获取一个值，该值指示 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 是否是密封的。</summary>
      <returns>
            如果字典是密封的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDictionary.SyncRoot">
      <summary>获取可用于同步 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 访问的对象。</summary>
      <returns>一个可用于同步对字典的访问的对象。</returns>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.System#Collections#IDictionary#GetEnumerator">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IDictionary.GetEnumerator" />。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections." /><see cref="IDictionaryEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections." /><see cref="Enumerator" /> 对象。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDictionary.Values">
      <summary>获取 <see cref="T:System.Windows.Markup.XmlnsDictionary" /> 中的所有值的集合。</summary>
      <returns>一个包含字典中的所有值的集合。</returns>
    </member>
    <member name="M:System.Windows.Markup.XamlReader.Parse(System.String)">
      <summary>
                    读取指定的文本字符串中的 XAML 标记，并返回与指定的 XML 的根对应的对象。
                </summary>
      <returns>
反序列化的树的根。
                </returns>
      <param name="xamlText">
                    输入 XAML，作为单个文本字符串。
                </param>
    </member>
    <member name="M:System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)">
      <summary>
                    读取指定的文本字符串中的 XAML 标记（使用指定的 <see cref="T:System.Windows.Markup.ParserContext" />），并返回与指定的 XML 的根对应的对象。
                </summary>
      <returns>
反序列化的树的根。
                </returns>
      <param name="xamlText">
                    输入 XAML，作为单个文本字符串。
                </param>
      <param name="parserContext">
由分析器使用的上下文信息。
                </param>
    </member>
    <member name="T:System.Windows.Markup.Localizer.BamlLocalizabilityResolver">
      <summary>解析二进制 XAML (BAML) 中类和属性的可本地化设置。</summary>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizabilityResolver.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizabilityResolver" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizabilityResolver.GetElementLocalizability(System.String,System.String)">
      <summary> 返回一个值，该值指示指定类型的元素是否可本地化以及在可本地化时是否可设置为内联格式。</summary>
      <returns>一个包含指定程序集和元素的本地化信息的对象。</returns>
      <param name="assembly">包含要本地化的二进制 XAML (BAML) 程序集的全名。</param>
      <param name="className">要检索其本地化信息的元素的完整类名。</param>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizabilityResolver.GetPropertyLocalizability(System.String,System.String,System.String)">
      <summary> 返回一个值，该值指示指定类型的元素的指定属性是否可本地化。</summary>
      <returns>一个指定属性是否可本地化以及如何本地化的对象。</returns>
      <param name="assembly">包含要本地化的二进制 XAML (BAML) 程序集的全名。</param>
      <param name="className">要检索其本地化信息的元素的完整类名。</param>
      <param name="property">要检索其本地化信息的属性的名称。</param>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizabilityResolver.ResolveAssemblyFromClass(System.String)">
      <summary> 返回包含指定类的程序集的全名。</summary>
      <returns>包含类的程序集的全名。</returns>
      <param name="className">完整的类名。</param>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizabilityResolver.ResolveFormattingTagToClass(System.String)">
      <summary> 返回二进制 XAML (BAML) 中尚未遇到过的可扩展应用程序标记语言 (XAML) 标记的完整类名。</summary>
      <returns>与该标记关联的完整类名。</returns>
      <param name="formattingTag">该标记的名称。</param>
    </member>
    <member name="T:System.Windows.Markup.Localizer.BamlLocalizableResource">
      <summary> 表示二进制 XAML (BAML) 流中的可本地化资源。</summary>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizableResource.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizableResource" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizableResource.#ctor(System.String,System.String,System.Windows.LocalizationCategory,System.Boolean,System.Boolean)">
      <summary>使用指定的可本地化值、本地化注释、资源类别、本地化锁状态及资源的可见性来初始化 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizableResource" /> 类的新实例。</summary>
      <param name="content">可本地化的值。</param>
      <param name="comments">用于本地化的注释。</param>
      <param name="category">资源的字符串类别。</param>
      <param name="modifiable">本地化锁，由开发人员指定。</param>
      <param name="readable">将此资源标识为在翻译时可见。</param>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizableResource.Category">
      <summary> 获取或设置资源的本地化类别。</summary>
      <returns>本地化类别。</returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizableResource.Comments">
      <summary> 获取或设置与资源关联的本地化注释。</summary>
      <returns>本地化注释。</returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizableResource.Content">
      <summary> 获取或设置可本地化的内容。</summary>
      <returns>可本地化的内容。</returns>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizableResource.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizableResource" /> 对象是否等于此对象。</summary>
      <returns>
            如果 <paramref name="other" /> 等于此对象，则为 true；否则为 false。</returns>
      <param name="other">要测试相等的 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizableResource" /> 对象。</param>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizableResource.GetHashCode">
      <summary>返回表示此实例的 32 位有符号整数哈希代码。</summary>
      <returns>32 位有符号整数。</returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizableResource.Modifiable">
      <summary> 获取或设置一个值，该值指示是否可修改可本地化的资源。</summary>
      <returns>
            如果可修改该资源，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizableResource.Readable">
      <summary> 获取或设置资源在翻译时是否可见。</summary>
      <returns>
            如果资源在翻译时可见，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Windows.Markup.Localizer.BamlLocalizableResourceKey">
      <summary>表示 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizableResource" /> 的一个键，该键用于标识可本地化的资源。</summary>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizableResourceKey.#ctor(System.String,System.String,System.String)">
      <summary>用提供的唯一 ID、类名称和属性名称初始化 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizableResourceKey" /> 类的新实例。</summary>
      <param name="uid">具有可本地化资源的元素的唯一 ID。</param>
      <param name="className">二进制 XAML (BAML) 中可本地化资源的类名称。</param>
      <param name="propertyName">BAML 中可本地化资源的属性名称。</param>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizableResourceKey.AssemblyName">
      <summary>获取定义可本地化资源类型的程序集的名称。</summary>
      <returns>程序集的名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizableResourceKey.ClassName">
      <summary>获取与可本地化资源关联的类名称。</summary>
      <returns>可本地化资源的类名称。</returns>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizableResourceKey.Equals(System.Object)">
      <summary>比较对象与 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizableResourceKey" /> 的实例是否相等。</summary>
      <returns>
如果两个实例相等，则为 true；否则为 false。</returns>
      <param name="other">要比较是否相等的另一个 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizableResourceKey" /> 实例。</param>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizableResourceKey.Equals(System.Windows.Markup.Localizer.BamlLocalizableResourceKey)">
      <summary>比较 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizableResourceKey" /> 的两个实例是否相等。</summary>
      <returns>
如果两个实例相等，则为 true；否则为 false。</returns>
      <param name="other">要比较是否相等的另一个 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizableResourceKey" /> 实例。</param>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizableResourceKey.GetHashCode">
      <summary>返回表示此实例的 32 位有符号整数哈希代码。</summary>
      <returns>32 位有符号整数。</returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizableResourceKey.PropertyName">
      <summary>获取与可本地化资源关联的属性名称。</summary>
      <returns>可本地化资源的属性名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizableResourceKey.Uid">
      <summary>获取包含可本地化资源的元素的唯一 ID。</summary>
      <returns>包含可本地化资源的元素的唯一 ID。</returns>
    </member>
    <member name="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary">
      <summary>
                     将所有可本地化的资源包含在一条 二进制 XAML (BAML) 记录中。
                </summary>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizationDictionary.#ctor">
      <summary>
                     初始化 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 类的一个新实例。
                </summary>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizationDictionary.Add(System.Windows.Markup.Localizer.BamlLocalizableResourceKey,System.Windows.Markup.Localizer.BamlLocalizableResource)">
      <summary>
                    添加具有指定键的可本地化资源。
                </summary>
      <param name="key">
                    资源的键。
                </param>
      <param name="value">
                    一个包含该资源的对象。
                </param>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizationDictionary.Clear">
      <summary>
                     删除 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 对象中的所有资源。
                </summary>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizationDictionary.Contains(System.Windows.Markup.Localizer.BamlLocalizableResourceKey)">
      <summary>
                    确定 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 对象是否包含具有指定键的资源。
                </summary>
      <returns>
                    如果 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 对象包含具有指定键的资源，则为 true；否则为 false。
                </returns>
      <param name="key">
                    资源的键。
                </param>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizationDictionary.CopyTo(System.Collections.DictionaryEntry[],System.Int32)">
      <summary>
                     从指定的索引处开始，将 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 对象的内容复制到 <see cref="T:System.Collections.DictionaryEntry" /> 对象的一维数组中。
                </summary>
      <param name="array">
                    要存放数据的对象数组。
                </param>
      <param name="arrayIndex">
                    起始索引值。
                </param>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizationDictionary.Count">
      <summary>
                     获取 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 对象中可本地化资源的数目。
                </summary>
      <returns>
                    可本地化资源的数目。
                </returns>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizationDictionary.GetEnumerator">
      <summary>
                    获取 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 对象的枚举数对象。
                </summary>
      <returns>
                    一个 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionaryEnumerator" />，可循环访问字典的内容。
                </returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizationDictionary.IsFixedSize">
      <summary>
                     获取一个值，该值指示 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 对象是否具有固定大小。
                </summary>
      <returns>
                    如果该象具有固定大小，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizationDictionary.IsReadOnly">
      <summary>
                     获取一个值，该值指示 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 对象是否为只读。
                </summary>
      <returns>
                    如果该对象为只读，则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizationDictionary.Item(System.Windows.Markup.Localizer.BamlLocalizableResourceKey)">
      <summary>
                    获取或设置一个由它的键指定的可本地化资源。
                </summary>
      <param name="key">
                    资源的键值。
                </param>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizationDictionary.Keys">
      <summary>
                     获取一个集合，其中包含 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 对象中的所有键。
                </summary>
      <returns>
                    一个包含对象中所有键的集合。
                </returns>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizationDictionary.Remove(System.Windows.Markup.Localizer.BamlLocalizableResourceKey)">
      <summary>
                    从 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 对象中移除指定的可本地化资源。
                </summary>
      <param name="key">
                    要移除的资源的键。
                </param>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizationDictionary.RootElementKey">
      <summary>
                     如果根元素可本地化，则获取它的键。
                </summary>
      <returns>
                    如果根元素可本地化，则为它的键。否则，该值将设置为 null。
                </returns>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizationDictionary.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />。
                </summary>
      <param name="array">
                    从零开始的 <see cref="T:System.Array" />，它接收从 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 复制来的项。
                </param>
      <param name="index">
                    指定的 <see cref="T:System.Array" /> 中接收复制内容的第一个位置。
                </param>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizationDictionary.System#Collections#ICollection#Count">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.Count" />。
                </summary>
      <returns>
                    集合中的项数。
                </returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizationDictionary.System#Collections#ICollection#IsSynchronized">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。
                </summary>
      <returns>
                    如果对 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 的访问是同步的（线程安全），则为 true；否则为 false。
                </returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizationDictionary.System#Collections#ICollection#SyncRoot">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。
                </summary>
      <returns>
                    可用于同步对 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 的访问的对象。
                </returns>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizationDictionary.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />。
                </summary>
      <param name="key">
用作要添加的元素的键的对象。
                </param>
      <param name="value">
                    要添加到 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizationDictionary.System#Collections#IDictionary#Contains(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IDictionary.Contains(System.Object)" />。
                </summary>
      <returns>
                    如果在 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。
                </returns>
      <param name="key">
                    要在 <see cref="T:System.Windows.Media.TextEffectCollection" /> 中查找的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizationDictionary.System#Collections#IDictionary#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IDictionary.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections." /><see cref="IDictionaryEnumerator" /> 对象。
                </returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizationDictionary.System#Collections#IDictionary#Item(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="P:System.Collections.IDictionary.Item(System.Object)" />。
                </summary>
      <returns>
                    带有指定键的元素。
                </returns>
      <param name="key">
                    要获取或设置的元素的键。
                </param>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizationDictionary.System#Collections#IDictionary#Remove(System.Object)">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IDictionary.Remove(System.Object)" />。
                </summary>
      <param name="key">
                    要从 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 移除的 <see cref="T:System.Object" />。
                </param>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizationDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    有关此成员的说明，请参见 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。
                </summary>
      <returns>
                    可用于循环访问集合的 <see cref="T:System.Collections." /><see cref="IEnumerator" /> 对象。
                </returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizationDictionary.Values">
      <summary>
                     获取一个集合，其中包含 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 对象中的所有值。
                </summary>
      <returns>
                    一个包含对象中所有值的集合。
                </returns>
    </member>
    <member name="T:System.Windows.Markup.Localizer.BamlLocalizationDictionaryEnumerator">
      <summary> 定义一个枚举数，用来循环访问 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 对象的内容。</summary>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizationDictionaryEnumerator.Current">
      <summary>获取集合中的当前对象。</summary>
      <returns>当前对象。</returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizationDictionaryEnumerator.Entry">
      <summary> 获取当前元素的 <see cref="T:System.Collections.DictionaryEntry" /> 对象。</summary>
      <returns>一个包含当前元素的键和值的对象。</returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizationDictionaryEnumerator.Key">
      <summary> 获取当前元素的键。</summary>
      <returns>当前元素的键。</returns>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizationDictionaryEnumerator.MoveNext">
      <summary>移至集合中的下一项。</summary>
      <returns>
            如果枚举数成功前移至下一个元素，则为 true。如果没有剩余元素，则此方法会返回 false。</returns>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizationDictionaryEnumerator.Reset">
      <summary>将枚举数返回至其初始位置，即位于集合中第一个对象之前。</summary>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizationDictionaryEnumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IDictionaryEnumerator.Key" />。</summary>
      <returns>当前枚举元素的键。</returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizationDictionaryEnumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IDictionaryEnumerator.Value" />。</summary>
      <returns>当前枚举元素的值。</returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizationDictionaryEnumerator.System#Collections#IEnumerator#Current">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.IEnumerator.Current" />。</summary>
      <returns>集合中的当前元素。</returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizationDictionaryEnumerator.Value">
      <summary> 获取当前元素的值。</summary>
      <returns>当前元素的值。</returns>
    </member>
    <member name="T:System.Windows.Markup.Localizer.BamlLocalizer">
      <summary>从二进制 XAML (BAML) 文件提取资源，并生成 BAML 源的本地化版本。</summary>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizer.#ctor(System.IO.Stream)">
      <summary>使用指定的二进制 XAML (BAML) 源流初始化 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizer" /> 类的新实例。</summary>
      <param name="source">一个包含要本地化的二进制 XAML (BAML) 输入的文件流。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="source" /> 为 null 时发生。</exception>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizer.#ctor(System.IO.Stream,System.Windows.Markup.Localizer.BamlLocalizabilityResolver)">
      <summary>使用指定的本地化解析程序和二进制 XAML (BAML) 源流来初始化 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizer" /> 类的新实例。</summary>
      <param name="source">一个包含要本地化的二进制 XAML (BAML) 输入的文件流。</param>
      <param name="resolver">
        <see cref="T:System.Windows.Markup.Localizer.BamlLocalizabilityResolver" /> 的一个实例。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="source" /> 为 null 时发生。</exception>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizer.#ctor(System.IO.Stream,System.Windows.Markup.Localizer.BamlLocalizabilityResolver,System.IO.TextReader)">
      <summary>使用指定的本地化解析程序、二进制 XAML (BAML) 源流及 <see cref="T:System.IO.TextReader" /> 来初始化 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizer" /> 类的新实例。</summary>
      <param name="source">一个包含要本地化的二进制 XAML (BAML) 输入的文件流。</param>
      <param name="resolver">
        <see cref="T:System.Windows.Markup.Localizer.BamlLocalizabilityResolver" /> 的一个实例。</param>
      <param name="comments">读取与此 BAML 输入关联的本地化 XML 注释。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="source" /> 为 null 时发生。</exception>
    </member>
    <member name="E:System.Windows.Markup.Localizer.BamlLocalizer.ErrorNotify">
      <summary>当 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizer" /> 遇到意外情况时发生。</summary>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizer.ExtractResources">
      <summary>提取二进制 XAML (BAML) 流中的所有可本地化资源。</summary>
      <returns>BAML 流中可本地化资源的副本，采用 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" /> 形式。</returns>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizer.OnErrorNotify(System.Windows.Markup.Localizer.BamlLocalizerErrorNotifyEventArgs)">
      <summary>引发 <see cref="E:System.Windows.Markup.Localizer.BamlLocalizer.ErrorNotify" /> 事件。</summary>
      <param name="e">必需的事件参数。</param>
    </member>
    <member name="M:System.Windows.Markup.Localizer.BamlLocalizer.UpdateBaml(System.IO.Stream,System.Windows.Markup.Localizer.BamlLocalizationDictionary)">
      <summary> 将资源更新应用于二进制 XAML (BAML) 源，并将更新版本写入指定流，以便创建源 BAML 的本地化版本。</summary>
      <param name="target">将接收经过更新的 BAML 的流。</param>
      <param name="updates">要应用于源 BAML 的资源更新。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="target" /> 或 <paramref name="updates" /> 为 null 时发生。</exception>
    </member>
    <member name="T:System.Windows.Markup.Localizer.BamlLocalizerError">
      <summary>指定 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizer" /> 可能会遇到的错误情况。</summary>
    </member>
    <member name="F:System.Windows.Markup.Localizer.BamlLocalizerError.DuplicateUid">
      <summary>多个元素具有相同的 <see cref="P:System.Windows.Markup.Localizer.BamlLocalizableResourceKey.Uid" /> 值。</summary>
    </member>
    <member name="F:System.Windows.Markup.Localizer.BamlLocalizerError.DuplicateElement">
      <summary>本地化二进制 XAML (BAML) 包含对同一元素的多个引用。</summary>
    </member>
    <member name="F:System.Windows.Markup.Localizer.BamlLocalizerError.IncompleteElementPlaceholder">
      <summary>元素的替换内容包含不完整的子占位符。</summary>
    </member>
    <member name="F:System.Windows.Markup.Localizer.BamlLocalizerError.InvalidCommentingXml">
      <summary>Xml 注释的格式不正确。</summary>
    </member>
    <member name="F:System.Windows.Markup.Localizer.BamlLocalizerError.InvalidLocalizationAttributes">
      <summary>本地化注释文本中包含无效属性。</summary>
    </member>
    <member name="F:System.Windows.Markup.Localizer.BamlLocalizerError.InvalidLocalizationComments">
      <summary>本地化注释文本中包含无效注释。</summary>
    </member>
    <member name="F:System.Windows.Markup.Localizer.BamlLocalizerError.InvalidUid">
      <summary>
        <see cref="P:System.Windows.Markup.Localizer.BamlLocalizableResourceKey.Uid" /> 与 BAML 中的任何元素都不对应。</summary>
    </member>
    <member name="F:System.Windows.Markup.Localizer.BamlLocalizerError.MismatchedElements">
      <summary>指示替换和源之间不匹配。替换必须包含源中的所有元素占位符。</summary>
    </member>
    <member name="F:System.Windows.Markup.Localizer.BamlLocalizerError.SubstitutionAsPlaintext">
      <summary>元素内容的替换不能分析为 XML，因此无法识别替换中的任何格式设置标记。该替换将改为作为纯文本进行应用。</summary>
    </member>
    <member name="F:System.Windows.Markup.Localizer.BamlLocalizerError.UidMissingOnChildElement">
      <summary>子元素没有 <see cref="P:System.Windows.Markup.Localizer.BamlLocalizableResourceKey.Uid" />。因此，它不能表示为父元素的内容字符串中的占位符。</summary>
    </member>
    <member name="F:System.Windows.Markup.Localizer.BamlLocalizerError.UnknownFormattingTag">
      <summary>无法识别替换中的格式设置标记。</summary>
    </member>
    <member name="T:System.Windows.Markup.Localizer.BamlLocalizerErrorNotifyEventArgs">
      <summary>
        <see cref="E:System.Windows.Markup.Localizer.BamlLocalizer.ErrorNotify" /> 事件的必需参数。</summary>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizerErrorNotifyEventArgs.Error">
      <summary>获取 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizer" /> 所遇到的特定错误情况。</summary>
      <returns>
        <see cref="T:System.Windows.Markup.Localizer.BamlLocalizer" /> 所遇到的错误情况。</returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.BamlLocalizerErrorNotifyEventArgs.Key">
      <summary>获取与产生错误情况的资源关联的键。</summary>
      <returns>与产生错误情况的资源关联的键。</returns>
    </member>
    <member name="T:System.Windows.Markup.Localizer.BamlLocalizerErrorNotifyEventHandler">
      <summary>表示将处理 <see cref="E:System.Windows.Markup.Localizer.BamlLocalizer.ErrorNotify" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Markup.Localizer.ElementLocalizability">
      <summary>表示二进制 XAML (BAML) 中元素的本地化设置。</summary>
    </member>
    <member name="M:System.Windows.Markup.Localizer.ElementLocalizability.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.Localizer.ElementLocalizability" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.Localizer.ElementLocalizability.#ctor(System.String,System.Windows.LocalizabilityAttribute)">
      <summary>使用指定的格式设置标记和本地化属性初始化 <see cref="T:System.Windows.Markup.Localizer.ElementLocalizability" /> 类的新实例。</summary>
      <param name="formattingTag">格式设置标记名称。为此参数赋予非空值可指示内联格式设置。</param>
      <param name="attribute">关联元素的本地化属性。</param>
    </member>
    <member name="P:System.Windows.Markup.Localizer.ElementLocalizability.Attribute">
      <summary> 获取或设置关联元素的本地化属性。</summary>
      <returns>关联元素的本地化属性。</returns>
    </member>
    <member name="P:System.Windows.Markup.Localizer.ElementLocalizability.FormattingTag">
      <summary> 获取或设置关联元素的格式设置标记。</summary>
      <returns>格式设置标记。</returns>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupWriter">
      <summary>提供用来将对象写入 XAML 格式的方法。</summary>
    </member>
    <member name="M:System.Windows.Markup.Primitives.MarkupWriter.Dispose">
      <summary>释放由 <see cref="T:System.Windows.Markup.Primitives.MarkupWriter" /> 占用的资源。</summary>
    </member>
    <member name="M:System.Windows.Markup.Primitives.MarkupWriter.GetMarkupObjectFor(System.Object)">
      <summary>从指定对象创建 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> 的实例。</summary>
      <returns>一个标记对象，使用它可以在对象树中进行导航。</returns>
      <param name="instance">一个对象，它将成为序列化树的根。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.Primitives.MarkupWriter.GetMarkupObjectFor(System.Object,System.Windows.Markup.XamlDesignerSerializationManager)">
      <summary>从指定对象和指定序列化管理器创建 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> 的实例。</summary>
      <returns>一个标记对象，使用它可以在对象树中进行导航。</returns>
      <param name="instance">一个对象，它将成为序列化树的根。</param>
      <param name="manager">序列化管理器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> 为 null。</exception>
    </member>
    <member name="T:System.Windows.Media.AdornerHitTestResult">
      <summary>表示通过调用 <see cref="M:System.Windows.Documents.AdornerLayer.AdornerHitTest(System.Windows.Point)" /> 方法返回的数据。</summary>
    </member>
    <member name="P:System.Windows.Media.AdornerHitTestResult.Adorner">
      <summary> 获取已被命中的可视对象。</summary>
      <returns>已被命中的可视对象。</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.BeginStoryboard">
      <summary>一个触发器操作，该操作可启动 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 并将其动画分发给动画的目标对象和属性。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.BeginStoryboard.#ctor">
      <summary>创建 <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.BeginStoryboard.HandoffBehavior">
      <summary>获取或设置正确的提交行为以启动此演示图板中的动画时钟周期。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> 枚举值之一。默认值为 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />。</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.BeginStoryboard.Name">
      <summary>获取或设置 <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> 对象的名称。通过命名 <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> 对象，可在 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 启动后对其进行控制。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> 的名称。默认值为 null。</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.BeginStoryboard.Storyboard">
      <summary>获取或设置此 <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> 启动的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> 启动的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.BeginStoryboard.StoryboardProperty">
      <summary>标识 <see cref="P:System.Windows.Media.Animation.BeginStoryboard.Storyboard" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.Animation.BeginStoryboard.Storyboard" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.ControllableStoryboardAction">
      <summary>操作已经由 <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> 操作应用的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.ControllableStoryboardAction.BeginStoryboardName">
      <summary>获取或设置 <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> 方法的 <see cref="P:System.Windows.Media.Animation.BeginStoryboard.Name" />，此方法打开了您要以交互方式控制的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> 的 <see cref="P:System.Windows.Media.Animation.BeginStoryboard.Name" />，它打开了您要以交互方式控制的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。默认值为 null。</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.DiscreteThicknessKeyFrame">
      <summary>通过使用离散内插，可以在前一个关键帧的 <see cref="T:System.Windows.Thickness" /> 值及其自己的 <see cref="P:System.Windows.Media.Animation.ThicknessKeyFrame.Value" /> 之间进行动画处理。 </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.DiscreteThicknessKeyFrame.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.Animation.DiscreteThicknessKeyFrame" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.DiscreteThicknessKeyFrame.#ctor(System.Windows.Thickness)">
      <summary>用指定的结束值初始化 <see cref="T:System.Windows.Media.Animation.DiscreteThicknessKeyFrame" /> 类的新实例。</summary>
      <param name="value">关键帧的结束值（也称为“目标值”）。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.DiscreteThicknessKeyFrame.#ctor(System.Windows.Thickness,System.Windows.Media.Animation.KeyTime)">
      <summary>使用指定的结束值和关键时间初始化 <see cref="T:System.Windows.Media.Animation.DiscreteThicknessKeyFrame" /> 类的新实例。</summary>
      <param name="value">关键帧的结束值（也称为“目标值”）。</param>
      <param name="keyTime">关键帧的关键时间。关键时间可确定何时达到目标值，该时间也是关键帧结束的时间。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.DiscreteThicknessKeyFrame.CreateInstanceCore">
      <summary>创建 <see cref="T:System.Windows.Media.Animation.DiscreteThicknessKeyFrame" /> 的一个新实例。</summary>
      <returns>新的 <see cref="T:System.Windows.Media.Animation.DiscreteThicknessKeyFrame" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.DiscreteThicknessKeyFrame.InterpolateValueCore(System.Windows.Thickness,System.Double)">
      <summary>使用离散内插可以在前一个关键帧值和当前关键帧的值之间进行内插。</summary>
      <returns>此关键帧的输出值，它给出了指定的基值和进度。</returns>
      <param name="baseValue">动画处理的起始值。</param>
      <param name="keyFrameProgress">一个介于 0.0 到 1.0 之间的值，它指定此关键帧所经过的时间的百分比。</param>
    </member>
    <member name="T:System.Windows.Media.Animation.LinearThicknessKeyFrame">
      <summary>通过使用线性内插，可以在前一个关键帧的 <see cref="T:System.Windows.Thickness" /> 值及其自己的 <see cref="P:System.Windows.Media.Animation.ThicknessKeyFrame.Value" /> 之间进行动画处理。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.LinearThicknessKeyFrame.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.Animation.LinearThicknessKeyFrame" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.LinearThicknessKeyFrame.#ctor(System.Windows.Thickness)">
      <summary>用指定的结束值初始化 <see cref="T:System.Windows.Media.Animation.LinearThicknessKeyFrame" /> 类的新实例。</summary>
      <param name="value">关键帧的结束值（也称为“目标值”）。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.LinearThicknessKeyFrame.#ctor(System.Windows.Thickness,System.Windows.Media.Animation.KeyTime)">
      <summary>用指定的结束值和关键时间初始化 <see cref="T:System.Windows.Media.Animation.LinearThicknessKeyFrame" /> 类的新实例。</summary>
      <param name="value">关键帧的结束值（也称为“目标值”）。</param>
      <param name="keyTime">关键帧的关键时间。关键时间确定何时达到目标值，该时间也是关键帧结束的时间。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.LinearThicknessKeyFrame.CreateInstanceCore">
      <summary>创建 <see cref="T:System.Windows.Media.Animation.LinearThicknessKeyFrame" /> 的一个新实例。</summary>
      <returns>新的 <see cref="T:System.Windows.Media.Animation.LinearThicknessKeyFrame" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.LinearThicknessKeyFrame.InterpolateValueCore(System.Windows.Thickness,System.Double)">
      <summary>使用提供的进度增量，以线性方式在前一个关键帧的值和当前关键帧的值之间内插。</summary>
      <returns>指定基值和进度时此关键帧的输出值。</returns>
      <param name="baseValue">动画处理的起始值。</param>
      <param name="keyFrameProgress">一个介于 0.0 和 1.0 之间（包括两端）的值，该值指定此关键帧已经过去的时间的百分比。</param>
    </member>
    <member name="T:System.Windows.Media.Animation.PauseStoryboard">
      <summary>一个暂停 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 的触发器操作。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.PauseStoryboard.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.Animation.PauseStoryboard" /> 类的一个新实例。</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.RemoveStoryboard">
      <summary>一个移除 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 的触发器操作。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.RemoveStoryboard.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.Animation.RemoveStoryboard" /> 类的一个新实例。</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.ResumeStoryboard">
      <summary>支持用于恢复暂停的 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 的触发器操作。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ResumeStoryboard.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.Animation.ResumeStoryboard" /> 类的一个新实例。</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.SeekStoryboard">
      <summary>一个触发器操作，该操作提供查找到（跳到）<see cref="T:System.Windows.Media.Animation.Storyboard" /> 的活动周期中指定时间的功能。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SeekStoryboard.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.Animation.SeekStoryboard" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.SeekStoryboard.Offset">
      <summary>获取或设置演示图板应该从查找原点 <see cref="P:System.Windows.Media.Animation.SeekStoryboard.Origin" /> 前进或后退的距离。</summary>
      <returns>一个正值或负值，该值指定演示图板应该从查找原点 <see cref="P:System.Windows.Media.Animation.SeekStoryboard.Origin" /> 前进或后退的距离。默认值为 0。</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SeekStoryboard.Origin">
      <summary>获取或设置一个位置，此查找操作的 <see cref="P:System.Windows.Media.Animation.SeekStoryboard.Offset" /> 从该位置开始应用。</summary>
      <returns>开始应用此查找操作的 <see cref="P:System.Windows.Media.Animation.SeekStoryboard.Offset" /> 的位置。默认值为 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SeekStoryboard.ShouldSerializeOffset">
      <summary>返回一个值，该值指示是否应序列化此 <see cref="T:System.Windows.Media.Animation.SeekStoryboard" /> 的 <see cref="P:System.Windows.Media.Animation.SeekStoryboard.Offset" /> 属性。</summary>
      <returns>
            如果应序列化此 <see cref="T:System.Windows.Media.Animation.SeekStoryboard" /> 的 <see cref="P:System.Windows.Media.Animation.SeekStoryboard.Offset" /> 属性，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SetStoryboardSpeedRatio">
      <summary>一个触发器操作，它更改 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 的速度。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SetStoryboardSpeedRatio.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.Animation.SetStoryboardSpeedRatio" /> 类的一个新实例。</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.SetStoryboardSpeedRatio.SpeedRatio">
      <summary>获取或设置新的 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 动画速度，该速度以相对于旧动画速度的比率值表示。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Animation.Storyboard" /> 的速度比率值。默认值为 1.0。</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SkipStoryboardToFill">
      <summary>用于将 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 移到填充期末尾的触发器操作。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SkipStoryboardToFill.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.Animation.SkipStoryboardToFill" /> 类的一个新实例。</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.SplineThicknessKeyFrame">
      <summary>通过使用样条内插，可以在前一个关键帧的 <see cref="T:System.Windows.Thickness" /> 值及其自己的 <see cref="P:System.Windows.Media.Animation.ThicknessKeyFrame.Value" /> 之间进行动画处理。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineThicknessKeyFrame.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.Animation.SplineThicknessKeyFrame" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineThicknessKeyFrame.#ctor(System.Windows.Thickness)">
      <summary>用指定的结束值初始化 <see cref="T:System.Windows.Media.Animation.SplineThicknessKeyFrame" /> 类的新实例。</summary>
      <param name="value">关键帧的结束值（也称为“目标值”）。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineThicknessKeyFrame.#ctor(System.Windows.Thickness,System.Windows.Media.Animation.KeyTime)">
      <summary>用指定的结束值和关键时间初始化 <see cref="T:System.Windows.Media.Animation.SplineThicknessKeyFrame" /> 类的新实例。</summary>
      <param name="value">关键帧的结束值（也称为“目标值”）。</param>
      <param name="keyTime">关键帧的关键时间。关键时间确定何时达到目标值，该时间也是关键帧结束的时间。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineThicknessKeyFrame.#ctor(System.Windows.Thickness,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
      <summary>用指定的结束值、关键时间和 <see cref="T:System.Windows.Media.Animation.KeySpline" /> 初始化 <see cref="T:System.Windows.Media.Animation.SplineThicknessKeyFrame" /> 类的新实例。</summary>
      <param name="value">关键帧的结束值（也称为“目标值”）。</param>
      <param name="keyTime">关键帧的关键时间。关键时间确定何时达到目标值，该时间也是关键帧结束的时间。</param>
      <param name="keySpline">
                关键帧的 <see cref="T:System.Windows.Media.Animation.KeySpline" />。<see cref="T:System.Windows.Media.Animation.KeySpline" /> 表示一条贝塞尔曲线，该曲线定义了关键帧的动画进度。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineThicknessKeyFrame.CreateInstanceCore">
      <summary>创建 <see cref="T:System.Windows.Media.Animation.SplineThicknessKeyFrame" /> 的一个新实例。</summary>
      <returns>新的 <see cref="T:System.Windows.Media.Animation.SplineThicknessKeyFrame" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineThicknessKeyFrame.InterpolateValueCore(System.Windows.Thickness,System.Double)">
      <summary>使用样条内插可以在前一个关键帧值和当前关键帧的值之间进行过渡。</summary>
      <returns>指定基值和进度时此关键帧的输出值。</returns>
      <param name="baseValue">动画处理的起始值。</param>
      <param name="keyFrameProgress">一个介于 0.0 和 1.0 之间（包括两端）的值，该值指定此关键帧已经过去的时间的百分比。</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineThicknessKeyFrame.KeySpline">
      <summary>获取或设置定义此关键帧的动画进度的两个控制点。这是一个依赖项属性。</summary>
      <returns>两个控制点，用来指定定义关键帧进度的三次方贝塞尔曲线。</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineThicknessKeyFrame.KeySplineProperty">
      <summary>标识 <see cref="P:System.Windows.Media.Animation.SplineThicknessKeyFrame.KeySpline" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.Animation.SplineThicknessKeyFrame.KeySpline" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.StopStoryboard">
      <summary>一个停止 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 的触发器操作。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.StopStoryboard.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.Animation.StopStoryboard" /> 类的一个新实例。</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.Storyboard">
      <summary>
                    为容器的子动画提供对象和属性目标信息的容器时间线。
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.#ctor">
      <summary>
                    初始化 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 类的一个新实例。
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement)">
      <summary>
将与此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 关联的动画应用到它们的目标并启动它们。
                </summary>
      <param name="containingObject">
与此演示图板的动画的目标包含在同一名称领域中的对象。没有 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的动画将应用到 <paramref name="containingObject" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)">
      <summary>
将与此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 关联的动画应用到它们的目标并启动它们。
                </summary>
      <param name="containingObject">
与此演示图板的动画的目标包含在同一名称领域中的对象。没有 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的动画将应用到 <paramref name="containingObject" />。
                </param>
      <param name="isControllable">
如果此演示图板应该可以以交互方式控制，则为 true；否则为 false。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Windows.Media.Animation.HandoffBehavior)">
      <summary>
使用指定的 <see cref="T:System.Windows.Media.Animation.HandoffBehavior" />，将与此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 关联的动画应用到它们的目标并启动它们。
                </summary>
      <param name="containingObject">
与此演示图板的动画的目标包含在同一名称领域中的对象。没有 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的动画将应用到 <paramref name="containingObject" />。
                </param>
      <param name="handoffBehavior">
新动画应该用来与任何当前动画进行交互的行为。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
      <summary>
使用指定的 <see cref="T:System.Windows.Media.Animation.HandoffBehavior" />，将与此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 关联的动画应用到它们的目标并启动它们。
                </summary>
      <param name="containingObject">
与此演示图板的动画的目标包含在同一名称领域中的对象。没有指定的 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的动画将应用到 <paramref name="containingObject" />。
                </param>
      <param name="handoffBehavior">
新动画应该用来与任何当前动画进行交互的行为。
                </param>
      <param name="isControllable">
声明在动画启动后是否可以控制（可以暂停）动画。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement)">
      <summary>
将与此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 关联的动画应用到它们的目标并启动它们。
                </summary>
      <param name="containingObject">
与此演示图板的动画的目标包含在同一名称领域中的对象。没有 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的动画将应用到 <paramref name="containingObject" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)">
      <summary>
将与此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 关联的动画应用到它们的目标并启动它们。
                </summary>
      <param name="containingObject">
与此演示图板的动画的目标包含在同一名称领域中的对象。没有 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的动画将应用到 <paramref name="containingObject" />。
                </param>
      <param name="isControllable">
如果此演示图板应该可以以交互方式控制，则为 true；否则为 false。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate)">
      <summary>
将与此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 关联的动画应用到它们在指定模板内的目标并启动它们。
                </summary>
      <param name="containingObject">
指定的 <paramref name="frameworkTemplate" /> 已应用到的对象。没有 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的动画将应用到 <paramref name="containingObject" />。
                </param>
      <param name="frameworkTemplate">
要进行动画处理的模板。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Boolean)">
      <summary>
将与此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 关联的动画应用到它们在指定模板内的目标并启动它们。
                </summary>
      <param name="containingObject">
                    指定的 <paramref name="frameworkTemplate" /> 已应用到的对象。没有 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的动画将应用到 <paramref name="containingObject" />。
                </param>
      <param name="frameworkTemplate">
要进行动画处理的模板。
                </param>
      <param name="isControllable">
如果此演示图板应该可以以交互方式控制，则为 true；否则为 false。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Windows.Media.Animation.HandoffBehavior)">
      <summary>
将与此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 关联的动画应用到它们在指定模板内的目标并启动它们。
                </summary>
      <param name="containingObject">
指定的 <paramref name="frameworkTemplate" /> 已应用到的对象。没有 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的动画将应用到 <paramref name="containingObject" />。
                </param>
      <param name="frameworkTemplate">
要进行动画处理的模板。
                </param>
      <param name="handoffBehavior">
新动画应该用来与任何当前动画进行交互的行为。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
      <summary>
将与此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 关联的动画应用到它们在指定模板内的目标并启动它们。
                </summary>
      <param name="containingObject">
指定的 <paramref name="frameworkTemplate" /> 已应用到的对象。没有 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的动画将应用到 <paramref name="containingObject" />。
                </param>
      <param name="frameworkTemplate">
要进行动画处理的模板。
                </param>
      <param name="handoffBehavior">
新动画应该用来与任何当前动画进行交互的行为。
                </param>
      <param name="isControllable">
如果此演示图板应该可以以交互方式控制，则为 true；否则为 false。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.Media.Animation.HandoffBehavior)">
      <summary>
使用指定的 <see cref="T:System.Windows.Media.Animation.HandoffBehavior" />，将与此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 关联的动画应用到它们的目标并启动它们。
                </summary>
      <param name="containingObject">
与此演示图板的动画的目标包含在同一名称领域中的对象。没有指定的 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的动画将应用到 <paramref name="containingObject" />。
                </param>
      <param name="handoffBehavior">
新动画应该用来与任何当前动画进行交互的行为。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)">
      <summary>
将与此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 关联的动画应用到它们的目标并启动它们。
                </summary>
      <param name="containingObject">
与此演示图板的动画的目标包含在同一名称领域中的对象。没有指定的 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的动画将应用到 <paramref name="containingObject" />。
                </param>
      <param name="handoffBehavior">
新动画应该用来与任何当前动画进行交互的行为。
                </param>
      <param name="isControllable">
声明在动画启动后是否可以控制（可以暂停）动画。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Clone">
      <summary>
                    创建此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 的一个可修改复本，以制作该对象值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。
                </summary>
      <returns>
                    当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.CreateInstanceCore">
      <summary>
                    创建 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 类的新实例。
                </summary>
      <returns>
                    一个新的 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 实例。
                </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed(System.Windows.FrameworkContentElement)">
      <summary>
检索为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />。
                </summary>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed(System.Windows.FrameworkElement)">
      <summary>
检索为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />。
                </summary>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetCurrentIteration(System.Windows.FrameworkContentElement)">
      <summary>
检索为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" />。
                </summary>
      <returns>
此时钟在其当前活动期中的当前迭代，如果此时钟已停止，则为 null。
                </returns>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetCurrentIteration(System.Windows.FrameworkElement)">
      <summary>
检索为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" />。
                </summary>
      <returns>
此时钟在其当前活动期中的当前迭代，如果此时钟已停止，则为 null。
                </returns>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetCurrentProgress(System.Windows.FrameworkContentElement)">
      <summary>
检索为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" />。
                </summary>
      <returns>
                    如果此时钟为 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />，则为 null；如果此时钟处于活动状态并且其 <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> 的 <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> 为 <see cref="P:System.Windows.Duration.Forever" />，则为 0.0；在其他情况下为一个介于 0.0 和 1.0 之间的值，此值指示此时钟在其当前迭代中的当前进度。值为 0.0 时表示没有进度，值为 1.0 时表示此时钟处于其当前迭代的末尾。
                </returns>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetCurrentProgress(System.Windows.FrameworkElement)">
      <summary>
检索为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" />。
                </summary>
      <returns>
                    如果此时钟为 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />，则为 null；如果此时钟处于活动状态并且其 <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> 的 <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> 为 <see cref="P:System.Windows.Duration.Forever" />，则为 0.0；在其他情况下为一个介于 0.0 和 1.0 之间的值，此值指示此时钟在其当前迭代中的当前进度。值为 0.0 时表示没有进度，值为 1.0 时表示此时钟处于其当前迭代的末尾。
                </returns>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetCurrentState(System.Windows.FrameworkContentElement)">
      <summary>
检索为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" />。
                </summary>
      <returns>
为此演示图板创建的时钟的当前状态：<see cref="F:System.Windows.Media.Animation.ClockState.Active" />、<see cref="F:System.Windows.Media.Animation.ClockState.Filling" /> 或 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />。
                </returns>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetCurrentState(System.Windows.FrameworkElement)">
      <summary>
检索为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" />。
                </summary>
      <returns>
为此演示图板创建的时钟的当前状态：<see cref="F:System.Windows.Media.Animation.ClockState.Active" />、<see cref="F:System.Windows.Media.Animation.ClockState.Filling" /> 或 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />。
                </returns>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetCurrentTime(System.Windows.FrameworkContentElement)">
      <summary>
检索为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" />。
                </summary>
      <returns>
如果此演示图板的时钟为 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />，则为 null；否则为此演示图板的时钟的当前时间。
                </returns>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetCurrentTime(System.Windows.FrameworkElement)">
      <summary>
检索为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" />。
                </summary>
      <returns>
如果此演示图板的时钟为 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />，则为 null；否则为此演示图板的时钟的当前时间。
                </returns>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetIsPaused(System.Windows.FrameworkContentElement)">
      <summary>
                    检索一个值，该值指示为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 是否已暂停。
                </summary>
      <returns>
如果为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 已暂停，则为 true；否则为 false。
                </returns>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetIsPaused(System.Windows.FrameworkElement)">
      <summary>
                    检索一个值，该值指示为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 是否已暂停。
                </summary>
      <returns>
如果为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 已暂停，则为 true；否则为 false。
                </returns>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetTargetName(System.Windows.DependencyObject)">
      <summary>
                    检索指定的 <see cref="T:System.Windows.Media.Animation.Timeline" /> 的 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 值。
                </summary>
      <returns>
                    作为 <paramref name="element" /> 的目标的依赖项对象的名称。
                </returns>
      <param name="element">
要从其中检索 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的时间线。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetTargetProperty(System.Windows.DependencyObject)">
      <summary>
                    检索指定的  <see cref="T:System.Windows.Media.Animation.Timeline" /> 的 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" /> 值。
                </summary>
      <returns>
                    作为 <paramref name="element" /> 的目标的属性。
                </returns>
      <param name="element">
                    要从中获取 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" /> 的依赖项对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkContentElement)">
      <summary>
                    暂停与此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 关联的指定 <see cref="T:System.Windows.FrameworkContentElement" /> 的 <see cref="T:System.Windows.Media.Animation.Clock" />。
                </summary>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkElement)">
      <summary>
                    暂停与此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 关联的指定 <see cref="T:System.Windows.FrameworkElement" /> 的 <see cref="T:System.Windows.Media.Animation.Clock" />。
                </summary>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Remove(System.Windows.FrameworkContentElement)">
      <summary>
                    移除为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。对于属于此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 的动画，不管它们的 <see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> 设置如何，它们都不再影响它们曾进行动画处理的属性。
                </summary>
      <param name="containingObject">
                    在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Remove(System.Windows.FrameworkElement)">
      <summary>
                    移除为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。对于属于此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 的动画，不管它们的 <see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> 设置如何，它们都不再影响它们曾进行动画处理的属性。
                </summary>
      <param name="containingObject">
                    在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkContentElement)">
      <summary>
                    继续为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" />。
                </summary>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkElement)">
      <summary>
                    继续为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" />。
                </summary>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Seek(System.Windows.FrameworkContentElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)">
      <summary>
将此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 定位到指定的位置。<see cref="T:System.Windows.Media.Animation.Storyboard" /> 在时钟下一次走动时执行请求的定位操作。
                </summary>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
      <param name="offset">
一个正值或负值，表示时间线应从指定的 <paramref name="origin" /> 向前或向后移动的量。
                </param>
      <param name="origin">
一个位置，以该位置为起点应用 <paramref name="offset" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Seek(System.Windows.FrameworkElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)">
      <summary>
将此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 定位到指定的位置。<see cref="T:System.Windows.Media.Animation.Storyboard" /> 在时钟下一次走动时执行请求的定位操作。
                </summary>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
      <param name="offset">
一个正值或负值，表示时间线应从指定的 <paramref name="origin" /> 向前或向后移动的量。
                </param>
      <param name="origin">
一个位置，以该位置为起点应用 <paramref name="offset" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.Windows.FrameworkContentElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)">
      <summary>
立即将此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 定位到新位置（以同步方式）。
                </summary>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
      <param name="offset">
一个正值或负值，表示时间线应从指定的 <paramref name="origin" /> 向前或向后移动的量。
                </param>
      <param name="origin">
一个位置，以该位置为起点应用 <paramref name="offset" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.Windows.FrameworkElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)">
      <summary>
立即将此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 定位到新位置（以同步方式）。
                </summary>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
      <param name="offset">
一个正值或负值，表示时间线应从指定的 <paramref name="origin" /> 向前或向后移动的量。
                </param>
      <param name="origin">
一个位置，以该位置为起点应用 <paramref name="offset" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Windows.FrameworkContentElement,System.Double)">
      <summary>
                    设置为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的交互速度比。
                </summary>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
      <param name="speedRatio">
一个大于零的有限值，表示演示图板新的交互速度比。用此值乘以演示图板的 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 值来确定演示图板的有效速度。此值不会覆盖演示图板的 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 属性。例如，如果对 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 为 0.5 的演示图板调用此方法并将交互速度比指定为 3，则该演示图板的有效速度将为 1.5。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Windows.FrameworkElement,System.Double)">
      <summary>
                    设置为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的交互速度比。
                </summary>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
      <param name="speedRatio">
一个大于零的有限值，表示演示图板新的交互速度比。用此值乘以演示图板的 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 值来确定演示图板的有效速度。此值不会覆盖演示图板的 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 属性。例如，如果对 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 为 0.5 的演示图板调用此方法并将交互速度比指定为 3，则该演示图板的有效速度将为 1.5。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SetTargetName(System.Windows.DependencyObject,System.String)">
      <summary>
                    使指定的 <see cref="T:System.Windows.Media.Animation.Timeline" /> 以具有指定名称的依赖项对象为目标。
                </summary>
      <param name="element">
应以指定的依赖项对象为目标的 <see cref="T:System.Windows.Media.Animation.Timeline" />。
                </param>
      <param name="name">
                    要作为目标的依赖项对象的名称。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SetTargetProperty(System.Windows.DependencyObject,System.Windows.PropertyPath)">
      <summary>
                    使指定的 <see cref="T:System.Windows.Media.Animation.Timeline" /> 以指定的依赖项属性为目标。
                </summary>
      <param name="element">
                    要将指定的依赖项属性与之关联的 <see cref="T:System.Windows.Media.Animation.Timeline" />。
                </param>
      <param name="path">
                    说明要进行动画处理的依赖项属性的路径。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SkipToFill(System.Windows.FrameworkContentElement)">
      <summary>
将此演示图板的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的当前时间后调至其活动期结束时间。
                </summary>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SkipToFill(System.Windows.FrameworkElement)">
      <summary>
将此演示图板的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的当前时间后调至其活动期结束时间。
                </summary>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Stop(System.Windows.FrameworkContentElement)">
      <summary>
                    停止为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" />。
                </summary>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Stop(System.Windows.FrameworkElement)">
      <summary>
                    停止为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" />。
                </summary>
      <param name="containingObject">
在调用 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法时指定的对象。此对象包含为此演示图板及其子级创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。
                </param>
    </member>
    <member name="P:System.Windows.Media.Animation.Storyboard.TargetName">
      <summary>
                    获取或设置要进行动画处理的对象的名称。该对象必须为 <see cref="T:System.Windows.FrameworkElement" />、<see cref="T:System.Windows.FrameworkContentElement" /> 或 <see cref="T:System.Windows.Freezable" />。
                </summary>
      <returns>
                    要进行动画处理的 <see cref="T:System.Windows.FrameworkElement" />、<see cref="T:System.Windows.FrameworkContentElement" /> 或 <see cref="T:System.Windows.Freezable" /> 的名称。
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Storyboard.TargetNameProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 附加属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 附加属性的标识符。
                </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Storyboard.TargetProperty">
      <summary>
                    获取或设置应进行动画处理的属性。
                </summary>
      <returns>
                    要进行动画处理的属性。
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Storyboard.TargetPropertyProperty">
      <summary>
                    标识 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" /> 附加属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" /> 附加属性的标识符。
                </returns>
    </member>
    <member name="T:System.Windows.Media.Animation.ThicknessAnimation">
      <summary> 在指定的 <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> 内使用线性内插对两个目标值之间的 <see cref="T:System.Windows.Thickness" /> 属性值进行动画处理。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimation.#ctor">
      <summary> 初始化 <see cref="T:System.Windows.Media.Animation.ThicknessAnimation" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimation.#ctor(System.Windows.Thickness,System.Windows.Duration)">
      <summary> 初始化 <see cref="T:System.Windows.Media.Animation.ThicknessAnimation" /> 类的一个新实例，它在指定的持续时间内将动画处理继续到指定的值。动画的起始值是正在进行动画处理的属性的基值或另一个动画的输出值。</summary>
      <param name="toValue">动画的目标值。</param>
      <param name="duration">动画从头到尾播放一次所花的时间长度。有关更多信息，请参见 <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> 属性。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimation.#ctor(System.Windows.Thickness,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
      <summary> 初始化 <see cref="T:System.Windows.Media.Animation.ThicknessAnimation" /> 类的一个新实例，它在指定的持续时间内将动画处理继续到指定的值，并具有指定的填充行为。动画的起始值是正在进行动画处理的属性的基值或另一个动画的输出值。</summary>
      <param name="toValue">动画的目标值。</param>
      <param name="duration">动画从头到尾播放一次所花的时间长度。有关更多信息，请参见 <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> 属性。</param>
      <param name="fillBehavior">指定动画在不活动时的行为方式。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimation.#ctor(System.Windows.Thickness,System.Windows.Thickness,System.Windows.Duration)">
      <summary> 初始化 <see cref="T:System.Windows.Media.Animation.ThicknessAnimation" /> 类的一个新实例，它在指定的持续时间内将动画从指定的起始值继续到指定的目标值。</summary>
      <param name="fromValue">动画的起始值。</param>
      <param name="toValue">动画的目标值。</param>
      <param name="duration">动画从头到尾播放一次所花的时间长度。有关更多信息，请参见 <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> 属性。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimation.#ctor(System.Windows.Thickness,System.Windows.Thickness,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
      <summary> 初始化 <see cref="T:System.Windows.Media.Animation.ThicknessAnimation" /> 类的新实例，它在指定的持续时间内将动画处理从指定的起始值继续到指定的目标值，并具有指定的填充行为。</summary>
      <param name="fromValue">动画的起始值。</param>
      <param name="toValue">动画的目标值。</param>
      <param name="duration">动画从头到尾播放一次所花的时间长度。有关更多信息，请参见 <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> 属性。</param>
      <param name="fillBehavior">指定动画在不活动时的行为方式。</param>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessAnimation.By">
      <summary> 获取或设置动画更改其起始值时依据的总量。这是一个依赖项属性。</summary>
      <returns>动画更改其起始值时依据的总量。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ThicknessAnimation.ByProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.Animation.ThicknessAnimation.By" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.Animation.ThicknessAnimation.By" />依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimation.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.Animation.ThicknessAnimation" /> 的可修改复本，从而制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimation.CreateInstanceCore">
      <summary>创建 <see cref="T:System.Windows.Media.Animation.ThicknessAnimation" /> 的一个新实例。</summary>
      <returns>新实例。</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessAnimation.From">
      <summary>  获取或设置动画的起始值。这是一个依赖项属性。</summary>
      <returns>动画的起始值。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ThicknessAnimation.FromProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.Animation.ThicknessAnimation.From" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.Animation.ThicknessAnimation.From" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimation.GetCurrentValueCore(System.Windows.Thickness,System.Windows.Thickness,System.Windows.Media.Animation.AnimationClock)">
      <summary>计算一个值，该值表示正在进行动画处理的属性的当前值，并由 <see cref="T:System.Windows.Media.Animation.ThicknessAnimation" /> 确定。</summary>
      <returns>计算得出的属性值，该值由当前动画确定。</returns>
      <param name="defaultOriginValue">建议使用的原始值。如果动画没有自己显式设置的起始值，则使用该值。</param>
      <param name="defaultDestinationValue">建议使用的目标值。如果动画没有自己显式设置的结束值，则使用该值。</param>
      <param name="animationClock">一个 <see cref="T:System.Windows.Media.Animation.AnimationClock" />，用来生成动画所使用的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> 或 <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" />。</param>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessAnimation.IsAdditive">
      <summary>获取或设置一个值，该值指示是否应将目标属性的当前值与此动画的起始值相加。这是一个依赖项属性。</summary>
      <returns>
            如果应将目标属性的当前值与此动画的起始值相加，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessAnimation.IsCumulative">
      <summary> 获取或设置一个值，该值指定动画重复时是否累计该动画的值。这是一个依赖项属性。</summary>
      <returns>
            如果动画在其 <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> 属性使其简单重复时累计它的值，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessAnimation.To">
      <summary> 获取或设置动画的结束值。这是一个依赖项属性。</summary>
      <returns>动画的结束值。默认值为 null。</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ThicknessAnimation.ToProperty">
      <summary> 标识 <see cref="P:System.Windows.Media.Animation.ThicknessAnimation.To" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.Animation.ThicknessAnimation.To" />依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.ThicknessAnimationBase">
      <summary>一个抽象类，该类在实现后可以对 <see cref="T:System.Windows.Thickness" /> 值进行动画处理。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationBase.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationBase" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationBase.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationBase" /> 的可修改复本，从而制作此对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
      <summary>获取动画的当前值。</summary>
      <returns>此动画的当前值。</returns>
      <param name="defaultOriginValue">如果动画没有自己的起始值，则为提供给动画的原始值。</param>
      <param name="defaultDestinationValue">如果动画没有自己的目标值，则为提供给动画的目标值。</param>
      <param name="animationClock">一个 <see cref="T:System.Windows.Media.Animation.AnimationClock" />，它可以生成供动画用来生成它的输出值的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> 或 <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> 值。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationBase.GetCurrentValue(System.Windows.Thickness,System.Windows.Thickness,System.Windows.Media.Animation.AnimationClock)">
      <summary>获取动画的当前值。</summary>
      <returns>此动画的当前值。</returns>
      <param name="defaultOriginValue">如果动画没有自己的起始值，则为提供给动画的原始值。</param>
      <param name="defaultDestinationValue">如果动画没有自己的目标值，则为提供给动画的目标值。</param>
      <param name="animationClock">一个 <see cref="T:System.Windows.Media.Animation.AnimationClock" />，它可以生成供动画用来生成它的输出值的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> 或 <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> 值。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationBase.GetCurrentValueCore(System.Windows.Thickness,System.Windows.Thickness,System.Windows.Media.Animation.AnimationClock)">
      <summary>计算一个值，该值表示正在进行动画处理的属性的当前值，并由宿主动画确定。</summary>
      <returns>此动画的当前值。</returns>
      <param name="defaultOriginValue">建议使用的原始值。如果动画没有自己显式设置的起始值，则使用该值。</param>
      <param name="defaultDestinationValue">建议使用的目标值。如果动画没有自己显式设置的结束值，则使用该值。</param>
      <param name="animationClock">用于生成宿主动画使用的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> 或 <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> 的 <see cref="T:System.Windows.Media.Animation.AnimationClock" />。</param>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessAnimationBase.TargetPropertyType">
      <summary>获取此动画生成的值的类型。</summary>
      <returns>此动画生成的值的类型。</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames">
      <summary> 对一组 <see cref="P:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.KeyFrames" /> 中的 <see cref="T:System.Windows.Thickness" /> 属性的值进行动画处理。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.AddChild(System.Object)">
      <summary>将子 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" /> 添加到此 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" />。</summary>
      <param name="child">要添加作为 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" /> 子级的对象。</param>
      <exception cref="T:System.ArgumentException">参数 <paramref name="child" /> 不是 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" />。</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.AddText(System.String)">
      <summary>添加文本字符串作为 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" /> 的子级。</summary>
      <param name="childText">添加到 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" /> 的文本。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" /> 不接受文本作为子级，因此除非派生类重写了允许添加文本的行为，否则该方法将引发异常。</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" /> 的可修改复本，并制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.CloneCore(System.Windows.Freezable)">
      <summary>使该实例成为指定的 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" /> 的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <param name="sourceFreezable">要克隆的 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" />。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.CloneCurrentValue">
      <summary>创建此 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" /> 对象的可修改复本，并制作此对象的当前值的深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>使用当前的属性值使该实例成为指定的 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" /> 的可修改深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <param name="sourceFreezable">要克隆的 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" />。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.CreateInstanceCore">
      <summary>创建 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" /> 的一个新实例。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" /> 的新实例。</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.FreezeCore(System.Boolean)">
      <summary>使此 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" /> 对象的实例成为不可修改的，或确定是否可使其成为不可修改的。</summary>
      <returns>如果 <paramref name="isChecking" /> 为 true，则该方法将在可使该实例为只读的情况下返回 true，而在其他情况下返回 false。如果 <paramref name="isChecking" /> 为 false，则该方法将在该实例目前为只读的情况下返回 true，而在其他情况下返回 false，并且其副作用是已开始更改该对象的冻结状态。</returns>
      <param name="isChecking">
                如果是 true，则检查是否可冻结该实例；如果是 false，则冻结该实例。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>使该实例成为指定的 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" /> 对象的复本。</summary>
      <param name="source">要克隆的 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" /> 对象。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>使该实例成为指定的 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" /> 的冻结复本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <param name="source">要复制和冻结的 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" />。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.GetCurrentValueCore(System.Windows.Thickness,System.Windows.Thickness,System.Windows.Media.Animation.AnimationClock)">
      <summary> 计算一个值，该值表示正在进行动画处理的属性的当前值，该值由 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" /> 的实例确定。</summary>
      <returns>计算得出的属性值，该值由当前实例确定。</returns>
      <param name="defaultOriginValue">建议使用的原始值。如果动画没有自己显式设置的起始值，则使用该值。</param>
      <param name="defaultDestinationValue">建议使用的目标值。如果动画没有自己显式设置的结束值，则使用该值。</param>
      <param name="animationClock">用于生成宿主动画使用的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> 或 <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> 的 <see cref="T:System.Windows.Media.Animation.AnimationClock" />。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
      <summary>将 <see cref="T:System.Windows.Duration" /> 属性设置为 <see cref="P:System.Windows.Duration.Automatic" /> 时，可提供自定义的自然 <see cref="T:System.Windows.Duration" />。</summary>
      <returns>如果此动画的最后一个关键帧是 <see cref="T:System.Windows.Media.Animation.KeyTime" />，则该值将用作 <see cref="P:System.Windows.Media.Animation.Clock.NaturalDuration" />；否则将为 1 秒。</returns>
      <param name="clock">具有所需自然持续时间的 <see cref="T:System.Windows.Media.Animation.Clock" />。</param>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.IsAdditive">
      <summary>获取一个值，该值指定是否要将动画的输出值添加到正进行动画处理的属性的基值。</summary>
      <returns>
            如果动画将其输出值添加到正进行动画处理的属性的基值，而不是将其替换，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.IsCumulative">
      <summary>获取或设置一个值，该值指定动画重复时是否累计该动画的值。</summary>
      <returns>
            如果动画在其 <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> 属性使其简单重复时累计它的值，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.KeyFrames">
      <summary> 获取或设置用于定义动画的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" /> 对象的集合。</summary>
      <returns>用于定义动画的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" /> 对象的集合。默认值为 <see cref="P:System.Windows.Media.Animation.ThicknessKeyFrameCollection.Empty" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.OnChanged">
      <summary>修改当前 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" /> 对象时调用。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.ShouldSerializeKeyFrames">
      <summary>如果 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" /> 的此实例的 <see cref="P:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.KeyFrames" /> 属性值应是经过序列化的值，则将返回 true。</summary>
      <returns>
            如果应对该属性值进行序列化，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="child"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
      <param name="childText"></param>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames.System#Windows#Media#Animation#IKeyFrameAnimation#KeyFrames">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.ThicknessKeyFrame">
      <summary>一个抽象类，该类在实现后可以用它自己的目标值和 <see cref="T:System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames" /> 的内插方法来定义一个动画段。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrame.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrame.#ctor(System.Windows.Thickness)">
      <summary>初始化 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" /> 类的具有所指定目标 <see cref="P:System.Windows.Media.Animation.ThicknessKeyFrame.Value" /> 的新实例。 </summary>
      <param name="value">新的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" /> 实例的 <see cref="P:System.Windows.Media.Animation.ThicknessKeyFrame.Value" />。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrame.#ctor(System.Windows.Thickness,System.Windows.Media.Animation.KeyTime)">
      <summary>初始化 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" /> 类的具有所指定目标 <see cref="P:System.Windows.Media.Animation.ThicknessKeyFrame.Value" /> 和 <see cref="P:System.Windows.Media.Animation.ThicknessKeyFrame.KeyTime" /> 的新实例。 </summary>
      <param name="value">新的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" /> 实例的 <see cref="P:System.Windows.Media.Animation.ThicknessKeyFrame.Value" />。</param>
      <param name="keyTime">新的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" /> 实例的 <see cref="P:System.Windows.Media.Animation.ThicknessKeyFrame.KeyTime" />。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrame.InterpolateValue(System.Windows.Thickness,System.Double)">
      <summary>返回特定关键帧在提供的进度增量处的内插值。</summary>
      <returns>指定基值和进度时此关键帧的输出值。</returns>
      <param name="baseValue">动画处理的起始值。</param>
      <param name="keyFrameProgress">一个介于 0.0 和 1.0 之间（包括两端）的值，该值指定此关键帧已经过去的时间的百分比。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">当 <paramref name="keyFrameProgress" /> 不在 0.0 和 1.0 之间（包括两端）时发生。</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrame.InterpolateValueCore(System.Windows.Thickness,System.Double)">
      <summary>计算关键帧在提供的进度增量处的值。</summary>
      <returns>指定基值和进度时此关键帧的输出值。</returns>
      <param name="baseValue">动画处理的起始值；通常是前一个关键帧的值。</param>
      <param name="keyFrameProgress">一个介于 0.0 和 1.0 之间（包括两端）的值，该值指定此关键帧已经过去的时间的百分比。</param>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessKeyFrame.KeyTime">
      <summary> 获取或设置应到达关键帧的目标 <see cref="P:System.Windows.Media.Animation.ThicknessKeyFrame.Value" /> 的时间。这是一个依赖项属性。</summary>
      <returns>关键帧的当前值应等于它的 <see cref="P:System.Windows.Media.Animation.ThicknessKeyFrame.Value" /> 属性时所处的时间。默认值为 <see cref="P:System.Windows.Media.Animation.KeyTime.Uniform" />。</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ThicknessKeyFrame.KeyTimeProperty">
      <summary>标识 <see cref="P:System.Windows.Media.Animation.ThicknessKeyFrame.KeyTime" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.Animation.ThicknessKeyFrame.KeyTime" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessKeyFrame.System#Windows#Media#Animation#IKeyFrame#Value">
      <summary>此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessKeyFrame.Value">
      <summary> 获取或设置关键帧的目标值。这是一个依赖项属性。</summary>
      <returns>关键帧的目标值，这是此关键帧在其指定 <see cref="P:System.Windows.Media.Animation.ThicknessKeyFrame.KeyTime" /> 的值。默认值为 0。</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.ThicknessKeyFrame.ValueProperty">
      <summary>标识 <see cref="P:System.Windows.Media.Animation.ThicknessKeyFrame.Value" /> 依赖项属性。</summary>
      <returns>
        <see cref="P:System.Windows.Media.Animation.ThicknessKeyFrame.Value" /> 依赖项属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection">
      <summary>表示 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" /> 对象的集合。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.Add(System.Windows.Media.Animation.ThicknessKeyFrame)">
      <summary>将 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" /> 添加到集合的末尾。</summary>
      <returns>添加 <paramref name="keyFrame" /> 的位置处的索引。</returns>
      <param name="keyFrame">要添加到集合末尾的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" />。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.Clear">
      <summary>从集合中移除所有 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" /> 对象。</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.Clone">
      <summary>创建此 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection" /> 的可修改复本，并且制作该对象的值的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <returns>当前对象的可修改复本。即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 false。</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.CloneCore(System.Windows.Freezable)">
      <summary>使该实例成为指定的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection" /> 的深层副本。在复制依赖项属性时，此方法会复制资源引用和数据绑定（但它们可能不再解析），但不复制动画或其当前值。</summary>
      <param name="sourceFreezable">要克隆的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection" />。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>使用当前的属性值使该实例成为指定的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection" /> 的可修改深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <param name="sourceFreezable">要克隆的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection" />。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.Contains(System.Windows.Media.Animation.ThicknessKeyFrame)">
      <summary>获取一个值，该值指示集合中是否包含指定的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" />。</summary>
      <returns>
            如果集合包含 <paramref name="keyFrame" />，则为 true；否则为 false。</returns>
      <param name="keyFrame">要在集合中定位的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" />。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.CopyTo(System.Windows.Media.Animation.ThicknessKeyFrame[],System.Int32)">
      <summary>将集合中的所有 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" /> 对象复制到指定的数组中。</summary>
      <param name="array">标识内容要复制到的数组。</param>
      <param name="index">集合内容要复制到的数组中的索引位置。</param>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessKeyFrameCollection.Count">
      <summary>获取 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection" /> 中包含的关键帧的数量。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection" /> 中包含的关键帧的数量。</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.CreateInstanceCore">
      <summary>创建 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection" /> 的一个新的冻结实例。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection" /> 的一个冻结实例。</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessKeyFrameCollection.Empty">
      <summary> 获取一个空的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection" />。 </summary>
      <returns>一个空 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.FreezeCore(System.Boolean)">
      <summary>使此 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection" /> 实例成为只读的，或者确定是否可以使其成为只读的。</summary>
      <returns>如果 <paramref name="isChecking" /> 为 true，则该方法将在可使该实例为只读的情况下返回 true，而在其他情况下返回 false。如果 <paramref name="isChecking" /> 为 false，则该方法将在该实例目前为只读的情况下返回 true，而在其他情况下返回 false，并且其副作用是已开始更改该对象的冻结状态。</returns>
      <param name="isChecking">
                如果是 true，则检查是否可冻结该实例；如果是 false，则冻结该实例。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>使该实例成为指定的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection" /> 对象的复本。</summary>
      <param name="sourceFreezable">要克隆的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection" /> 对象。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>使用当前的属性值使该实例成为指定的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection" /> 的可修改深层副本。不复制资源引用、数据绑定和动画，但复制其当前值。</summary>
      <param name="sourceFreezable">要克隆的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection" />。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.GetEnumerator">
      <summary> 返回可循环访问集合的枚举数。</summary>
      <returns>一个可以循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.IndexOf(System.Windows.Media.Animation.ThicknessKeyFrame)">
      <summary> 在整个集合中搜索指定的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" />，并返回第一个匹配项的从零开始的索引。</summary>
      <returns>如果在整个集合中找到 <paramref name="keyFrame" />，则为第一个匹配项的从零开始的索引；否则为 -1。</returns>
      <param name="keyFrame">要在集合中定位的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" />。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.Insert(System.Int32,System.Windows.Media.Animation.ThicknessKeyFrame)">
      <summary>在集合中的特定位置插入 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" />。</summary>
      <param name="index">插入 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" /> 的索引位置。</param>
      <param name="keyFrame">要在集合中插入的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" /> 对象。</param>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessKeyFrameCollection.IsFixedSize">
      <summary>获取一个值，该值指示集合大小是否可以更改。</summary>
      <returns>
            如果集合被冻结，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessKeyFrameCollection.IsReadOnly">
      <summary> 获取一个值，该值指示该集合是否为只读。</summary>
      <returns>
如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessKeyFrameCollection.IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否同步（线程安全）。</summary>
      <returns>
如果对该集合的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessKeyFrameCollection.Item(System.Int32)">
      <summary>获取或设置位于指定索引位置的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" />。</summary>
      <returns>指定索引处的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" />。</returns>
      <param name="index">要获取或设置的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" /> 的从零开始的索引。</param>
      <exception cref="T:System.InvalidOperationException">由于集合被冻结（其 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 true），因此试图修改它的行为将无效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 等于或大于 <see cref="P:System.Windows.Media.Animation.ThicknessKeyFrameCollection.Count" />。</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.Remove(System.Windows.Media.Animation.ThicknessKeyFrame)">
      <summary>从集合中移除 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" /> 对象。</summary>
      <param name="keyFrame">标识要从集合中移除的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" />。</param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除位于指定索引位置的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" />。</summary>
      <param name="index">要移除的 <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame" /> 的索引位置。</param>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessKeyFrameCollection.SyncRoot">
      <summary> 获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>此成员支持 WPF 基础结构，不应在代码中直接使用。</summary>
      <param name="array"></param>
      <param name="index"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.System#Collections#IList#Add(System.Object)">
      <summary>此成员支持 WPF 基础结构，不应在代码中直接使用。</summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.System#Collections#IList#Contains(System.Object)">
      <summary>此成员支持 WPF 基础结构，不应在代码中直接使用。</summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>此成员支持 WPF 基础结构，不应在代码中直接使用。</summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>此成员支持 WPF 基础结构，不应在代码中直接使用。</summary>
      <param name="index"></param>
      <param name="keyFrame"></param>
    </member>
    <member name="P:System.Windows.Media.Animation.ThicknessKeyFrameCollection.System#Collections#IList#Item(System.Int32)">
      <summary>此成员支持 WPF 基础结构，不应在代码中直接使用。</summary>
      <param name="index"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.ThicknessKeyFrameCollection.System#Collections#IList#Remove(System.Object)">
      <summary>此成员支持 WPF 基础结构，不应在代码中直接使用。</summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Begin">
      <summary>
将与此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 关联的动画应用到它们的目标并启动它们。
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed">
      <summary>
检索为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />。
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetCurrentIteration">
      <summary>
检索为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" />。
                </summary>
      <returns>
此时钟在其当前活动期中的当前迭代，如果此时钟已停止，则为 null。
                </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetCurrentProgress">
      <summary>
检索为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" />。
                </summary>
      <returns>
                    如果此时钟为 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />，则为 null；如果此时钟处于活动状态并且其 <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> 的 <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> 为 <see cref="P:System.Windows.Duration.Forever" />，则为 0.0；在其他情况下为一个介于 0.0 和 1.0 之间的值，此值指示此时钟在其当前迭代中的当前进度。值为 0.0 时表示没有进度，值为 1.0 时表示此时钟处于其当前迭代的末尾。
                </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetCurrentState">
      <summary>
检索为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" />。
                </summary>
      <returns>
为此演示图板创建的时钟的当前状态：<see cref="F:System.Windows.Media.Animation.ClockState.Active" />、<see cref="F:System.Windows.Media.Animation.ClockState.Filling" /> 或 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />。
                </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetCurrentTime">
      <summary>
检索为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" />。
                </summary>
      <returns>
如果此演示图板的时钟为 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />，则为 null；否则为此演示图板的时钟的当前时间。
                </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetIsPaused">
      <summary>
                    检索一个值，该值指示为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 是否已暂停。
                </summary>
      <returns>
如果为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 已暂停，则为 true；否则为 false。
                </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.GetTarget(System.Windows.DependencyObject)">
      <summary>
检索指定的 <see cref="T:System.Windows.Media.Animation.Timeline" /> 的 <see cref="P:System.Windows.Media.Animation.Storyboard.Target" /> 值。
                </summary>
      <returns>
                    作为 <paramref name="element" /> 的目标的依赖项属性。
                </returns>
      <param name="element">
要从其中检索 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的时间线。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Pause">
      <summary>
                    暂停为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" />。
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Remove">
      <summary>
                    移除为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 对象。对于属于此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 的动画，不管它们的 <see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> 设置如何，它们都不再影响它们曾进行动画处理的属性。
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Resume">
      <summary>
                    继续为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" />。
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Seek(System.TimeSpan)">
      <summary>
将此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 定位到指定的位置。<see cref="T:System.Windows.Media.Animation.Storyboard" /> 在时钟下一次走动时执行请求的定位操作。
                </summary>
      <param name="offset">
                    一个正值或负值，用来描述时间线应向前或向后移动的量。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)">
      <summary>
将此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 定位到指定的位置。<see cref="T:System.Windows.Media.Animation.Storyboard" /> 在时钟下一次走动时执行请求的定位操作。
                </summary>
      <param name="offset">
一个正值或负值，表示时间线应从指定的 <paramref name="origin" /> 向前或向后移动的量。
                </param>
      <param name="origin">
一个位置，以该位置为起点应用 <paramref name="offset" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.TimeSpan)">
      <summary>
立即将此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 定位到新位置（以同步方式）。
                </summary>
      <param name="offset">
                    一个正值或负值，用来描述时间线应向前或向后移动的量。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)">
      <summary>
立即将此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 定位到新位置（以同步方式）。
                </summary>
      <param name="offset">
一个正值或负值，表示时间线应从指定的 <paramref name="origin" /> 向前或向后移动的量。
                </param>
      <param name="origin">
一个位置，以该位置为起点应用 <paramref name="offset" />。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Double)">
      <summary>
设置为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的交互速度比。
                </summary>
      <param name="speedRatio">
一个大于零的有限值，表示演示图板新的交互速度比。用此值乘以演示图板的 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 值来确定演示图板的有效速度。此值不会覆盖演示图板的 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 属性。例如，如果对 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 为 0.5 的演示图板调用此方法并将交互速度比指定为 3，则该演示图板的有效速度将为 1.5。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SetTarget(System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>
                    使指定的 <see cref="T:System.Windows.Media.Animation.Timeline" /> 以此依赖项对象为目标。
                </summary>
      <param name="element">
应以指定的依赖项对象为目标的 <see cref="T:System.Windows.Media.Animation.Timeline" />。
                </param>
      <param name="value">
                    要作为目标的依赖项对象。
                </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.SkipToFill">
      <summary>
将此演示图板的 <see cref="T:System.Windows.Media.Animation.Clock" /> 的当前时间后调至其活动期结束时间。
                </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Storyboard.Stop">
      <summary>
                    停止为此 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 创建的 <see cref="T:System.Windows.Media.Animation.Clock" />。
                </summary>
    </member>
    <member name="P:System.Windows.Media.Animation.Storyboard.Target">
      <summary>
                    获取或设置应进行动画处理的对象。
                </summary>
      <returns>
要进行动画处理的对象。
                </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Storyboard.TargetProperty">
      <summary>
标识 <see cref="P:System.Windows.Media.Animation.Storyboard.Target" /> 附加属性。
                </summary>
      <returns>
        <see cref="P:System.Windows.Media.Animation.Storyboard.Target" /> 附加属性的标识符。
                </returns>
    </member>
    <member name="T:System.Windows.Navigation.CustomContentState">
      <summary>
            使用 <see cref="T:System.Windows.Navigation.CustomContentState" />，可以在源内容片段的不同状态之间导航，而无需为每个后续导航重新加载源内容。
</summary>
    </member>
    <member name="M:System.Windows.Navigation.CustomContentState.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Navigation.CustomContentState" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Windows.Navigation.CustomContentState.JournalEntryName">
      <summary>存储在导航历史记录中的内容的名称。<see cref="P:System.Windows.Navigation.CustomContentState.JournalEntryName" /> 的值显示自 <see cref="T:System.Windows.Navigation.NavigationWindow" />、<see cref="T:System.Windows.Controls.Frame" /> 和 Windows Internet Explorer 7 导航 UI。</summary>
      <returns>存储在导航历史记录中的内容的 <see cref="T:System.String" /> 名称。</returns>
    </member>
    <member name="M:System.Windows.Navigation.CustomContentState.Replay(System.Windows.Navigation.NavigationService,System.Windows.Navigation.NavigationMode)">
      <summary>在发生导航时调用，以对内容片段重新应用状态。</summary>
      <param name="navigationService">一种 <see cref="T:System.Windows.Navigation.NavigationService" />，为对要将此 <see cref="T:System.Windows.Navigation.CustomContentState" /> 应用到其中的内容负责的导航器所拥有。</param>
      <param name="mode">一种 <see cref="T:System.Windows.Navigation.NavigationMode" />，指定如何导航到要对其应用 <see cref="T:System.Windows.Navigation.CustomContentState" /> 的内容。</param>
    </member>
    <member name="T:System.Windows.Navigation.FragmentNavigationEventArgs">
      <summary>为 FragmentNavigation 事件提供数据。</summary>
    </member>
    <member name="P:System.Windows.Navigation.FragmentNavigationEventArgs.Fragment">
      <summary>获取统一资源标识符 (URI) 片段。</summary>
      <returns>URI 片段。如果将该属性设置为空字符串，将默认导航到内容的顶部。</returns>
    </member>
    <member name="P:System.Windows.Navigation.FragmentNavigationEventArgs.Handled">
      <summary>获取或设置指示是否已对片段导航进行了处理的值。</summary>
      <returns>
            如果已对导航进行了处理，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Navigation.FragmentNavigationEventArgs.Navigator">
      <summary>引发 <see cref="E:System.Windows.Navigation.NavigationService.FragmentNavigation" /> 事件的导航器。</summary>
      <returns>一个 <see cref="T:System.Object" />，表示正在导航到内容片段的导航器（Internet Explorer、<see cref="T:System.Windows.Navigation.NavigationWindow" /> 或 <see cref="T:System.Windows.Controls.Frame" />）。</returns>
    </member>
    <member name="T:System.Windows.Navigation.FragmentNavigationEventHandler">
      <summary>表示将处理 FragmentNavigation 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Navigation.IProvideCustomContentState">
      <summary>由某类实现，该类需要在离开内容之前将自定义状态添加到内容的导航历史记录条目中。</summary>
    </member>
    <member name="M:System.Windows.Navigation.IProvideCustomContentState.GetContentState">
      <summary>返回一个要与导航历史记录中的内容关联的自定义状态类的实例。</summary>
      <returns>一个要与导航历史记录中的内容关联的自定义 <see cref="T:System.Windows.Navigation.CustomContentState" /> 类的实例。</returns>
    </member>
    <member name="T:System.Windows.Navigation.JournalEntry">
      <summary>表示后退或前进导航历史记录中的一个条目。</summary>
    </member>
    <member name="M:System.Windows.Navigation.JournalEntry.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Windows.Navigation.JournalEntry" /> 类的新实例。</summary>
      <param name="info">序列化信息。</param>
      <param name="context">流上下文。</param>
    </member>
    <member name="P:System.Windows.Navigation.JournalEntry.CustomContentState">
      <summary>获取或设置与日记条目关联的 <see cref="T:System.Windows.Navigation.CustomContentState" /> 对象。</summary>
      <returns>与日记条目关联的 <see cref="T:System.Windows.Navigation.CustomContentState" /> 对象。如果没有关联对象，则返回 null。</returns>
    </member>
    <member name="M:System.Windows.Navigation.JournalEntry.GetKeepAlive(System.Windows.DependencyObject)">
      <summary>返回指定元素日记条目的 <see cref="P:System.Windows.Navigation.JournalEntry.KeepAlive" /> 附加属性。</summary>
      <returns>指定元素日记条目的 <see cref="P:System.Windows.Navigation.JournalEntry.KeepAlive" />附加属性值。</returns>
      <param name="dependencyObject">从中获取附加属性值的元素。</param>
    </member>
    <member name="M:System.Windows.Navigation.JournalEntry.GetName(System.Windows.DependencyObject)">
      <summary>获取指定元素日记条目的 <see cref="P:System.Windows.Navigation.JournalEntry.Name" /> 附加属性。</summary>
      <returns>指定元素日记条目的 <see cref="P:System.Windows.Navigation.JournalEntry.Name" />附加属性。</returns>
      <param name="dependencyObject">从中获取附加属性值的元素。</param>
    </member>
    <member name="M:System.Windows.Navigation.JournalEntry.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>将此对象序列化时调用。</summary>
      <param name="info">序列化目标对象所必需的数据。</param>
      <param name="context">流上下文。</param>
    </member>
    <member name="P:System.Windows.Navigation.JournalEntry.KeepAlive">
      <summary>获取或设置一个值，该值指示在导航到日记条目内容时，在导航历史记录中是保留还是重新创建内容。</summary>
      <returns>
            如果在导航历史记录中保留内容，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Windows.Navigation.JournalEntry.KeepAliveProperty">
      <summary>标识 <see cref="P:System.Windows.Navigation.JournalEntry.KeepAlive" />附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Navigation.JournalEntry.KeepAlive" />附加属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Navigation.JournalEntry.Name">
      <summary>获取或设置日记条目的名称。</summary>
      <returns>日记条目的名称。</returns>
    </member>
    <member name="F:System.Windows.Navigation.JournalEntry.NameProperty">
      <summary>标识 <see cref="P:System.Windows.Navigation.JournalEntry.Name" />附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Navigation.JournalEntry.Name" />附加属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Navigation.JournalEntry.SetKeepAlive(System.Windows.DependencyObject,System.Boolean)">
      <summary>设置指定元素的 <see cref="P:System.Windows.Navigation.JournalEntry.KeepAlive" />附加属性。</summary>
      <param name="dependencyObject">对其设置附加属性值的元素。</param>
      <param name="keepAlive">
                若要将日记条目保留在内存中，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Windows.Navigation.JournalEntry.SetName(System.Windows.DependencyObject,System.String)">
      <summary>设置指定元素的 <see cref="P:System.Windows.Navigation.JournalEntry.Name" />附加属性。</summary>
      <param name="dependencyObject">对其设置附加属性值的元素。</param>
      <param name="name">要分配给附加属性的名称。</param>
    </member>
    <member name="P:System.Windows.Navigation.JournalEntry.Source">
      <summary>获取或设置导航到的内容的 URI。</summary>
      <returns>导航到的内容的 URI，如果条目没有关联任何 URI，则为 null。</returns>
    </member>
    <member name="T:System.Windows.Navigation.JournalEntryListConverter">
      <summary>此类型或成员支持 Microsoft .NET 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Navigation.JournalEntryListConverter.#ctor">
      <summary>此类型或成员支持 Microsoft .NET 基础结构，并且不应在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Navigation.JournalEntryListConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
      <param name="value"></param>
      <param name="targetType"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="M:System.Windows.Navigation.JournalEntryListConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，并且不应在代码中直接使用。</summary>
      <param name="value"></param>
      <param name="targetType"></param>
      <param name="parameter"></param>
      <param name="culture"></param>
    </member>
    <member name="T:System.Windows.Navigation.JournalEntryPosition">
      <summary>指定与当前内容相关的内容片段在导航历史记录中的位置。<see cref="T:System.Windows.Navigation.JournalEntryPosition" /> 由 <see cref="T:System.Windows.Navigation.JournalEntryUnifiedViewConverter" /> 使用。</summary>
    </member>
    <member name="F:System.Windows.Navigation.JournalEntryPosition.Back">
      <summary>内容位于与当前内容相关的后退导航历史记录中。</summary>
    </member>
    <member name="F:System.Windows.Navigation.JournalEntryPosition.Current">
      <summary>内容为当前内容。</summary>
    </member>
    <member name="F:System.Windows.Navigation.JournalEntryPosition.Forward">
      <summary>内容位于与当前内容相关的前进导航历史记录中。</summary>
    </member>
    <member name="T:System.Windows.Navigation.JournalEntryUnifiedViewConverter">
      <summary>
        <see cref="T:System.Windows.Navigation.JournalEntryUnifiedViewConverter" /> 将后退导航历史记录和前进导航历史记录（由 <see cref="T:System.Windows.Controls.Frame" /> 或 <see cref="T:System.Windows.Navigation.NavigationWindow" /> 公开）合并为单一的 Windows Internet Explorer 7 样式的导航菜单。</summary>
    </member>
    <member name="M:System.Windows.Navigation.JournalEntryUnifiedViewConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Navigation.JournalEntryUnifiedViewConverter" /> 类的一个新实例。</summary>
    </member>
    <member name="M:System.Windows.Navigation.JournalEntryUnifiedViewConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>合并两个导航历史记录堆栈。</summary>
      <returns>如果任何一个传递的导航堆栈都不是 null，则为可用于枚举导航历史记录堆栈合并列表的 <see cref="T:System.Collections.IEnumerable" />。否则为 null。</returns>
      <param name="values">由两个导航堆栈组成的数组。对于 <see cref="T:System.Windows.Controls.Frame" />，导航堆栈可从以下属性中获得：<see cref="P:System.Windows.Controls.Frame.BackStack" /><see cref="P:System.Windows.Controls.Frame.ForwardStack" />对于 <see cref="T:System.Windows.Navigation.NavigationWindow" />，导航堆栈可从以下属性中获得：<see cref="P:System.Windows.Navigation.NavigationWindow.BackStack" /><see cref="P:System.Windows.Navigation.NavigationWindow.ForwardStack" /></param>
      <param name="targetType">未使用此参数。</param>
      <param name="parameter">未使用此参数。</param>
      <param name="culture">未使用此参数。</param>
    </member>
    <member name="M:System.Windows.Navigation.JournalEntryUnifiedViewConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>未实现。</summary>
      <param name="value">未使用此参数。</param>
      <param name="targetTypes">未使用此参数。</param>
      <param name="parameter">未使用此参数。</param>
      <param name="culture">未使用此参数。</param>
    </member>
    <member name="M:System.Windows.Navigation.JournalEntryUnifiedViewConverter.GetJournalEntryPosition(System.Windows.DependencyObject)">
      <summary>获取指定元素的 <see cref="P:System.Windows.Navigation.JournalEntryUnifiedViewConverter.JournalEntryPosition" />附加属性。</summary>
      <returns>指定元素日记条目的 <see cref="P:System.Windows.Navigation.JournalEntryUnifiedViewConverter.JournalEntryPosition" />附加属性值。</returns>
      <param name="element">从中获取附加属性值的元素。</param>
    </member>
    <member name="P:System.Windows.Navigation.JournalEntryUnifiedViewConverter.JournalEntryPosition">
      <summary>获取或设置一个值，该值指定项是后退导航历史记录、前进导航历史记录还是导航器的当前内容。</summary>
      <returns>
        <see cref="T:System.Windows.Navigation.JournalEntryPosition" /> 值，用于指定项是后退导航历史记录、前进导航历史记录还是导航器的当前内容。</returns>
    </member>
    <member name="F:System.Windows.Navigation.JournalEntryUnifiedViewConverter.JournalEntryPositionProperty">
      <summary>标识 <see cref="P:System.Windows.Navigation.JournalEntryUnifiedViewConverter.JournalEntryPosition" />附加属性。</summary>
      <returns>
        <see cref="P:System.Windows.Navigation.JournalEntryUnifiedViewConverter.JournalEntryPosition" />附加属性的标识符。</returns>
    </member>
    <member name="M:System.Windows.Navigation.JournalEntryUnifiedViewConverter.SetJournalEntryPosition(System.Windows.DependencyObject,System.Windows.Navigation.JournalEntryPosition)">
      <summary>设置指定元素的 <see cref="F:System.Windows.Navigation.JournalEntryUnifiedViewConverter.JournalEntryPositionProperty" />附加属性。</summary>
      <param name="element">对其设置附加属性值的元素。</param>
      <param name="position">
        <see cref="T:System.Windows.Navigation.JournalEntryPosition" /> 对象的位置。</param>
    </member>
    <member name="T:System.Windows.Navigation.JournalOwnership">
      <summary>指定 <see cref="T:System.Windows.Controls.Frame" /> 是否使用自己的日记。<see cref="T:System.Windows.Navigation.JournalOwnership" /> 由 <see cref="P:System.Windows.Controls.Frame.JournalOwnership" /> 属性使用。</summary>
    </member>
    <member name="F:System.Windows.Navigation.JournalOwnership.Automatic">
      <summary>此 <see cref="T:System.Windows.Controls.Frame" /> 是否要创建和使用自己的日记取决于它的父级。</summary>
    </member>
    <member name="F:System.Windows.Navigation.JournalOwnership.OwnsJournal">
      <summary>
        <see cref="T:System.Windows.Controls.Frame" /> 保留自己的日记。</summary>
    </member>
    <member name="F:System.Windows.Navigation.JournalOwnership.UsesParentJournal">
      <summary>
        <see cref="T:System.Windows.Controls.Frame" /> 使用内容树中下一个可用导航宿主的日记（如果有的话）。否则，将不保留 <see cref="T:System.Windows.Controls.Frame" /> 的导航历史记录。</summary>
    </member>
    <member name="T:System.Windows.Navigation.LoadCompletedEventHandler">
      <summary>表示将处理 LoadCompleted 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Navigation.NavigatedEventHandler">
      <summary>表示将处理 Navigated 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Navigation.NavigatingCancelEventArgs">
      <summary>为 Navigating 事件提供数据。</summary>
    </member>
    <member name="P:System.Windows.Navigation.NavigatingCancelEventArgs.Content">
      <summary>获取对要导航到的内容对象的引用。</summary>
      <returns>对要导航到的内容对象的 <see cref="T:System.Object" /> 引用；否则为 null。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigatingCancelEventArgs.ContentStateToSave">
      <summary>获取或设置 <see cref="T:System.Windows.Navigation.CustomContentState" /> 对象，该对象与正在从中导航的页面的后退导航历史记录项关联。</summary>
      <returns>与正在从中导航的页面的后退导航历史记录项关联的 <see cref="T:System.Windows.Navigation.CustomContentState" /> 对象。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigatingCancelEventArgs.ExtraData">
      <summary>获取导航开始时传递的可选数据 <see cref="T:System.Object" />。</summary>
      <returns>导航开始时传递的可选数据 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigatingCancelEventArgs.IsNavigationInitiator">
      <summary>指示由 <see cref="P:System.Windows.Navigation.NavigatingCancelEventArgs.Navigator" /> 指定的导航器（<see cref="T:System.Windows.Navigation.NavigationWindow" />、<see cref="T:System.Windows.Controls.Frame" />）是否正在进行此导航，或者父导航器是否正在进行此操作。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值，如果由 <see cref="P:System.Windows.Navigation.NavigatingCancelEventArgs.Navigator" /> 指定的导航器进行此导航，则为 true。否则，将返回 false，例如，在进行嵌套 <see cref="T:System.Windows.Controls.Frame" /> 导航过程中将返回此值。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigatingCancelEventArgs.NavigationMode">
      <summary>获取一个 <see cref="T:System.Windows.Navigation.NavigationMode" /> 值，该值指示所发生导航的类型。</summary>
      <returns>一个 <see cref="T:System.Windows.Navigation.NavigationMode" /> 值，该值指示所发生导航的类型。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigatingCancelEventArgs.Navigator">
      <summary>引发此事件的导航器。</summary>
      <returns>一个 <see cref="T:System.Object" />，它是引发此事件的导航器。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigatingCancelEventArgs.TargetContentState">
      <summary>获取要应用于所导航到的内容的 <see cref="T:System.Windows.Navigation.CustomContentState" /> 对象。</summary>
      <returns>要应用于所导航到的内容的 <see cref="T:System.Windows.Navigation.CustomContentState" /> 对象。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigatingCancelEventArgs.Uri">
      <summary>获取正在导航到的内容的统一资源标识符 (URI)。</summary>
      <returns>正在导航到的内容的 <see cref="T:System.Uri" />。如果导航到对象，则 <see cref="P:System.Windows.Navigation.NavigatingCancelEventArgs.Uri" /> 为 null。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigatingCancelEventArgs.WebRequest">
      <summary>获取用于请求指定内容的 <see cref="T:System.Net.WebRequest" /> 对象。</summary>
      <returns>获取用于请求指定内容的 <see cref="T:System.Net.WebRequest" /> 对象。如果导航到对象，则 <see cref="P:System.Windows.Navigation.NavigatingCancelEventArgs.WebRequest" /> 为 null。</returns>
    </member>
    <member name="T:System.Windows.Navigation.NavigatingCancelEventHandler">
      <summary>表示将处理 Navigating 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Navigation.NavigationEventArgs">
      <summary>为无法取消的导航事件提供数据，这些事件包括 <see cref="E:System.Windows.Navigation.NavigationWindow.LoadCompleted" />、<see cref="E:System.Windows.Navigation.NavigationWindow.Navigated" /> 和 <see cref="E:System.Windows.Navigation.NavigationWindow.NavigationStopped" />。 </summary>
    </member>
    <member name="P:System.Windows.Navigation.NavigationEventArgs.Content">
      <summary>获取目标页内容的根节点。</summary>
      <returns>目标页内容的根元素。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationEventArgs.ExtraData">
      <summary>获取可选的用户定义的数据对象。</summary>
      <returns>数据对象。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationEventArgs.IsNavigationInitiator">
      <summary>获取一个值，该值指示当前导航器是否启动了导航。</summary>
      <returns>
            如果在当前框架内启动了导航，则为 true；如果父导航器也在进行导航，则为 false。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationEventArgs.Navigator">
      <summary>获取引发该事件的导航器。</summary>
      <returns>引发该事件的导航器。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationEventArgs.Uri">
      <summary>获取目标页的统一资源标识符 (URI)。</summary>
      <returns>目标页的 URI。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationEventArgs.WebResponse">
      <summary>获取 Web 响应可允许访问 HTTP 标头和其他属性。</summary>
      <returns>Web 响应。</returns>
    </member>
    <member name="T:System.Windows.Navigation.NavigationFailedEventArgs">
      <summary>提供用于 NavigationFailed 事件的数据。</summary>
    </member>
    <member name="P:System.Windows.Navigation.NavigationFailedEventArgs.Exception">
      <summary>获取因导航失败而引发的 <see cref="T:System.Exception" />。</summary>
      <returns>因导航失败而引发的 <see cref="T:System.Exception" />。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationFailedEventArgs.ExtraData">
      <summary>获取导航开始时传递的可选数据 <see cref="T:System.Object" />。</summary>
      <returns>导航开始时传递的可选数据 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationFailedEventArgs.Handled">
      <summary>获取或设置是否已处理了失败导航异常。</summary>
      <returns>
            如果已处理异常，则为 true；否则为 false（默认值）。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationFailedEventArgs.Navigator">
      <summary>引发此事件的导航器。</summary>
      <returns>一个 <see cref="T:System.Object" />，它是引发此事件的导航器。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationFailedEventArgs.Uri">
      <summary>获取无法导航到的内容的统一资源标识符 (URI)。</summary>
      <returns>无法导航到的内容的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationFailedEventArgs.WebRequest">
      <summary>获取用于请求指定内容的 Web 请求。</summary>
      <returns>获取用于请求指定内容的 <see cref="T:System.Net.WebRequest" /> 对象。如果导航到对象，则 <see cref="P:System.Windows.Navigation.NavigationFailedEventArgs.WebRequest" /> 为 null。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationFailedEventArgs.WebResponse">
      <summary>获取尝试下载请求的特定内容之后返回的 Web 响应。</summary>
      <returns>尝试下载请求的特定内容之后返回的 <see cref="T:System.Net.WebResponse" />。如果导航失败，则 <see cref="P:System.Windows.Navigation.NavigationFailedEventArgs.WebResponse" /> 为 null。</returns>
    </member>
    <member name="T:System.Windows.Navigation.NavigationFailedEventHandler">
      <summary>表示将处理 NavigationFailed 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Navigation.NavigationMode">
      <summary>指定所发生的导航类型。<see cref="T:System.Windows.Navigation.NavigationMode" /> 由 <see cref="P:System.Windows.Navigation.NavigatingCancelEventArgs.NavigationMode" /> 属性使用。</summary>
    </member>
    <member name="F:System.Windows.Navigation.NavigationMode.New">
      <summary>导航到新内容。这在调用 Navigate 方法时发生，或者当设置了 Source 属性时发生。</summary>
    </member>
    <member name="F:System.Windows.Navigation.NavigationMode.Back">
      <summary>向后导航到后退导航历史记录中的最新内容。这在调用 GoBack 方法时发生。</summary>
    </member>
    <member name="F:System.Windows.Navigation.NavigationMode.Forward">
      <summary>导航到前进导航历史记录中的最新内容。这在调用 GoForward 方法时发生。</summary>
    </member>
    <member name="F:System.Windows.Navigation.NavigationMode.Refresh">
      <summary>重新加载当前内容。这在调用 Refresh 方法时发生。</summary>
    </member>
    <member name="T:System.Windows.Navigation.NavigationProgressEventArgs">
      <summary>提供有关 <see cref="E:System.Windows.Application.NavigationProgress" /> 和 <see cref="E:System.Windows.Navigation.NavigationWindow.NavigationProgress" /> 事件的数据。 </summary>
    </member>
    <member name="P:System.Windows.Navigation.NavigationProgressEventArgs.BytesRead">
      <summary>获取已读取的字节数。</summary>
      <returns>已读取的字节数。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationProgressEventArgs.MaxBytes">
      <summary>获取最大字节数。</summary>
      <returns>最大字节数。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationProgressEventArgs.Navigator">
      <summary>获取引发该事件的导航器。 </summary>
      <returns>引发该事件的导航器。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationProgressEventArgs.Uri">
      <summary>获取目标页的统一资源标识符 (URI)。</summary>
      <returns>目标页的 URI。</returns>
    </member>
    <member name="T:System.Windows.Navigation.NavigationProgressEventHandler">
      <summary>表示将处理 NavigationProgress 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件数据。</param>
    </member>
    <member name="T:System.Windows.Navigation.NavigationService">
      <summary>包含支持导航的各种方法、属性和事件。</summary>
    </member>
    <member name="M:System.Windows.Navigation.NavigationService.AddBackEntry(System.Windows.Navigation.CustomContentState)">
      <summary>向包含 <see cref="T:System.Windows.Navigation.CustomContentState" /> 对象的后退导航历史记录中添加一个条目。</summary>
      <param name="state">一个 <see cref="T:System.Windows.Navigation.CustomContentState" /> 对象，该对象表示与特定内容片段关联的应用程序定义的状态。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="state" /> 为 null，并且 <see cref="M:System.Windows.Navigation.IProvideCustomContentState.GetContentState" /> 对象不是从 <see cref="T:System.Windows.Navigation.CustomContentState" /> 返回的对象。</exception>
    </member>
    <member name="P:System.Windows.Navigation.NavigationService.CanGoBack">
      <summary>获取一个值，该值指示后退导航历史记录中是否至少有一个条目。</summary>
      <returns>
            如果后退导航历史记录中至少具有一个条目，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationService.CanGoForward">
      <summary>获取一个值，该值指示前进导航历史记录中是否至少有一个条目。</summary>
      <returns>
            如果前进导航历史记录中至少具有一个条目，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationService.Content">
      <summary>获取或设置对包含当前内容的对象的引用。</summary>
      <returns>一个对象，它是对包含当前内容的对象的引用。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigationService.CurrentSource">
      <summary>获取最后导航到的内容的统一资源标识符 (URI)。</summary>
      <returns>如果是通过使用 URI 进行导航，则为最后导航到该内容的 <see cref="T:System.Uri" />；否则为 null。</returns>
    </member>
    <member name="E:System.Windows.Navigation.NavigationService.FragmentNavigation">
      <summary>当向某个内容片段的导航开始时发生，如果所需片段位于当前内容中，它会立即发生；或者，如果所需片段位于不同内容中，它会在加载了源 XAML 内容之后发生。</summary>
    </member>
    <member name="M:System.Windows.Navigation.NavigationService.GetNavigationService(System.Windows.DependencyObject)">
      <summary>获取对导航器的 <see cref="T:System.Windows.Navigation.NavigationService" /> 的引用，该导航器的内容中包含指定的 <see cref="T:System.Windows.DependencyObject" />。</summary>
      <returns>对导航器（该导航器的内容中包含指定的 <see cref="T:System.Windows.DependencyObject" />）的 <see cref="T:System.Windows.Navigation.NavigationService" /> 的引用在某些情况下可以为 null（请参见“备注”）。</returns>
      <param name="dependencyObject">由导航器承载的内容中的 <see cref="T:System.Windows.DependencyObject" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Windows.Navigation.NavigationService.GoBack">
      <summary>导航到后退导航历史记录中的最新条目（如果有）。</summary>
      <exception cref="T:System.InvalidOperationException">
                如果后退导航历史记录中没有条目，则调用 <see cref="M:System.Windows.Navigation.NavigationService.GoBack" />。</exception>
    </member>
    <member name="M:System.Windows.Navigation.NavigationService.GoForward">
      <summary>导航到前进导航历史记录中的最新条目（如果有）。</summary>
      <exception cref="T:System.InvalidOperationException">
                如果前进导航历史记录中没有任何条目，则调用 <see cref="M:System.Windows.Navigation.NavigationService.GoForward" />。</exception>
    </member>
    <member name="E:System.Windows.Navigation.NavigationService.LoadCompleted">
      <summary>当已加载、分析并开始呈现目标导航内容时发生。</summary>
    </member>
    <member name="M:System.Windows.Navigation.NavigationService.Navigate(System.Object)">
      <summary>异步导航到某个对象中包含的内容。</summary>
      <returns>
            如果未取消导航，则为 true；否则为 false。</returns>
      <param name="root">一个包含目标导航内容的对象。</param>
    </member>
    <member name="M:System.Windows.Navigation.NavigationService.Navigate(System.Object,System.Object)">
      <summary>异步导航某个对象包含的内容，并传递一个对象，其中包含要在导航过程中进行处理的数据。</summary>
      <returns>
            如果未取消导航，则为 true；否则为 false。</returns>
      <param name="root">一个包含目标导航内容的对象。</param>
      <param name="navigationState">一个包含要在导航过程中进行处理的数据的对象。</param>
    </member>
    <member name="M:System.Windows.Navigation.NavigationService.Navigate(System.Uri)">
      <summary>异步导航到由统一资源标识符 (URI) 指定的内容。</summary>
      <returns>
            如果未取消导航，则为 true；否则为 false。</returns>
      <param name="source">一个使用所需内容的 URI 初始化的 <see cref="T:System.Uri" /> 对象。</param>
    </member>
    <member name="M:System.Windows.Navigation.NavigationService.Navigate(System.Uri,System.Object)">
      <summary>异步导航到位于某个统一资源标识符 (URI) 中的源内容，并传递一个对象，其中包含要在导航过程中进行处理的数据。</summary>
      <returns>
            如果未取消导航，则为 true；否则为 false。</returns>
      <param name="source">一个使用所需内容的 URI 初始化的 <see cref="T:System.Uri" /> 对象。</param>
      <param name="navigationState">一个包含要在导航过程中进行处理的数据的对象。</param>
    </member>
    <member name="M:System.Windows.Navigation.NavigationService.Navigate(System.Uri,System.Object,System.Boolean)">
      <summary>异步导航到位于某个统一资源标识符 (URI) 中的源内容，传递一个包含在导航过程中进行处理的导航状态的对象，并沙盒处理内容。</summary>
      <returns>
            如果未取消导航，则为 true；否则为 false。</returns>
      <param name="source">一个使用所需内容的 URI 初始化的 <see cref="T:System.Uri" /> 对象。</param>
      <param name="navigationState">一个包含要在导航过程中进行处理的数据的对象。</param>
      <param name="sandboxExternalContent">将内容下载到部分信任的安全沙盒中（如果为 true，则具有默认的 Internet 区域权限集）。默认值为 false。</param>
    </member>
    <member name="E:System.Windows.Navigation.NavigationService.Navigated">
      <summary>当已经找到目标导航内容且可通过 <see cref="P:System.Windows.Navigation.NavigationService.Content" /> 属性获得时发生，即使此时可能尚未完成加载）。</summary>
    </member>
    <member name="E:System.Windows.Navigation.NavigationService.Navigating">
      <summary>在请求新导航时发生。</summary>
    </member>
    <member name="E:System.Windows.Navigation.NavigationService.NavigationFailed">
      <summary>在导航到所请求内容出错时发生。</summary>
    </member>
    <member name="E:System.Windows.Navigation.NavigationService.NavigationProgress">
      <summary>在下载过程中定期发生，以提供导航进度信息。</summary>
    </member>
    <member name="E:System.Windows.Navigation.NavigationService.NavigationStopped">
      <summary>在调用 <see cref="M:System.Windows.Navigation.NavigationService.StopLoading" /> 方法时发生，或者在一个当前导航正在进行过程中又请求一个新导航时发生。</summary>
    </member>
    <member name="M:System.Windows.Navigation.NavigationService.Refresh">
      <summary>重新加载当前内容。</summary>
    </member>
    <member name="M:System.Windows.Navigation.NavigationService.RemoveBackEntry">
      <summary>移除后退历史记录中的最新日记条目。</summary>
      <returns>后退导航历史记录中的最新 <see cref="T:System.Windows.Navigation.JournalEntry" />（如果有）。</returns>
    </member>
    <member name="P:System.Windows.Navigation.NavigPtr" /> 值，非托管代码使用该值来调用基础托管委托。
                </returns>
      <param name="d">
                    要传递给非托管代码的委托。
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> 参数是泛型类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 参数为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)">
      <summary>
                    返回指定模块的实例句柄 (HINSTANCE)。
                </summary>
      <returns>
        <paramref name="m" /> 的 HINSTANCE；如果该模块没有 HINSTANCE，则为 -1。
                </returns>
      <param name="m">
                    具有所需 HINSTANCE 的 <see cref="T:System.Reflection.Module" />。
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="m" /> 参数为 null。
                </exception>
      <PermissionSet>
        <IPermission class="System.Security.Pe